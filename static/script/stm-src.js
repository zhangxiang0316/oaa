/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * @Author zhouyuhang
 * Create on: 2012-10-16
 * Last Updated: 
 * 说明:定义P2 JS Framework对象的基础功能，包括apply,override,extend,nameSpace
 */
/**
 * 对象复制方法，将src的属性复制给target.
 * 用法：PJF.apply(tarObj,srcObj)
 */
PJF.apply=function(target,src){
	if(target && src && typeof src == 'object'){
        for(var p in src){
            target[p] = src[p];
        }
    }
    return target;
}

/**
 * 重载对象的行为，这里的重载指的是js对象中prototype对应的属性
 */
PJF.override=function(origclass,overrides){
        if(overrides){
            var p = origclass.prototype;
            PJF.apply(p, overrides);
            p.toString = overrides.toString;
        }
}

/**
 * 对象继承方法，同时定义了对象的superclass属性，用法为subClass = PJF.extend(superClass,myFunction)
 */
PJF.extend=function(){
            // inline overrides
            var io = function(o){
                for(var m in o){
                    this[m] = o[m];
                }
            };
            var oc = Object.prototype.constructor;

            return function(sb, sp, overrides){
            	//如果sp已经是object,则说明只有两个参数
                if(typeof sp == 'object'){
                    overrides = sp;
                    sp = sb;
                    sb = overrides.constructor != oc ? overrides.constructor : function(){sp.apply(this, arguments);};
                }
                var F = function(){},
                    sbp,
                    spp = sp.prototype;

                F.prototype = spp;
                sbp = sb.prototype = new F();
                sbp.constructor=sb;
                sb.superclass=spp;
                if(spp.constructor == oc){
                    spp.constructor=sp;
                }
                sb.override = function(o){
                    PJF.override(sb, o);
                };
                sbp.superclass = sbp.supr = (function(){
                    return spp;
                });
                sbp.override = io;
                PJF.override(sb, overrides);
                sb.extend = function(o){return PJF.extend(sb, o);};
                return sb;
            };
        }();
        
/**
 * 定义命名空间，用法:PJF.namespace(str)
 */        
PJF.namespace=function(){
 var len1 = arguments.length,
	    i = 0,
	    len2,
	    j,
	    main,
	    ns,
	    sub,
	    current;
	    
	for(; i < len1; ++i) {
	    main = arguments[i];
	    ns = arguments[i].split('.');
	    current = window[ns[0]];
	    if (current === undefined) {
	        current = window[ns[0]] = {};
	    }
	    sub = ns.slice(1);
	    len2 = sub.length;
	    for(j = 0; j < len2; ++j) {
	        current = current[sub[j]] = current[sub[j]] || {};
	    }
	}
	return current;
};

/**
 * P2 Framework JS Library 1.0 Copyright(c) 2012, China Construction Bank.
 *
 * @Author zhouyuhang Create on: 2012-11-9 Last Updated:
 *         说明:提供一些util方法，现在包括判断是否在p2 client端中和json转换为str,以及一个类似map的集合类
 */
PJF.namespace('PJF.util');
/***
 * PJF util工具集合对象
 */
PJF.util = {

  extend: jQuery.extend,

  /***
   * json转为str
   * @param o 需要转换的对象
   * @rep 是否不替换换行符和转义符，默认为false(替换)
   * @return json字符串
   * @type string
   */
  json2str: function (o, rep, override) {
    var changeFlag = false;
    if (rep)
      changeFlag = rep;
    if (!o)
      return "";
    //不改变原有对象
    if (override)
      var o = $.extend(true, {}, o); //深拷贝
    var arr = [];
    var fmt = function (s, f) {
      if (typeof s == 'object' && s != null) {
        return PJF.util.json2str(s, f);
      }
      return /^(string|number)$/.test(typeof s) ? "'" + s + "'" : s;
    }
    if (o.constructor === Array) {
      for (var i in o) {
        if (!changeFlag && typeof o[i] == "string") {
          o[i] = o[i].replace(new RegExp("\\\\", 'gm'), "\\\\");
          o[i] = o[i].replace(new RegExp("\'", "gm"), "\\'");
          o[i] = o[i].replace(new RegExp("\"", "gm"), "\\\"");
          o[i] = o[i].replace(new RegExp("\n", 'gm'), "\\n");//2013/9/18
          o[i] = o[i].replace(new RegExp("\r", 'gm'), "\\r");
          /*o[i]=o[i].replace(new RegExp("\n", 'gm'),"\\\n");
           o[i]=o[i].replace(new RegExp("\r", 'gm'),"\\\r");*/
        }

        arr.push(fmt(o[i], changeFlag));
      }
      return '[' + arr.join(',') + ']';
    }
    else {
      for (var i in o) {
        if (!changeFlag && typeof o[i] == "string") {
          o[i] = o[i].replace(new RegExp("\\\\", 'gm'), "\\\\");
          o[i] = o[i].replace(new RegExp("\'", "gm"), "\\'");
          o[i] = o[i].replace(new RegExp("\"", "gm"), "\\\"");
          o[i] = o[i].replace(new RegExp("\n", 'gm'), "\\n");//2013/9/18
          o[i] = o[i].replace(new RegExp("\r", 'gm'), "\\r");
          /*o[i]=o[i].replace(new RegExp("\n", 'gm'),"\\\n");
           o[i]=o[i].replace(new RegExp("\r", 'gm'),"\\\r");*/
        }
        arr.push("'" + i + "':" + fmt(o[i], changeFlag));
      }
      return '{' + arr.join(',') + '}';
    }
  },
  json2str2: function (o) {
    if (window.JSON && window.JSON.stringify) {
      return JSON.stringify(o);
    }
    if (!o)
      return '';
    var arr = [];
    var o = $.extend(true, {}, o); //深拷贝,如果o是字符串...
    var fmt = function (s) {
      if (typeof s == 'object' && s != null) {
        return PJF.communication.ra.handler_json2str(s);
      }
      return /^(string|number)$/.test(typeof s) ? '"' + s + '"' : s;
    }
    if (o.constructor === Array) {
      for (var i in o) {
        if (typeof o[i] == "string") {
          o[i] = o[i].replace(new RegExp("\\\\", 'gm'), "\\\\");
          o[i] = o[i].replace(new RegExp("\'", "gm"), "\\'");
          o[i] = o[i].replace(new RegExp("\"", "gm"), "\\\"");
          o[i] = o[i].replace(new RegExp("\n", 'gm'), "\\n");
          o[i] = o[i].replace(new RegExp("\r", 'gm'), "\\r");

        }

        arr.push(fmt(o[i]));
      }
      return "[" + arr.join(',') + "]";
    } else {
      for (var i in o) {
        if (typeof o[i] == "string") {
          o[i] = o[i].replace(new RegExp("\\\\", 'gm'), "\\\\");
          o[i] = o[i].replace(new RegExp("\'", "gm"), "\\'");
          o[i] = o[i].replace(new RegExp("\"", "gm"), "\\\"");
          o[i] = o[i].replace(new RegExp("\n", 'gm'), "\\n");
          o[i] = o[i].replace(new RegExp("\r", 'gm'), "\\r");
        }
        arr.push('"' + i + '":' + fmt(o[i]));
      }
      return "{" + arr.join(',') + "}";
    }
  },
  jsontostr: JSON.stringify,
  parseJson: JSON.parse,
  /***
   * 得到对象的类型
   * @param object 需要判断类型的对象
   * @return 类型
   * @type string
   */
  getType: function (object) {
    var _t;
    return ((_t = typeof(object)) == "object" ? object == null && "null" || Object.prototype.toString.call(object).slice(8, -1) : _t).toLowerCase();
  },
  /**
   * 批量处理HTML多语言问题， root 是jquery选择器
   */
  batchSetText: function (data, root) {
    if(!root) root = document.body;
    $("[pjf-text]", root).each(function(index, dom) {
      var jd = $(dom);
      var key = jd.attr("pjf-text");
      if(key) {
        var text = PJF.util.getValue(data, key);
        if(text)
          jd.text(text);
        else
          console.warn("no text value found for pjf-text " + key);
      }
    });
  },
  
  /**
   * 得到对象obj，path路径下的值，路径中间任意一个环节出现null，则返回null，数组项则用数字代替吧，简单 a.b.10.c
   * @param obj
   * @param path
   */
  getValue: function (obj, path) {
    if (!obj || typeof path !== "string") return null;
    var keys = path.split("."), val = obj, key;
    for (var i = 0; key = keys[i]; i++) {
      if (!val) return null;
      val = val[key];
    }
    return val;
  },
  setValue: function (obj, path, val) {  // 如果路径下不是可设置属性的东西，就不管吧
    if (!obj || typeof path !== "string") return false;
    var last = path.lastIndexOf(".");
    if (last === -1) {  // 没有点
      obj[path] = val;
      return true;
    }
    var basePath = path.substr(0, last),
      key = path.substr(last + 1),
      baseObj = this.getValue(obj, basePath),
      typeStr = typeof baseObj;
    if (baseObj && (typeStr === "object" || typeStr === "function")) {
      baseObj[key] = val;
      return true;
    } else {
      return false;
    }
  },
  /***
   * 将string去空格
   * @param content 需要去掉空格的内容
   * @return 去掉空格的内容
   * @type string
   */
  trim: function (content) {
    return $.trim(content);
  },
  /*
   * hashcode for string
   */
  hashCode: function (str) {
    var h = 0, len = str.length;
    for (var i = 0; i < len; i++) {
      h = ((h << 5) - h) + str.charCodeAt(i);
      h = h & h;
    }
    return h;
  },
  /***
   * 对象复制
   * @param target 复制目标
   * @param src 复制源
   * @return 合并的对象
   * @type Object
   */
  apply: function (target, src) {
    return PJF.apply(target, src);
  },
  /**
   * 判断对象是否存在
   * obj可能是对象引用 或者是字符串类似'A.B.C'
   * @obj 待验证的数据
   */
  isExist: function (obj) {
    if (typeof(obj) == 'string') {
      var prefix = arguments[1] || window;
      var strArr = obj.split('.');
      var first = strArr[0];
      strArr.shift();
      var others = strArr.join('.');
      return prefix[first] !== null && prefix[first] !== undefined && (others ? arguments.callee(others, prefix[first]) : true);
    }
    else {
      return obj !== null && obj !== undefined;
    }
  },
  /***
   * 根据给定的县级代码转换省市
   * @param arr 县级代码(多个代码用数组传入)
   * @return 省市代码
   * @type Object
   */
  convertCounty: function (arr) {
    function createErrorMessage() {
      new PJF.ui.messageBox({
        style: 'alert',
        title: resource.convertCounty_messageBox_title,
        content: resource.convertCounty_messageBox_content
      });
    }

    if ($.isArray(arr)) {
      var result = [];
      var len = arr.length;
      for (var i = 0; i < len; i++) {
        var arri = arr[i] + "";//排除对是数字数组的影响
        if (arri.length < 6) {
          createErrorMessage();
          return;
        }
        if (arri.substring(2, 6) == "0000") {
          result.push({"province": arri.substring(0, 2) + "0000", "city": "", county: ""});
          continue;
        }
        if (arri.substring(4, 6) == "00") {
          result.push({"province": arri.substring(0, 2) + "0000", "city": arri.substring(0, 4) + "00", county: ""});
          continue;
        }
        result.push({"province": arri.substring(0, 2) + "0000", "city": arri.substring(0, 4) + "00", county: arri});

      }
      return result;
    } else {
      var arri = arr + "";//排除输入的是数字
      if (arri.length < 6) {
        createErrorMessage();
        return;
      }
      if (arri.substring(2, 6) == "0000") {
        return {"province": arri.substring(0, 2) + "0000", "city": "", county: ""};

      }
      if (arri.substring(4, 6) == "00") {
        return {"province": arri.substring(0, 2) + "0000", "city": arri.substring(0, 4) + "00", county: ""};
      }

      return {"province": arri.substring(0, 2) + "0000", "city": arri.substring(0, 4) + "00", county: arr};
    }
  },
  /***
   * 将日期转为指定的格式
   * @param date js中的date类型对象
   * @param format 日期格式,默认是yyyyMMdd
   * @return 时间字符串
   * @type string
   */
  formatDate: function (date, format) {
    if (!format)
      format = 'yyyyMMdd';
    var o = {
      "y+": date.getFullYear(),
      "M+": date.getMonth() + 1, // month
      "d+": date.getDate(),    // day
      "H+": date.getHours(),
      "h+": date.getHours(),   // hour
      "m+": date.getMinutes(), // minute
      "s+": date.getSeconds(), // second
      "q+": Math.floor((date.getMonth() + 3) / 3),  // quarter
      "S+": date.getMilliseconds() // millisecond
    }
    for (var k in o) {
      var reg = new RegExp("(" + k + ")"), ans;
      o[k] += "";
      while (ans = reg.exec(format)) {
        //前缀加0是为了和java端统一,额外的匹配格式用0填充
        var prefix = "";
        for (var i = 0, len = ans[0].length - o[k].length; i < len; i++) {
          prefix += "0";
        }
        //若匹配格式不足位数，从左往右取
        format = format.replace(ans[0], prefix + o[k].substr(0, ans[0].length))
      }
    }
    return format;
  },
  /***
   * 生成32位UUid
   * @return 32位UUid
   * @type string
   */
  generateUUid: function () {
    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
    var chars = CHARS, uuid = new Array(36), rnd = 0, r;
    for (var i = 0; i < 36; i++) {
      if (i == 8 || i == 13 || i == 18 || i == 23) {
        uuid[i] = '-';
      } else if (i == 14) {
        uuid[i] = '4';
      } else {
        if (rnd <= 0x02) rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;
        r = rnd & 0xf;
        rnd = rnd >> 4;
        uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
      }
    }
    return uuid.join('').replace(/-/g, "");
  },
  /***
   * 数字转中文金额大写
   * @param num 需要转换的数字
   * @return 中文大写金额
   * @type string
   */
  number2Money: function (num, unit) {
    //0的情况，和空串不一样
    if (num == 0 && $.trim(num) != '')
      return unit ? unit + '整' : '零元整';
    //格式不对
    if (!/^-?([1-9]\d*|0)(\.\d+)?$/.test(num) || !num)
      return '';
    var re = ""; //结果
    num = "" + num;//转字符串
    var negative = false;
    if (num[0] == '-') { // 负数
      num = num.substr(1);
      negative = true;
    }
    var AA = ["零", "壹", "贰", "叁", "肆", "伍", "陆", "柒", "捌", "玖"];
    var BB = ["", "拾", "佰", "仟", "万", "亿", "元", ""];
    var CC = ["角", "分"];
    //小数点前后分段
    var a = num.split(".");
    //小数点后做特殊处理
    if (a[1]) {
      //角分都是0，则舍去
      if (a[1].match(/^0{2}/) || a[1].match(/^0$/))
        a.pop();
      //角不为0，分为0，则分位舍去
      else if (a[1].match(/^[1-9]0/))
        a[1] = a[1][0];
    }
    //小数点前从右到左的计数
    var k = 0;
    //转换结果
    //小数点前的情况
    if (a[0] > 0)
      for (var i = a[0].length - 1; i >= 0; i--) {
        switch (k) {
          //最右一位
          case 0 :
            re = BB[7] + re;
            break;
          //从右到左第5位且前面不是4位均是0，则加一个'萬'字
          case 4 :
            if (!new RegExp("0{4}\\d{" + (a[0].length - i - 1) + "}$").test(a[0]))
              re = BB[4] + re;
            break;
          //到第9位后，加一个'億'字，并且重新开始计数k,并且重新赋值BB[7]为‘億’
          case 8 :
            re = BB[5] + re;
            BB[7] = BB[5];
            k = 0;
            break;
        }
        //加'零'的情况
        if (k % 4 != 0 && a[0].charAt(i) == '0' && a[0].charAt(i + 1) != '' && a[0].charAt(i + 1) != '0')
          re = AA[0] + re;
        // if(k%4 == 2 && a[0].charAt(i)=="0" && a[0].charAt(i+2) != "0")
        // 	re = AA[0] + re;
        //选择该位上的数字对应的中文大写,再加上拾、佰、仟
        if (a[0].charAt(i) != 0)
          re = AA[a[0].charAt(i)] + BB[k % 4] + re;
        //计数加1
        k++;
      }
    //小数点后的情况
    if (a.length > 1) {
      if (a[0] > 0)  // 有小数并且小数点前不为0，加元字, '0'居然是true你敢信?
        re += BB[6];
      for (var i = 0; i < a[1].length && i <= 1; i++) {
        //针对角为0的情况
        if (a[1].charAt(i) == '0') {
          if (a[0] > 0)
            re += AA[0];
        }
        else
          re += AA[a[1].charAt(i)] + CC[i];
      }
      /*if(a[1].charAt(0)=="0" && a[1].charAt(1)=="0"){
       re+="元整";
       }   */
    }
    //没有小数点的情况,或者都是小数点后都是0
    else {
      re += unit ? unit + '整' : "元整";
    }
    if (negative)
      re = "负" + re;
    return re;
  },
  // 数字转成带千分位的金额字符串
  number2Money2: function (num) {
    // 处理数字情况
    if (typeof(num) == 'number') {
      num = num.toString();
    } else if (typeof(num) == 'string') {
      // var m = num.length;
      // for(var i=-1;num.charCodeAt(++i)<=32;){}
      // for(var j=m-1;j>i&&num.charCodeAt(j)<=32;j--){}
      // num = num.slice(i,j+1);
      num = this.trim(num);
    } else {
      return 0;
    }

    if (!num) {
      return 0;
    }

    var dpos = num.indexOf(".");
    var s1, s2;
    var p = /(\d+)(\d{3})/;
    if (dpos >= 0) {
      s1 = num.substring(0, dpos) || "0";
      s2 = num.substring(dpos + 1, num.length);
      while (p.test(s1)) {
        s1 = s1.replace(p, "$1" + "," + "$2");
      }
      num = s1 + "." + s2;
    } else {
      while (p.test(num)) {
        num = num.replace(p, "$1" + "," + "$2");
      }
    }
    return num;
  },
  //自动focus到第一个组件
  activeKeyScope: function (keyScope) {
    if (keyScope) {
      var com = PJF.ui.componentMgr.getFirstComp(keyScope);
      if (com) {
        console.log('激活第一个组件，组件类型为:' + com.getClassName())
        if (com.focus) {
          com.focus();
          return;
        }
      }
    }
  },
  //获取客户端版本,若返回空字符串代表客户端版本低于1.2.6或者获取失败
  getClientVersion: function () {
    if (!PJF.constants.clientVersion) {
      PJF.constants.clientVersion = '';
      var version = '';
      if (PJF.communication.client.isInP2()) {
        try {
          var result = PJF.communication.client.getClientEnv('localVersion');
          //有getClientEnv这个方法，并且有获取版本的方法
          version = result[0] == 0 ? result[1] : version;
          //有可能result[1]为undefined
          version = version ? version : '';
        }
          //说明客户端版本太旧,目测1.2.2之类的
        catch (e) {

        }
      }
      PJF.constants.clientVersion = version;
    }
    return PJF.constants.clientVersion;
  },
  //获取客户端小版本号，若返回空字符串，代表客户端版本更低
  getClientSubVersion: function () {
    if (!PJF.constants.clientSubVersion) {
      PJF.constants.clientSubVersion = '';
      var version = '';
      if (PJF.communication.client.isInP2()) {
        try {
          var result = PJF.communication.client.getClientEnv('localAddon');
          //有getClientEnv这个方法，并且有获取版本的方法
          version = result[0] == 0 ? result[1] : version;
          //有可能result[1]为undefined
          version = version ? version : '';
          //version = parseInt(version, 10) || 0;
        }
          //说明客户端版本太旧,目测1.2.2之类的
        catch (e) {

        }
      }
      PJF.constants.clientSubVersion = version;
    }
    return PJF.constants.clientSubVersion
  },
  // 比较版本号, 相等返回0 , ver1 > ver2 返回 1， 反之返回 -1
  compareVersion: function (ver1, ver2) {
    ver1 = ver1 || "";
    if (typeof ver1 !== 'string') ver1 = ver1 + "";
    ver2 = ver2 || "";
    if (ver1 === ver2) return 0;

    var localArr = ver1.split("."),
      remoteArr = ver2.split("."),
      lInt, rInt;
    for (var i = 0, len = localArr.length; i < len; i++) {
      lInt = parseInt(localArr[i]);
      rInt = parseInt(remoteArr[i]);
      if (lInt < rInt) {
        return -1;
      } else if (lInt > rInt) {
        return 1;
      }
    }
    if (remoteArr.length > localArr.length) return -1;
    else return 1;
  },
  //比较客户端版本，若当前版本低于传入版本号则返回false,其他返回true
  compareClientVersion: function (version, addon) {
    var currentVersion = PJF.util.getClientVersion();
    var addonVersion = PJF.util.getClientSubVersion() + '';
    // 转换下, 比如zd的情况
    var transformVersion = PJF.util.clientVersionTransform(currentVersion, addonVersion)
    currentVersion = transformVersion.version, addonVersion = parseInt(transformVersion.addon, 10) || 0
    //版本号以小数点分割
    var versionSplit = version.split('.');
    var currentVersionSplit = currentVersion.split('.');
    //取版本号中最小的长度
    var minLength = Math.min(currentVersionSplit.length, versionSplit.length);
    for (var i = 0; i < minLength; i++) {
      versionSplit[i] = versionSplit[i].match(/[0-9]+/);
      //以防万一，保证一定是数字,因为版本号可能带有beta之类的字段,例如1.2.7beta，但是保证数字永远在前
      versionSplit[i] = versionSplit[i] ? versionSplit[i][0] : 0;
      currentVersionSplit[i] = currentVersionSplit[i].match(/[0-9]+/);
      currentVersionSplit[i] = currentVersionSplit[i] ? currentVersionSplit[i][0] : 0;
      //之所以要用数字判断，是因为可能是两位字符串，比如'9'就会大于'11'
      var num1 = parseInt(versionSplit[i], 10);
      var num2 = parseInt(currentVersionSplit[i], 10);
      //传入版本号某一位大于当前版本号
      if (num1 > num2)
        return false;
      //当前版本号某一位大于传入版本号
      else if (num2 > num1)
        return true;
    }
    //当前面的数字不能决定当前版本是否低于传入的版本号，则再看小版本号以及版本长度
    if (addon && versionSplit.length == currentVersionSplit.length) {
      if (addon > addonVersion) return false;
      else if (addon < addonVersion) return true;
    }
    return versionSplit.length <= currentVersionSplit.length;
  },
  /**
   * 判断当前的url请求是否跨域
   * @param  {[type]} url [description]
   * @return {[type]}     [true 为跨域]
   */
  isCrossDomain: function (url) {
    var
      // Document location
      ajaxLocParts,
      ajaxLocation,
      ajax_rquery = /\?/,
      rhash = /#.*$/,
      rts = /([?&])_=[^&]*/,
      rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
      // #7653, #8125, #8152: local protocol detection
      rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      rnoContent = /^(?:GET|HEAD)$/,
      rprotocol = /^\/\//,
      rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/;
    try {
      ajaxLocation = location.href;
    } catch (e) {
      // Use the href attribute of an A element
      // since IE will modify it given document.location
      // 创建一个元素(此时并没有对应到页面上)
      ajaxLocation = document.createElement("a");
      // 设置href为"" ，IE会自动填充
      ajaxLocation.href = "";
      ajaxLocation = ajaxLocation.href;
    }

    // Segment location into parts
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

    url = (url || "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

    // A cross-domain request is in order when we have a protocol:host:port mismatch
    var parts = rurl.exec(url.toLowerCase());
    var crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))));

    return crossDomain;
  },

  /*
   * 注册输入法显示与消失事件，为了避免当输入框靠近下方的时候，输入法遮住输入框
   * att:仅限于pad、stm客户端
   * att2: IE里fixed定位的元素上抬
   */
  _keyboard_height_: 0,
  _top_scroll_ele_: null,  // 初始化得到正确的scroll对象 ,  IE下是documentElement ，chrome下是body 。。。
  _get_scroll_ele_: function () {
    if (!this._top_scroll_ele_) {
      var htmlEle = document.documentElement,
        overY = htmlEle.style.overflowY,
        top = htmlEle.scrollTop;
      htmlEle.style.overflowY = 'auto';
      htmlEle.scrollTop = 10;
      this._top_scroll_ele_ = htmlEle.scrollTop === 0 ? document.body : htmlEle;   // 兼容IE
      // 还原
      htmlEle.scrollTop = top;
      htmlEle.style.overflowY = overY;
    }
    return this._top_scroll_ele_;
  },
  // 计算ele应该被抬高的高度，由于键盘高度不准确，现在假设键盘高度不超过屏幕一半
  // 故只需要将ele bottom抬到屏幕上半部分即可
  // 返回页面应该滚动抬高的高度
  _calc_eleKeyboardUp_: function (ele, winHeight) {
    winHeight = winHeight || $(window).height();
    var bounding = ele.getBoundingClientRect();  // bounding始终是相对于窗口顶部，而不是
    var delta = bounding.bottom - winHeight * 0.4;
    return delta > 0 ? delta : 0;  // > 0 , 在屏幕下方 ,
  },
  /**
   * 根据ele在window中的位置和keyboard的高度，来滚动document使得ele不被遮罩
   * @param ele  原生dom element
   * @param adaptBottom  boolean  是否调整 body.style.marginBottom
   * @private
   */
  _adaptElekeyboard_: function (ele, adaptBottom) {
    //var bounding = ele.getBoundingClientRect();  // bounding始终是相对于窗口顶部，而不是
    //// 当前激活的组件相对于屏幕下方的距离
    //var offsetBottom = $(window).height() - bounding.bottom;
    ////若过于低，将页面向上抬
    //var delta = offsetBottom - this._keyboard_height_;  // delta , input bottom 距离keyboard top的距离，为负表明被遮罩

    //lobby.logDebug( "delta: " + delta + ", bottom:  " + bounding.bottom +
    //	+ " , _keyboard_height_: " + this._keyboard_height_ + ",winHeight: " + $(window).height() + ",screenHeight:" + screen.height);
    var winHeight = $(window).height();
    var delta = this._calc_eleKeyboardUp_(ele, winHeight);
    if (adaptBottom) document.body.style.marginBottom = winHeight * .6 + 'px';

    if (delta > 0) { // 表明需要进行滚动
      var htmlEle = document.documentElement;
      htmlEle.style.overflowY = 'auto';
      this._get_scroll_ele_().scrollTop += delta;  // 键盘显示中途调整时，需要加上原来的scrollTop基础上增加(55 - delta)
    }
  },
  adaptKeyBoard: function (keyboardHeight, delay) {
    //对transform做平滑效果,面向平台是IE,测试一般用chrome所以加入webkit
    //var upAnimation = [".pjf-keyboarddown-transition{",
    //"transition:transform .2s ease;",
    //"-webkit-transition:-webkit-transform .2s ease;",
    //"}"	];
    //
    //$('head').append("<style>" + upAnimation.join('') +"</style>");
    //$('body').addClass('pjf-keyboarddown-transition');
    var self = this;
    //键盘开启事件注册
    PJF.event.addSubscriber(PJF.PadClientEvents.shell.keyboardShow, PJF.util.debounce(function (_keyboardHeight) {
      _keyboardHeight = _keyboardHeight || keyboardHeight;
      self._keyboard_height_ = _keyboardHeight;
      function adapt() {
        document.activeElement && self._adaptElekeyboard_(document.activeElement, true);
      }

      delay ? setTimeout(adapt, delay) : adapt();
    }, 150));
    //键盘关闭事件注册
    PJF.event.addSubscriber(PJF.PadClientEvents.shell.keyboardHide, PJF.util.debounce(function (data) {
      self._keyboard_height_ = 0;
      //document.body.style.transform = 'translateY(0px)';
      self._get_scroll_ele_().scrollTop = 0;
      document.body.style.marginBottom = "0";
      document.documentElement.style.overflowY = '';
    }, 150));
  },
  /**
   * 在键盘显示中，根据ele的位置以及键盘高度调整，documentElement的scroll以使得不被键盘遮住
   */
  adaptEle4Keyboard: function (ele) {
    if (this._keyboard_height_ === 0) return;  // 键盘没有弹出，无需调整
    if (typeof ele === 'string') ele = document.getElementById(ele);
    if (!ele) return;
    this._adaptElekeyboard_(ele, false);
  },
  /*
   * 获取style
   */
  getStyle: function (name) {
    for (var i in document.styleSheets) {
      var rules = document.styleSheets[i].cssRules;
      for (var j in rules) {
        if (rules[j].selectorText == name) {
          return rules[j];
        }
      }
    }
    return null;
  },
  /*
   * 加载script
   */
  loadJavaScript: function (scriptPath) {
    if (document.head) {
      var script = document.createElement("script");
      script.type = "text/javascript";
      script.src = scriptPath;
      document.head.appendChild(script);
    }
  }
  , /**
   * 解决精度12以内的浮点数显示精度问题
   * @param num  string  or  number
   * // @param precision  结果最大精度，默认12
   * @return {number}
   */
  numStrip: function (num/*, precision*/) {
    var number = parseFloat(num);
    if (!isNaN(number)) {
      var ret = number.toPrecision(15);
      return parseFloat(ret);
      // if(typeof precision !== "number") precision = 12;
      // var ret = parseFloat(number.toFixed(precision));
    } else {
      return num;
    }
  },
  /**
   * 数字分割，小数点不管
   * @param s {string|number}:  要分割的数字，合法数字
   * @param non {string}  分割符，默认逗号
   * @param num {number}  几位一分割，默认3位
   * @param decimal {number}  保留小数位数，默认不管（原来是多少就多少）
   * @returns {string}
   */
  numSplit: function (s, non, num, decimal) {
    if (!s) return s;
    if (!isNaN(decimal) && decimal >= 0) {
      s = parseFloat(s).toFixed(decimal);
    }
    // 参数规整
    s = s + "";
    non = non || ",";
    num = num || 3;

    // 负号整理
    var minus = "";
    if (s.charAt(0) == '-') {
      s = s.substr(1);
      minus = '-';
    }

    // 小数处理
    var dot = s.indexOf(".");
    var strArr = [];
    if (dot == -1) dot = s.length;
    strArr.push(s.substr(dot));

    for (var i = dot; i > num;) {
      i -= num;
      strArr.unshift(non + s.substr(i, num));
    }
    strArr.unshift(s.substring(0, i));
    s = strArr.join("");
    return minus + s;
  },
  /*用canvas绘制签名，并转化为base64编码*/
  getBase64Sign: function (option) {
    var opt = $.extend({
      str: "测试",
      color: "#999",
      fontSize: 24,
      padding: 10
    }, option);

    var canvas = document.createElement("canvas");
    //先默认设置为500
    canvas.height = 500;

    var ctx = canvas.getContext("2d");
    ctx.font = opt.fontSize + "px 微软雅黑";
    // ctx.fillStyle = opt.color;
    //计算文字所占的宽度，方便设置canvas的宽度

    var arr = opt.str.split("\n");
    var height = arr.length * opt.fontSize;
    var width = 0, temp;
    for (var i = 0; i < arr.length; i++) {
      temp = ctx.measureText(arr[i]).width
      if (temp > width) width = temp
    }

    var size = (height + width + opt.padding * 4) / 1.4;
    canvas.width = size;
    canvas.height = size;

    ctx.translate(canvas.width / 2, canvas.height / 2);
    ctx.rotate(-Math.PI / 4);

    ctx.font = opt.fontSize + "px 微软雅黑";
    ctx.fillStyle = opt.color;
    ctx.textAlign = "center";

    var yu = arr.length % 2,
      san = (arr.length - yu) / 2;
    var base = yu === 1 ? 0 : opt.fontSize * .5;
    for (var i = 0; i < arr.length; i++) {
      ctx.fillText(arr[i], 0, base + (i - san) * opt.fontSize);
    }

    return canvas.toDataURL("image/png");
  },
  clearSign: function () {
    $(document.body).children(".pjf-sys-sign").remove();
  },
  setSignStyle: function (src, opacity) {
    this.clearSign();
    var className = "pjf-sys-sign";
    var $body = $(document.body);
    opacity = opacity || .2;
    var style = 'background-image:url(' + src + ');background-repeat:repeat;position:fixed;top:0;left:0;width:100%;height:100%;z-index:1000000;pointer-events:none;';
    style += 'opacity:' + opacity + ';';
    // var svg = document.createElementNS("http://www.w3.org/2000/svg","svg");  /// 去掉svg，兼容safari 5.1
    $("<div/>").attr("class", className)
      .attr("pointer-events", "none")
      .attr("style", style)
      .appendTo($body);
  },
  sign: function (option) {
    this.setSignStyle(this.getBase64Sign(option), option.opacity);
  },
  /**
   * 带格式的数字字符串转换为纯数字
   * @param numStr
   */
  numClean: function (numStr) {
    numStr = (numStr || "") + "";
    var flag = numStr.charAt(0) === "-";
    return (flag ? "-" : "") + numStr.replace(/[^0-9\.]/g, "");
  }/**
   * Creates a debounced function that delays invoking func until after wait milliseconds
   * have elapsed since the last time the debounced function was invoked
   * @param fn
   * @param wait
   */
  , debounce: function (fn, wait, context) {
    if (!$.isFunction(fn)) return null;

    var lastCallTime, _timerID = -1, lastArguments, _slice = Array.prototype.slice;

    // 启动定时器，timeout毫秒后执行
    function _call(timeout) {
      return setTimeout(function () {
        var now = Date.now();
        if (now - lastCallTime < wait) {
          return _call(wait - ( now - lastCallTime ));  // 再启用定时器，等wait后执行，可能存在
        } else {
          _timerID = -1;
          fn.apply(context, lastArguments);
        }
      }, timeout);
    }

    return function () {
      var last = lastCallTime;
      lastArguments = _slice.apply(arguments);
      lastCallTime = Date.now();
      if (_timerID < 0) { // 第一次调用
        _timerID = _call(wait);  // 启动定时器
        return;
      }

      if (lastCallTime - last < wait) {  // 两次调用间隔不够
        return;
      }

      // 两次间隔够了，fn一定调用了？？？ 不会出现这种情形？？？
      // 走到这里，_timerID > 0，说明还有定时器还没执行，等待执行就可以了
    }
  },
  md5: window.md5,

  queryOpp: function (oppData, jumpObj) {
    if (jumpObj) {
      window.jumpObj = jumpObj;
    }
    if (oppData) {
      window._businsOpp = {queryData: oppData};
      var oHead = document.getElementsByTagName('HEAD').item(0);
      var oScript = document.createElement("script");
      oScript.type = "text/javascript";
      oScript.src = "/bosWeb/page/business/queryOpp.js";
      oHead.appendChild(oScript);
    }
  }
  , htmlDecode: function (str) {
    var s = "";
    if (!str) return "";
    s = str.replace(/&gt;/g, "&");
    s = s.replace(/&lt;/g, "<");
    s = s.replace(/&gt;/g, ">");
    s = s.replace(/&nbsp;/g, " ");
    s = s.replace(/&#39;/g, "\'");
    s = s.replace(/&quot;/g, "\"");
    s = s.replace(/<br>/g, "\n");
    return s;
  }
  , htmlEncode: function (str) {
    var s = "";
    if (!str) return "";
    s = str.replace(/&/g, "&gt;");
    s = s.replace(/</g, "&lt;");
    s = s.replace(/>/g, "&gt;");
    s = s.replace(/ /g, "&nbsp;");
    s = s.replace(/\'/g, "&#39;");
    s = s.replace(/\"/g, "&quot;");
    s = s.replace(/\n/g, "<br>");
    return s;
  },
  /*
   * 生成ar二维码base64   bmp 深度1
   */
  qrCode: function (text, conf) {
    var jq = $("<div style='display:none' ></div>").appendTo(document.body);
    jq.qrcode($.extend({text: text}, conf));
    var base64 = jq[0].firstChild.toDataURL("image/png");
    var canvas = jq[0].firstChild;
    jq.remove();
    var base64 = PJF.util.generateBmpBase64(canvas);
    return base64;
  },
  barCode: function (text, options) {
    jq = $("<canvas style='display:none'></canvas>").appendTo(document.body);
    jq.JsBarcode(text, options);
    var canvas = jq[0];
    jq.remove();
    var base64 = PJF.util.generateBmpBase64(canvas);
    return base64;
  },
  //从canvas获取bmp base64
  generateBmpBase64: function (canvas, depth) {
    depth = depth || 1; //默认深度为1，即2色图
    var ctx = canvas.getContext('2d');
    var imagedata = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
    var b = []; //bmp图的颜色阵列
    //canvas imagedata是从上到下，从左到右开始的，而bmp是从下到上，从左到右算的, 不过qr二维码，位置没关系都可以扫出来
    //att. 每一行的末尾通过填充若干个字节的数据（并不一定为0）使该行的长度为4字节的倍数。像素数组读入内存后，每一行的起始地址必须为4的倍数。
    //这个限制仅针对内存中的像素数组，针对存储时，仅要求每一行的大小为4字节的倍数，对文件的偏移没有限制。

    for (var i = canvas.height - 1; i >= 0; i--) {
      //for(var i = 0; i < canvas.height; i++){
      var rowArr = [];
      for (var j = 0; j < canvas.width; j++) {
        //canvas imagedata是按RGBA照顺序排列的数组，每一个的取值都是0-255
        var index = i * canvas.width * 4 + j * 4; //这个点RGBA的起始索引
        //若深度低于8，有调色板，则按区间划分颜色，颜色数据代表在调色板中的索引
        if (depth <= 8) {
          //直接每隔一个固定的位置取一个颜色来作为调色板
          var gap = Math.floor(255 / (Math.pow(2, depth) - 1));
          //随意取一个平均值作为调色板的颜色选择...
          var paletteIndex = Math.floor((imagedata[index] + imagedata[index + 1] + imagedata[index + 2]) / gap / 3);
          rowArr.push(paletteIndex);
        }
        //这种没有调色板, 2个字节来表示颜色显然不够，用A1R5G5B5格式，即RGB分别占5位、5位、5位
        //其他分色(比如可以设置R5G6B5)还有设置掩码的姿势，需要用另外的DIB头，但是我试不出来。。。放弃
        else if (depth == 16) {
          //总共本来有256种颜色，现在只能展示其中的32种
          //PS上16色可以很逼近24色，应该是有什么算法
          var red = Math.ceil(imagedata[index] / 255 * 0x1f);
          var green = Math.ceil(imagedata[index + 1] / 255 * 0x1f);
          var blue = Math.ceil(imagedata[index + 2] / 255 * 0x1f);

          rowArr.push(((green & 0x07) << 5) + blue)
          rowArr.push(0x00 + (red << 2) + (green >> 3));
        }
        //24或者32(带alpha通道)
        else {
          //由于不支持alpha通道...所以采用模拟计算方式来制造alpha效果
          var alpha = (depth == 32 ? imagedata[index + 3] : 255) / 255;
          //顺序是BGRA ... 为什么要这么特立独行?查了半天才发现
          rowArr.push(imagedata[index + 2] * alpha + (1 - alpha) * 255);
          rowArr.push(imagedata[index + 1] * alpha + (1 - alpha) * 255);
          rowArr.push(imagedata[index] * alpha + (1 - alpha) * 255);
          depth == 32 && rowArr.push(imagedata[index + 3]) //这句话并没有用
        }
      }
      //深度小于等于8的情况下，将索引再合并到1个字节中
      //1深度 1个字节代表8个像素，分别为在2个颜色的调色板中的索引
      //2深度 1个字节代表4个像素，分别为在4个颜色的调色板中的索引
      //4深度 1个字节代表2个像素，分别为在16个颜色的调色板中的索引
      //8深度 1个字节代表1个像素，分别为在256个颜色的调色板中的索引
      if (depth <= 8) {
        var tmpArr = [];
        var colorIn8Bits = Math.floor(8 / depth);
        for (var k = 0, len = rowArr.length; k < len; k += colorIn8Bits) {
          var _byte = 0;
          for (var l = 0; l < colorIn8Bits; l += 1) {
            _byte += rowArr[k + l] << (colorIn8Bits - l - 1);
          }
          tmpArr.push(_byte);
        }
        rowArr = tmpArr;
      }

      var totalRowArrLength = Math.floor((depth * canvas.width + 31) / 32) * 4; //一行总共需要的位数
      //不够就补够0
      while (totalRowArrLength > rowArr.length) {
        rowArr.push(0);
      }
      b = b.concat(rowArr);
    }
    return drawArray(b, depth, canvas.width, canvas.height);

    function drawArray(arr, depth, width, height) {
      var offset, height, data, image;

      //little endian小端方式, 返回4字节数据
      function conv(size) {
        return String.fromCharCode(size & 0xff, (size >> 8) & 0xff, (size >> 16) & 0xff, (size >> 24) & 0xff);
      }

      //小于等于8深度的BMP图形，有调色板段落，调色板段落字节数为Math.pow(2,depth)种颜色, 每个颜色RGBX 共4字节表示,X都为0
      offset = depth <= 8 ? 54 + Math.pow(2, depth) * 4 : 54;  //位图数据偏移地址
      // -----位图文件头开始-----
      //BMP Header
      data = 'BM';                          // ID field  0-1  2 bytes，0x42 0x4D
      data += conv(offset + Math.ceil(width * height * depth / 8)) // BMP大小，单位字节  2-5 4 bytes
      data += conv(0);                       // 保留字段 6-9  4 bytes 设为0
      data += conv(offset);                  // 位图数据（像素数组）的地址偏移，也就是起始地址 A-D 4bytes
      // -----位图文件头结束-----

      // -----DIB头开始------
      data += conv(40);                      // DIB头大小, 40个字节, E-11, 4字节
      data += conv(width);                   // 位图宽度，单位是像素, 12-15, 4字节
      data += conv(height);                  // 位图高度，单位是像素, 16-19, 4字节
      data += String.fromCharCode(1, 0);     // 色彩平面数；只有1为有效值, 1A-1B 2字节
      data += String.fromCharCode(depth, 0); // 每个像素所占位数，即图像的色深。典型值为1、4、8、16、24和32, 1C-1D, 2字节
      data += conv(0);                       // 所使用的压缩方法, 0代表无, 1E-21, 4字节
      data += conv(arr.length);              // 图像大小.指原始位图数据的大小,与文件大小不是同一个概念, 22-25, 4字节
      data += conv(0);                       // 图像的横向分辨率，单位为像素每米（有符号整数） 26-29, 4字节
      data += conv(0);                       // 图像的纵向分辨率，单位为像素每米（有符号整数） 2A-2D, 4字节
      data += conv(0);                       // 调色板的颜色数, 0 == 2^n ,2E-31, 4字节
      data += conv(0);                       // 重要颜色数，为0时表示所有颜色都是重要的；通常不使用本项 32-35, 4字节
      // -----DIB头结束------

      //depths <= 8的需要调色板
      if (depth <= 8) {
        data += conv(0); //黑色
        //其他调色板颜色,
        for (var s = Math.floor(255 / (Math.pow(2, depth) - 1)), i = s; i < 256; i += s) {
          data += conv(i + i * 256 + i * 65536);
        }
      }
      //像素数据
      //data += String.fromCharCode.apply(String, arr); 不使用这个方法是因为arr太长导致Maximum call stack size exceeded
      //也可以分段来，不过速度没什么提升
      for (var i = 0, len = arr.length; i < len; i++)
        data += String.fromCharCode(arr[i]);
      //拼凑完毕，返回base64
      return 'data:image/bmp;base64,' + btoa(data);
    }
  },
  getClientUUid: function () {
    if (PJF.constants.termType == 'pc' && PJF.communication.client.isInP2()) {
      var rst = PJF.communication.client.getUniqueNo()
      if (rst[0] == 0) {
        return rst[1]
      }
    } else if ((PJF.constants.termType == 'stm' || PJF.constants.termType == 'pad') && PJF.communication.isInClient()) {
      var rst = PJF.communication.GetUniqueNo()
      if (rst.success) {
        return rst.result
      }
    } else if ((PJF.constants.termType == 'mobile') && PJF.client && PJF.client.isInClient()) {
      var rst = PJF.client.getUUID()
      if (rst.success) {
        return rst.result
      }
    }
  },
  addAtchBtchNoToUrl: function (url) {
    if (!url || !typeof(url) === 'string') return url
    if (url.indexOf('getLocalFile.action?') === -1 || url.indexOf('ATCH_BTCH_NO') !== -1) return url
    var uuid = PJF.util.getClientUUid()
    if (uuid) {
      // 由于智障侯春林的opendoconline接口强行判断了URL的后缀必须是.pdf，所以这里把ATCH BTCH NO加到中间
      return url.replace('getLocalFile.action?', 'getLocalFile.action?ATCH_BTCH_NO=' + uuid + '&')
      // return url + '&ATCH_BTCH_NO=' + uuid
    } else {
      return url
    }
  },
  addAtchBtchNoToJsonData: function (data) {
    if (PJF.util.getType(data) === 'object') {
      var uuid = PJF.util.getClientUUid()
      if (uuid) {
        if (data.jsonData) {
          if (PJF.util.getType(data.jsonData) === 'object') {
            data.jsonData.ATCH_BTCH_NO = uuid
          } else if (PJF.util.getType(data.jsonData) === 'string') {
            try {
              var jsonData = JSON.parse(data.jsonData)
              jsonData.ATCH_BTCH_NO = uuid
              data.jsonData = JSON.stringify(jsonData)
            } catch (e) {
              console.log('addAtchBtchNoToJsonData error:' + e.message)
            }
          }
        } else {
          data.jsonData = JSON.stringify({ATCH_BTCH_NO: uuid}) 
        }
      }
    }
    return data
  },
  addAtchBtchNoToJsonDataEval: function (data) {
    if (PJF.util.getType(data) === 'object') {
      var uuid = PJF.util.getClientUUid()
      if (uuid) {
        if (data.jsonData) {
          if (PJF.util.getType(data.jsonData) === 'object') {
            data.jsonData.ATCH_BTCH_NO = uuid
          } else if (PJF.util.getType(data.jsonData) === 'string') {
            try {
              // 兼容json可能有单引号的遗留问题 
              var jsonData = eval('(' + data.jsonData + ')')
              jsonData.ATCH_BTCH_NO = uuid
              data.jsonData = JSON.stringify(jsonData)
            } catch (e) {
              console.log('addAtchBtchNoToJsonDataEval error:' + e.message)
            }
          }
        } else {
          data.jsonData = JSON.stringify({ATCH_BTCH_NO: uuid}) 
        }
      }
    } else if (PJF.util.getType(data) === 'string'){
      var uuid = PJF.util.getClientUUid()
      if (uuid) {
        var num = data.indexOf('jsonData')
        if (num !== -1) {
          data = data.replace('jsonData={', 'jsonData={"ATCH_BTCH_NO":"' + uuid + '",')
        } else {
          data = data + '&jsonData={"ATCH_BTCH_NO":"' + uuid + '",'
        }
      }
    }
    return data
  }
};

/**
 * 基于ext的Collection对象 author:zhou.yuhang date:2012.10.16
 */
var mySeed = 0
PJF.util.Collection = function (allowFunctions, keyFn) {
  this.items = [];
  this.map = {};
  this.keys = [];
  this.length = 0;
  this.id = mySeed++;
  this.allowFunctions = allowFunctions === true;
  if (keyFn) {
    this.getKey = keyFn;
  }
};

/**
 * 由于collection需要用到的array.indexOf和jquery冲突，所以重写了一个indexOf的Util
 */
PJF.util.array = function () {
  return {
    indexOf: function (arr, o, from) {
      var len = arr.length;
      from = from || 0;
      from += (from < 0) ? len : 0;
      for (; from < len; ++from) {
        if (arr[from] === o) {
          return from;
        }
      }
      return -1;
    },
    locateOf: function (arr, o) {
      var len = arr.length;
      var from = 0;
      for (; from < len; ++from) {
        if (arr[from] <= o) {
          return from;
        }
      }
      return len;
    }

  }
}();
/**
 * 添加string的replaceall方法,str表示需要被replace的字符串，s1为需要被替换的值，s2为替换的值
 */
PJF.util.string = function () {
  return {
    replaceall: function (str, s1, s2) {
      return str.replace(new RegExp(s1, "gm"), s2);
    },
    startWith: function (str, content) {
      var reg = new RegExp("^" + content);
      return reg.test(str);
    },
    endWith: function (str, content) {
      var reg = new RegExp(content + "$");
      return reg.test(str);
    }
  }
}();
PJF.apply(PJF.util.Collection.prototype,
  {

    /**
     * @cfg {Boolean} allowFunctions Specify <tt>true</tt> if
     *      the {@link #addAll} function should add function
     *      references to the collection. Defaults to
     *      <tt>false</tt>.
     */
    allowFunctions: false,

    /**
     * Adds an item to the collection. Fires the {@link #add}
     * event when complete.
     *
     * @param {String}
     *            key
     *            <p>
     *            The key to associate with the item, or the new
     *            item.
     *            </p>
     *            <p>
     *            If a {@link #getKey} implementation was
     *            specified for this MixedCollection, or if the
     *            key of the stored items is in a property
     *            called <tt><b>id</b></tt>, the
     *            MixedCollection will be able to <i>derive</i>
     *            the key for the new item. In this case just
     *            pass the new item in this parameter.
     *            </p>
     * @param {Object}
     *            o The item to add.
     * @return {Object} The item added.
     */
    add: function (key, o) {
      if (arguments.length == 1) {
        o = arguments[0];
        key = this.getKey(o);
      }
      if (typeof key != 'undefined' && key !== null) {
        var old = this.map[key];
        if (typeof old != 'undefined') {
          return this.replace(key, o);
        }
        this.map[key] = o;
      }
      this.length++;
      this.items.push(o);
      this.keys.push(key);
      return o;
    },

    /**
     * MixedCollection has a generic way to fetch keys if you
     * implement getKey. The default implementation simply
     * returns <b><code>item.id</code></b> but you can
     * provide your own implementation to return a different
     * value as in the following examples:
     *
     * <pre><code>
     * // normal way
     * var mc = new Ext.util.MixedCollection();
     * mc.add(someEl.dom.id, someEl);
     * mc.add(otherEl.dom.id, otherEl);
     * //and so on
     *
     * // using getKey
     * var mc = new Ext.util.MixedCollection();
     * mc.getKey = function(el) {
           * 	return el.dom.id;
           * };
     * mc.add(someEl);
     * mc.add(otherEl);
     *
     * // or via the constructor
     * var mc = new Ext.util.MixedCollection(false, function(el) {
           * 	return el.dom.id;
           * });
     * mc.add(someEl);
     * mc.add(otherEl);
     * </code></pre>
     *
     * @param {Object}
     *            item The item for which to find the key.
     * @return {Object} The key for the passed item.
     */
    getKey: function (o) {
      return o.id;
    },

    /**
     * Replaces an item in the collection. Fires the
     * {@link #replace} event when complete.
     *
     * @param {String}
     *            key
     *            <p>
     *            The key associated with the item to replace,
     *            or the replacement item.
     *            </p>
     *            <p>
     *            If you supplied a {@link #getKey}
     *            implementation for this MixedCollection, or if
     *            the key of your stored items is in a property
     *            called <tt><b>id</b></tt>, then the
     *            MixedCollection will be able to <i>derive</i>
     *            the key of the replacement item. If you want
     *            to replace an item with one having the same
     *            key value, then just pass the replacement item
     *            in this parameter.
     *            </p>
     * @param o
     *            {Object} o (optional) If the first parameter
     *            passed was a key, the item to associate with
     *            that key.
     * @return {Object} The new item.
     */
    replace: function (key, o) {
      if (arguments.length == 1) {
        o = arguments[0];
        key = this.getKey(o);
      }
      var old = this.map[key];
      if (typeof key == 'undefined' || key === null
        || typeof old == 'undefined') {
        return this.add(key, o);
      }
      var index = this.indexOfKey(key);
      this.items[index] = o;
      this.map[key] = o;
      return o;
    },

    /**
     * Adds all elements of an Array or an Object to the
     * collection.
     *
     * @param {Object/Array}
     *            objs An Object containing properties which
     *            will be added to the collection, or an Array
     *            of values, each of which are added to the
     *            collection. Functions references will be added
     *            to the collection if
     *            <code>{@link #allowFunctions}</code> has
     *            been set to <tt>true</tt>.
     */
    addAll: function (objs) {
      if (arguments.length > 1 || PJF.util.getType(objs) == 'array') {
        var args = arguments.length > 1 ? arguments : objs;
        for (var i = 0, len = args.length; i < len; i++) {
          this.add(args[i]);
        }
      } else {
        for (var key in objs) {
          if (this.allowFunctions
            || typeof objs[key] != 'function') {
            this.add(key, objs[key]);
          }
        }
      }
    },

    /**
     * Executes the specified function once for every item in
     * the collection, passing the following arguments: <div
     * class="mdetail-params">
     * <ul>
     * <li><b>item</b> : Mixed
     * <p class="sub-desc">
     * The collection item
     * </p>
     * </li>
     * <li><b>index</b> : Number
     * <p class="sub-desc">
     * The item's index
     * </p>
     * </li>
     * <li><b>length</b> : Number
     * <p class="sub-desc">
     * The total number of items in the collection
     * </p>
     * </li>
     * </ul>
     * </div> The function should return a boolean value.
     * Returning false from the function will stop the
     * iteration.
     *
     * @param {Function}
     *            fn The function to execute for each item.
     * @param {Object}
     *            scope (optional) The scope (<code>this</code>
     *            reference) in which the function is executed.
     *            Defaults to the current item in the iteration.
     */
    each: function (fn, scope) {
      var items = [].concat(this.items); // each safe for
      // removal
      for (var i = 0, len = items.length; i < len; i++) {
        if (fn.call(scope || items[i], items[i], i, len) === false) {
          break;
        }
      }
    },

    /**
     * Executes the specified function once for every key in the
     * collection, passing each key, and its associated item as
     * the first two parameters.
     *
     * @param {Function}
     *            fn The function to execute for each item.
     * @param {Object}
     *            scope (optional) The scope (<code>this</code>
     *            reference) in which the function is executed.
     *            Defaults to the browser window.
     */
    eachKey: function (fn, scope) {
      for (var i = 0, len = this.keys.length; i < len; i++) {
        if (fn.call(scope || window, this.keys[i], this.items[i], i, len) === false)
          break;
      }
    },

    /**
     * Returns the first item in the collection which elicits a
     * true return value from the passed selection function.
     *
     * @param {Function}
     *            fn The selection function to execute for each
     *            item.
     * @param {Object}
     *            scope (optional) The scope (<code>this</code>
     *            reference) in which the function is executed.
     *            Defaults to the browser window.
     * @return {Object} The first item in the collection which
     *         returned true from the selection function.
     */
    find: function (fn, scope) {
      for (var i = 0, len = this.items.length; i < len; i++) {
        if (fn.call(scope || window, this.items[i],
            this.keys[i])) {
          return this.items[i];
        }
      }
      return null;
    },

    /**
     * Inserts an item at the specified index in the collection.
     * Fires the {@link #add} event when complete.
     *
     * @param {Number}
     *            index The index to insert the item at.
     * @param {String}
     *            key The key to associate with the new item, or
     *            the item itself.
     * @param {Object}
     *            o (optional) If the second parameter was a
     *            key, the new item.
     * @return {Object} The item inserted.
     */
    insert: function (index, key, o) {
      if (arguments.length == 2) {
        o = arguments[1];
        key = this.getKey(o);
      }
      if (this.containsKey(key)) {
        this.suspendEvents();
        this.removeKey(key);
        this.resumeEvents();
      }
      if (index >= this.length) {
        return this.add(key, o);
      }
      this.length++;
      this.items.splice(index, 0, o);
      if (typeof key != 'undefined' && key !== null) {
        this.map[key] = o;
      }
      this.keys.splice(index, 0, key);
      return o;
    },

    /**
     * Remove an item from the collection.
     *
     * @param {Object}
     *            o The item to remove.
     * @return {Object} The item removed or false if no item was
     *         removed.
     */
    remove: function (o) {
      return this.removeAt(this.indexOf(o));
    },

    /**
     * Remove an item from a specified index in the collection.
     * Fires the {@link #remove} event when complete.
     *
     * @param {Number}
     *            index The index within the collection of the
     *            item to remove.
     * @return {Object} The item removed or false if no item was
     *         removed.
     */
    removeAt: function (index) {
      if (index < this.length && index >= 0) {
        this.length--;
        var o = this.items[index];
        this.items.splice(index, 1);
        var key = this.keys[index];
        if (typeof key != 'undefined') {
          delete this.map[key];
        }
        this.keys.splice(index, 1);
        return o;
      }
      return false;
    },

    /**
     * Removed an item associated with the passed key fom the
     * collection.
     *
     * @param {String}
     *            key The key of the item to remove.
     * @return {Object} The item removed or false if no item was
     *         removed.
     */
    removeKey: function (key) {
      return this.removeAt(this.indexOfKey(key));
    },

    /**
     * Returns the number of items in the collection.
     *
     * @return {Number} the number of items in the collection.
     */
    getCount: function () {
      return this.length;
    },

    /**
     * Returns index within the collection of the passed Object.
     *
     * @param {Object}
     *            o The item to find the index of.
     * @return {Number} index of the item. Returns -1 if not
     *         found.
     */
    indexOf: function (o) {
      return PJF.util.array.indexOf(this.items, o);
    },

    /**
     * Returns index within the collection of the passed key.
     *
     * @param {String}
     *            key The key to find the index of.
     * @return {Number} index of the key.
     */
    indexOfKey: function (key) {
      return PJF.util.array.indexOf(this.keys, key);
    },

    /**
     * Returns the item associated with the passed key OR index.
     * Key has priority over index. This is the equivalent of
     * calling {@link #key} first, then if nothing matched
     * calling {@link #itemAt}.
     *
     * @param {String/Number}
     *            key The key or index of the item.
     * @return {Object} If the item is found, returns the item.
     *         If the item was not found, returns
     *         <tt>undefined</tt>. If an item was found, but
     *         is a Class, returns <tt>null</tt>.
     */
    item: function (key) {
      var mk = this.map[key], item = mk !== undefined ? mk
        : (typeof key == 'number') ? this.items[key]
          : undefined;
      return typeof item != 'function' || this.allowFunctions ? item
        : null; // for
      // prototype!
    },

    /**
     * Returns the item at the specified index.
     *
     * @param {Number}
     *            index The index of the item.
     * @return {Object} The item at the specified index.
     */
    itemAt: function (index) {
      return this.items[index];
    },

    /**
     * Returns the item associated with the passed key.
     *
     * @param {String/Number}
     *            key The key of the item.
     * @return {Object} The item associated with the passed key.
     */
    key: function (key) {
      return this.map[key];
    },

    /**
     * Returns true if the collection contains the passed Object
     * as an item.
     *
     * @param {Object}
     *            o The Object to look for in the collection.
     * @return {Boolean} True if the collection contains the
     *         Object as an item.
     */
    contains: function (o) {
      return this.indexOf(o) != -1;
    },

    /**
     * Returns true if the collection contains the passed Object
     * as a key.
     *
     * @param {String}
     *            key The key to look for in the collection.
     * @return {Boolean} True if the collection contains the
     *         Object as a key.
     */
    containsKey: function (key) {
      return typeof this.map[key] != 'undefined';
    },

    /**
     * Removes all items from the collection. Fires the
     * {@link #clear} event when complete.
     */
    clear: function () {
      this.length = 0;
      this.items = [];
      this.keys = [];
      this.map = {};
    },

    /**
     * Returns the first item in the collection.
     *
     * @return {Object} the first item in the collection..
     */
    first: function () {
      return this.items[0];
    },

    /**
     * Returns the last item in the collection.
     *
     * @return {Object} the last item in the collection..
     */
    last: function () {
      return this.items[this.length - 1];
    },

    /**
     * @private Performs the actual sorting based on a direction
     *          and a sorting function. Internally, this creates
     *          a temporary array of all items in the
     *          MixedCollection, sorts it and then writes the
     *          sorted array data back into this.items and
     *          this.keys
     * @param {String}
     *            property Property to sort by ('key', 'value',
     *            or 'index')
     * @param {String}
     *            dir (optional) Direction to sort 'ASC' or
     *            'DESC'. Defaults to 'ASC'.
     * @param {Function}
     *            fn (optional) Comparison function that defines
     *            the sort order. Defaults to sorting by numeric
     *            value.
     */
    _sort: function (property, dir, fn) {
      var i, len, dsc = String(dir).toUpperCase() == 'DESC' ? -1
          : 1,

        // this is a temporary array used to apply the sorting
        // function
        c = [], keys = this.keys, items = this.items;

      // default to a simple sorter function if one is not
      // provided
      fn = fn || function (a, b) {
          return a - b;
        };

      // copy all the items into a temporary array, which we
      // will sort
      for (i = 0, len = items.length; i < len; i++) {
        c[c.length] = {
          key: keys[i],
          value: items[i],
          index: i
        };
      }

      // sort the temporary array
      c.sort(function (a, b) {
        var v = fn(a[property], b[property]) * dsc;
        if (v === 0) {
          v = (a.index < b.index ? -1 : 1);
        }
        return v;
      });

      // copy the temporary array back into the main
      // this.items and this.keys
      // objects
      for (i = 0, len = c.length; i < len; i++) {
        items[i] = c[i].value;
        keys[i] = c[i].key;
      }

    },

    /**
     * Sorts this collection by <b>item</b> value with the
     * passed comparison function.
     *
     * @param {String}
     *            direction (optional) 'ASC' or 'DESC'. Defaults
     *            to 'ASC'.
     * @param {Function}
     *            fn (optional) Comparison function that defines
     *            the sort order. Defaults to sorting by numeric
     *            value.
     */
    sort: function (dir, fn) {
      this._sort('value', dir, fn);
    },

    /**
     * Reorders each of the items based on a mapping from old
     * index to new index. Internally this just translates into
     * a sort. The 'sort' event is fired whenever reordering has
     * occured.
     *
     * @param {Object}
     *            mapping Mapping from old item index to new
     *            item index
     */
    reorder: function (mapping) {

      var items = this.items, index = 0, length = items.length, order = [], remaining = [], oldIndex;

      // object of {oldPosition: newPosition} reversed to
      // {newPosition:
      // oldPosition}
      for (oldIndex in mapping) {
        order[mapping[oldIndex]] = items[oldIndex];
      }

      for (index = 0; index < length; index++) {
        if (mapping[index] == undefined) {
          remaining.push(items[index]);
        }
      }

      for (index = 0; index < length; index++) {
        if (order[index] == undefined) {
          order[index] = remaining.shift();
        }
      }

      this.clear();
      this.addAll(order);

      this.resumeEvents();

    },

    /**
     * Sorts this collection by <b>key</b>s.
     *
     * @param {String}
     *            direction (optional) 'ASC' or 'DESC'. Defaults
     *            to 'ASC'.
     * @param {Function}
     *            fn (optional) Comparison function that defines
     *            the sort order. Defaults to sorting by case
     *            insensitive string.
     */
    keySort: function (dir, fn) {
      this
        ._sort(
          'key',
          dir,
          fn
          || function (a, b) {
            var v1 = String(a)
              .toUpperCase(), v2 = String(
              b).toUpperCase();
            return v1 > v2 ? 1
              : (v1 < v2 ? -1 : 0);
          });
    },

    /**
     * Returns a range of items in this collection
     *
     * @param {Number}
     *            startIndex (optional) The starting index.
     *            Defaults to 0.
     * @param {Number}
     *            endIndex (optional) The ending index. Defaults
     *            to the last item.
     * @return {Array} An array of items
     */
    getRange: function (start, end) {
      var items = this.items;
      if (items.length < 1) {
        return [];
      }
      start = start || 0;
      end = Math.min(
        typeof end == 'undefined' ? this.length - 1
          : end, this.length - 1);
      var i, r = [];
      if (start <= end) {
        for (i = start; i <= end; i++) {
          r[r.length] = items[i];
        }
      } else {
        for (i = start; i >= end; i--) {
          r[r.length] = items[i];
        }
      }
      return r;
    },

    /**
     * Filter the <i>objects</i> in this collection by a
     * specific property. Returns a new collection that has been
     * filtered.
     *
     * @param {String}
     *            property A property on your objects
     * @param {String/RegExp}
     *            value Either string that the property values
     *            should start with or a RegExp to test against
     *            the property
     * @param {Boolean}
     *            anyMatch (optional) True to match any part of
     *            the string, not just the beginning
     * @param {Boolean}
     *            caseSensitive (optional) True for case
     *            sensitive comparison (defaults to False).
     * @return {MixedCollection} The new filtered collection
     */
    filter: function (property, value, anyMatch, caseSensitive) {
      if (Ext.isEmpty(value, false)) {
        return this.clone();
      }
      value = this.createValueMatcher(value, anyMatch,
        caseSensitive);
      return this.filterBy(function (o) {
        return o && value.test(o[property]);
      });
    },

    /**
     * Filter by a function. Returns a <i>new</i> collection
     * that has been filtered. The passed function will be
     * called with each object in the collection. If the
     * function returns true, the value is included otherwise it
     * is filtered.
     *
     * @param {Function}
     *            fn The function to be called, it will receive
     *            the args o (the object), k (the key)
     * @param {Object}
     *            scope (optional) The scope (<code>this</code>
     *            reference) in which the function is executed.
     *            Defaults to this MixedCollection.
     * @return {MixedCollection} The new filtered collection
     */
    filterBy: function (fn, scope) {
      var r = new Ext.util.MixedCollection();
      r.getKey = this.getKey;
      var k = this.keys, it = this.items;
      for (var i = 0, len = it.length; i < len; i++) {
        if (fn.call(scope || this, it[i], k[i])) {
          r.add(k[i], it[i]);
        }
      }
      return r;
    },

    /**
     * Finds the index of the first matching object in this
     * collection by a specific property/value.
     *
     * @param {String}
     *            property The name of a property on your
     *            objects.
     * @param {String/RegExp}
     *            value A string that the property values should
     *            start with or a RegExp to test against the
     *            property.
     * @param {Number}
     *            start (optional) The index to start searching
     *            at (defaults to 0).
     * @param {Boolean}
     *            anyMatch (optional) True to match any part of
     *            the string, not just the beginning.
     * @param {Boolean}
     *            caseSensitive (optional) True for case
     *            sensitive comparison.
     * @return {Number} The matched index or -1
     */
    findIndex: function (property, value, start, anyMatch,
                         caseSensitive) {
      if (Ext.isEmpty(value, false)) {
        return -1;
      }
      value = this.createValueMatcher(value, anyMatch,
        caseSensitive);
      return this.findIndexBy(function (o) {
        return o && value.test(o[property]);
      }, null, start);
    },

    /**
     * Find the index of the first matching object in this
     * collection by a function. If the function returns <i>true</i>
     * it is considered a match.
     *
     * @param {Function}
     *            fn The function to be called, it will receive
     *            the args o (the object), k (the key).
     * @param {Object}
     *            scope (optional) The scope (<code>this</code>
     *            reference) in which the function is executed.
     *            Defaults to this MixedCollection.
     * @param {Number}
     *            start (optional) The index to start searching
     *            at (defaults to 0).
     * @return {Number} The matched index or -1
     */
    findIndexBy: function (fn, scope, start) {
      var k = this.keys, it = this.items;
      for (var i = (start || 0), len = it.length; i < len; i++) {
        if (fn.call(scope || this, it[i], k[i])) {
          return i;
        }
      }
      return -1;
    },

    /**
     * Returns a regular expression based on the given value and
     * matching options. This is used internally for finding and
     * filtering, and by Ext.data.Store#filter
     *
     * @private
     * @param {String}
     *            value The value to create the regex for. This
     *            is escaped using Ext.escapeRe
     * @param {Boolean}
     *            anyMatch True to allow any match - no regex
     *            start/end line anchors will be added. Defaults
     *            to false
     * @param {Boolean}
     *            caseSensitive True to make the regex case
     *            sensitive (adds 'i' switch to regex). Defaults
     *            to false.
     * @param {Boolean}
     *            exactMatch True to force exact match (^ and $
     *            characters added to the regex). Defaults to
     *            false. Ignored if anyMatch is true.
     */
    createValueMatcher: function (value, anyMatch,
                                  caseSensitive, exactMatch) {
      if (!value.exec) { // not a regex
        var er = Ext.escapeRe;
        value = String(value);

        if (anyMatch === true) {
          value = er(value);
        } else {
          value = '^' + er(value);
          if (exactMatch === true) {
            value += '$';
          }
        }
        value = new RegExp(value, caseSensitive ? '' : 'i');
      }
      return value;
    },

    /**
     * Creates a shallow copy of this collection
     *
     * @return {MixedCollection}
     */
    clone: function () {
      var r = new Ext.util.MixedCollection();
      var k = this.keys, it = this.items;
      for (var i = 0, len = it.length; i < len; i++) {
        r.add(k[i], it[i]);
      }
      r.getKey = this.getKey;
      return r;
    }
  });

/*
* 一些跨平台通用的方法
*/

(function(util){

	util.supportHideWebView = function(){
		var clientType = PJF.communication.getClientType();
		// 获取版本接口不一样
		var clientVersion = clientType == 'android' ? PJF.communication.GetApplicationVersion() : PJF.communication.GetClientInfo();
		clientVersion = clientVersion.success ? clientVersion.result : '1.0'; //失败了就是版本1.0
		//满足的就支持新开webview hide 和 active
		if (clientType == 'windows' && PJF.util.compareVersion(clientVersion, '2.0.7.0') >= 0 || clientType == 'android' && PJF.util.compareVersion(clientVersion, '1.4.8') >= 0) {
			return true;
		}
	}

})(PJF.util);
/**
 * 标准des、3des
 */

(function(exports) {

	//  
	//THIS SOFTWARE IS PROVIDED "AS IS" AND  
	//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  
	//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  
	//ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  
	//FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  
	//DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  
	//OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  
	//HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  
	//LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  
	//OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  
	//SUCH DAMAGE.  

	//des  
	//this takes the key, the message, and whether to encrypt or decrypt  
	function des(key, message, encrypt, mode, iv, padding) {
		//declaring this locally speeds things up a bit  
		var spfunction1 = new Array(0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 0x4, 0x10000, 0x400, 0x1010400, 0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000, 0x4, 0x404, 0x1000400, 0x1000400, 0x10400, 0x10400, 0x1010000, 0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 0x404, 0x10404, 0x1000000, 0x10000, 0x1010404, 0x4, 0x1010000, 0x1010400, 0x1000000, 0x1000000, 0x400, 0x1010004, 0x10000, 0x10400, 0x1000004, 0x400, 0x4, 0x1000404, 0x10404, 0x1010404, 0x10004, 0x1010000, 0x1000404, 0x1000004, 0x404, 0x10404, 0x1010400, 0x404, 0x1000400, 0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004);
		var spfunction2 = new Array(-0x7fef7fe0, -0x7fff8000, 0x8000, 0x108020, 0x100000, 0x20, -0x7fefffe0, -0x7fff7fe0, -0x7fffffe0, -0x7fef7fe0, -0x7fef8000, -0x80000000, -0x7fff8000, 0x100000, 0x20, -0x7fefffe0, 0x108000, 0x100020, -0x7fff7fe0, 0, -0x80000000, 0x8000, 0x108020, -0x7ff00000, 0x100020, -0x7fffffe0, 0, 0x108000, 0x8020, -0x7fef8000, -0x7ff00000, 0x8020, 0, 0x108020, -0x7fefffe0, 0x100000, -0x7fff7fe0, -0x7ff00000, -0x7fef8000, 0x8000, -0x7ff00000, -0x7fff8000, 0x20, -0x7fef7fe0, 0x108020, 0x20, 0x8000, -0x80000000, 0x8020, -0x7fef8000, 0x100000, -0x7fffffe0, 0x100020, -0x7fff7fe0, -0x7fffffe0, 0x100020, 0x108000, 0, -0x7fff8000, 0x8020, -0x80000000, -0x7fefffe0, -0x7fef7fe0, 0x108000);
		var spfunction3 = new Array(0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008, 0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 0x208, 0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000, 0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000, 0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200, 0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0, 0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208, 0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 0x208, 0x8020000, 0x20208, 0x8, 0x8020008, 0x20200);
		var spfunction4 = new Array(0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081, 0x800001, 0x2001, 0, 0x802000, 0x802000, 0x802081, 0x81, 0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001, 0x80, 0x800000, 0x2001, 0x2080, 0x800081, 0x1, 0x2080, 0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001, 0x802000, 0x802081, 0x81, 0, 0, 0x802000, 0x2080, 0x800080, 0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81, 0x1, 0x2000, 0x800001, 0x2001, 0x802080, 0x800081, 0x2001, 0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080);
		var spfunction5 = new Array(0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100, 0x40000000, 0x2080000, 0x40080100, 0x80000, 0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000, 0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 0x42000000, 0x80100, 0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100, 0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100, 0x2000000, 0x42080000, 0x42080100, 0x80100, 0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0, 0x40080000, 0x2080100, 0x40000100);
		var spfunction6 = new Array(0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010, 0x400000, 0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 0x4010, 0, 0x400010, 0x20004010, 0x4000, 0x404000, 0x20004010, 0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000, 0x20404000, 0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010, 0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000, 0x20000000, 0x4010, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0, 0x20400010, 0x10, 0x4000, 0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010, 0, 0x20404000, 0x20000000, 0x400010, 0x20004010);
		var spfunction7 = new Array(0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800, 0x4200802, 0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800, 0x200802, 0x200002, 0x4000800, 0x4000002, 0x4200000, 0x4200800, 0x200002, 0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800, 0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 0x2, 0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 0x802, 0x200802, 0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802, 0, 0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002);
		var spfunction8 = new Array(0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000, 0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000, 0x40, 0x10040000, 0x10000040, 0x10001000, 0x1040, 0x41000, 0x40040, 0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000, 0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040, 0x1000, 0x41040, 0x10001000, 0x40, 0x10000040, 0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040, 0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040, 0x1040, 0x40040, 0x10000000, 0x10041000);

		//create the 16 or 48 subkeys we will need  
		var keys = des_createKeys(key);
		var m = 0,
			i, j, temp, temp2, right1, right2, left, right, looping;
		var cbcleft, cbcleft2, cbcright, cbcright2
		var endloop, loopinc;
		var len = message.length;
		var chunk = 0;
		//set up the loops for single and triple des  
		var iterations = keys.length == 32 ? 3 : 9; //single or triple des  
		if (iterations == 3) {
			looping = encrypt ? new Array(0, 32, 2) : new Array(30, -2, -2);
		} else {
			looping = encrypt ? new Array(0, 32, 2, 62, 30, -2, 64, 96, 2) : new Array(94, 62, -2, 32, 64, 2, 30, -2, -2);
		}

		//pad the message depending on the padding parameter  
		if (padding == 2) message += "        "; //pad the message with spaces  
		else if (padding == 1) {
			temp = 8 - (len % 8);
			message += String.fromCharCode(temp, temp, temp, temp, temp, temp, temp, temp);
			if (temp == 8) len += 8;
		} //PKCS7 padding  
		else if (!padding) message += "\0\0\0\0\0\0\0\0"; //pad the message out with null bytes  

		//store the result here  
		result = "";
		tempresult = "";

		if (mode == 1) { //CBC mode  
			cbcleft = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);
			cbcright = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);
			m = 0;
		}

		//loop through each 64 bit chunk of the message  
		while (m < len) {
			left = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);
			right = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);

			//for Cipher Block Chaining mode, xor the message with the previous result  
			if (mode == 1) {
				if (encrypt) {
					left ^= cbcleft;
					right ^= cbcright;
				} else {
					cbcleft2 = cbcleft;
					cbcright2 = cbcright;
					cbcleft = left;
					cbcright = right;
				}
			}

			//first each 64 but chunk of the message must be permuted according to IP  
			temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
			right ^= temp;
			left ^= (temp << 4);
			temp = ((left >>> 16) ^ right) & 0x0000ffff;
			right ^= temp;
			left ^= (temp << 16);
			temp = ((right >>> 2) ^ left) & 0x33333333;
			left ^= temp;
			right ^= (temp << 2);
			temp = ((right >>> 8) ^ left) & 0x00ff00ff;
			left ^= temp;
			right ^= (temp << 8);
			temp = ((left >>> 1) ^ right) & 0x55555555;
			right ^= temp;
			left ^= (temp << 1);

			left = ((left << 1) | (left >>> 31));
			right = ((right << 1) | (right >>> 31));

			//do this either 1 or 3 times for each chunk of the message  
			for (j = 0; j < iterations; j += 3) {
				endloop = looping[j + 1];
				loopinc = looping[j + 2];
				//now go through and perform the encryption or decryption    
				for (i = looping[j]; i != endloop; i += loopinc) { //for efficiency  
					right1 = right ^ keys[i];
					right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];
					//the result is attained by passing these bytes through the S selection functions  
					temp = left;
					left = right;
					right = temp ^ (spfunction2[(right1 >>> 24) & 0x3f] | spfunction4[(right1 >>> 16) & 0x3f] | spfunction6[(right1 >>> 8) & 0x3f] | spfunction8[right1 & 0x3f] | spfunction1[(right2 >>> 24) & 0x3f] | spfunction3[(right2 >>> 16) & 0x3f] | spfunction5[(right2 >>> 8) & 0x3f] | spfunction7[right2 & 0x3f]);
				}
				temp = left;
				left = right;
				right = temp; //unreverse left and right  
			} //for either 1 or 3 iterations  

			//move then each one bit to the right  
			left = ((left >>> 1) | (left << 31));
			right = ((right >>> 1) | (right << 31));

			//now perform IP-1, which is IP in the opposite direction  
			temp = ((left >>> 1) ^ right) & 0x55555555;
			right ^= temp;
			left ^= (temp << 1);
			temp = ((right >>> 8) ^ left) & 0x00ff00ff;
			left ^= temp;
			right ^= (temp << 8);
			temp = ((right >>> 2) ^ left) & 0x33333333;
			left ^= temp;
			right ^= (temp << 2);
			temp = ((left >>> 16) ^ right) & 0x0000ffff;
			right ^= temp;
			left ^= (temp << 16);
			temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
			right ^= temp;
			left ^= (temp << 4);

			//for Cipher Block Chaining mode, xor the message with the previous result  
			if (mode == 1) {
				if (encrypt) {
					cbcleft = left;
					cbcright = right;
				} else {
					left ^= cbcleft2;
					right ^= cbcright2;
				}
			}
			tempresult += String.fromCharCode((left >>> 24), ((left >>> 16) & 0xff), ((left >>> 8) & 0xff), (left & 0xff), (right >>> 24), ((right >>> 16) & 0xff), ((right >>> 8) & 0xff), (right & 0xff));

			chunk += 8;
			if (chunk == 512) {
				result += tempresult;
				tempresult = "";
				chunk = 0;
			}
		} //for every 8 characters, or 64 bits in the message  

		//return the result as an array  
		return result + tempresult;
	} //end of des  



	//des_createKeys  
	//this takes as input a 64 bit key (even though only 56 bits are used)  
	//as an array of 2 integers, and returns 16 48 bit keys  
	function des_createKeys(key) {
		//declaring this locally speeds things up a bit  
		pc2bytes0 = new Array(0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204, 0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204);
		pc2bytes1 = new Array(0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100, 0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101);
		pc2bytes2 = new Array(0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808);
		pc2bytes3 = new Array(0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000, 0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000);
		pc2bytes4 = new Array(0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000, 0x41000, 0x1010, 0x41010);
		pc2bytes5 = new Array(0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420, 0x2000000, 0x2000400, 0x2000020, 0x2000420);
		pc2bytes6 = new Array(0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002);
		pc2bytes7 = new Array(0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000, 0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800);
		pc2bytes8 = new Array(0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000, 0x2000002, 0x2040002, 0x2000002, 0x2040002);
		pc2bytes9 = new Array(0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408, 0x10000408, 0x400, 0x10000400, 0x408, 0x10000408);
		pc2bytes10 = new Array(0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020, 0x102000, 0x102020, 0x102000, 0x102020);
		pc2bytes11 = new Array(0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000, 0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200);
		pc2bytes12 = new Array(0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010, 0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010);
		pc2bytes13 = new Array(0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105);

		//how many iterations (1 for des, 3 for triple des)  
		var iterations = key.length > 8 ? 3 : 1; //changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys  
		//stores the return keys  
		var keys = new Array(32 * iterations);
		//now define the left shifts which need to be done  
		var shifts = new Array(0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0);
		//other variables  
		var lefttemp, righttemp, m = 0,
			n = 0,
			temp;

		for (var j = 0; j < iterations; j++) { //either 1 or 3 iterations  
			left = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);
			right = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);

			temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
			right ^= temp;
			left ^= (temp << 4);
			temp = ((right >>> -16) ^ left) & 0x0000ffff;
			left ^= temp;
			right ^= (temp << -16);
			temp = ((left >>> 2) ^ right) & 0x33333333;
			right ^= temp;
			left ^= (temp << 2);
			temp = ((right >>> -16) ^ left) & 0x0000ffff;
			left ^= temp;
			right ^= (temp << -16);
			temp = ((left >>> 1) ^ right) & 0x55555555;
			right ^= temp;
			left ^= (temp << 1);
			temp = ((right >>> 8) ^ left) & 0x00ff00ff;
			left ^= temp;
			right ^= (temp << 8);
			temp = ((left >>> 1) ^ right) & 0x55555555;
			right ^= temp;
			left ^= (temp << 1);

			//the right side needs to be shifted and to get the last four bits of the left side  
			temp = (left << 8) | ((right >>> 20) & 0x000000f0);
			//left needs to be put upside down  
			left = (right << 24) | ((right << 8) & 0xff0000) | ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0);
			right = temp;

			//now go through and perform these shifts on the left and right keys  
			for (var i = 0; i < shifts.length; i++) {
				//shift the keys either one or two bits to the left  
				if (shifts[i]) {
					left = (left << 2) | (left >>> 26);
					right = (right << 2) | (right >>> 26);
				} else {
					left = (left << 1) | (left >>> 27);
					right = (right << 1) | (right >>> 27);
				}
				left &= -0xf;
				right &= -0xf;

				//now apply PC-2, in such a way that E is easier when encrypting or decrypting  
				//this conversion will look like PC-2 except only the last 6 bits of each byte are used  
				//rather than 48 consecutive bits and the order of lines will be according to   
				//how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7  
				lefttemp = pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] | pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] | pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] | pc2bytes6[(left >>> 4) & 0xf];
				righttemp = pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] | pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] | pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] | pc2bytes13[(right >>> 4) & 0xf];
				temp = ((righttemp >>> 16) ^ lefttemp) & 0x0000ffff;
				keys[n++] = lefttemp ^ temp;
				keys[n++] = righttemp ^ (temp << 16);
			}
		} //for each iterations  
		//return the keys we've created  
		return keys;
	} //end of des_createKeys  


	function string16ToHex(s) {
		var r = ""
		var hexes = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f")
		for (var i = 0; i < s.length; i++) {
			var char = s.charCodeAt(i)
			r += hexes[char >> 12] + hexes[(char >> 8) & 0xf] + hexes[(char >> 4) & 0xf] + hexes[char & 0xf]
		}
		return r
	}

	function hexToString16(h) {
		var r = ""
		for (var i = (h.substr(0, 2) == "0x") ? 2 : 0; i < h.length; i += 4) {
			r += String.fromCharCode(parseInt(h.substr(i, 4), 16));
		}
		return r
	}

	/*
	* 将字符串每4位转化成hex中的0-f
	*/
	function stringToHex(s) {
		var r = "";
		var hexes = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f");
		for (var i = 0; i < s.length; i++) {
			r += hexes[s.charCodeAt(i) >> 4] + hexes[s.charCodeAt(i) & 0xf];
		}
		return r;
	}

	/*
	* 与stringToHex功能相反
	*/

	function hexToString(h) {
		var r = "";
		for (var i = (h.substr(0, 2) == "0x") ? 2 : 0; i < h.length; i += 2) {
			r += String.fromCharCode(parseInt(h.substr(i, 2), 16));
		}
		return r;
	}
    
    /*
    * 将字符串数字字母(0-9,a-z,A-Z)转化为压缩BCD码, 例如'12'变为0x12对应的ascii码中的对应字符, 川分用8421编码方式，貌似就只有数字了
    */
	function stringToBCD(s){
		if(s.length % 2 != 0) return null; //必须是2的倍数
		var r = [];
		for(var i = 0; i < s.length; i+=2){
			var a = s[i], b = s[i+1];
			r.push((getHexValue(a) << 4) + getHexValue(b));
		}
		return String.fromCharCode.apply(String, r);
	}

	/*
	* 与stringToBCD功能相反
	*/
	function bcdToString(bcd){
		var r = "";
		for(var i = 0; i < bcd.length; i++){
			var charCode = bcd[i].charCodeAt(0); //这个是包含了两位原先的信息, 比如0x12代表了之前是'12'转过来的
			//再分别还原回字母数字
			r += getHexChar(charCode >> 4) + getHexChar(charCode & 0x0f);
		}
		return r;
	}

	//使用0-9 a-f A-F中的一个字符，返回对应的数字值, 若不是字母数字就返回0
	function getHexValue(hexChar){
		var charCode = hexChar.charCodeAt(0), value = 0;
		//0-9
		if(charCode >= 48 && charCode <= 57){
			value = charCode - 48;
		}
		//a-f
		else if(charCode >= 97 && charCode <= 102){
			value = charCode - 97 + 10;
		}
		//A-F
		else if(charCode >= 65 && charCode <= 70){
			value = charCode - 65 + 10;
		}
		return value;
	}

	//与getHexValue功能相反
	function getHexChar(hexValue){		
		//说明是字母，就返回小写的
		if(hexValue > 9 && hexValue < 16){
			return String.fromCharCode(97 + hexValue - 10); //97是'a'的ascii值
		}
		//说明是数字
		else if(hexValue >= 0 && hexValue <= 9) {
			return String.fromCharCode(48 + hexValue); //48是'0'的ascii值
		}
		else
			return String.fromCharCode(48);
	}

	exports.des = des;
	exports.stringToHex = stringToHex;
	exports.hexToString = hexToString;
	exports.stringToBCD = stringToBCD;
	exports.bcdToString = bcdToString;
	exports.string16ToHex = string16ToHex
	exports.hexToString16 = hexToString16


})(PJF.util)
/*
* 只是为了提供一个PJF自己用的运行时态存cache的地方，
之所以不用sessionstorage,因为可能多个tab页
之所以不用localStroage，考虑到这是运行时态缓存用的
*/
;
PJF.namespace("PJF.cache");
(function(exports){

	var cache = {};

	exports.keys = {
		SERVER_TIME : 'serverTime'
	};

	exports.set = function(key, value){
		cache[key] = value;
	}

	exports.get = function(key){
		return cache[key];
	}

	exports.clear = function(){
		cache = {};
	}


	// 针对设定日期的单独逻辑, 要在前端起一个timer，判断是否过期

    var _timer;

    //目前只支持取yyyyMMdd
	exports.getServerTime = function(){
		return exports.get(exports.keys.SERVER_TIME);
	}

	//设置服务器时间，timestr为yyyyMMddHHmmss格式
	exports.setServerTime = function(timestr){
		//_clientTime = new Date(); //等价于客户端起一个timer，用来在获取的时候判断是不是过了一天了
		clearTimeout(_timer); //清除timer

		var serverDate = new Date(timestr.substr(0,4), parseInt(timestr.substr(4,2)) - 1, timestr.substr(6,2), timestr.substr(8,2), timestr.substr(10,2), timestr.substr(12,2));
		var tomorrowDate = new Date(timestr.substr(0,4), parseInt(timestr.substr(4,2)) - 1, parseInt(timestr.substr(6,2)) + 1);
		_timer = setTimeout(function(){
			exports.set(exports.keys.SERVER_TIME, undefined);
		}, tomorrowDate - serverDate);
		exports.set(exports.keys.SERVER_TIME, timestr.substr(0,8)); //设置yyyyMMdd
	}
	// 针对设定日期的单独逻辑结束

})(PJF.cache)

/**
 * 对PJF的util.js进行扩充
 */

PJF.apply(PJF.util, {

	Encrypt0x88: function(count) {
		var res = PJF.communication.Encrypt0x88(count, PJF.otherInfo.devId, PJF.otherInfo.token, PJF.otherInfo.secNode)
		if (res.success)
			return res.result;
	},

	encrypt: function(data) {
		var res = PJF.communication.Encrypt(data, PJF.otherInfo.devId, PJF.otherInfo.token, PJF.otherInfo.secNode)
		if (res.success)
			return res.result;
	},
	formatTpl: function(tpl, data) {
		return tpl.replace(/{{([^}]+)}}/g, function($0, $1) {
			return data[$1] ? data[$1] : ''
		})
	},
	/*
   * 注册输入法显示与消失事件，为了避免当输入框靠近下方的时候，输入法遮住输入框
   * att:仅限于pad、stm客户端
   * att2: IE里fixed定位的元素上抬
   */
  _keyboard_height_: 0,
  _top_scroll_ele_: null,  // 初始化得到正确的scroll对象 ,  IE下是documentElement ，chrome下是body 。。。
  _get_scroll_ele_: function () {
    if (!this._top_scroll_ele_) {
      var htmlEle = document.documentElement,
        overY = htmlEle.style.overflowY,
        top = htmlEle.scrollTop;
      htmlEle.style.overflowY = 'auto';
      htmlEle.scrollTop = 10;
      this._top_scroll_ele_ = htmlEle.scrollTop === 0 ? document.body : htmlEle;   // 兼容IE
      // 还原
      htmlEle.scrollTop = top;
      htmlEle.style.overflowY = overY;
    }
    return this._top_scroll_ele_;
  },
  // 计算ele应该被抬高的高度，由于键盘高度不准确，现在假设键盘高度不超过屏幕一半
  // 故只需要将ele bottom抬到屏幕上半部分即可
  // 返回页面应该滚动抬高的高度
  _calc_eleKeyboardUp_: function (ele, winHeight) {
    winHeight = winHeight || $(window).height();
    var bounding = ele.getBoundingClientRect();  // bounding始终是相对于窗口顶部，而不是
    var delta = bounding.bottom - (this._keyboard_height_ + 30);
    return delta > 0 ? delta : 0;  // > 0 , 在屏幕下方 ,
  },
  /**
   * 根据ele在window中的位置和keyboard的高度，来滚动document使得ele不被遮罩
   * @param ele  原生dom element
   * @param adaptBottom  boolean  是否调整 body.style.marginBottom
   * @private
   */
  _adaptElekeyboard_: function (ele, adaptBottom) {
    //var bounding = ele.getBoundingClientRect();  // bounding始终是相对于窗口顶部，而不是
    //// 当前激活的组件相对于屏幕下方的距离
    //var offsetBottom = $(window).height() - bounding.bottom;
    ////若过于低，将页面向上抬
    //var delta = offsetBottom - this._keyboard_height_;  // delta , input bottom 距离keyboard top的距离，为负表明被遮罩

    //lobby.logDebug( "delta: " + delta + ", bottom:  " + bounding.bottom +
    //	+ " , _keyboard_height_: " + this._keyboard_height_ + ",winHeight: " + $(window).height() + ",screenHeight:" + screen.height);
    var winHeight = $(window).height();
    var delta = this._calc_eleKeyboardUp_(ele, winHeight);
    if (adaptBottom) {
      document.body.style.marginBottom = (this._keyboard_height_ + 30) + 'px';
    }

    if (delta > 0) { // 表明需要进行滚动
      var htmlEle = document.documentElement;
      htmlEle.style.overflowY = 'auto';
      this._get_scroll_ele_().scrollTop += delta;  // 键盘显示中途调整时，需要加上原来的scrollTop基础上增加(55 - delta)
    }
  },
  adaptKeyBoard: function (keyboardHeight, delay) {
    //对transform做平滑效果,面向平台是IE,测试一般用chrome所以加入webkit
    //var upAnimation = [".pjf-keyboarddown-transition{",
    //"transition:transform .2s ease;",
    //"-webkit-transition:-webkit-transform .2s ease;",
    //"}"	];
    //
    //$('head').append("<style>" + upAnimation.join('') +"</style>");
    //$('body').addClass('pjf-keyboarddown-transition');
    var self = this;
    //键盘开启事件注册
    PJF.event.addSubscriber(PJF.PadClientEvents.shell.keyboardShow, PJF.util.debounce(function (_keyboardHeight) {
      _keyboardHeight = _keyboardHeight || keyboardHeight;
      self._keyboard_height_ = _keyboardHeight;
      function adapt() {
        document.activeElement && self._adaptElekeyboard_(document.activeElement, true);
      }

      delay ? setTimeout(adapt, delay) : adapt();
    }, 150));
    //键盘关闭事件注册
    PJF.event.addSubscriber(PJF.PadClientEvents.shell.keyboardHide, PJF.util.debounce(function (data) {
      self._keyboard_height_ = 0;
      //document.body.style.transform = 'translateY(0px)';
      self._get_scroll_ele_().scrollTop = 0;
      document.body.style.marginBottom = "0";
      document.documentElement.style.overflowY = '';
    }, 150));
  },
  /**
   * 在键盘显示中，根据ele的位置以及键盘高度调整，documentElement的scroll以使得不被键盘遮住
   */
  adaptEle4Keyboard: function (ele) {
    if (this._keyboard_height_ === 0) return;  // 键盘没有弹出，无需调整
    if (typeof ele === 'string') ele = document.getElementById(ele);
    if (!ele) return;
    this._adaptElekeyboard_(ele, false);
  },
	/*
	 * 注册输入法显示与消失事件，为了避免当输入框靠近下方的时候，输入法遮住输入框
	 * att:仅限于pad、stm客户端
	 * att2: IE里fixed定位的元素上抬
	 */

	/*adaptKeyBoard: function(keyboardHeight) {
		//对transform做平滑效果,面向平台是IE,测试一般用chrome所以加入webkit
		var upAnimation = [".pjf-keyboarddown-transition{",
			"transition:transform .6s ease;",
			"-webkit-transition:-webkit-transform .6s ease;",
			"}"
		];

		// $('head').append("<style>" + upAnimation.join('') + "</style>")
		// $('body').addClass('pjf-keyboarddown-transition');
		//键盘开启事件注册
		PJF.event.addSubscriber(PJF.PadClientEvents.shell.keyboardShow, function(_keyboardHeight) {
				keyboardHeight = _keyboardHeight || keyboardHeight;

				// 获取当前焦点元素
				var bounding = document.activeElement.getBoundingClientRect();
				// body对象，因为可能也被移动过，所以通过算相对位置
				var bodyRect = document.body.getBoundingClientRect();
				// 当前激活的组件相对于body下方的距离
				var bottom = bodyRect.bottom - bounding.bottom;
				// 计算差值, 再预留100PX距离
				var dif = bottom - keyboardHeight - 100;
				if (dif < 0) {
					var up = Math.abs(dif) / PJF.constants.DEFAULT_FONTSIZE;
					document.body.style.transform = 'translateY(-' + up + 'rem)';
				}

			})
			//键盘关闭事件注册
		PJF.event.addSubscriber(PJF.PadClientEvents.shell.keyboardHide, function(data) {
			document.body.style.transform = 'translateY(0px)';
		})
	},*/
	/*
	 * 
	 */
	openKeyboard: function(mode) {
		if (PJF.communication.isInClient()) {
            //TCR后屏使用windows输入法
            if(PJF.util.deviceType.tcr && PJF.communication.isSecondScreen()){
                PJF.communication.IME.OpenWindowsKeyboard(function(data) {
                    console.log('打开WINDOWS输入法，结果为:' + data);
                })
            }
            //pad不用IME输入法
            else if(PJF.util.deviceType.pad){

            }
			//ytd 版本过低，那就还是自带输入法吧
			else if(PJF.util.deviceType.ytd && !PJF.util.compareClientVersion('1.16.3.0')){

			}
			//出了问题用windows输入法
			else if (PJF.util.deviceType.ytd && PJF.constants.YTD_WINDOWS_KEYBOARD) {
				PJF.communication.IME.OpenWindowsKeyboard(function(data) {
					console.log('打开WINDOWS输入法，结果为:' + data);
				})
			} else {

				PJF.stm.AppIME.openSoftKeyboard({
					hmode: mode || 0
				}, function(data) {
                    if (PJF.util.isKylinSTM()) {
                        PJF.event.asyncPublish(PJF.PadClientEvents.shell.keyboardShow, 400);
                    }
					if (!data.status ) {
                        console.log('IME调用输入法出错:'+JSON.stringify(data))
					}
				})
			}
		}
	},
	closeKeyboard: function() {
		if (PJF.communication.isInClient()) {
			//TCR后屏不弹输入法
            if(PJF.util.deviceType.tcr && PJF.communication.isSecondScreen()){

            }
            //pad不用IME输入法
            else if(PJF.util.deviceType.pad){

            }
			else if(PJF.util.deviceType.ytd && !PJF.util.compareClientVersion('1.16.3.0')){

			}
			else if (PJF.util.deviceType.ytd && PJF.constants.YTD_WINDOWS_KEYBOARD) {

			} else {
				PJF.stm.AppIME.closeSoftKeyboard({}, function(data) {
                    if (PJF.util.isKylinSTM()) {
                        PJF.event.asyncPublish(PJF.PadClientEvents.shell.keyboardHide, 400);
                    }
                    if (!data.status) {
						console.log('IME关闭输入法出错'+JSON.stringify(data))
					}
				})
			}
		}
	},
	saveHtml: function(areaId) {
		var dom = document.getElementById(areaId);
		if (!dom) return;
		var html = '<!DOCTYPE html><html><head><meta http-equiv="X-UA-Compatible" content="IE=11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body>';
		html += dom.innerHTML;
		html += '</body></html>';
		var fileName = PJF.otherInfo.devId + Date.now() + PJF.util.generateUUid() + '.html';
		var res = PJF.communication.writeTextFile(fileName, html);
		return res.success ? res.result.replace(new RegExp("\\\\", "gm"), "/") : '';
	},

	getComputerKey: function() {
		if (PJF.communication.isInClient()) {
			var ipMacs = PJF.communication.GetMachine().result;
			var temp = [];
			if (ipMacs) {
				ipMacs = eval(ipMacs);
				for (var a = 0; a < ipMacs.length; a++) {
					var result = ipMacs[a];
					temp.push(result.IP);
					temp.push("-"); //分隔一下
					temp.push(result.MAC);
				}
			}
			var hash = PJF.util.hashCode(temp.join(''));
			return hash + '-' + temp.join('');
		} else {
			return '';
		}
	},
	//比较客户端版本，若当前版本低于传入版本号则返回false,其他返回true
	compareClientVersion: function(version) {
		var versionInfo = PJF.communication.GetClientInfo();
		//如果获取失败了，就当当前版本低吧
		if (!versionInfo.success)
			return false;
		var currentVersion = versionInfo.result;
		//版本号以小数点分割
		var versionSplit = version.split('.');
		var currentVersionSplit = currentVersion.split('.');
		//取版本号中最小的长度
		var minLength = Math.min(currentVersionSplit.length, versionSplit.length);
		for (var i = 0; i < minLength; i++) {
			versionSplit[i] = versionSplit[i].match(/[0-9]+/);
			//以防万一，保证一定是数字,因为版本号可能带有beta之类的字段,例如1.2.7beta，但是保证数字永远在前
			versionSplit[i] = versionSplit[i] ? versionSplit[i][0] : 0;
			currentVersionSplit[i] = currentVersionSplit[i].match(/[0-9]+/);
			currentVersionSplit[i] = currentVersionSplit[i] ? currentVersionSplit[i][0] : 0;
			//之所以要用数字判断，是因为可能是两位字符串，比如'9'就会大于'11'
			var num1 = parseInt(versionSplit[i]);
			var num2 = parseInt(currentVersionSplit[i]);
			//传入版本号某一位大于当前版本号
			if (num1 > num2)
				return false;
			//当前版本号某一位大于传入版本号
			else if (num2 > num1)
				return true;
		}
		//当前面的数字不能决定当前版本是否低于传入的版本号，则根据长度判断
		return versionSplit.length <= currentVersionSplit.length;
	},
	/*
	* 路由信息注册，就是为了防止有重复
	*/
	routeClassList:[],
	routeClassAllowRepeat:['templateInfo'],
	registerRoute : function(route, addInfo){
		route = route || {};
		for(var i in addInfo){
			if(route[i] && !PJF.constants.ON_PROD){
				alert('error,路由配置出现重复的page id:' + i);
			}
			//暂时不关注重复的className吧 ? - - |
			else {
				route[i] = addInfo[i];
			}
		}
	},
	safeParse:function(str, failValue){
		var _ret;
		if($.isNumeric(str)) return str; //数字就直接返回吧，不然JSON.parse('123')会返回123，不是期待的结果
		
		try {
			_ret = JSON.parse(str)
		} catch (e) {
			//console.warn("JSON.parse FAIL:", e);
			_ret = failValue === undefined ? str : failValue;
		}
		return _ret;	    
	},
	/*
	 * 加载script
	 */
	loadJavaScript: function(scriptPath,CCBS_TRANSFORM,useBackDoor) {
		if (document.head) {	
			var postfix = "";
			if(CCBS_TRANSFORM && PJF.util.isCCBSTransform()){
				postfix = "_ccbstransform";
			}
			scriptPath = /(.*)(\.js)/.exec(scriptPath)[1] + postfix + ".js";
			console.log('将要加载js:' + scriptPath)
			var script = document.createElement("script");
			if(useBackDoor){
				var path = PJF.html.toAbsURL(scriptPath).split('bosWeb/page/')[1];
				$.ajax({
					async: false,
					url: '/bosWeb/FileServlet?type=status&path=' + path,
					success: function(data) {
						if (data == "true") {
							script.src = '/bosWeb/FileServlet?type=load&path=' + path;
						} else {
							script.src = scriptPath;
						}
					},
					error: function() {
						script.src = scriptPath;
					}
				});
			}		
			else{
				script.src = scriptPath;
			}	
			script.type = "text/javascript";		
			PJF.constants.jsLoadingCount++;
			script.onload = script.onerror = function(){
				PJF.constants.jsLoadingCount--;
			}
			document.head.appendChild(script);
		}
	},
	/*
	** 判断是否属于CCBS改造试点分行
	*/
	isCCBSTransform:function(){
		return true; //CCBS已跪
		if(!PJF.roleInfo || !PJF.roleInfo.orgCode){
			return false;
		}
		var orgCodes = PJF.constants.CCBS_TRANSFORM.split(',');
		for (var i = 0; i < orgCodes.length; i++) {
			var orgCode = orgCodes[i];
			//不够9位的，后面补0到9位
			orgCode += '000000000'.substr(0,9 - orgCode.length);
			for(var key in PJF.roleInfo.blngOrgs){ //该网点所有父级机构
				if(PJF.roleInfo.blngOrgs[key] == orgCode){
					return true;
				}
			}
		}
		return false;
	},

	barCode : function(text, options){
		jq = $("<canvas style='display:none'></canvas>").appendTo(document.body);
		jq.JsBarcode(text, options);
		var canvas = jq[0];
		jq.remove();
		var base64 = PJF.util.generateBmpBase64(canvas);
		return base64;
	},

	deviceType: {
		icm: false,
		stm: false,
		ytd: false,
        tcr: false
	},

    isKylinSTM: function () {
	    return navigator.platform == "Linux aarch64"
    }
});

JSON.safeParse = PJF.util.safeParse;

(function(exports){

	var stmPageData = {};

	exports.addPageData = function(key, data){
		stmPageData[key] = data;
	};

	exports.getPageData = function(key){
		return stmPageData[key];
	};

	exports.removePageData = function(key){
		stmPageData[key] = undefined;
	}

    exports.getPinyinDict = function(){
        return {"啊": "a", "阿": "a", "锕": "a", "埃": "ai", "挨": "ai", "哎": "ai", "唉": "ai", "哀": "ai", "皑": "ai", "癌": "ai", "蔼": "ai", "矮": "ai", "艾": "ai", "碍": "ai", "爱": "ai", "隘": "ai", "诶": "ai", "捱": "ai", "嗳": "ai", "嗌": "ai", "嫒": "ai", "瑷": "ai", "暧": "ai", "砹": "ai", "锿": "ai", "霭": "ai", "鞍": "an", "氨": "an", "安": "an", "俺": "an", "按": "an", "暗": "an", "岸": "an", "胺": "an", "案": "an", "谙": "an", "埯": "an", "揞": "an", "犴": "an", "庵": "an", "桉": "an", "铵": "an", "鹌": "an", "顸": "an", "黯": "an", "肮": "ang", "昂": "ang", "盎": "ang", "凹": "ao", "敖": "ao", "熬": "ao", "翱": "ao", "袄": "ao", "傲": "ao", "奥": "ao", "懊": "ao", "澳": "ao", "坳": "ao", "拗": "ao", "嗷": "ao", "噢": "ao", "岙": "ao", "廒": "ao", "遨": "ao", "媪": "ao", "骜": "ao", "聱": "ao", "螯": "ao", "鏊": "ao", "鳌": "ao", "鏖": "ao", "芭": "ba", "捌": "ba", "扒": "ba", "叭": "ba", "吧": "ba", "笆": "ba", "八": "ba", "疤": "ba", "巴": "ba", "拔": "ba", "跋": "ba", "靶": "ba", "把": "ba", "耙": "ba", "坝": "ba", "霸": "ba", "罢": "ba", "爸": "ba", "茇": "ba", "菝": "ba", "萆": "ba", "捭": "ba", "岜": "ba", "灞": "ba", "杷": "ba", "钯": "ba", "粑": "ba", "鲅": "ba", "魃": "ba", "白": "bai", "柏": "bai", "百": "bai", "摆": "bai", "佰": "bai", "败": "bai", "拜": "bai", "稗": "bai", "薜": "bai", "掰": "bai", "鞴": "bai", "斑": "ban", "班": "ban", "搬": "ban", "扳": "ban", "般": "ban", "颁": "ban", "板": "ban", "版": "ban", "扮": "ban", "拌": "ban", "伴": "ban", "瓣": "ban", "半": "ban", "办": "ban", "绊": "ban", "阪": "ban", "坂": "ban", "豳": "ban", "钣": "ban", "瘢": "ban", "癍": "ban", "舨": "ban", "邦": "bang", "帮": "bang", "梆": "bang", "榜": "bang", "膀": "bang", "绑": "bang", "棒": "bang", "磅": "bang", "蚌": "bang", "镑": "bang", "傍": "bang", "谤": "bang", "蒡": "bang", "螃": "bang", "苞": "bao", "胞": "bao", "包": "bao", "褒": "bao", "雹": "bao", "保": "bao", "堡": "bao", "饱": "bao", "宝": "bao", "抱": "bao", "报": "bao", "暴": "bao", "豹": "bao", "鲍": "bao", "爆": "bao", "勹": "bao", "葆": "bao", "宀": "bao", "孢": "bao", "煲": "bao", "鸨": "bao", "褓": "bao", "趵": "bao", "龅": "bao", "剥": "bo", "薄": "bo", "玻": "bo", "菠": "bo", "播": "bo", "拨": "bo", "钵": "bo", "波": "bo", "博": "bo", "勃": "bo", "搏": "bo", "铂": "bo", "箔": "bo", "伯": "bo", "帛": "bo", "舶": "bo", "脖": "bo", "膊": "bo", "渤": "bo", "泊": "bo", "驳": "bo", "亳": "bo", "蕃": "bo", "啵": "bo", "饽": "bo", "檗": "bo", "擘": "bo", "礴": "bo", "钹": "bo", "鹁": "bo", "簸": "bo", "跛": "bo", "杯": "bei", "碑": "bei", "悲": "bei", "卑": "bei", "北": "bei", "辈": "bei", "背": "bei", "贝": "bei", "钡": "bei", "倍": "bei", "狈": "bei", "备": "bei", "惫": "bei", "焙": "bei", "被": "bei", "孛": "bei", "陂": "bei", "邶": "bei", "埤": "bei", "蓓": "bei", "呗": "bei", "怫": "bei", "悖": "bei", "碚": "bei", "鹎": "bei", "褙": "bei", "鐾": "bei", "奔": "ben", "苯": "ben", "本": "ben", "笨": "ben", "畚": "ben", "坌": "ben", "锛": "ben", "崩": "beng", "绷": "beng", "甭": "beng", "泵": "beng", "蹦": "beng", "迸": "beng", "唪": "beng", "嘣": "beng", "甏": "beng", "逼": "bi", "鼻": "bi", "比": "bi", "鄙": "bi", "笔": "bi", "彼": "bi", "碧": "bi", "蓖": "bi", "蔽": "bi", "毕": "bi", "毙": "bi", "毖": "bi", "币": "bi", "庇": "bi", "痹": "bi", "闭": "bi", "敝": "bi", "弊": "bi", "必": "bi", "辟": "bi", "壁": "bi", "臂": "bi", "避": "bi", "陛": "bi", "匕": "bi", "仳": "bi", "俾": "bi", "芘": "bi", "荜": "bi", "荸": "bi", "吡": "bi", "哔": "bi", "狴": "bi", "庳": "bi", "愎": "bi", "滗": "bi", "濞": "bi", "弼": "bi", "妣": "bi", "婢": "bi", "嬖": "bi", "璧": "bi", "贲": "bi", "畀": "bi", "铋": "bi", "秕": "bi", "裨": "bi", "筚": "bi", "箅": "bi", "篦": "bi", "舭": "bi", "襞": "bi", "跸": "bi", "髀": "bi", "鞭": "bian", "边": "bian", "编": "bian", "贬": "bian", "扁": "bian", "便": "bian", "变": "bian", "卞": "bian", "辨": "bian", "辩": "bian", "辫": "bian", "遍": "bian", "匾": "bian", "弁": "bian", "苄": "bian", "忭": "bian", "汴": "bian", "缏": "bian", "煸": "bian", "砭": "bian", "碥": "bian", "稹": "bian", "窆": "bian", "蝙": "bian", "笾": "bian", "鳊": "bian", "标": "biao", "彪": "biao", "膘": "biao", "表": "biao", "婊": "biao", "骠": "biao", "飑": "biao", "飙": "biao", "飚": "biao", "灬": "biao", "镖": "biao", "镳": "biao", "瘭": "biao", "裱": "biao", "鳔": "biao", "鳖": "bie", "憋": "bie", "别": "bie", "瘪": "bie", "蹩": "bie", "鳘": "bie", "彬": "bin", "斌": "bin", "濒": "bin", "滨": "bin", "宾": "bin", "摈": "bin", "傧": "bin", "浜": "bin", "缤": "bin", "玢": "bin", "殡": "bin", "膑": "bin", "镔": "bin", "髌": "bin", "鬓": "bin", "兵": "bing", "冰": "bing", "柄": "bing", "丙": "bing", "秉": "bing", "饼": "bing", "炳": "bing", "病": "bing", "并": "bing", "禀": "bing", "邴": "bing", "摒": "bing", "绠": "bing", "枋": "bing", "槟": "bing", "燹": "bing", "捕": "bu", "卜": "bu", "哺": "bu", "补": "bu", "埠": "bu", "不": "bu", "布": "bu", "步": "bu", "簿": "bu", "部": "bu", "怖": "bu", "拊": "bu", "卟": "bu", "逋": "bu", "瓿": "bu", "晡": "bu", "钚": "bu", "醭": "bu", "擦": "ca", "嚓": "ca", "礤": "ca", "猜": "cai", "裁": "cai", "材": "cai", "才": "cai", "财": "cai", "睬": "cai", "踩": "cai", "采": "cai", "彩": "cai", "菜": "cai", "蔡": "cai", "餐": "can", "参": "can", "蚕": "can", "残": "can", "惭": "can", "惨": "can", "灿": "can", "骖": "can", "璨": "can", "粲": "can", "黪": "can", "苍": "cang", "舱": "cang", "仓": "cang", "沧": "cang", "藏": "cang", "伧": "cang", "操": "cao", "糙": "cao", "槽": "cao", "曹": "cao", "草": "cao", "艹": "cao", "嘈": "cao", "漕": "cao", "螬": "cao", "艚": "cao", "厕": "ce", "策": "ce", "侧": "ce", "册": "ce", "测": "ce", "刂": "ce", "帻": "ce", "恻": "ce", "层": "ceng", "蹭": "ceng", "噌": "ceng", "插": "cha", "叉": "cha", "茬": "cha", "茶": "cha", "查": "cha", "碴": "cha", "搽": "cha", "察": "cha", "岔": "cha", "差": "cha", "诧": "cha", "猹": "cha", "馇": "cha", "汊": "cha", "姹": "cha", "杈": "cha", "楂": "cha", "槎": "cha", "檫": "cha", "钗": "cha", "锸": "cha", "镲": "cha", "衩": "cha", "拆": "chai", "柴": "chai", "豺": "chai", "侪": "chai", "茈": "chai", "瘥": "chai", "虿": "chai", "龇": "chai", "搀": "chan", "掺": "chan", "蝉": "chan", "馋": "chan", "谗": "chan", "缠": "chan", "铲": "chan", "产": "chan", "阐": "chan", "颤": "chan", "冁": "chan", "谄": "chan", "谶": "chan", "蒇": "chan", "廛": "chan", "忏": "chan", "潺": "chan", "澶": "chan", "孱": "chan", "羼": "chan", "婵": "chan", "嬗": "chan", "骣": "chan", "觇": "chan", "禅": "chan", "镡": "chan", "裣": "chan", "蟾": "chan", "躔": "chan", "昌": "chang", "猖": "chang", "场": "chang", "尝": "chang", "常": "chang", "长": "chang", "偿": "chang", "肠": "chang", "厂": "chang", "敞": "chang", "畅": "chang", "唱": "chang", "倡": "chang", "伥": "chang", "鬯": "chang", "苌": "chang", "菖": "chang", "徜": "chang", "怅": "chang", "惝": "chang", "阊": "chang", "娼": "chang", "嫦": "chang", "昶": "chang", "氅": "chang", "鲳": "chang", "超": "chao", "抄": "chao", "钞": "chao", "朝": "chao", "嘲": "chao", "潮": "chao", "巢": "chao", "吵": "chao", "炒": "chao", "怊": "chao", "绉": "chao", "晁": "chao", "耖": "chao", "车": "che", "扯": "che", "撤": "che", "掣": "che", "彻": "che", "澈": "che", "坼": "che", "屮": "che", "砗": "che", "郴": "chen", "臣": "chen", "辰": "chen", "尘": "chen", "晨": "chen", "忱": "chen", "沉": "chen", "陈": "chen", "趁": "chen", "衬": "chen", "称": "chen", "谌": "chen", "抻": "chen", "嗔": "chen", "宸": "chen", "琛": "chen", "榇": "chen", "肜": "chen", "胂": "chen", "碜": "chen", "龀": "chen", "撑": "cheng", "城": "cheng", "橙": "cheng", "成": "cheng", "呈": "cheng", "乘": "cheng", "程": "cheng", "惩": "cheng", "澄": "cheng", "诚": "cheng", "承": "cheng", "逞": "cheng", "骋": "cheng", "秤": "cheng", "埕": "cheng", "嵊": "cheng", "徵": "cheng", "浈": "cheng", "枨": "cheng", "柽": "cheng", "樘": "cheng", "晟": "cheng", "塍": "cheng", "瞠": "cheng", "铖": "cheng", "裎": "cheng", "蛏": "cheng", "酲": "cheng", "吃": "chi", "痴": "chi", "持": "chi", "匙": "chi", "池": "chi", "迟": "chi", "弛": "chi", "驰": "chi", "耻": "chi", "齿": "chi", "侈": "chi", "尺": "chi", "赤": "chi", "翅": "chi", "斥": "chi", "炽": "chi", "傺": "chi", "墀": "chi", "芪": "chi", "茌": "chi", "搋": "chi", "叱": "chi", "哧": "chi", "啻": "chi", "嗤": "chi", "彳": "chi", "饬": "chi", "沲": "chi", "媸": "chi", "敕": "chi", "胝": "chi", "眙": "chi", "眵": "chi", "鸱": "chi", "瘛": "chi", "褫": "chi", "蚩": "chi", "螭": "chi", "笞": "chi", "篪": "chi", "豉": "chi", "踅": "chi", "踟": "chi", "魑": "chi", "充": "chong", "冲": "chong", "虫": "chong", "崇": "chong", "宠": "chong", "茺": "chong", "忡": "chong", "憧": "chong", "铳": "chong", "艟": "chong", "抽": "chou", "酬": "chou", "畴": "chou", "踌": "chou", "稠": "chou", "愁": "chou", "筹": "chou", "仇": "chou", "绸": "chou", "瞅": "chou", "丑": "chou", "俦": "chou", "圳": "chou", "帱": "chou", "惆": "chou", "溴": "chou", "妯": "chou", "瘳": "chou", "雠": "chou", "鲋": "chou", "臭": "chu", "初": "chu", "出": "chu", "橱": "chu", "厨": "chu", "躇": "chu", "锄": "chu", "雏": "chu", "滁": "chu", "除": "chu", "楚": "chu", "础": "chu", "储": "chu", "矗": "chu", "搐": "chu", "触": "chu", "处": "chu", "亍": "chu", "刍": "chu", "憷": "chu", "绌": "chu", "杵": "chu", "楮": "chu", "樗": "chu", "蜍": "chu", "蹰": "chu", "黜": "chu", "揣": "chuan", "川": "chuan", "穿": "chuan", "椽": "chuan", "传": "chuan", "船": "chuan", "喘": "chuan", "串": "chuan", "掾": "chuan", "舛": "chuan", "惴": "chuan", "遄": "chuan", "巛": "chuan", "氚": "chuan", "钏": "chuan", "镩": "chuan", "舡": "chuan", "疮": "chuang", "窗": "chuang", "幢": "chuang", "床": "chuang", "闯": "chuang", "创": "chuang", "怆": "chuang", "吹": "chui", "炊": "chui", "捶": "chui", "锤": "chui", "垂": "chui", "陲": "chui", "棰": "chui", "槌": "chui", "春": "chun", "椿": "chun", "醇": "chun", "唇": "chun", "淳": "chun", "纯": "chun", "蠢": "chun", "促": "chun", "莼": "chun", "沌": "chun", "肫": "chun", "朐": "chun", "鹑": "chun", "蝽": "chun", "戳": "chuo", "绰": "chuo", "蔟": "chuo", "辶": "chuo", "辍": "chuo", "镞": "chuo", "踔": "chuo", "龊": "chuo", "疵": "ci", "茨": "ci", "磁": "ci", "雌": "ci", "辞": "ci", "慈": "ci", "瓷": "ci", "词": "ci", "此": "ci", "刺": "ci", "赐": "ci", "次": "ci", "荠": "ci", "呲": "ci", "嵯": "ci", "鹚": "ci", "螅": "ci", "糍": "ci", "趑": "ci", "聪": "cong", "葱": "cong", "囱": "cong", "匆": "cong", "从": "cong", "丛": "cong", "偬": "cong", "苁": "cong", "淙": "cong", "骢": "cong", "琮": "cong", "璁": "cong", "枞": "cong", "凑": "cu", "粗": "cu", "醋": "cu", "簇": "cu", "猝": "cu", "殂": "cu", "蹙": "cu", "蹿": "cuan", "篡": "cuan", "窜": "cuan", "汆": "cuan", "撺": "cuan", "昕": "cuan", "爨": "cuan", "摧": "cui", "崔": "cui", "催": "cui", "脆": "cui", "瘁": "cui", "粹": "cui", "淬": "cui", "翠": "cui", "萃": "cui", "悴": "cui", "璀": "cui", "榱": "cui", "隹": "cui", "村": "cun", "存": "cun", "寸": "cun", "磋": "cun", "忖": "cun", "皴": "cun", "撮": "cuo", "搓": "cuo", "措": "cuo", "挫": "cuo", "错": "cuo", "厝": "cuo", "脞": "cuo", "锉": "cuo", "矬": "cuo", "痤": "cuo", "鹾": "cuo", "蹉": "cuo", "躜": "cuo", "搭": "da", "达": "da", "答": "da", "瘩": "da", "打": "da", "大": "da", "耷": "da", "哒": "da", "嗒": "da", "怛": "da", "妲": "da", "疸": "da", "褡": "da", "笪": "da", "靼": "da", "鞑": "da", "呆": "dai", "歹": "dai", "傣": "dai", "戴": "dai", "带": "dai", "殆": "dai", "代": "dai", "贷": "dai", "袋": "dai", "待": "dai", "逮": "dai", "怠": "dai", "埭": "dai", "甙": "dai", "呔": "dai", "岱": "dai", "迨": "dai", "逯": "dai", "骀": "dai", "绐": "dai", "玳": "dai", "黛": "dai", "耽": "dan", "担": "dan", "丹": "dan", "单": "dan", "郸": "dan", "掸": "dan", "胆": "dan", "旦": "dan", "氮": "dan", "但": "dan", "惮": "dan", "淡": "dan", "诞": "dan", "弹": "dan", "蛋": "dan", "亻": "dan", "儋": "dan", "卩": "dan", "萏": "dan", "啖": "dan", "澹": "dan", "檐": "dan", "殚": "dan", "赕": "dan", "眈": "dan", "瘅": "dan", "聃": "dan", "箪": "dan", "当": "dang", "挡": "dang", "党": "dang", "荡": "dang", "档": "dang", "谠": "dang", "凼": "dang", "菪": "dang", "宕": "dang", "砀": "dang", "铛": "dang", "裆": "dang", "刀": "dao", "捣": "dao", "蹈": "dao", "倒": "dao", "岛": "dao", "祷": "dao", "导": "dao", "到": "dao", "稻": "dao", "悼": "dao", "道": "dao", "盗": "dao", "叨": "dao", "啁": "dao", "忉": "dao", "洮": "dao", "氘": "dao", "焘": "dao", "忑": "dao", "纛": "dao", "德": "de", "得": "de", "的": "de", "锝": "de", "蹬": "deng", "灯": "deng", "登": "deng", "等": "deng", "瞪": "deng", "凳": "deng", "邓": "deng", "噔": "deng", "嶝": "deng", "戥": "deng", "磴": "deng", "镫": "deng", "簦": "deng", "堤": "di", "低": "di", "滴": "di", "迪": "di", "敌": "di", "笛": "di", "狄": "di", "涤": "di", "翟": "di", "嫡": "di", "抵": "di", "底": "di", "地": "di", "蒂": "di", "第": "di", "帝": "di", "弟": "di", "递": "di", "缔": "di", "氐": "di", "籴": "di", "诋": "di", "谛": "di", "邸": "di", "坻": "di", "莜": "di", "荻": "di", "嘀": "di", "娣": "di", "柢": "di", "棣": "di", "觌": "di", "砥": "di", "碲": "di", "睇": "di", "镝": "di", "羝": "di", "骶": "di", "颠": "dian", "掂": "dian", "滇": "dian", "碘": "dian", "点": "dian", "典": "dian", "靛": "dian", "垫": "dian", "电": "dian", "佃": "dian", "甸": "dian", "店": "dian", "惦": "dian", "奠": "dian", "淀": "dian", "殿": "dian", "丶": "dian", "阽": "dian", "坫": "dian", "埝": "dian", "巅": "dian", "玷": "dian", "癜": "dian", "癫": "dian", "簟": "dian", "踮": "dian", "碉": "diao", "叼": "diao", "雕": "diao", "凋": "diao", "刁": "diao", "掉": "diao", "吊": "diao", "钓": "diao", "调": "diao", "轺": "diao", "铞": "diao", "蜩": "diao", "粜": "diao", "貂": "diao", "跌": "die", "爹": "die", "碟": "die", "蝶": "die", "迭": "die", "谍": "die", "叠": "die", "佚": "die", "垤": "die", "堞": "die", "揲": "die", "喋": "die", "渫": "die", "轶": "die", "牒": "die", "瓞": "die", "褶": "die", "耋": "die", "蹀": "die", "鲽": "die", "鳎": "die", "丁": "ding", "盯": "ding", "叮": "ding", "钉": "ding", "顶": "ding", "鼎": "ding", "锭": "ding", "定": "ding", "订": "ding", "丢": "ding", "仃": "ding", "啶": "ding", "玎": "ding", "腚": "ding", "碇": "ding", "町": "ding", "铤": "ding", "疔": "ding", "耵": "ding", "酊": "ding", "东": "dong", "冬": "dong", "董": "dong", "懂": "dong", "动": "dong", "栋": "dong", "侗": "dong", "恫": "dong", "冻": "dong", "洞": "dong", "垌": "dong", "咚": "dong", "岽": "dong", "峒": "dong", "夂": "dong", "氡": "dong", "胨": "dong", "胴": "dong", "硐": "dong", "鸫": "dong", "兜": "dou", "抖": "dou", "斗": "dou", "陡": "dou", "豆": "dou", "逗": "dou", "痘": "dou", "蔸": "dou", "钭": "dou", "窦": "dou", "窬": "dou", "蚪": "dou", "篼": "dou", "酡": "dou", "都": "du", "督": "du", "毒": "du", "犊": "du", "独": "du", "读": "du", "堵": "du", "睹": "du", "赌": "du", "杜": "du", "镀": "du", "肚": "du", "度": "du", "渡": "du", "妒": "du", "芏": "du", "嘟": "du", "渎": "du", "椟": "du", "橐": "du", "牍": "du", "蠹": "du", "笃": "du", "髑": "du", "黩": "du", "端": "duan", "短": "duan", "锻": "duan", "段": "duan", "断": "duan", "缎": "duan", "彖": "duan", "椴": "duan", "煅": "duan", "簖": "duan", "堆": "dui", "兑": "dui", "队": "dui", "对": "dui", "怼": "dui", "憝": "dui", "碓": "dui", "墩": "dun", "吨": "dun", "蹲": "dun", "敦": "dun", "顿": "dun", "囤": "dun", "钝": "dun", "盾": "dun", "遁": "dun", "炖": "dun", "砘": "dun", "礅": "dun", "盹": "dun", "镦": "dun", "趸": "dun", "掇": "duo", "哆": "duo", "多": "duo", "夺": "duo", "垛": "duo", "躲": "duo", "朵": "duo", "跺": "duo", "舵": "duo", "剁": "duo", "惰": "duo", "堕": "duo", "咄": "duo", "哚": "duo", "缍": "duo", "柁": "duo", "铎": "duo", "裰": "duo", "踱": "duo", "蛾": "e", "峨": "e", "鹅": "e", "俄": "e", "额": "e", "讹": "e", "娥": "e", "恶": "e", "厄": "e", "扼": "e", "遏": "e", "鄂": "e", "饿": "e", "噩": "e", "谔": "e", "垩": "e", "垭": "e", "苊": "e", "莪": "e", "萼": "e", "呃": "e", "愕": "e", "屙": "e", "婀": "e", "轭": "e", "曷": "e", "腭": "e", "硪": "e", "锇": "e", "锷": "e", "鹗": "e", "颚": "e", "鳄": "e", "恩": "en", "蒽": "en", "摁": "en", "唔": "en", "嗯": "en", "而": "er", "儿": "er", "耳": "er", "尔": "er", "饵": "er", "洱": "er", "二": "er", "贰": "er", "迩": "er", "珥": "er", "铒": "er", "鸸": "er", "鲕": "er", "发": "fa", "罚": "fa", "筏": "fa", "伐": "fa", "乏": "fa", "阀": "fa", "法": "fa", "珐": "fa", "垡": "fa", "砝": "fa", "藩": "fan", "帆": "fan", "番": "fan", "翻": "fan", "樊": "fan", "矾": "fan", "钒": "fan", "繁": "fan", "凡": "fan", "烦": "fan", "反": "fan", "返": "fan", "范": "fan", "贩": "fan", "犯": "fan", "饭": "fan", "泛": "fan", "蘩": "fan", "幡": "fan", "犭": "fan", "梵": "fan", "攵": "fan", "燔": "fan", "畈": "fan", "蹯": "fan", "坊": "fang", "芳": "fang", "方": "fang", "肪": "fang", "房": "fang", "防": "fang", "妨": "fang", "仿": "fang", "访": "fang", "纺": "fang", "放": "fang", "匚": "fang", "邡": "fang", "彷": "fang", "钫": "fang", "舫": "fang", "鲂": "fang", "菲": "fei", "非": "fei", "啡": "fei", "飞": "fei", "肥": "fei", "匪": "fei", "诽": "fei", "吠": "fei", "肺": "fei", "废": "fei", "沸": "fei", "费": "fei", "芾": "fei", "狒": "fei", "悱": "fei", "淝": "fei", "妃": "fei", "绋": "fei", "绯": "fei", "榧": "fei", "腓": "fei", "斐": "fei", "扉": "fei", "祓": "fei", "砩": "fei", "镄": "fei", "痱": "fei", "蜚": "fei", "篚": "fei", "翡": "fei", "霏": "fei", "鲱": "fei", "芬": "fen", "酚": "fen", "吩": "fen", "氛": "fen", "分": "fen", "纷": "fen", "坟": "fen", "焚": "fen", "汾": "fen", "粉": "fen", "奋": "fen", "份": "fen", "忿": "fen", "愤": "fen", "粪": "fen", "偾": "fen", "瀵": "fen", "棼": "fen", "愍": "fen", "鲼": "fen", "鼢": "fen", "丰": "feng", "封": "feng", "枫": "feng", "蜂": "feng", "峰": "feng", "锋": "feng", "风": "feng", "疯": "feng", "烽": "feng", "逢": "feng", "冯": "feng", "缝": "feng", "讽": "feng", "奉": "feng", "凤": "feng", "俸": "feng", "酆": "feng", "葑": "feng", "沣": "feng", "砜": "feng", "佛": "fu", "否": "fu", "夫": "fu", "敷": "fu", "肤": "fu", "孵": "fu", "扶": "fu", "拂": "fu", "辐": "fu", "幅": "fu", "氟": "fu", "符": "fu", "伏": "fu", "俘": "fu", "服": "fu", "浮": "fu", "涪": "fu", "福": "fu", "袱": "fu", "弗": "fu", "甫": "fu", "抚": "fu", "辅": "fu", "俯": "fu", "釜": "fu", "斧": "fu", "脯": "fu", "腑": "fu", "府": "fu", "腐": "fu", "赴": "fu", "副": "fu", "覆": "fu", "赋": "fu", "复": "fu", "傅": "fu", "付": "fu", "阜": "fu", "父": "fu", "腹": "fu", "负": "fu", "富": "fu", "讣": "fu", "附": "fu", "妇": "fu", "缚": "fu", "咐": "fu", "匐": "fu", "凫": "fu", "郛": "fu", "芙": "fu", "苻": "fu", "茯": "fu", "莩": "fu", "菔": "fu", "呋": "fu", "幞": "fu", "滏": "fu", "艴": "fu", "孚": "fu", "驸": "fu", "绂": "fu", "桴": "fu", "赙": "fu", "黻": "fu", "黼": "fu", "罘": "fu", "稃": "fu", "馥": "fu", "虍": "fu", "蚨": "fu", "蜉": "fu", "蝠": "fu", "蝮": "fu", "麸": "fu", "趺": "fu", "跗": "fu", "鳆": "fu", "噶": "ga", "嘎": "ga", "蛤": "ga", "尬": "ga", "呷": "ga", "尕": "ga", "尜": "ga", "旮": "ga", "钆": "ga", "该": "gai", "改": "gai", "概": "gai", "钙": "gai", "盖": "gai", "溉": "gai", "丐": "gai", "陔": "gai", "垓": "gai", "戤": "gai", "赅": "gai", "胲": "gai", "干": "gan", "甘": "gan", "杆": "gan", "柑": "gan", "竿": "gan", "肝": "gan", "赶": "gan", "感": "gan", "秆": "gan", "敢": "gan", "赣": "gan", "坩": "gan", "苷": "gan", "尴": "gan", "擀": "gan", "泔": "gan", "淦": "gan", "澉": "gan", "绀": "gan", "橄": "gan", "旰": "gan", "矸": "gan", "疳": "gan", "酐": "gan", "冈": "gang", "刚": "gang", "钢": "gang", "缸": "gang", "肛": "gang", "纲": "gang", "岗": "gang", "港": "gang", "戆": "gang", "罡": "gang", "颃": "gang", "筻": "gang", "杠": "gong", "工": "gong", "攻": "gong", "功": "gong", "恭": "gong", "龚": "gong", "供": "gong", "躬": "gong", "公": "gong", "宫": "gong", "弓": "gong", "巩": "gong", "汞": "gong", "拱": "gong", "贡": "gong", "共": "gong", "蕻": "gong", "廾": "gong", "咣": "gong", "珙": "gong", "肱": "gong", "蚣": "gong", "蛩": "gong", "觥": "gong", "篙": "gao", "皋": "gao", "高": "gao", "膏": "gao", "羔": "gao", "糕": "gao", "搞": "gao", "镐": "gao", "稿": "gao", "告": "gao", "睾": "gao", "诰": "gao", "郜": "gao", "蒿": "gao", "藁": "gao", "缟": "gao", "槔": "gao", "槁": "gao", "杲": "gao", "锆": "gao", "哥": "ge", "歌": "ge", "搁": "ge", "戈": "ge", "鸽": "ge", "胳": "ge", "疙": "ge", "割": "ge", "革": "ge", "葛": "ge", "格": "ge", "阁": "ge", "隔": "ge", "铬": "ge", "个": "ge", "各": "ge", "鬲": "ge", "仡": "ge", "哿": "ge", "塥": "ge", "嗝": "ge", "纥": "ge", "搿": "ge", "膈": "ge", "硌": "ge", "铪": "ge", "镉": "ge", "袼": "ge", "颌": "ge", "虼": "ge", "舸": "ge", "骼": "ge", "髂": "ge", "给": "gei", "根": "gen", "跟": "gen", "亘": "gen", "茛": "gen", "哏": "gen", "艮": "gen", "耕": "geng", "更": "geng", "庚": "geng", "羹": "geng", "埂": "geng", "耿": "geng", "梗": "geng", "哽": "geng", "赓": "geng", "鲠": "geng", "钩": "gou", "勾": "gou", "沟": "gou", "苟": "gou", "狗": "gou", "垢": "gou", "构": "gou", "购": "gou", "够": "gou", "佝": "gou", "诟": "gou", "岣": "gou", "遘": "gou", "媾": "gou", "缑": "gou", "觏": "gou", "彀": "gou", "鸲": "gou", "笱": "gou", "篝": "gou", "鞲": "gou", "辜": "gu", "菇": "gu", "咕": "gu", "箍": "gu", "估": "gu", "沽": "gu", "孤": "gu", "姑": "gu", "鼓": "gu", "古": "gu", "蛊": "gu", "骨": "gu", "谷": "gu", "股": "gu", "故": "gu", "顾": "gu", "固": "gu", "雇": "gu", "嘏": "gu", "诂": "gu", "菰": "gu", "哌": "gu", "崮": "gu", "汩": "gu", "梏": "gu", "轱": "gu", "牯": "gu", "牿": "gu", "胍": "gu", "臌": "gu", "毂": "gu", "瞽": "gu", "罟": "gu", "钴": "gu", "锢": "gu", "瓠": "gu", "鸪": "gu", "鹄": "gu", "痼": "gu", "蛄": "gu", "酤": "gu", "觚": "gu", "鲴": "gu", "骰": "gu", "鹘": "gu", "刮": "gua", "瓜": "gua", "剐": "gua", "寡": "gua", "挂": "gua", "褂": "gua", "卦": "gua", "诖": "gua", "呱": "gua", "栝": "gua", "鸹": "gua", "乖": "guai", "拐": "guai", "怪": "guai", "哙": "guai", "棺": "guan", "关": "guan", "官": "guan", "冠": "guan", "观": "guan", "管": "guan", "馆": "guan", "罐": "guan", "惯": "guan", "灌": "guan", "贯": "guan", "倌": "guan", "莞": "guan", "掼": "guan", "涫": "guan", "盥": "guan", "鹳": "guan", "鳏": "guan", "光": "guang", "广": "guang", "逛": "guang", "犷": "guang", "桄": "guang", "胱": "guang", "疒": "guang", "瑰": "gui", "规": "gui", "圭": "gui", "硅": "gui", "归": "gui", "龟": "gui", "闺": "gui", "轨": "gui", "鬼": "gui", "诡": "gui", "癸": "gui", "桂": "gui", "柜": "gui", "跪": "gui", "贵": "gui", "刽": "gui", "匦": "gui", "刿": "gui", "庋": "gui", "宄": "gui", "妫": "gui", "桧": "gui", "炅": "gui", "晷": "gui", "皈": "gui", "簋": "gui", "鲑": "gui", "鳜": "gui", "辊": "gun", "滚": "gun", "棍": "gun", "丨": "gun", "衮": "gun", "绲": "gun", "磙": "gun", "鲧": "gun", "锅": "guo", "郭": "guo", "国": "guo", "果": "guo", "裹": "guo", "过": "guo", "馘": "guo", "蠃": "guo", "埚": "guo", "掴": "guo", "呙": "guo", "囗": "guo", "帼": "guo", "崞": "guo", "猓": "guo", "椁": "guo", "虢": "guo", "锞": "guo", "聒": "guo", "蜮": "guo", "蜾": "guo", "蝈": "guo", "哈": "ha", "骸": "hai", "孩": "hai", "海": "hai", "氦": "hai", "亥": "hai", "害": "hai", "骇": "hai", "咴": "hai", "嗨": "hai", "颏": "hai", "醢": "hai", "酣": "han", "憨": "han", "邯": "han", "韩": "han", "含": "han", "涵": "han", "寒": "han", "函": "han", "喊": "han", "罕": "han", "翰": "han", "撼": "han", "捍": "han", "旱": "han", "憾": "han", "悍": "han", "焊": "han", "汗": "han", "汉": "han", "邗": "han", "菡": "han", "撖": "han", "阚": "han", "瀚": "han", "晗": "han", "焓": "han", "颔": "han", "蚶": "han", "鼾": "han", "夯": "hen", "痕": "hen", "很": "hen", "狠": "hen", "恨": "hen", "杭": "hang", "航": "hang", "沆": "hang", "绗": "hang", "珩": "hang", "桁": "hang", "壕": "hao", "嚎": "hao", "豪": "hao", "毫": "hao", "郝": "hao", "好": "hao", "耗": "hao", "号": "hao", "浩": "hao", "薅": "hao", "嗥": "hao", "嚆": "hao", "濠": "hao", "灏": "hao", "昊": "hao", "皓": "hao", "颢": "hao", "蚝": "hao", "呵": "he", "喝": "he", "荷": "he", "菏": "he", "核": "he", "禾": "he", "和": "he", "何": "he", "合": "he", "盒": "he", "貉": "he", "阂": "he", "河": "he", "涸": "he", "赫": "he", "褐": "he", "鹤": "he", "贺": "he", "诃": "he", "劾": "he", "壑": "he", "藿": "he", "嗑": "he", "嗬": "he", "阖": "he", "盍": "he", "蚵": "he", "翮": "he", "嘿": "hei", "黑": "hei", "哼": "heng", "亨": "heng", "横": "heng", "衡": "heng", "恒": "heng", "訇": "heng", "蘅": "heng", "轰": "hong", "哄": "hong", "烘": "hong", "虹": "hong", "鸿": "hong", "洪": "hong", "宏": "hong", "弘": "hong", "红": "hong", "黉": "hong", "讧": "hong", "荭": "hong", "薨": "hong", "闳": "hong", "泓": "hong", "喉": "hou", "侯": "hou", "猴": "hou", "吼": "hou", "厚": "hou", "候": "hou", "后": "hou", "堠": "hou", "後": "hou", "逅": "hou", "瘊": "hou", "篌": "hou", "糇": "hou", "鲎": "hou", "骺": "hou", "呼": "hu", "乎": "hu", "忽": "hu", "瑚": "hu", "壶": "hu", "葫": "hu", "胡": "hu", "蝴": "hu", "狐": "hu", "糊": "hu", "湖": "hu", "弧": "hu", "虎": "hu", "唬": "hu", "护": "hu", "互": "hu", "沪": "hu", "户": "hu", "冱": "hu", "唿": "hu", "囫": "hu", "岵": "hu", "猢": "hu", "怙": "hu", "惚": "hu", "浒": "hu", "滹": "hu", "琥": "hu", "槲": "hu", "轷": "hu", "觳": "hu", "烀": "hu", "煳": "hu", "戽": "hu", "扈": "hu", "祜": "hu", "鹕": "hu", "鹱": "hu", "笏": "hu", "醐": "hu", "斛": "hu", "花": "hua", "哗": "hua", "华": "hua", "猾": "hua", "滑": "hua", "画": "hua", "划": "hua", "化": "hua", "话": "hua", "劐": "hua", "浍": "hua", "骅": "hua", "桦": "hua", "铧": "hua", "稞": "hua", "槐": "huai", "徊": "huai", "怀": "huai", "淮": "huai", "坏": "huai", "还": "huai", "踝": "huai", "欢": "huan", "环": "huan", "桓": "huan", "缓": "huan", "换": "huan", "患": "huan", "唤": "huan", "痪": "huan", "豢": "huan", "焕": "huan", "涣": "huan", "宦": "huan", "幻": "huan", "郇": "huan", "奂": "huan", "垸": "huan", "擐": "huan", "圜": "huan", "洹": "huan", "浣": "huan", "漶": "huan", "寰": "huan", "逭": "huan", "缳": "huan", "锾": "huan", "鲩": "huan", "鬟": "huan", "荒": "huang", "慌": "huang", "黄": "huang", "磺": "huang", "蝗": "huang", "簧": "huang", "皇": "huang", "凰": "huang", "惶": "huang", "煌": "huang", "晃": "huang", "幌": "huang", "恍": "huang", "谎": "huang", "隍": "huang", "徨": "huang", "湟": "huang", "潢": "huang", "遑": "huang", "璜": "huang", "肓": "huang", "癀": "huang", "蟥": "huang", "篁": "huang", "鳇": "huang", "灰": "hui", "挥": "hui", "辉": "hui", "徽": "hui", "恢": "hui", "蛔": "hui", "回": "hui", "毁": "hui", "悔": "hui", "慧": "hui", "卉": "hui", "惠": "hui", "晦": "hui", "贿": "hui", "秽": "hui", "会": "hui", "烩": "hui", "汇": "hui", "讳": "hui", "诲": "hui", "绘": "hui", "诙": "hui", "茴": "hui", "荟": "hui", "蕙": "hui", "哕": "hui", "喙": "hui", "隳": "hui", "洄": "hui", "彗": "hui", "缋": "hui", "珲": "hui", "晖": "hui", "恚": "hui", "虺": "hui", "蟪": "hui", "麾": "hui", "荤": "hun", "昏": "hun", "婚": "hun", "魂": "hun", "浑": "hun", "混": "hun", "诨": "hun", "馄": "hun", "阍": "hun", "溷": "hun", "缗": "hun", "豁": "huo", "活": "huo", "伙": "huo", "火": "huo", "获": "huo", "或": "huo", "惑": "huo", "霍": "huo", "货": "huo", "祸": "huo", "攉": "huo", "嚯": "huo", "夥": "huo", "钬": "huo", "锪": "huo", "镬": "huo", "耠": "huo", "蠖": "huo", "击": "ji", "圾": "ji", "基": "ji", "机": "ji", "畸": "ji", "稽": "ji", "积": "ji", "箕": "ji", "肌": "ji", "饥": "ji", "迹": "ji", "激": "ji", "讥": "ji", "鸡": "ji", "姬": "ji", "绩": "ji", "缉": "ji", "吉": "ji", "极": "ji", "棘": "ji", "辑": "ji", "籍": "ji", "集": "ji", "及": "ji", "急": "ji", "疾": "ji", "汲": "ji", "即": "ji", "嫉": "ji", "级": "ji", "挤": "ji", "几": "ji", "脊": "ji", "己": "ji", "蓟": "ji", "技": "ji", "冀": "ji", "季": "ji", "伎": "ji", "祭": "ji", "剂": "ji", "悸": "ji", "济": "ji", "寄": "ji", "寂": "ji", "计": "ji", "记": "ji", "既": "ji", "忌": "ji", "际": "ji", "妓": "ji", "继": "ji", "纪": "ji", "居": "ji", "丌": "ji", "乩": "ji", "剞": "ji", "佶": "ji", "佴": "ji", "脔": "ji", "墼": "ji", "芨": "ji", "芰": "ji", "萁": "ji", "蒺": "ji", "蕺": "ji", "掎": "ji", "叽": "ji", "咭": "ji", "哜": "ji", "唧": "ji", "岌": "ji", "嵴": "ji", "洎": "ji", "彐": "ji", "屐": "ji", "骥": "ji", "畿": "ji", "玑": "ji", "楫": "ji", "殛": "ji", "戟": "ji", "戢": "ji", "赍": "ji", "觊": "ji", "犄": "ji", "齑": "ji", "矶": "ji", "羁": "ji", "嵇": "ji", "稷": "ji", "瘠": "ji", "瘵": "ji", "虮": "ji", "笈": "ji", "笄": "ji", "暨": "ji", "跻": "ji", "跽": "ji", "霁": "ji", "鲚": "ji", "鲫": "ji", "髻": "ji", "麂": "ji", "嘉": "jia", "枷": "jia", "夹": "jia", "佳": "jia", "家": "jia", "加": "jia", "荚": "jia", "颊": "jia", "贾": "jia", "甲": "jia", "钾": "jia", "假": "jia", "稼": "jia", "价": "jia", "架": "jia", "驾": "jia", "嫁": "jia", "伽": "jia", "郏": "jia", "拮": "jia", "岬": "jia", "浃": "jia", "迦": "jia", "珈": "jia", "戛": "jia", "胛": "jia", "恝": "jia", "铗": "jia", "镓": "jia", "痂": "jia", "蛱": "jia", "笳": "jia", "袈": "jia", "跏": "jia", "歼": "jian", "监": "jian", "坚": "jian", "尖": "jian", "笺": "jian", "间": "jian", "煎": "jian", "兼": "jian", "肩": "jian", "艰": "jian", "奸": "jian", "缄": "jian", "茧": "jian", "检": "jian", "柬": "jian", "碱": "jian", "硷": "jian", "拣": "jian", "捡": "jian", "简": "jian", "俭": "jian", "剪": "jian", "减": "jian", "荐": "jian", "槛": "jian", "鉴": "jian", "践": "jian", "贱": "jian", "见": "jian", "键": "jian", "箭": "jian", "件": "jian", "健": "jian", "舰": "jian", "剑": "jian", "饯": "jian", "渐": "jian", "溅": "jian", "涧": "jian", "建": "jian", "僭": "jian", "谏": "jian", "谫": "jian", "菅": "jian", "蒹": "jian", "搛": "jian", "囝": "jian", "湔": "jian", "蹇": "jian", "謇": "jian", "缣": "jian", "枧": "jian", "柙": "jian", "楗": "jian", "戋": "jian", "戬": "jian", "牮": "jian", "犍": "jian", "毽": "jian", "腱": "jian", "睑": "jian", "锏": "jian", "鹣": "jian", "裥": "jian", "笕": "jian", "箴": "jian", "翦": "jian", "趼": "jian", "踺": "jian", "鲣": "jian", "鞯": "jian", "僵": "jiang", "姜": "jiang", "将": "jiang", "浆": "jiang", "江": "jiang", "疆": "jiang", "蒋": "jiang", "桨": "jiang", "奖": "jiang", "讲": "jiang", "匠": "jiang", "酱": "jiang", "降": "jiang", "茳": "jiang", "洚": "jiang", "绛": "jiang", "缰": "jiang", "犟": "jiang", "礓": "jiang", "耩": "jiang", "糨": "jiang", "豇": "jiang", "蕉": "jiao", "椒": "jiao", "礁": "jiao", "焦": "jiao", "胶": "jiao", "交": "jiao", "郊": "jiao", "浇": "jiao", "骄": "jiao", "娇": "jiao", "嚼": "jiao", "搅": "jiao", "铰": "jiao", "矫": "jiao", "侥": "jiao", "脚": "jiao", "狡": "jiao", "角": "jiao", "饺": "jiao", "缴": "jiao", "绞": "jiao", "剿": "jiao", "教": "jiao", "酵": "jiao", "轿": "jiao", "较": "jiao", "叫": "jiao", "佼": "jiao", "僬": "jiao", "茭": "jiao", "挢": "jiao", "噍": "jiao", "峤": "jiao", "徼": "jiao", "姣": "jiao", "纟": "jiao", "敫": "jiao", "皎": "jiao", "鹪": "jiao", "蛟": "jiao", "醮": "jiao", "跤": "jiao", "鲛": "jiao", "窖": "jie", "揭": "jie", "接": "jie", "皆": "jie", "秸": "jie", "街": "jie", "阶": "jie", "截": "jie", "劫": "jie", "节": "jie", "桔": "jie", "杰": "jie", "捷": "jie", "睫": "jie", "竭": "jie", "洁": "jie", "结": "jie", "解": "jie", "姐": "jie", "戒": "jie", "藉": "jie", "芥": "jie", "界": "jie", "借": "jie", "介": "jie", "疥": "jie", "诫": "jie", "届": "jie", "偈": "jie", "讦": "jie", "诘": "jie", "喈": "jie", "嗟": "jie", "獬": "jie", "婕": "jie", "孑": "jie", "桀": "jie", "獒": "jie", "碣": "jie", "锴": "jie", "疖": "jie", "袷": "jie", "颉": "jie", "蚧": "jie", "羯": "jie", "鲒": "jie", "骱": "jie", "髫": "jie", "巾": "jin", "筋": "jin", "斤": "jin", "金": "jin", "今": "jin", "津": "jin", "襟": "jin", "紧": "jin", "锦": "jin", "仅": "jin", "谨": "jin", "进": "jin", "靳": "jin", "晋": "jin", "禁": "jin", "近": "jin", "烬": "jin", "浸": "jin", "尽": "jin", "卺": "jin", "荩": "jin", "堇": "jin", "噤": "jin", "馑": "jin", "廑": "jin", "妗": "jin", "缙": "jin", "瑾": "jin", "槿": "jin", "赆": "jin", "觐": "jin", "钅": "jin", "锓": "jin", "衿": "jin", "矜": "jin", "劲": "jing", "荆": "jing", "兢": "jing", "茎": "jing", "睛": "jing", "晶": "jing", "鲸": "jing", "京": "jing", "惊": "jing", "精": "jing", "粳": "jing", "经": "jing", "井": "jing", "警": "jing", "景": "jing", "颈": "jing", "静": "jing", "境": "jing", "敬": "jing", "镜": "jing", "径": "jing", "痉": "jing", "靖": "jing", "竟": "jing", "竞": "jing", "净": "jing", "刭": "jing", "儆": "jing", "阱": "jing", "菁": "jing", "獍": "jing", "憬": "jing", "泾": "jing", "迳": "jing", "弪": "jing", "婧": "jing", "肼": "jing", "胫": "jing", "腈": "jing", "旌": "jing", "炯": "jiong", "窘": "jiong", "冂": "jiong", "迥": "jiong", "扃": "jiong", "揪": "jiu", "究": "jiu", "纠": "jiu", "玖": "jiu", "韭": "jiu", "久": "jiu", "灸": "jiu", "九": "jiu", "酒": "jiu", "厩": "jiu", "救": "jiu", "旧": "jiu", "臼": "jiu", "舅": "jiu", "咎": "jiu", "就": "jiu", "疚": "jiu", "僦": "jiu", "啾": "jiu", "阄": "jiu", "柩": "jiu", "桕": "jiu", "鹫": "jiu", "赳": "jiu", "鬏": "jiu", "鞠": "ju", "拘": "ju", "狙": "ju", "疽": "ju", "驹": "ju", "菊": "ju", "局": "ju", "咀": "ju", "矩": "ju", "举": "ju", "沮": "ju", "聚": "ju", "拒": "ju", "据": "ju", "巨": "ju", "具": "ju", "距": "ju", "踞": "ju", "锯": "ju", "俱": "ju", "句": "ju", "惧": "ju", "炬": "ju", "剧": "ju", "倨": "ju", "讵": "ju", "苣": "ju", "苴": "ju", "莒": "ju", "掬": "ju", "遽": "ju", "屦": "ju", "琚": "ju", "枸": "ju", "椐": "ju", "榘": "ju", "榉": "ju", "橘": "ju", "犋": "ju", "飓": "ju", "钜": "ju", "锔": "ju", "窭": "ju", "裾": "ju", "趄": "ju", "醵": "ju", "踽": "ju", "龃": "ju", "雎": "ju", "鞫": "ju", "捐": "juan", "鹃": "juan", "娟": "juan", "倦": "juan", "眷": "juan", "卷": "juan", "绢": "juan", "鄄": "juan", "狷": "juan", "涓": "juan", "桊": "juan", "蠲": "juan", "锩": "juan", "镌": "juan", "隽": "juan", "撅": "jue", "攫": "jue", "抉": "jue", "掘": "jue", "倔": "jue", "爵": "jue", "觉": "jue", "决": "jue", "诀": "jue", "绝": "jue", "厥": "jue", "劂": "jue", "谲": "jue", "矍": "jue", "蕨": "jue", "噘": "jue", "崛": "jue", "獗": "jue", "孓": "jue", "珏": "jue", "桷": "jue", "橛": "jue", "爝": "jue", "镢": "jue", "蹶": "jue", "觖": "jue", "均": "jun", "菌": "jun", "钧": "jun", "军": "jun", "君": "jun", "峻": "jun", "俊": "jun", "竣": "jun", "浚": "jun", "郡": "jun", "骏": "jun", "捃": "jun", "狻": "jun", "皲": "jun", "筠": "jun", "麇": "jun", "喀": "ka", "咖": "ka", "卡": "ka", "佧": "ka", "咔": "ka", "胩": "ka", "咯": "ke", "坷": "ke", "苛": "ke", "柯": "ke", "棵": "ke", "磕": "ke", "颗": "ke", "科": "ke", "壳": "ke", "咳": "ke", "可": "ke", "渴": "ke", "克": "ke", "刻": "ke", "客": "ke", "课": "ke", "岢": "ke", "恪": "ke", "溘": "ke", "骒": "ke", "缂": "ke", "珂": "ke", "轲": "ke", "氪": "ke", "瞌": "ke", "钶": "ke", "疴": "ke", "窠": "ke", "蝌": "ke", "髁": "ke", "开": "kai", "揩": "kai", "楷": "kai", "凯": "kai", "慨": "kai", "剀": "kai", "垲": "kai", "蒈": "kai", "忾": "kai", "恺": "kai", "铠": "kai", "锎": "kai", "刊": "kan", "堪": "kan", "勘": "kan", "坎": "kan", "砍": "kan", "看": "kan", "侃": "kan", "凵": "kan", "莰": "kan", "莶": "kan", "戡": "kan", "龛": "kan", "瞰": "kan", "康": "kang", "慷": "kang", "糠": "kang", "扛": "kang", "抗": "kang", "亢": "kang", "炕": "kang", "坑": "kang", "伉": "kang", "闶": "kang", "钪": "kang", "考": "kao", "拷": "kao", "烤": "kao", "靠": "kao", "尻": "kao", "栲": "kao", "犒": "kao", "铐": "kao", "肯": "ken", "啃": "ken", "垦": "ken", "恳": "ken", "垠": "ken", "裉": "ken", "颀": "ken", "吭": "keng", "忐": "keng", "铿": "keng", "空": "kong", "恐": "kong", "孔": "kong", "控": "kong", "倥": "kong", "崆": "kong", "箜": "kong", "抠": "kou", "口": "kou", "扣": "kou", "寇": "kou", "芤": "kou", "蔻": "kou", "叩": "kou", "眍": "kou", "筘": "kou", "枯": "ku", "哭": "ku", "窟": "ku", "苦": "ku", "酷": "ku", "库": "ku", "裤": "ku", "刳": "ku", "堀": "ku", "喾": "ku", "绔": "ku", "骷": "ku", "夸": "kua", "垮": "kua", "挎": "kua", "跨": "kua", "胯": "kua", "侉": "kua", "块": "kuai", "筷": "kuai", "侩": "kuai", "快": "kuai", "蒯": "kuai", "郐": "kuai", "蒉": "kuai", "狯": "kuai", "脍": "kuai", "宽": "kuan", "款": "kuan", "髋": "kuan", "匡": "kuang", "筐": "kuang", "狂": "kuang", "框": "kuang", "矿": "kuang", "眶": "kuang", "旷": "kuang", "况": "kuang", "诓": "kuang", "诳": "kuang", "邝": "kuang", "圹": "kuang", "夼": "kuang", "哐": "kuang", "纩": "kuang", "贶": "kuang", "亏": "kui", "盔": "kui", "岿": "kui", "窥": "kui", "葵": "kui", "奎": "kui", "魁": "kui", "傀": "kui", "馈": "kui", "愧": "kui", "溃": "kui", "馗": "kui", "匮": "kui", "夔": "kui", "隗": "kui", "揆": "kui", "喹": "kui", "喟": "kui", "悝": "kui", "愦": "kui", "阕": "kui", "逵": "kui", "暌": "kui", "睽": "kui", "聩": "kui", "蝰": "kui", "篑": "kui", "臾": "kui", "跬": "kui", "坤": "kun", "昆": "kun", "捆": "kun", "困": "kun", "悃": "kun", "阃": "kun", "琨": "kun", "锟": "kun", "醌": "kun", "鲲": "kun", "髡": "kun", "括": "kuo", "扩": "kuo", "廓": "kuo", "阔": "kuo", "蛞": "kuo", "垃": "la", "拉": "la", "喇": "la", "蜡": "la", "腊": "la", "辣": "la", "啦": "la", "剌": "la", "摺": "la", "邋": "la", "旯": "la", "砬": "la", "瘌": "la", "莱": "lai", "来": "lai", "赖": "lai", "崃": "lai", "徕": "lai", "涞": "lai", "濑": "lai", "赉": "lai", "睐": "lai", "铼": "lai", "癞": "lai", "籁": "lai", "蓝": "lan", "婪": "lan", "栏": "lan", "拦": "lan", "篮": "lan", "阑": "lan", "兰": "lan", "澜": "lan", "谰": "lan", "揽": "lan", "览": "lan", "懒": "lan", "缆": "lan", "烂": "lan", "滥": "lan", "啉": "lan", "岚": "lan", "懔": "lan", "漤": "lan", "榄": "lan", "斓": "lan", "罱": "lan", "镧": "lan", "褴": "lan", "琅": "lang", "榔": "lang", "狼": "lang", "廊": "lang", "郎": "lang", "朗": "lang", "浪": "lang", "莨": "lang", "蒗": "lang", "啷": "lang", "阆": "lang", "锒": "lang", "稂": "lang", "螂": "lang", "捞": "lao", "劳": "lao", "牢": "lao", "老": "lao", "佬": "lao", "姥": "lao", "酪": "lao", "烙": "lao", "涝": "lao", "唠": "lao", "崂": "lao", "栳": "lao", "铑": "lao", "铹": "lao", "痨": "lao", "醪": "lao", "勒": "le", "乐": "le", "肋": "le", "仂": "le", "叻": "le", "嘞": "le", "泐": "le", "鳓": "le", "雷": "lei", "镭": "lei", "蕾": "lei", "磊": "lei", "累": "lei", "儡": "lei", "垒": "lei", "擂": "lei", "类": "lei", "泪": "lei", "羸": "lei", "诔": "lei", "荽": "lei", "咧": "lei", "漯": "lei", "嫘": "lei", "缧": "lei", "檑": "lei", "耒": "lei", "酹": "lei", "棱": "ling", "冷": "ling", "拎": "ling", "玲": "ling", "菱": "ling", "零": "ling", "龄": "ling", "铃": "ling", "伶": "ling", "羚": "ling", "凌": "ling", "灵": "ling", "陵": "ling", "岭": "ling", "领": "ling", "另": "ling", "令": "ling", "酃": "ling", "塄": "ling", "苓": "ling", "呤": "ling", "囹": "ling", "泠": "ling", "绫": "ling", "柃": "ling", "棂": "ling", "瓴": "ling", "聆": "ling", "蛉": "ling", "翎": "ling", "鲮": "ling", "楞": "leng", "愣": "leng", "厘": "li", "梨": "li", "犁": "li", "黎": "li", "篱": "li", "狸": "li", "离": "li", "漓": "li", "理": "li", "李": "li", "里": "li", "鲤": "li", "礼": "li", "莉": "li", "荔": "li", "吏": "li", "栗": "li", "丽": "li", "厉": "li", "励": "li", "砾": "li", "历": "li", "利": "li", "傈": "li", "例": "li", "俐": "li", "痢": "li", "立": "li", "粒": "li", "沥": "li", "隶": "li", "力": "li", "璃": "li", "哩": "li", "俪": "li", "俚": "li", "郦": "li", "坜": "li", "苈": "li", "莅": "li", "蓠": "li", "藜": "li", "捩": "li", "呖": "li", "唳": "li", "喱": "li", "猁": "li", "溧": "li", "澧": "li", "逦": "li", "娌": "li", "嫠": "li", "骊": "li", "缡": "li", "珞": "li", "枥": "li", "栎": "li", "轹": "li", "戾": "li", "砺": "li", "詈": "li", "罹": "li", "锂": "li", "鹂": "li", "疠": "li", "疬": "li", "蛎": "li", "蜊": "li", "蠡": "li", "笠": "li", "篥": "li", "粝": "li", "醴": "li", "跞": "li", "雳": "li", "鲡": "li", "鳢": "li", "黧": "li", "俩": "lian", "联": "lian", "莲": "lian", "连": "lian", "镰": "lian", "廉": "lian", "怜": "lian", "涟": "lian", "帘": "lian", "敛": "lian", "脸": "lian", "链": "lian", "恋": "lian", "炼": "lian", "练": "lian", "挛": "lian", "蔹": "lian", "奁": "lian", "潋": "lian", "濂": "lian", "娈": "lian", "琏": "lian", "楝": "lian", "殓": "lian", "臁": "lian", "膦": "lian", "裢": "lian", "蠊": "lian", "鲢": "lian", "粮": "liang", "凉": "liang", "梁": "liang", "粱": "liang", "良": "liang", "两": "liang", "辆": "liang", "量": "liang", "晾": "liang", "亮": "liang", "谅": "liang", "墚": "liang", "椋": "liang", "踉": "liang", "靓": "liang", "魉": "liang", "撩": "liao", "聊": "liao", "僚": "liao", "疗": "liao", "燎": "liao", "寥": "liao", "辽": "liao", "潦": "liao", "了": "liao", "撂": "liao", "镣": "liao", "廖": "liao", "料": "liao", "蓼": "liao", "尥": "liao", "嘹": "liao", "獠": "liao", "寮": "liao", "缭": "liao", "钌": "liao", "鹩": "liao", "耢": "liao", "列": "lie", "裂": "lie", "烈": "lie", "劣": "lie", "猎": "lie", "冽": "lie", "埒": "lie", "洌": "lie", "趔": "lie", "躐": "lie", "鬣": "lie", "琳": "lin", "林": "lin", "磷": "lin", "霖": "lin", "临": "lin", "邻": "lin", "鳞": "lin", "淋": "lin", "凛": "lin", "赁": "lin", "吝": "lin", "蔺": "lin", "嶙": "lin", "廪": "lin", "遴": "lin", "檩": "lin", "辚": "lin", "瞵": "lin", "粼": "lin", "躏": "lin", "麟": "lin", "溜": "liu", "琉": "liu", "榴": "liu", "硫": "liu", "馏": "liu", "留": "liu", "刘": "liu", "瘤": "liu", "流": "liu", "柳": "liu", "六": "liu", "抡": "liu", "偻": "liu", "蒌": "liu", "泖": "liu", "浏": "liu", "遛": "liu", "骝": "liu", "绺": "liu", "旒": "liu", "熘": "liu", "锍": "liu", "镏": "liu", "鹨": "liu", "鎏": "liu", "龙": "long", "聋": "long", "咙": "long", "笼": "long", "窿": "long", "隆": "long", "垄": "long", "拢": "long", "陇": "long", "弄": "long", "垅": "long", "茏": "long", "泷": "long", "珑": "long", "栊": "long", "胧": "long", "砻": "long", "癃": "long", "楼": "lou", "娄": "lou", "搂": "lou", "篓": "lou", "漏": "lou", "陋": "lou", "喽": "lou", "嵝": "lou", "镂": "lou", "瘘": "lou", "耧": "lou", "蝼": "lou", "髅": "lou", "芦": "lu", "卢": "lu", "颅": "lu", "庐": "lu", "炉": "lu", "掳": "lu", "卤": "lu", "虏": "lu", "鲁": "lu", "麓": "lu", "碌": "lu", "露": "lu", "路": "lu", "赂": "lu", "鹿": "lu", "潞": "lu", "禄": "lu", "录": "lu", "陆": "lu", "戮": "lu", "垆": "lu", "摅": "lu", "撸": "lu", "噜": "lu", "泸": "lu", "渌": "lu", "漉": "lu", "璐": "lu", "栌": "lu", "橹": "lu", "轳": "lu", "辂": "lu", "辘": "lu", "氇": "lu", "胪": "lu", "镥": "lu", "鸬": "lu", "鹭": "lu", "簏": "lu", "舻": "lu", "鲈": "lu", "驴": "lv", "吕": "lv", "铝": "lv", "侣": "lv", "旅": "lv", "履": "lv", "屡": "lv", "缕": "lv", "虑": "lv", "氯": "lv", "律": "lv", "率": "lv", "滤": "lv", "绿": "lv", "捋": "lv", "闾": "lv", "榈": "lv", "膂": "lv", "稆": "lv", "褛": "lv", "峦": "luan", "孪": "luan", "滦": "luan", "卵": "luan", "乱": "luan", "栾": "luan", "鸾": "luan", "銮": "luan", "掠": "lue", "略": "lue", "锊": "lue", "轮": "lun", "伦": "lun", "仑": "lun", "沦": "lun", "纶": "lun", "论": "lun", "囵": "lun", "萝": "luo", "螺": "luo", "罗": "luo", "逻": "luo", "锣": "luo", "箩": "luo", "骡": "luo", "裸": "luo", "落": "luo", "洛": "luo", "骆": "luo", "络": "luo", "倮": "luo", "荦": "luo", "摞": "luo", "猡": "luo", "泺": "luo", "椤": "luo", "脶": "luo", "镙": "luo", "瘰": "luo", "雒": "luo", "妈": "ma", "麻": "ma", "玛": "ma", "码": "ma", "蚂": "ma", "马": "ma", "骂": "ma", "嘛": "ma", "吗": "ma", "唛": "ma", "犸": "ma", "嬷": "ma", "杩": "ma", "麽": "ma", "埋": "mai", "买": "mai", "麦": "mai", "卖": "mai", "迈": "mai", "脉": "mai", "劢": "mai", "荬": "mai", "咪": "mai", "霾": "mai", "瞒": "man", "馒": "man", "蛮": "man", "满": "man", "蔓": "man", "曼": "man", "慢": "man", "漫": "man", "谩": "man", "墁": "man", "幔": "man", "缦": "man", "熳": "man", "镘": "man", "颟": "man", "螨": "man", "鳗": "man", "鞔": "man", "芒": "mang", "茫": "mang", "盲": "mang", "忙": "mang", "莽": "mang", "邙": "mang", "漭": "mang", "朦": "mang", "硭": "mang", "蟒": "mang", "氓": "meng", "萌": "meng", "蒙": "meng", "檬": "meng", "盟": "meng", "锰": "meng", "猛": "meng", "梦": "meng", "孟": "meng", "勐": "meng", "甍": "meng", "瞢": "meng", "懵": "meng", "礞": "meng", "虻": "meng", "蜢": "meng", "蠓": "meng", "艋": "meng", "艨": "meng", "黾": "meng", "猫": "miao", "苗": "miao", "描": "miao", "瞄": "miao", "藐": "miao", "秒": "miao", "渺": "miao", "庙": "miao", "妙": "miao", "喵": "miao", "邈": "miao", "缈": "miao", "缪": "miao", "杪": "miao", "淼": "miao", "眇": "miao", "鹋": "miao", "蜱": "miao", "茅": "mao", "锚": "mao", "毛": "mao", "矛": "mao", "铆": "mao", "卯": "mao", "茂": "mao", "冒": "mao", "帽": "mao", "貌": "mao", "贸": "mao", "侔": "mao", "袤": "mao", "勖": "mao", "茆": "mao", "峁": "mao", "瑁": "mao", "昴": "mao", "牦": "mao", "耄": "mao", "旄": "mao", "懋": "mao", "瞀": "mao", "蛑": "mao", "蝥": "mao", "蟊": "mao", "髦": "mao", "么": "me", "玫": "mei", "枚": "mei", "梅": "mei", "酶": "mei", "霉": "mei", "煤": "mei", "没": "mei", "眉": "mei", "媒": "mei", "镁": "mei", "每": "mei", "美": "mei", "昧": "mei", "寐": "mei", "妹": "mei", "媚": "mei", "坶": "mei", "莓": "mei", "嵋": "mei", "猸": "mei", "浼": "mei", "湄": "mei", "楣": "mei", "镅": "mei", "鹛": "mei", "袂": "mei", "魅": "mei", "门": "men", "闷": "men", "们": "men", "扪": "men", "玟": "men", "焖": "men", "懑": "men", "钔": "men", "眯": "mi", "醚": "mi", "靡": "mi", "糜": "mi", "迷": "mi", "谜": "mi", "弥": "mi", "米": "mi", "秘": "mi", "觅": "mi", "泌": "mi", "蜜": "mi", "密": "mi", "幂": "mi", "芈": "mi", "冖": "mi", "谧": "mi", "蘼": "mi", "嘧": "mi", "猕": "mi", "獯": "mi", "汨": "mi", "宓": "mi", "弭": "mi", "脒": "mi", "敉": "mi", "糸": "mi", "縻": "mi", "麋": "mi", "棉": "mian", "眠": "mian", "绵": "mian", "冕": "mian", "免": "mian", "勉": "mian", "娩": "mian", "缅": "mian", "面": "mian", "沔": "mian", "湎": "mian", "腼": "mian", "眄": "mian", "蔑": "mie", "灭": "mie", "咩": "mie", "蠛": "mie", "篾": "mie", "民": "min", "抿": "min", "皿": "min", "敏": "min", "悯": "min", "闽": "min", "苠": "min", "岷": "min", "闵": "min", "泯": "min", "珉": "min", "明": "ming", "螟": "ming", "鸣": "ming", "铭": "ming", "名": "ming", "命": "ming", "冥": "ming", "茗": "ming", "溟": "ming", "暝": "ming", "瞑": "ming", "酩": "ming", "谬": "miu", "摸": "mo", "摹": "mo", "蘑": "mo", "模": "mo", "膜": "mo", "磨": "mo", "摩": "mo", "魔": "mo", "抹": "mo", "末": "mo", "莫": "mo", "墨": "mo", "默": "mo", "沫": "mo", "漠": "mo", "寞": "mo", "陌": "mo", "谟": "mo", "茉": "mo", "蓦": "mo", "馍": "mo", "嫫": "mo", "镆": "mo", "秣": "mo", "瘼": "mo", "耱": "mo", "蟆": "mo", "貊": "mo", "貘": "mo", "谋": "mou", "牟": "mou", "某": "mou", "厶": "mou", "哞": "mou", "婺": "mou", "眸": "mou", "鍪": "mou", "拇": "mu", "牡": "mu", "亩": "mu", "姆": "mu", "母": "mu", "墓": "mu", "暮": "mu", "幕": "mu", "募": "mu", "慕": "mu", "木": "mu", "目": "mu", "睦": "mu", "牧": "mu", "穆": "mu", "仫": "mu", "苜": "mu", "呒": "mu", "沐": "mu", "毪": "mu", "钼": "mu", "拿": "na", "哪": "na", "呐": "na", "钠": "na", "那": "na", "娜": "na", "纳": "na", "内": "na", "捺": "na", "肭": "na", "镎": "na", "衲": "na", "箬": "na", "氖": "nai", "乃": "nai", "奶": "nai", "耐": "nai", "奈": "nai", "鼐": "nai", "艿": "nai", "萘": "nai", "柰": "nai", "南": "nan", "男": "nan", "难": "nan", "囊": "nan", "喃": "nan", "囡": "nan", "楠": "nan", "腩": "nan", "蝻": "nan", "赧": "nan", "挠": "nao", "脑": "nao", "恼": "nao", "闹": "nao", "孬": "nao", "垴": "nao", "猱": "nao", "瑙": "nao", "硇": "nao", "铙": "nao", "蛲": "nao", "淖": "ne", "呢": "ne", "讷": "ne", "馁": "nei", "嫩": "nen", "能": "nen", "枘": "nen", "恁": "nen", "妮": "ni", "霓": "ni", "倪": "ni", "泥": "ni", "尼": "ni", "拟": "ni", "你": "ni", "匿": "ni", "腻": "ni", "逆": "ni", "溺": "ni", "伲": "ni", "坭": "ni", "猊": "ni", "怩": "ni", "滠": "ni", "昵": "ni", "旎": "ni", "祢": "ni", "慝": "ni", "睨": "ni", "铌": "ni", "鲵": "ni", "蔫": "nian", "拈": "nian", "年": "nian", "碾": "nian", "撵": "nian", "捻": "nian", "念": "nian", "廿": "nian", "辇": "nian", "黏": "nian", "鲇": "nian", "鲶": "nian", "娘": "niang", "酿": "niang", "鸟": "niao", "尿": "niao", "茑": "niao", "嬲": "niao", "脲": "niao", "袅": "niao", "捏": "nie", "聂": "nie", "孽": "nie", "啮": "nie", "镊": "nie", "镍": "nie", "涅": "nie", "乜": "nie", "陧": "nie", "蘖": "nie", "嗫": "nie", "肀": "nie", "颞": "nie", "臬": "nie", "蹑": "nie", "您": "nin", "柠": "nin", "狞": "ning", "凝": "ning", "宁": "ning", "拧": "ning", "泞": "ning", "佞": "ning", "蓥": "ning", "咛": "ning", "甯": "ning", "聍": "ning", "牛": "niu", "扭": "niu", "钮": "niu", "纽": "niu", "狃": "niu", "忸": "niu", "妞": "niu", "蚴": "niu", "脓": "nong", "浓": "nong", "农": "nong", "侬": "nong", "奴": "nu", "努": "nu", "怒": "nu", "呶": "nu", "帑": "nu", "弩": "nu", "胬": "nu", "孥": "nu", "驽": "nu", "女": "nv", "恧": "nv", "钕": "nv", "衄": "nv", "暖": "nuan", "虐": "nuenue", "疟": "nue", "谑": "nue", "挪": "nuo", "懦": "nuo", "糯": "nuo", "诺": "nuo", "傩": "nuo", "搦": "nuo", "喏": "nuo", "锘": "nuo", "哦": "ou", "欧": "ou", "鸥": "ou", "殴": "ou", "藕": "ou", "呕": "ou", "偶": "ou", "沤": "ou", "怄": "ou", "瓯": "ou", "耦": "ou", "啪": "pa", "趴": "pa", "爬": "pa", "帕": "pa", "怕": "pa", "琶": "pa", "葩": "pa", "筢": "pa", "拍": "pai", "排": "pai", "牌": "pai", "徘": "pai", "湃": "pai", "派": "pai", "俳": "pai", "蒎": "pai", "攀": "pan", "潘": "pan", "盘": "pan", "磐": "pan", "盼": "pan", "畔": "pan", "判": "pan", "叛": "pan", "爿": "pan", "泮": "pan", "袢": "pan", "襻": "pan", "蟠": "pan", "蹒": "pan", "乓": "pang", "庞": "pang", "旁": "pang", "耪": "pang", "胖": "pang", "滂": "pang", "逄": "pang", "抛": "pao", "咆": "pao", "刨": "pao", "炮": "pao", "袍": "pao", "跑": "pao", "泡": "pao", "匏": "pao", "狍": "pao", "庖": "pao", "脬": "pao", "疱": "pao", "呸": "pei", "胚": "pei", "培": "pei", "裴": "pei", "赔": "pei", "陪": "pei", "配": "pei", "佩": "pei", "沛": "pei", "掊": "pei", "辔": "pei", "帔": "pei", "淠": "pei", "旆": "pei", "锫": "pei", "醅": "pei", "霈": "pei", "喷": "pen", "盆": "pen", "湓": "pen", "砰": "peng", "抨": "peng", "烹": "peng", "澎": "peng", "彭": "peng", "蓬": "peng", "棚": "peng", "硼": "peng", "篷": "peng", "膨": "peng", "朋": "peng", "鹏": "peng", "捧": "peng", "碰": "peng", "坯": "peng", "堋": "peng", "嘭": "peng", "怦": "peng", "蟛": "peng", "砒": "pi", "霹": "pi", "批": "pi", "披": "pi", "劈": "pi", "琵": "pi", "毗": "pi", "啤": "pi", "脾": "pi", "疲": "pi", "皮": "pi", "匹": "pi", "痞": "pi", "僻": "pi", "屁": "pi", "譬": "pi", "丕": "pi", "陴": "pi", "邳": "pi", "郫": "pi", "圮": "pi", "鼙": "pi", "擗": "pi", "噼": "pi", "庀": "pi", "媲": "pi", "纰": "pi", "枇": "pi", "甓": "pi", "睥": "pi", "罴": "pi", "铍": "pi", "痦": "pi", "癖": "pi", "疋": "pi", "蚍": "pi", "貔": "pi", "篇": "pian", "偏": "pian", "片": "pian", "骗": "pian", "谝": "pian", "骈": "pian", "犏": "pian", "胼": "pian", "褊": "pian", "翩": "pian", "蹁": "pian", "飘": "piao", "漂": "piao", "瓢": "piao", "票": "piao", "剽": "piao", "嘌": "piao", "嫖": "piao", "缥": "piao", "殍": "piao", "瞟": "piao", "螵": "piao", "撇": "pie", "瞥": "pie", "丿": "pie", "苤": "pie", "氕": "pie", "拼": "pin", "频": "pin", "贫": "pin", "品": "pin", "聘": "pin", "拚": "pin", "姘": "pin", "嫔": "pin", "榀": "pin", "牝": "pin", "颦": "pin", "乒": "ping", "坪": "ping", "苹": "ping", "萍": "ping", "平": "ping", "凭": "ping", "瓶": "ping", "评": "ping", "屏": "ping", "俜": "ping", "娉": "ping", "枰": "ping", "鲆": "ping", "坡": "po", "泼": "po", "颇": "po", "婆": "po", "破": "po", "魄": "po", "迫": "po", "粕": "po", "叵": "po", "鄱": "po", "溥": "po", "珀": "po", "钋": "po", "钷": "po", "皤": "po", "笸": "po", "剖": "pou", "裒": "pou", "踣": "pou", "扑": "pu", "铺": "pu", "仆": "pu", "莆": "pu", "葡": "pu", "菩": "pu", "蒲": "pu", "埔": "pu", "朴": "pu", "圃": "pu", "普": "pu", "浦": "pu", "谱": "pu", "曝": "pu", "瀑": "pu", "匍": "pu", "噗": "pu", "濮": "pu", "璞": "pu", "氆": "pu", "镤": "pu", "镨": "pu", "蹼": "pu", "期": "qi", "欺": "qi", "栖": "qi", "戚": "qi", "妻": "qi", "七": "qi", "凄": "qi", "漆": "qi", "柒": "qi", "沏": "qi", "其": "qi", "棋": "qi", "奇": "qi", "歧": "qi", "畦": "qi", "崎": "qi", "脐": "qi", "齐": "qi", "旗": "qi", "祈": "qi", "祁": "qi", "骑": "qi", "起": "qi", "岂": "qi", "乞": "qi", "企": "qi", "启": "qi", "契": "qi", "砌": "qi", "器": "qi", "气": "qi", "迄": "qi", "弃": "qi", "汽": "qi", "泣": "qi", "讫": "qi", "亟": "qi", "亓": "qi", "圻": "qi", "芑": "qi", "萋": "qi", "葺": "qi", "嘁": "qi", "屺": "qi", "岐": "qi", "汔": "qi", "淇": "qi", "骐": "qi", "绮": "qi", "琪": "qi", "琦": "qi", "杞": "qi", "桤": "qi", "槭": "qi", "欹": "qi", "祺": "qi", "憩": "qi", "碛": "qi", "蛴": "qi", "蜞": "qi", "綦": "qi", "綮": "qi", "趿": "qi", "蹊": "qi", "鳍": "qi", "麒": "qi", "掐": "qia", "恰": "qia", "洽": "qia", "葜": "qia", "牵": "qian", "扦": "qian", "钎": "qian", "铅": "qian", "千": "qian", "迁": "qian", "签": "qian", "仟": "qian", "谦": "qian", "乾": "qian", "黔": "qian", "钱": "qian", "钳": "qian", "前": "qian", "潜": "qian", "遣": "qian", "浅": "qian", "谴": "qian", "堑": "qian", "嵌": "qian", "欠": "qian", "歉": "qian", "佥": "qian", "阡": "qian", "芊": "qian", "芡": "qian", "荨": "qian", "掮": "qian", "岍": "qian", "悭": "qian", "慊": "qian", "骞": "qian", "搴": "qian", "褰": "qian", "缱": "qian", "椠": "qian", "肷": "qian", "愆": "qian", "钤": "qian", "虔": "qian", "箝": "qian", "枪": "qiang", "呛": "qiang", "腔": "qiang", "羌": "qiang", "墙": "qiang", "蔷": "qiang", "强": "qiang", "抢": "qiang", "嫱": "qiang", "樯": "qiang", "戗": "qiang", "炝": "qiang", "锖": "qiang", "锵": "qiang", "镪": "qiang", "襁": "qiang", "蜣": "qiang", "羟": "qiang", "跫": "qiang", "跄": "qiang", "橇": "qiao", "锹": "qiao", "敲": "qiao", "悄": "qiao", "桥": "qiao", "瞧": "qiao", "乔": "qiao", "侨": "qiao", "巧": "qiao", "鞘": "qiao", "撬": "qiao", "翘": "qiao", "峭": "qiao", "俏": "qiao", "窍": "qiao", "劁": "qiao", "诮": "qiao", "谯": "qiao", "荞": "qiao", "愀": "qiao", "憔": "qiao", "缲": "qiao", "樵": "qiao", "毳": "qiao", "硗": "qiao", "跷": "qiao", "鞒": "qiao", "切": "qie", "茄": "qie", "且": "qie", "怯": "qie", "窃": "qie", "郄": "qie", "唼": "qie", "惬": "qie", "妾": "qie", "挈": "qie", "锲": "qie", "箧": "qie", "钦": "qin", "侵": "qin", "亲": "qin", "秦": "qin", "琴": "qin", "勤": "qin", "芹": "qin", "擒": "qin", "禽": "qin", "寝": "qin", "沁": "qin", "芩": "qin", "蓁": "qin", "蕲": "qin", "揿": "qin", "吣": "qin", "嗪": "qin", "噙": "qin", "溱": "qin", "檎": "qin", "螓": "qin", "衾": "qin", "青": "qing", "轻": "qing", "氢": "qing", "倾": "qing", "卿": "qing", "清": "qing", "擎": "qing", "晴": "qing", "氰": "qing", "情": "qing", "顷": "qing", "请": "qing", "庆": "qing", "倩": "qing", "苘": "qing", "圊": "qing", "檠": "qing", "磬": "qing", "蜻": "qing", "罄": "qing", "箐": "qing", "謦": "qing", "鲭": "qing", "黥": "qing", "琼": "qiong", "穷": "qiong", "邛": "qiong", "茕": "qiong", "穹": "qiong", "筇": "qiong", "銎": "qiong", "秋": "qiu", "丘": "qiu", "邱": "qiu", "球": "qiu", "求": "qiu", "囚": "qiu", "酋": "qiu", "泅": "qiu", "俅": "qiu", "氽": "qiu", "巯": "qiu", "艽": "qiu", "犰": "qiu", "湫": "qiu", "逑": "qiu", "遒": "qiu", "楸": "qiu", "赇": "qiu", "鸠": "qiu", "虬": "qiu", "蚯": "qiu", "蝤": "qiu", "裘": "qiu", "糗": "qiu", "鳅": "qiu", "鼽": "qiu", "趋": "qu", "区": "qu", "蛆": "qu", "曲": "qu", "躯": "qu", "屈": "qu", "驱": "qu", "渠": "qu", "取": "qu", "娶": "qu", "龋": "qu", "趣": "qu", "去": "qu", "诎": "qu", "劬": "qu", "蕖": "qu", "蘧": "qu", "岖": "qu", "衢": "qu", "阒": "qu", "璩": "qu", "觑": "qu", "氍": "qu", "祛": "qu", "磲": "qu", "癯": "qu", "蛐": "qu", "蠼": "qu", "麴": "qu", "瞿": "qu", "黢": "qu", "圈": "quan", "颧": "quan", "权": "quan", "醛": "quan", "泉": "quan", "全": "quan", "痊": "quan", "拳": "quan", "犬": "quan", "券": "quan", "劝": "quan", "诠": "quan", "荃": "quan", "獾": "quan", "悛": "quan", "绻": "quan", "辁": "quan", "畎": "quan", "铨": "quan", "蜷": "quan", "筌": "quan", "鬈": "quan", "缺": "que", "炔": "que", "瘸": "que", "却": "que", "鹊": "que", "榷": "que", "确": "que", "雀": "que", "阙": "que", "悫": "que", "裙": "qun", "群": "qun", "逡": "qun", "然": "ran", "燃": "ran", "冉": "ran", "染": "ran", "苒": "ran", "髯": "ran", "瓤": "rang", "壤": "rang", "攘": "rang", "嚷": "rang", "让": "rang", "禳": "rang", "穰": "rang", "饶": "rao", "扰": "rao", "绕": "rao", "荛": "rao", "娆": "rao", "桡": "rao", "惹": "ruo", "若": "ruo", "弱": "ruo", "热": "re", "偌": "re", "壬": "ren", "仁": "ren", "人": "ren", "忍": "ren", "韧": "ren", "任": "ren", "认": "ren", "刃": "ren", "妊": "ren", "纫": "ren", "仞": "ren", "荏": "ren", "葚": "ren", "饪": "ren", "轫": "ren", "稔": "ren", "衽": "ren", "扔": "reng", "仍": "reng", "日": "ri", "戎": "rong", "茸": "rong", "蓉": "rong", "荣": "rong", "融": "rong", "熔": "rong", "溶": "rong", "容": "rong", "绒": "rong", "冗": "rong", "嵘": "rong", "狨": "rong", "缛": "rong", "榕": "rong", "蝾": "rong", "揉": "rou", "柔": "rou", "肉": "rou", "糅": "rou", "蹂": "rou", "鞣": "rou", "茹": "ru", "蠕": "ru", "儒": "ru", "孺": "ru", "如": "ru", "辱": "ru", "乳": "ru", "汝": "ru", "入": "ru", "褥": "ru", "蓐": "ru", "薷": "ru", "嚅": "ru", "洳": "ru", "溽": "ru", "濡": "ru", "铷": "ru", "襦": "ru", "颥": "ru", "软": "ruan", "阮": "ruan", "朊": "ruan", "蕊": "rui", "瑞": "rui", "锐": "rui", "芮": "rui", "蕤": "rui", "睿": "rui", "蚋": "rui", "闰": "run", "润": "run", "撒": "sa", "洒": "sa", "萨": "sa", "卅": "sa", "仨": "sa", "挲": "sa", "飒": "sa", "腮": "sai", "鳃": "sai", "塞": "sai", "赛": "sai", "噻": "sai", "三": "san", "叁": "san", "伞": "san", "散": "san", "彡": "san", "馓": "san", "氵": "san", "毵": "san", "糁": "san", "霰": "san", "桑": "sang", "嗓": "sang", "丧": "sang", "搡": "sang", "磉": "sang", "颡": "sang", "搔": "sao", "骚": "sao", "扫": "sao", "嫂": "sao", "埽": "sao", "臊": "sao", "瘙": "sao", "鳋": "sao", "瑟": "se", "色": "se", "涩": "se", "啬": "se", "铩": "se", "铯": "se", "穑": "se", "森": "sen", "僧": "seng", "莎": "sha", "砂": "sha", "杀": "sha", "刹": "sha", "沙": "sha", "纱": "sha", "傻": "sha", "啥": "sha", "煞": "sha", "脎": "sha", "歃": "sha", "痧": "sha", "裟": "sha", "霎": "sha", "鲨": "sha", "筛": "shai", "晒": "shai", "酾": "shai", "珊": "shan", "苫": "shan", "杉": "shan", "山": "shan", "删": "shan", "煽": "shan", "衫": "shan", "闪": "shan", "陕": "shan", "擅": "shan", "赡": "shan", "膳": "shan", "善": "shan", "汕": "shan", "扇": "shan", "缮": "shan", "剡": "shan", "讪": "shan", "鄯": "shan", "埏": "shan", "芟": "shan", "潸": "shan", "姗": "shan", "骟": "shan", "膻": "shan", "钐": "shan", "疝": "shan", "蟮": "shan", "舢": "shan", "跚": "shan", "鳝": "shan", "墒": "shang", "伤": "shang", "商": "shang", "赏": "shang", "晌": "shang", "上": "shang", "尚": "shang", "裳": "shang", "垧": "shang", "绱": "shang", "殇": "shang", "熵": "shang", "觞": "shang", "梢": "shao", "捎": "shao", "稍": "shao", "烧": "shao", "芍": "shao", "勺": "shao", "韶": "shao", "少": "shao", "哨": "shao", "邵": "shao", "绍": "shao", "劭": "shao", "苕": "shao", "潲": "shao", "蛸": "shao", "笤": "shao", "筲": "shao", "艄": "shao", "奢": "she", "赊": "she", "蛇": "she", "舌": "she", "舍": "she", "赦": "she", "摄": "she", "射": "she", "慑": "she", "涉": "she", "社": "she", "设": "she", "厍": "she", "佘": "she", "猞": "she", "畲": "she", "麝": "she", "砷": "shen", "申": "shen", "呻": "shen", "伸": "shen", "身": "shen", "深": "shen", "娠": "shen", "绅": "shen", "神": "shen", "沈": "shen", "审": "shen", "婶": "shen", "甚": "shen", "肾": "shen", "慎": "shen", "渗": "shen", "诜": "shen", "谂": "shen", "吲": "shen", "哂": "shen", "渖": "shen", "椹": "shen", "矧": "shen", "蜃": "shen", "声": "sheng", "生": "sheng", "甥": "sheng", "牲": "sheng", "升": "sheng", "绳": "sheng", "省": "sheng", "盛": "sheng", "剩": "sheng", "胜": "sheng", "圣": "sheng", "丞": "sheng", "渑": "sheng", "媵": "sheng", "眚": "sheng", "笙": "sheng", "师": "shi", "失": "shi", "狮": "shi", "施": "shi", "湿": "shi", "诗": "shi", "尸": "shi", "虱": "shi", "十": "shi", "石": "shi", "拾": "shi", "时": "shi", "什": "shi", "食": "shi", "蚀": "shi", "实": "shi", "识": "shi", "史": "shi", "矢": "shi", "使": "shi", "屎": "shi", "驶": "shi", "始": "shi", "式": "shi", "示": "shi", "士": "shi", "世": "shi", "柿": "shi", "事": "shi", "拭": "shi", "誓": "shi", "逝": "shi", "势": "shi", "是": "shi", "嗜": "shi", "噬": "shi", "适": "shi", "仕": "shi", "侍": "shi", "释": "shi", "饰": "shi", "氏": "shi", "市": "shi", "恃": "shi", "室": "shi", "视": "shi", "试": "shi", "谥": "shi", "埘": "shi", "莳": "shi", "蓍": "shi", "弑": "shi", "唑": "shi", "饣": "shi", "轼": "shi", "耆": "shi", "贳": "shi", "炻": "shi", "礻": "shi", "铈": "shi", "铊": "shi", "螫": "shi", "舐": "shi", "筮": "shi", "豕": "shi", "鲥": "shi", "鲺": "shi", "收": "shou", "手": "shou", "首": "shou", "守": "shou", "寿": "shou", "授": "shou", "售": "shou", "受": "shou", "瘦": "shou", "兽": "shou", "扌": "shou", "狩": "shou", "绶": "shou", "艏": "shou", "蔬": "shu", "枢": "shu", "梳": "shu", "殊": "shu", "抒": "shu", "输": "shu", "叔": "shu", "舒": "shu", "淑": "shu", "疏": "shu", "书": "shu", "赎": "shu", "孰": "shu", "熟": "shu", "薯": "shu", "暑": "shu", "曙": "shu", "署": "shu", "蜀": "shu", "黍": "shu", "鼠": "shu", "属": "shu", "术": "shu", "述": "shu", "树": "shu", "束": "shu", "戍": "shu", "竖": "shu", "墅": "shu", "庶": "shu", "数": "shu", "漱": "shu", "恕": "shu", "倏": "shu", "塾": "shu", "菽": "shu", "忄": "shu", "沭": "shu", "涑": "shu", "澍": "shu", "姝": "shu", "纾": "shu", "毹": "shu", "腧": "shu", "殳": "shu", "镯": "shu", "秫": "shu", "鹬": "shu", "刷": "shua", "耍": "shua", "唰": "shua", "涮": "shua", "摔": "shuai", "衰": "shuai", "甩": "shuai", "帅": "shuai", "蟀": "shuai", "栓": "shuan", "拴": "shuan", "闩": "shuan", "霜": "shuang", "双": "shuang", "爽": "shuang", "孀": "shuang", "谁": "shui", "水": "shui", "睡": "shui", "税": "shui", "吮": "shun", "瞬": "shun", "顺": "shun", "舜": "shun", "恂": "shun", "说": "shuo", "硕": "shuo", "朔": "shuo", "烁": "shuo", "蒴": "shuo", "搠": "shuo", "嗍": "shuo", "濯": "shuo", "妁": "shuo", "槊": "shuo", "铄": "shuo", "斯": "si", "撕": "si", "嘶": "si", "思": "si", "私": "si", "司": "si", "丝": "si", "死": "si", "肆": "si", "寺": "si", "嗣": "si", "四": "si", "伺": "si", "似": "si", "饲": "si", "巳": "si", "厮": "si", "俟": "si", "兕": "si", "菥": "si", "咝": "si", "汜": "si", "泗": "si", "澌": "si", "姒": "si", "驷": "si", "缌": "si", "祀": "si", "祠": "si", "锶": "si", "鸶": "si", "耜": "si", "蛳": "si", "笥": "si", "松": "song", "耸": "song", "怂": "song", "颂": "song", "送": "song", "宋": "song", "讼": "song", "诵": "song", "凇": "song", "菘": "song", "崧": "song", "嵩": "song", "忪": "song", "悚": "song", "淞": "song", "竦": "song", "搜": "sou", "艘": "sou", "擞": "sou", "嗽": "sou", "叟": "sou", "嗖": "sou", "嗾": "sou", "馊": "sou", "溲": "sou", "飕": "sou", "瞍": "sou", "锼": "sou", "螋": "sou", "苏": "su", "酥": "su", "俗": "su", "素": "su", "速": "su", "粟": "su", "僳": "su", "塑": "su", "溯": "su", "宿": "su", "诉": "su", "肃": "su", "夙": "su", "谡": "su", "蔌": "su", "嗉": "su", "愫": "su", "簌": "su", "觫": "su", "稣": "su", "酸": "suan", "蒜": "suan", "算": "suan", "虽": "sui", "隋": "sui", "随": "sui", "绥": "sui", "髓": "sui", "碎": "sui", "岁": "sui", "穗": "sui", "遂": "sui", "隧": "sui", "祟": "sui", "蓑": "sui", "冫": "sui", "谇": "sui", "濉": "sui", "邃": "sui", "燧": "sui", "眭": "sui", "睢": "sui", "孙": "sun", "损": "sun", "笋": "sun", "荪": "sun", "狲": "sun", "飧": "sun", "榫": "sun", "跣": "sun", "隼": "sun", "梭": "suo", "唆": "suo", "缩": "suo", "琐": "suo", "索": "suo", "锁": "suo", "所": "suo", "唢": "suo", "嗦": "suo", "娑": "suo", "桫": "suo", "睃": "suo", "羧": "suo", "塌": "ta", "他": "ta", "它": "ta", "她": "ta", "塔": "ta", "獭": "ta", "挞": "ta", "蹋": "ta", "踏": "ta", "闼": "ta", "溻": "ta", "遢": "ta", "榻": "ta", "沓": "ta", "胎": "tai", "苔": "tai", "抬": "tai", "台": "tai", "泰": "tai", "酞": "tai", "太": "tai", "态": "tai", "汰": "tai", "邰": "tai", "薹": "tai", "肽": "tai", "炱": "tai", "钛": "tai", "跆": "tai", "鲐": "tai", "坍": "tan", "摊": "tan", "贪": "tan", "瘫": "tan", "滩": "tan", "坛": "tan", "檀": "tan", "痰": "tan", "潭": "tan", "谭": "tan", "谈": "tan", "坦": "tan", "毯": "tan", "袒": "tan", "碳": "tan", "探": "tan", "叹": "tan", "炭": "tan", "郯": "tan", "蕈": "tan", "昙": "tan", "钽": "tan", "锬": "tan", "覃": "tan", "汤": "tang", "塘": "tang", "搪": "tang", "堂": "tang", "棠": "tang", "膛": "tang", "唐": "tang", "糖": "tang", "傥": "tang", "饧": "tang", "溏": "tang", "瑭": "tang", "铴": "tang", "镗": "tang", "耥": "tang", "螗": "tang", "螳": "tang", "羰": "tang", "醣": "tang", "倘": "thang", "躺": "thang", "淌": "thang", "趟": "theng", "烫": "theng", "掏": "tao", "涛": "tao", "滔": "tao", "绦": "tao", "萄": "tao", "桃": "tao", "逃": "tao", "淘": "tao", "陶": "tao", "讨": "tao", "套": "tao", "挑": "tao", "鼗": "tao", "啕": "tao", "韬": "tao", "饕": "tao", "特": "te", "藤": "teng", "腾": "teng", "疼": "teng", "誊": "teng", "滕": "teng", "梯": "ti", "剔": "ti", "踢": "ti", "锑": "ti", "提": "ti", "题": "ti", "蹄": "ti", "啼": "ti", "体": "ti", "替": "ti", "嚏": "ti", "惕": "ti", "涕": "ti", "剃": "ti", "屉": "ti", "荑": "ti", "悌": "ti", "逖": "ti", "绨": "ti", "缇": "ti", "鹈": "ti", "裼": "ti", "醍": "ti", "天": "tian", "添": "tian", "填": "tian", "田": "tian", "甜": "tian", "恬": "tian", "舔": "tian", "腆": "tian", "掭": "tian", "忝": "tian", "阗": "tian", "殄": "tian", "畋": "tian", "钿": "tian", "蚺": "tian", "条": "tiao", "迢": "tiao", "眺": "tiao", "跳": "tiao", "佻": "tiao", "祧": "tiao", "铫": "tiao", "窕": "tiao", "龆": "tiao", "鲦": "tiao", "贴": "tie", "铁": "tie", "帖": "tie", "萜": "tie", "餮": "tie", "厅": "ting", "听": "ting", "烃": "ting", "汀": "ting", "廷": "ting", "停": "ting", "亭": "ting", "庭": "ting", "挺": "ting", "艇": "ting", "莛": "ting", "葶": "ting", "婷": "ting", "梃": "ting", "蜓": "ting", "霆": "ting", "通": "tong", "桐": "tong", "酮": "tong", "瞳": "tong", "同": "tong", "铜": "tong", "彤": "tong", "童": "tong", "桶": "tong", "捅": "tong", "筒": "tong", "统": "tong", "痛": "tong", "佟": "tong", "僮": "tong", "仝": "tong", "茼": "tong", "嗵": "tong", "恸": "tong", "潼": "tong", "砼": "tong", "偷": "tou", "投": "tou", "头": "tou", "透": "tou", "亠": "tou", "凸": "tu", "秃": "tu", "突": "tu", "图": "tu", "徒": "tu", "途": "tu", "涂": "tu", "屠": "tu", "土": "tu", "吐": "tu", "兔": "tu", "堍": "tu", "荼": "tu", "菟": "tu", "钍": "tu", "酴": "tu", "湍": "tuan", "团": "tuan", "疃": "tuan", "推": "tui", "颓": "tui", "腿": "tui", "蜕": "tui", "褪": "tui", "退": "tui", "忒": "tui", "煺": "tui", "吞": "tun", "屯": "tun", "臀": "tun", "饨": "tun", "暾": "tun", "豚": "tun", "窀": "tun", "拖": "tuo", "托": "tuo", "脱": "tuo", "鸵": "tuo", "陀": "tuo", "驮": "tuo", "驼": "tuo", "椭": "tuo", "妥": "tuo", "拓": "tuo", "唾": "tuo", "乇": "tuo", "佗": "tuo", "坨": "tuo", "庹": "tuo", "沱": "tuo", "柝": "tuo", "砣": "tuo", "箨": "tuo", "舄": "tuo", "跎": "tuo", "鼍": "tuo", "挖": "wa", "哇": "wa", "蛙": "wa", "洼": "wa", "娃": "wa", "瓦": "wa", "袜": "wa", "佤": "wa", "娲": "wa", "腽": "wa", "歪": "wai", "外": "wai", "豌": "wan", "弯": "wan", "湾": "wan", "玩": "wan", "顽": "wan", "丸": "wan", "烷": "wan", "完": "wan", "碗": "wan", "挽": "wan", "晚": "wan", "皖": "wan", "惋": "wan", "宛": "wan", "婉": "wan", "万": "wan", "腕": "wan", "剜": "wan", "芄": "wan", "苋": "wan", "菀": "wan", "纨": "wan", "绾": "wan", "琬": "wan", "脘": "wan", "畹": "wan", "蜿": "wan", "箢": "wan", "汪": "wang", "王": "wang", "亡": "wang", "枉": "wang", "网": "wang", "往": "wang", "旺": "wang", "望": "wang", "忘": "wang", "妄": "wang", "罔": "wang", "尢": "wang", "惘": "wang", "辋": "wang", "魍": "wang", "威": "wei", "巍": "wei", "微": "wei", "危": "wei", "韦": "wei", "违": "wei", "桅": "wei", "围": "wei", "唯": "wei", "惟": "wei", "为": "wei", "潍": "wei", "维": "wei", "苇": "wei", "萎": "wei", "委": "wei", "伟": "wei", "伪": "wei", "尾": "wei", "纬": "wei", "未": "wei", "蔚": "wei", "味": "wei", "畏": "wei", "胃": "wei", "喂": "wei", "魏": "wei", "位": "wei", "渭": "wei", "谓": "wei", "尉": "wei", "慰": "wei", "卫": "wei", "倭": "wei", "偎": "wei", "诿": "wei", "隈": "wei", "葳": "wei", "薇": "wei", "帏": "wei", "帷": "wei", "崴": "wei", "嵬": "wei", "猥": "wei", "猬": "wei", "闱": "wei", "沩": "wei", "洧": "wei", "涠": "wei", "逶": "wei", "娓": "wei", "玮": "wei", "韪": "wei", "軎": "wei", "炜": "wei", "煨": "wei", "熨": "wei", "痿": "wei", "艉": "wei", "鲔": "wei", "瘟": "wen", "温": "wen", "蚊": "wen", "文": "wen", "闻": "wen", "纹": "wen", "吻": "wen", "稳": "wen", "紊": "wen", "问": "wen", "刎": "wen", "愠": "wen", "阌": "wen", "汶": "wen", "璺": "wen", "韫": "wen", "殁": "wen", "雯": "wen", "嗡": "weng", "翁": "weng", "瓮": "weng", "蓊": "weng", "蕹": "weng", "挝": "wo", "蜗": "wo", "涡": "wo", "窝": "wo", "我": "wo", "斡": "wo", "卧": "wo", "握": "wo", "沃": "wo", "莴": "wo", "幄": "wo", "渥": "wo", "杌": "wo", "肟": "wo", "龌": "wo", "巫": "wu", "呜": "wu", "钨": "wu", "乌": "wu", "污": "wu", "诬": "wu", "屋": "wu", "无": "wu", "芜": "wu", "梧": "wu", "吾": "wu", "吴": "wu", "毋": "wu", "武": "wu", "五": "wu", "捂": "wu", "午": "wu", "舞": "wu", "伍": "wu", "侮": "wu", "坞": "wu", "戊": "wu", "雾": "wu", "晤": "wu", "物": "wu", "勿": "wu", "务": "wu", "悟": "wu", "误": "wu", "兀": "wu", "仵": "wu", "阢": "wu", "邬": "wu", "圬": "wu", "芴": "wu", "庑": "wu", "怃": "wu", "忤": "wu", "浯": "wu", "寤": "wu", "迕": "wu", "妩": "wu", "骛": "wu", "牾": "wu", "焐": "wu", "鹉": "wu", "鹜": "wu", "蜈": "wu", "鋈": "wu", "鼯": "wu", "昔": "xi", "熙": "xi", "析": "xi", "西": "xi", "硒": "xi", "矽": "xi", "晰": "xi", "嘻": "xi", "吸": "xi", "锡": "xi", "牺": "xi", "稀": "xi", "息": "xi", "希": "xi", "悉": "xi", "膝": "xi", "夕": "xi", "惜": "xi", "熄": "xi", "烯": "xi", "溪": "xi", "汐": "xi", "犀": "xi", "檄": "xi", "袭": "xi", "席": "xi", "习": "xi", "媳": "xi", "喜": "xi", "铣": "xi", "洗": "xi", "系": "xi", "隙": "xi", "戏": "xi", "细": "xi", "僖": "xi", "兮": "xi", "隰": "xi", "郗": "xi", "茜": "xi", "葸": "xi", "蓰": "xi", "奚": "xi", "唏": "xi", "徙": "xi", "饩": "xi", "阋": "xi", "浠": "xi", "淅": "xi", "屣": "xi", "嬉": "xi", "玺": "xi", "樨": "xi", "曦": "xi", "觋": "xi", "欷": "xi", "熹": "xi", "禊": "xi", "禧": "xi", "钸": "xi", "皙": "xi", "穸": "xi", "蜥": "xi", "蟋": "xi", "舾": "xi", "羲": "xi", "粞": "xi", "翕": "xi", "醯": "xi", "鼷": "xi", "瞎": "xia", "虾": "xia", "匣": "xia", "霞": "xia", "辖": "xia", "暇": "xia", "峡": "xia", "侠": "xia", "狭": "xia", "下": "xia", "厦": "xia", "夏": "xia", "吓": "xia", "掀": "xia", "葭": "xia", "嗄": "xia", "狎": "xia", "遐": "xia", "瑕": "xia", "硖": "xia", "瘕": "xia", "罅": "xia", "黠": "xia", "锨": "xian", "先": "xian", "仙": "xian", "鲜": "xian", "纤": "xian", "咸": "xian", "贤": "xian", "衔": "xian", "舷": "xian", "闲": "xian", "涎": "xian", "弦": "xian", "嫌": "xian", "显": "xian", "险": "xian", "现": "xian", "献": "xian", "县": "xian", "腺": "xian", "馅": "xian", "羡": "xian", "宪": "xian", "陷": "xian", "限": "xian", "线": "xian", "冼": "xian", "藓": "xian", "岘": "xian", "猃": "xian", "暹": "xian", "娴": "xian", "氙": "xian", "祆": "xian", "鹇": "xian", "痫": "xian", "蚬": "xian", "筅": "xian", "籼": "xian", "酰": "xian", "跹": "xian", "相": "xiang", "厢": "xiang", "镶": "xiang", "香": "xiang", "箱": "xiang", "襄": "xiang", "湘": "xiang", "乡": "xiang", "翔": "xiang", "祥": "xiang", "详": "xiang", "想": "xiang", "响": "xiang", "享": "xiang", "项": "xiang", "巷": "xiang", "橡": "xiang", "像": "xiang", "向": "xiang", "象": "xiang", "芗": "xiang", "葙": "xiang", "饷": "xiang", "庠": "xiang", "骧": "xiang", "缃": "xiang", "蟓": "xiang", "鲞": "xiang", "飨": "xiang", "萧": "xiao", "硝": "xiao", "霄": "xiao", "削": "xiao", "哮": "xiao", "嚣": "xiao", "销": "xiao", "消": "xiao", "宵": "xiao", "淆": "xiao", "晓": "xiao", "小": "xiao", "孝": "xiao", "校": "xiao", "肖": "xiao", "啸": "xiao", "笑": "xiao", "效": "xiao", "哓": "xiao", "咻": "xiao", "崤": "xiao", "潇": "xiao", "逍": "xiao", "骁": "xiao", "绡": "xiao", "枭": "xiao", "枵": "xiao", "筱": "xiao", "箫": "xiao", "魈": "xiao", "楔": "xie", "些": "xie", "歇": "xie", "蝎": "xie", "鞋": "xie", "协": "xie", "挟": "xie", "携": "xie", "邪": "xie", "斜": "xie", "胁": "xie", "谐": "xie", "写": "xie", "械": "xie", "卸": "xie", "蟹": "xie", "懈": "xie", "泄": "xie", "泻": "xie", "谢": "xie", "屑": "xie", "偕": "xie", "亵": "xie", "勰": "xie", "燮": "xie", "薤": "xie", "撷": "xie", "廨": "xie", "瀣": "xie", "邂": "xie", "绁": "xie", "缬": "xie", "榭": "xie", "榍": "xie", "歙": "xie", "躞": "xie", "薪": "xin", "芯": "xin", "锌": "xin", "欣": "xin", "辛": "xin", "新": "xin", "忻": "xin", "心": "xin", "信": "xin", "衅": "xin", "囟": "xin", "馨": "xin", "莘": "xin", "歆": "xin", "铽": "xin", "鑫": "xin", "星": "xing", "腥": "xing", "猩": "xing", "惺": "xing", "兴": "xing", "刑": "xing", "型": "xing", "形": "xing", "邢": "xing", "行": "xing", "醒": "xing", "幸": "xing", "杏": "xing", "性": "xing", "姓": "xing", "陉": "xing", "荇": "xing", "荥": "xing", "擤": "xing", "悻": "xing", "硎": "xing", "兄": "xiong", "凶": "xiong", "胸": "xiong", "匈": "xiong", "汹": "xiong", "雄": "xiong", "熊": "xiong", "芎": "xiong", "休": "xiu", "修": "xiu", "羞": "xiu", "朽": "xiu", "嗅": "xiu", "锈": "xiu", "秀": "xiu", "袖": "xiu", "绣": "xiu", "莠": "xiu", "岫": "xiu", "馐": "xiu", "庥": "xiu", "鸺": "xiu", "貅": "xiu", "髹": "xiu", "墟": "xu", "戌": "xu", "需": "xu", "虚": "xu", "嘘": "xu", "须": "xu", "徐": "xu", "许": "xu", "蓄": "xu", "酗": "xu", "叙": "xu", "旭": "xu", "序": "xu", "畜": "xu", "恤": "xu", "絮": "xu", "婿": "xu", "绪": "xu", "续": "xu", "讴": "xu", "诩": "xu", "圩": "xu", "蓿": "xu", "怵": "xu", "洫": "xu", "溆": "xu", "顼": "xu", "栩": "xu", "煦": "xu", "砉": "xu", "盱": "xu", "胥": "xu", "糈": "xu", "醑": "xu", "轩": "xuan", "喧": "xuan", "宣": "xuan", "悬": "xuan", "旋": "xuan", "玄": "xuan", "选": "xuan", "癣": "xuan", "眩": "xuan", "绚": "xuan", "儇": "xuan", "谖": "xuan", "萱": "xuan", "揎": "xuan", "馔": "xuan", "泫": "xuan", "洵": "xuan", "渲": "xuan", "漩": "xuan", "璇": "xuan", "楦": "xuan", "暄": "xuan", "炫": "xuan", "煊": "xuan", "碹": "xuan", "铉": "xuan", "镟": "xuan", "痃": "xuan", "靴": "xue", "薛": "xue", "学": "xue", "穴": "xue", "雪": "xue", "血": "xue", "噱": "xue", "泶": "xue", "鳕": "xue", "勋": "xun", "熏": "xun", "循": "xun", "旬": "xun", "询": "xun", "寻": "xun", "驯": "xun", "巡": "xun", "殉": "xun", "汛": "xun", "训": "xun", "讯": "xun", "逊": "xun", "迅": "xun", "巽": "xun", "埙": "xun", "荀": "xun", "薰": "xun", "峋": "xun", "徇": "xun", "浔": "xun", "曛": "xun", "窨": "xun", "醺": "xun", "鲟": "xun", "压": "ya", "押": "ya", "鸦": "ya", "鸭": "ya", "呀": "ya", "丫": "ya", "芽": "ya", "牙": "ya", "蚜": "ya", "崖": "ya", "衙": "ya", "涯": "ya", "雅": "ya", "哑": "ya", "亚": "ya", "讶": "ya", "伢": "ya", "揠": "ya", "吖": "ya", "岈": "ya", "迓": "ya", "娅": "ya", "琊": "ya", "桠": "ya", "氩": "ya", "砑": "ya", "睚": "ya", "痖": "ya", "焉": "yan", "咽": "yan", "阉": "yan", "烟": "yan", "淹": "yan", "盐": "yan", "严": "yan", "研": "yan", "蜒": "yan", "岩": "yan", "延": "yan", "言": "yan", "颜": "yan", "阎": "yan", "炎": "yan", "沿": "yan", "奄": "yan", "掩": "yan", "眼": "yan", "衍": "yan", "演": "yan", "艳": "yan", "堰": "yan", "燕": "yan", "厌": "yan", "砚": "yan", "雁": "yan", "唁": "yan", "彦": "yan", "焰": "yan", "宴": "yan", "谚": "yan", "验": "yan", "厣": "yan", "靥": "yan", "赝": "yan", "俨": "yan", "偃": "yan", "兖": "yan", "讠": "yan", "谳": "yan", "郾": "yan", "鄢": "yan", "芫": "yan", "菸": "yan", "崦": "yan", "恹": "yan", "闫": "yan", "阏": "yan", "洇": "yan", "湮": "yan", "滟": "yan", "妍": "yan", "嫣": "yan", "琰": "yan", "晏": "yan", "胭": "yan", "腌": "yan", "焱": "yan", "罨": "yan", "筵": "yan", "酽": "yan", "魇": "yan", "餍": "yan", "鼹": "yan", "殃": "yang", "央": "yang", "鸯": "yang", "秧": "yang", "杨": "yang", "扬": "yang", "佯": "yang", "疡": "yang", "羊": "yang", "洋": "yang", "阳": "yang", "氧": "yang", "仰": "yang", "痒": "yang", "养": "yang", "样": "yang", "漾": "yang", "徉": "yang", "怏": "yang", "泱": "yang", "炀": "yang", "烊": "yang", "恙": "yang", "蛘": "yang", "鞅": "yang", "邀": "yao", "腰": "yao", "妖": "yao", "瑶": "yao", "摇": "yao", "尧": "yao", "遥": "yao", "窑": "yao", "谣": "yao", "姚": "yao", "咬": "yao", "舀": "yao", "药": "yao", "要": "yao", "耀": "yao", "夭": "yao", "爻": "yao", "吆": "yao", "崾": "yao", "徭": "yao", "瀹": "yao", "幺": "yao", "珧": "yao", "杳": "yao", "曜": "yao", "肴": "yao", "鹞": "yao", "窈": "yao", "繇": "yao", "鳐": "yao", "椰": "ye", "噎": "ye", "耶": "ye", "爷": "ye", "野": "ye", "冶": "ye", "也": "ye", "页": "ye", "掖": "ye", "业": "ye", "叶": "ye", "曳": "ye", "腋": "ye", "夜": "ye", "液": "ye", "谒": "ye", "邺": "ye", "揶": "ye", "馀": "ye", "晔": "ye", "烨": "ye", "铘": "ye", "一": "yi", "壹": "yi", "医": "yi", "揖": "yi", "铱": "yi", "依": "yi", "伊": "yi", "衣": "yi", "颐": "yi", "夷": "yi", "遗": "yi", "移": "yi", "仪": "yi", "胰": "yi", "疑": "yi", "沂": "yi", "宜": "yi", "姨": "yi", "彝": "yi", "椅": "yi", "蚁": "yi", "倚": "yi", "已": "yi", "乙": "yi", "矣": "yi", "以": "yi", "艺": "yi", "抑": "yi", "易": "yi", "邑": "yi", "屹": "yi", "亿": "yi", "役": "yi", "臆": "yi", "逸": "yi", "肄": "yi", "疫": "yi", "亦": "yi", "裔": "yi", "意": "yi", "毅": "yi", "忆": "yi", "义": "yi", "益": "yi", "溢": "yi", "诣": "yi", "议": "yi", "谊": "yi", "译": "yi", "异": "yi", "翼": "yi", "翌": "yi", "绎": "yi", "刈": "yi", "劓": "yi", "佾": "yi", "诒": "yi", "圪": "yi", "圯": "yi", "埸": "yi", "懿": "yi", "苡": "yi", "薏": "yi", "弈": "yi", "奕": "yi", "挹": "yi", "弋": "yi", "呓": "yi", "咦": "yi", "咿": "yi", "噫": "yi", "峄": "yi", "嶷": "yi", "猗": "yi", "饴": "yi", "怿": "yi", "怡": "yi", "悒": "yi", "漪": "yi", "迤": "yi", "驿": "yi", "缢": "yi", "殪": "yi", "贻": "yi", "旖": "yi", "熠": "yi", "钇": "yi", "镒": "yi", "镱": "yi", "痍": "yi", "瘗": "yi", "癔": "yi", "翊": "yi", "衤": "yi", "蜴": "yi", "舣": "yi", "羿": "yi", "翳": "yi", "酏": "yi", "黟": "yi", "茵": "yin", "荫": "yin", "因": "yin", "殷": "yin", "音": "yin", "阴": "yin", "姻": "yin", "吟": "yin", "银": "yin", "淫": "yin", "寅": "yin", "饮": "yin", "尹": "yin", "引": "yin", "隐": "yin", "印": "yin", "胤": "yin", "鄞": "yin", "堙": "yin", "茚": "yin", "喑": "yin", "狺": "yin", "夤": "yin", "氤": "yin", "铟": "yin", "瘾": "yin", "蚓": "yin", "霪": "yin", "龈": "yin", "英": "ying", "樱": "ying", "婴": "ying", "鹰": "ying", "应": "ying", "缨": "ying", "莹": "ying", "萤": "ying", "营": "ying", "荧": "ying", "蝇": "ying", "迎": "ying", "赢": "ying", "盈": "ying", "影": "ying", "颖": "ying", "硬": "ying", "映": "ying", "嬴": "ying", "郢": "ying", "茔": "ying", "莺": "ying", "萦": "ying", "撄": "ying", "嘤": "ying", "膺": "ying", "滢": "ying", "潆": "ying", "瀛": "ying", "瑛": "ying", "璎": "ying", "楹": "ying", "鹦": "ying", "瘿": "ying", "颍": "ying", "罂": "ying", "哟": "yo", "唷": "yo", "拥": "yong", "佣": "yong", "臃": "yong", "痈": "yong", "庸": "yong", "雍": "yong", "踊": "yong", "蛹": "yong", "咏": "yong", "泳": "yong", "涌": "yong", "永": "yong", "恿": "yong", "勇": "yong", "用": "yong", "俑": "yong", "壅": "yong", "墉": "yong", "慵": "yong", "邕": "yong", "镛": "yong", "甬": "yong", "鳙": "yong", "饔": "yong", "幽": "you", "优": "you", "悠": "you", "忧": "you", "尤": "you", "由": "you", "邮": "you", "铀": "you", "犹": "you", "油": "you", "游": "you", "酉": "you", "有": "you", "友": "you", "右": "you", "佑": "you", "釉": "you", "诱": "you", "又": "you", "幼": "you", "卣": "you", "攸": "you", "侑": "you", "莸": "you", "呦": "you", "囿": "you", "宥": "you", "柚": "you", "猷": "you", "牖": "you", "铕": "you", "疣": "you", "蝣": "you", "鱿": "you", "黝": "you", "鼬": "you", "迂": "yu", "淤": "yu", "于": "yu", "盂": "yu", "榆": "yu", "虞": "yu", "愚": "yu", "舆": "yu", "余": "yu", "俞": "yu", "逾": "yu", "鱼": "yu", "愉": "yu", "渝": "yu", "渔": "yu", "隅": "yu", "予": "yu", "娱": "yu", "雨": "yu", "与": "yu", "屿": "yu", "禹": "yu", "宇": "yu", "语": "yu", "羽": "yu", "玉": "yu", "域": "yu", "芋": "yu", "郁": "yu", "吁": "yu", "遇": "yu", "喻": "yu", "峪": "yu", "御": "yu", "愈": "yu", "欲": "yu", "狱": "yu", "育": "yu", "誉": "yu", "浴": "yu", "寓": "yu", "裕": "yu", "预": "yu", "豫": "yu", "驭": "yu", "禺": "yu", "毓": "yu", "伛": "yu", "俣": "yu", "谀": "yu", "谕": "yu", "萸": "yu", "蓣": "yu", "揄": "yu", "喁": "yu", "圄": "yu", "圉": "yu", "嵛": "yu", "狳": "yu", "饫": "yu", "庾": "yu", "阈": "yu", "妪": "yu", "妤": "yu", "纡": "yu", "瑜": "yu", "昱": "yu", "觎": "yu", "腴": "yu", "欤": "yu", "於": "yu", "煜": "yu", "燠": "yu", "聿": "yu", "钰": "yu", "鹆": "yu", "瘐": "yu", "瘀": "yu", "窳": "yu", "蝓": "yu", "竽": "yu", "舁": "yu", "雩": "yu", "龉": "yu", "鸳": "yuan", "渊": "yuan", "冤": "yuan", "元": "yuan", "垣": "yuan", "袁": "yuan", "原": "yuan", "援": "yuan", "辕": "yuan", "园": "yuan", "员": "yuan", "圆": "yuan", "猿": "yuan", "源": "yuan", "缘": "yuan", "远": "yuan", "苑": "yuan", "愿": "yuan", "怨": "yuan", "院": "yuan", "塬": "yuan", "沅": "yuan", "媛": "yuan", "瑗": "yuan", "橼": "yuan", "爰": "yuan", "眢": "yuan", "鸢": "yuan", "螈": "yuan", "鼋": "yuan", "曰": "yue", "约": "yue", "越": "yue", "跃": "yue", "钥": "yue", "岳": "yue", "粤": "yue", "月": "yue", "悦": "yue", "阅": "yue", "龠": "yue", "樾": "yue", "刖": "yue", "钺": "yue", "耘": "yun", "云": "yun", "郧": "yun", "匀": "yun", "陨": "yun", "允": "yun", "运": "yun", "蕴": "yun", "酝": "yun", "晕": "yun", "韵": "yun", "孕": "yun", "郓": "yun", "芸": "yun", "狁": "yun", "恽": "yun", "纭": "yun", "殒": "yun", "昀": "yun", "氲": "yun", "匝": "za", "砸": "za", "杂": "za", "拶": "za", "咂": "za", "栽": "zai", "哉": "zai", "灾": "zai", "宰": "zai", "载": "zai", "再": "zai", "在": "zai", "咱": "zai", "崽": "zai", "甾": "zai", "攒": "zan", "暂": "zan", "赞": "zan", "瓒": "zan", "昝": "zan", "簪": "zan", "糌": "zan", "趱": "zan", "錾": "zan", "赃": "zang", "脏": "zang", "葬": "zang", "奘": "zang", "戕": "zang", "臧": "zang", "遭": "zao", "糟": "zao", "凿": "zao", "藻": "zao", "枣": "zao", "早": "zao", "澡": "zao", "蚤": "zao", "躁": "zao", "噪": "zao", "造": "zao", "皂": "zao", "灶": "zao", "燥": "zao", "唣": "zao", "缫": "zao", "责": "ze", "择": "ze", "则": "ze", "泽": "ze", "仄": "ze", "赜": "ze", "啧": "ze", "迮": "ze", "昃": "ze", "笮": "ze", "箦": "ze", "舴": "ze", "贼": "zei", "怎": "zen", "谮": "zen", "增": "zeng", "憎": "zeng", "曾": "zeng", "赠": "zeng", "缯": "zeng", "甑": "zeng", "罾": "zeng", "锃": "zeng", "扎": "zha", "喳": "zha", "渣": "zha", "札": "zha", "轧": "zha", "铡": "zha", "闸": "zha", "眨": "zha", "栅": "zha", "榨": "zha", "咋": "zha", "乍": "zha", "炸": "zha", "诈": "zha", "揸": "zha", "吒": "zha", "咤": "zha", "哳": "zha", "怍": "zha", "砟": "zha", "痄": "zha", "蚱": "zha", "齄": "zha", "摘": "zhai", "斋": "zhai", "宅": "zhai", "窄": "zhai", "债": "zhai", "寨": "zhai", "砦": "zhai", "瞻": "zhan", "毡": "zhan", "詹": "zhan", "粘": "zhan", "沾": "zhan", "盏": "zhan", "斩": "zhan", "辗": "zhan", "崭": "zhan", "展": "zhan", "蘸": "zhan", "栈": "zhan", "占": "zhan", "战": "zhan", "站": "zhan", "湛": "zhan", "绽": "zhan", "谵": "zhan", "搌": "zhan", "旃": "zhan", "樟": "zhang", "章": "zhang", "彰": "zhang", "漳": "zhang", "张": "zhang", "掌": "zhang", "涨": "zhang", "杖": "zhang", "丈": "zhang", "帐": "zhang", "账": "zhang", "仗": "zhang", "胀": "zhang", "瘴": "zhang", "障": "zhang", "仉": "zhang", "鄣": "zhang", "幛": "zhang", "嶂": "zhang", "獐": "zhang", "嫜": "zhang", "璋": "zhang", "蟑": "zhang", "招": "zhao", "昭": "zhao", "找": "zhao", "沼": "zhao", "赵": "zhao", "照": "zhao", "罩": "zhao", "兆": "zhao", "肇": "zhao", "召": "zhao", "爪": "zhao", "诏": "zhao", "棹": "zhao", "钊": "zhao", "笊": "zhao", "遮": "zhe", "折": "zhe", "哲": "zhe", "蛰": "zhe", "辙": "zhe", "者": "zhe", "锗": "zhe", "蔗": "zhe", "这": "zhe", "浙": "zhe", "谪": "zhe", "陬": "zhe", "柘": "zhe", "辄": "zhe", "磔": "zhe", "鹧": "zhe", "褚": "zhe", "蜇": "zhe", "赭": "zhe", "珍": "zhen", "斟": "zhen", "真": "zhen", "甄": "zhen", "砧": "zhen", "臻": "zhen", "贞": "zhen", "针": "zhen", "侦": "zhen", "枕": "zhen", "疹": "zhen", "诊": "zhen", "震": "zhen", "振": "zhen", "镇": "zhen", "阵": "zhen", "缜": "zhen", "桢": "zhen", "榛": "zhen", "轸": "zhen", "赈": "zhen", "胗": "zhen", "朕": "zhen", "祯": "zhen", "畛": "zhen", "鸩": "zhen", "蒸": "zheng", "挣": "zheng", "睁": "zheng", "征": "zheng", "狰": "zheng", "争": "zheng", "怔": "zheng", "整": "zheng", "拯": "zheng", "正": "zheng", "政": "zheng", "帧": "zheng", "症": "zheng", "郑": "zheng", "证": "zheng", "诤": "zheng", "峥": "zheng", "钲": "zheng", "铮": "zheng", "筝": "zheng", "芝": "zhi", "枝": "zhi", "支": "zhi", "吱": "zhi", "蜘": "zhi", "知": "zhi", "肢": "zhi", "脂": "zhi", "汁": "zhi", "之": "zhi", "织": "zhi", "职": "zhi", "直": "zhi", "植": "zhi", "殖": "zhi", "执": "zhi", "值": "zhi", "侄": "zhi", "址": "zhi", "指": "zhi", "止": "zhi", "趾": "zhi", "只": "zhi", "旨": "zhi", "纸": "zhi", "志": "zhi", "挚": "zhi", "掷": "zhi", "至": "zhi", "致": "zhi", "置": "zhi", "帜": "zhi", "峙": "zhi", "制": "zhi", "智": "zhi", "秩": "zhi", "稚": "zhi", "质": "zhi", "炙": "zhi", "痔": "zhi", "滞": "zhi", "治": "zhi", "窒": "zhi", "卮": "zhi", "陟": "zhi", "郅": "zhi", "埴": "zhi", "芷": "zhi", "摭": "zhi", "帙": "zhi", "忮": "zhi", "彘": "zhi", "咫": "zhi", "骘": "zhi", "栉": "zhi", "枳": "zhi", "栀": "zhi", "桎": "zhi", "轵": "zhi", "轾": "zhi", "攴": "zhi", "贽": "zhi", "膣": "zhi", "祉": "zhi", "祗": "zhi", "黹": "zhi", "雉": "zhi", "鸷": "zhi", "痣": "zhi", "蛭": "zhi", "絷": "zhi", "酯": "zhi", "跖": "zhi", "踬": "zhi", "踯": "zhi", "豸": "zhi", "觯": "zhi", "中": "zhong", "盅": "zhong", "忠": "zhong", "钟": "zhong", "衷": "zhong", "终": "zhong", "种": "zhong", "肿": "zhong", "重": "zhong", "仲": "zhong", "众": "zhong", "冢": "zhong", "锺": "zhong", "螽": "zhong", "舂": "zhong", "舯": "zhong", "踵": "zhong", "舟": "zhou", "周": "zhou", "州": "zhou", "洲": "zhou", "诌": "zhou", "粥": "zhou", "轴": "zhou", "肘": "zhou", "帚": "zhou", "咒": "zhou", "皱": "zhou", "宙": "zhou", "昼": "zhou", "骤": "zhou", "啄": "zhou", "着": "zhou", "倜": "zhou", "诹": "zhou", "荮": "zhou", "鬻": "zhou", "纣": "zhou", "胄": "zhou", "碡": "zhou", "籀": "zhou", "舳": "zhou", "酎": "zhou", "鲷": "zhou", "珠": "zhu", "株": "zhu", "蛛": "zhu", "朱": "zhu", "猪": "zhu", "诸": "zhu", "诛": "zhu", "逐": "zhu", "竹": "zhu", "烛": "zhu", "煮": "zhu", "拄": "zhu", "瞩": "zhu", "嘱": "zhu", "主": "zhu", "著": "zhu", "柱": "zhu", "助": "zhu", "蛀": "zhu", "贮": "zhu", "铸": "zhu", "筑": "zhu", "住": "zhu", "注": "zhu", "祝": "zhu", "驻": "zhu", "伫": "zhu", "侏": "zhu", "邾": "zhu", "苎": "zhu", "茱": "zhu", "洙": "zhu", "渚": "zhu", "潴": "zhu", "驺": "zhu", "杼": "zhu", "槠": "zhu", "橥": "zhu", "炷": "zhu", "铢": "zhu", "疰": "zhu", "瘃": "zhu", "蚰": "zhu", "竺": "zhu", "箸": "zhu", "翥": "zhu", "躅": "zhu", "麈": "zhu", "抓": "zhua", "拽": "zhuai", "专": "zhuan", "砖": "zhuan", "转": "zhuan", "撰": "zhuan", "赚": "zhuan", "篆": "zhuan", "抟": "zhuan", "啭": "zhuan", "颛": "zhuan", "桩": "zhuang", "庄": "zhuang", "装": "zhuang", "妆": "zhuang", "撞": "zhuang", "壮": "zhuang", "状": "zhuang", "丬": "zhuang", "椎": "zhui", "锥": "zhui", "追": "zhui", "赘": "zhui", "坠": "zhui", "缀": "zhui", "萑": "zhui", "骓": "zhui", "缒": "zhui", "谆": "zhun", "准": "zhun", "捉": "zhuo", "拙": "zhuo", "卓": "zhuo", "桌": "zhuo", "琢": "zhuo", "茁": "zhuo", "酌": "zhuo", "灼": "zhuo", "浊": "zhuo", "倬": "zhuo", "诼": "zhuo", "廴": "zhuo", "蕞": "zhuo", "擢": "zhuo", "啜": "zhuo", "浞": "zhuo", "涿": "zhuo", "杓": "zhuo", "焯": "zhuo", "禚": "zhuo", "斫": "zhuo", "兹": "zi", "咨": "zi", "资": "zi", "姿": "zi", "滋": "zi", "淄": "zi", "孜": "zi", "紫": "zi", "仔": "zi", "籽": "zi", "滓": "zi", "子": "zi", "自": "zi", "渍": "zi", "字": "zi", "谘": "zi", "嵫": "zi", "姊": "zi", "孳": "zi", "缁": "zi", "梓": "zi", "辎": "zi", "赀": "zi", "恣": "zi", "眦": "zi", "锱": "zi", "秭": "zi", "耔": "zi", "笫": "zi", "粢": "zi", "觜": "zi", "訾": "zi", "鲻": "zi", "髭": "zi", "鬃": "zong", "棕": "zong", "踪": "zong", "宗": "zong", "综": "zong", "总": "zong", "纵": "zong", "腙": "zong", "粽": "zong", "邹": "zou", "走": "zou", "奏": "zou", "揍": "zou", "鄹": "zou", "鲰": "zou", "租": "zu", "足": "zu", "卒": "zu", "族": "zu", "祖": "zu", "诅": "zu", "阻": "zu", "组": "zu", "俎": "zu", "菹": "zu", "啐": "zu", "徂": "zu", "驵": "zu", "蹴": "zu", "钻": "zuan", "纂": "zuan", "攥": "zuan", "缵": "zuan", "嘴": "zui", "醉": "zui", "最": "zui", "罪": "zui", "尊": "zun", "遵": "zun", "撙": "zun", "樽": "zun", "鳟": "zun", "昨": "zuo", "左": "zuo", "佐": "zuo", "柞": "zuo", "做": "zuo", "作": "zuo", "坐": "zuo", "座": "zuo", "阝": "zuo", "阼": "zuo", "胙": "zuo", "祚": "zuo", "酢": "zuo", "薮": "cou", "楱": "cou", "辏": "cou", "腠": "cou", "攮": "nang", "哝": "nang", "囔": "nang", "馕": "nang", "曩": "nang", "喔": "o", "嗲": "dia", "嘬": "chuai", "膪": "chuai", "踹": "chuai", "岑": "cen", "涔": "cen", "铥": "diu", "耨": "nou", "缶": "fou", "髟": "bia"};
    };
})(PJF.util);
/**
 * stm生成分页html打印文件代码
 */

;
(function (exports) {

  var _sealRate = 144 / 299; // 默认的svg压缩比例, 会根据加载印章来变化

  var _svgTpl = (function () {/*@preserve
    <svg width="144" height="144" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="badge">
      <defs>
        <style type="text/css">
          <![CDATA[
            .badge-header, .badge-footer {
              letter-spacing: 2px;
            }
            .class1 {
              letter-spacing: 4px;
            }
            text {
              font-family: '仿宋';
              text-anchor: middle;
            }
          ]]>
        </style>
      </defs>
      <g>
        <title>background</title>
        <rect y="-1" x="-1" width="146" height="146" id="canvas_background" fill="none"/>
      </g>
      <g>
        <title>Layer 1</title>
        <circle stroke="#FF0000" stroke-width="2" class="circle" fill="#FFFFFF" cx="72" cy="72" r="70" id="svg_1"/>
        <path d="m45.5,117.9a53,53 0 1 1 53,0" id="SVGID_x5F_2_x5F_" fill="none" stroke="red" stroke-width="0"/>
        <text font-weight="bold" text-anchor="middle" id="svg_2">
          <textPath xlink:href="#SVGID_x5F_2_x5F_" startOffset="50%">
            <tspan class="badge-header" fill="#FF0000" font-family="'仿宋'" font-size="13" id="svg_3" stroke="null">中国建设银行股份有限公司</tspan>
          </textPath>
        </text>
      <text font-size="15" fill="#FF0000" x="72" y="109" id="svg_7" font-weight="bold">业务专用章</text>
      <text font-size="{{FstFontSize}}" fill="#FF0000" x="72" y="{{FstYCor}}" id="svg_4">{{FstVal}}</text>
      <text font-size="{{FstFontSize}}" fill="#FF0000" id="svg_5" y="{{SndYCor}}" x="72">{{SndVal}}</text>
      <text font-size="{{TrdFontSize}}" fill="#FF0000" x="72" y="{{TrdYCor}}" id="svg_6">{{TrdVal}}</text>
      </g>
    </svg>
  */}).toString().match(/^[\s\S]*\/\*@preserve([\s\S]*)\*\//)[1]

  /**
   * 下载接口, 简单封装下，免得要去关注各种事件
   */
  exports.simpleDownload = function(localPath, remotePath, callback) {
    PJF.communication.FileDownload.Add(localPath, remotePath)
    var fn1, fn2
    PJF.event.onceSubscriber(PJF.PadClientEvents.download.completed, fn1 = function(fileName){
      if (localPath.match(new RegExp(fileName + '$'))) {
        PJF.event.removeSubscriber(PJF.PadClientEvents.download.failed, fn2)
        callback({
          success: true,
          fileName: fileName
        })
      }
    })
    PJF.event.onceSubscriber(PJF.PadClientEvents.download.failed, fn2 = function(fileName){
      if (localPath.match(new RegExp(fileName + '$'))) {
        PJF.event.removeSubscriber(PJF.PadClientEvents.download.completed, fn1)
        callback({
          success: false,
          fileName: fileName
        })
      }
    })
  }
  
  /**
   * 
   * @param {*} conf 里面字段为A0161M539的Vchr_Grp数组里的对象内容
   * @param type svg, img
   * 额外再添加:  conf.sealBase64  印章底板base64
   */
  var _composeSeal = function(conf, type) {
    type = type || 'svg'
    var canvas = document.createElement('canvas')
    var ctx = canvas.getContext('2d')
    var img = new Image()
    img.onload = function () {
      _sealRate = 144 / img.width
      var rate = _sealRate
      if (type === 'svg') {
        var svg = PJF.util.formatTpl(_svgTpl, {
          FstYCor: parseInt(conf.StmpFstBankPTYCordVal, 10) * rate + parseInt(conf.StmpFstBankPtTxFmtDsc, 10) * rate,
          FstVal: conf.StmpFstBankPrtTxCntnt,
          SndYCor: parseInt(conf.StmpSndBankPTYCordVal, 10) * rate + parseInt(conf.StmpFstBankPtTxFmtDsc, 10) * rate,
          SndVal: conf.StmpSndBankPrtTxCntnt,
          TrdVal: conf.ValiCd,
          TrdYCor: parseInt(conf.StmpTrdBankPTYCordVal, 10) * rate + parseInt(conf.StmpTrdBankPtTxFmtDsc, 10) * rate,
          FstFontSize: parseInt(conf.StmpFstBankPtTxFmtDsc, 10) * rate,
          TrdFontSize: parseInt(conf.StmpTrdBankPtTxFmtDsc, 10) * rate
        })
        conf.callback({
          height: '144',
          width: '144',
          svg: svg,
          type: 'svg'
        })
      } else if (type === 'img') {
        img.width = img.width * rate // 直接缩放img避免模糊
        img.height = img.height * rate
        canvas.height = img.width
        canvas.width = img.height
        ctx.drawImage(img, 0, 0, img.width, img.height)        
        ctx.font = conf.StmpFstBankPtTxFmtDsc * rate + 'px 宋体'
        ctx.fillStyle = '#000000'
        ctx.textAlign = 'center'
        ctx.fillText(conf.StmpFstBankPrtTxCntnt, canvas.width / 2, parseInt(conf.StmpFstBankPTYCordVal, 10) * rate + parseInt(conf.StmpFstBankPtTxFmtDsc, 10) * rate)
        ctx.fillText(conf.StmpSndBankPrtTxCntnt, canvas.width / 2, parseInt(conf.StmpSndBankPTYCordVal, 10) * rate + parseInt(conf.StmpFstBankPtTxFmtDsc, 10) * rate)
        ctx.font = conf.StmpTrdBankPtTxFmtDsc * rate + 'px 宋体'
        ctx.fillText(conf.ValiCd, canvas.width / 2, parseInt(conf.StmpTrdBankPTYCordVal, 10) * rate + parseInt(conf.StmpTrdBankPtTxFmtDsc, 10) * rate)

        conf.callback({
          base64: canvas.toDataURL('image/png'),
          height: img.height,
          width: img.width,
          type: 'img'
        })
      }       
    }
    img.onerror = function () {
      conf.callback()
    }
    img.src = 'data:image/jpg;base64,' + conf.sealBase64
  }

  exports._composeSeal = _composeSeal

  /**
   * 根据A0161M539，获取印章识别码
   * conf.jsonData  m539交易的jsondata
   * conf.callback 
   *    success: true
   *    sealArray: seal信息数组(可能有多个)
   * 
   *    success: false
   *    errMsg: 错误信息
   */

  exports.getTransSeal = function(conf) {

    var _errCb = function(errMsg) {
      conf.callback({
        success: false,
        errMsg: errMsg
      })
    }
    // 机构电子印章开关关闭
    if (!PJF.roleInfo._elec_seal_switch) {
      _errCb('机构电子印章关闭')
      return
    }

    PJF.communication.cpsJsonReq({
      url: 'ecpJson',
      fwServiceId: 'simpleTransaction',
      fwTranId: 'A0161M539',
      loadingText: '正在查询电子印章识别码',
      maskAll: true,
      jsonData: JSON.stringify($.extend({
        Txn_Dt_Tm: PJF.communication.getServerTime('yyyyMMddHHmmssSSS') || PJF.util.formatDate(new Date(), 'yyyyMMddHHmmssSSS'),
        Txn_Chnl_Cd: '02',
        Vchr_RePrt_Cnt: '0',
        Txn_InsID: PJF.roleInfo.orgCode,
        Txn_TrID: PJF.otherInfo.devId
      } ,conf.jsonData)),
      success: function(data) {
        // 查询印章md5, nas路径
        var loadingQuery = new PJF.ui.loading({msg: '正在查询电子印章数据...'})
        var ajaxPromiseArr = []
        for (var i = 0, vchr; vchr = data.Vchr_Grp[i]; i++) {
          // 该印章没有打开
          if (data.Vchr_Grp[i].Eltc_Stmp_Wthr_Us_Ind === 'N') {
            loadingQuery.destroy()
            console.log('该机构电子印章没有开启')
            _errCb('该机构电子印章没有开启')
            return
          }
          ajaxPromiseArr.push($.ajax({
            url: 'ecpJson',
            dataType: 'json',
            data: {
              _fw_service_id: 'getElecSealInfo',
              jsonData: JSON.stringify({sealID: conf.jsonData.Vchr_Grp[i].Stmp_Bsn_Ctlg_ID})
            }
          }))
        }

        $.when.apply(null, ajaxPromiseArr).done(function(){
          loadingQuery.destroy()
          var composeSealPromiseArr = [] // 合成印章的promise数组
          var loadingCompose = new PJF.ui.loading({msg: '正在合成电子印章数据...'})
          // when方法若只有一个promise, 那么arguments就算resolvewith一个数组，但是arguments也不会是[Array]的结构...
          var ajaxResults = ajaxPromiseArr.length == 1 ? [arguments] : arguments
          for (var i = 0, len = ajaxResults.length; i < len; i++) {
            var deferred = $.Deferred()
            composeSealPromiseArr.push(deferred.promise())
            // jquery ajax defer返回格式是[ data, statusText, jqXHR ]            
            var sealInfo = ajaxResults[i][0] 
            ;(function(deferred, sealInfo, i){
              if (sealInfo.sealMD5) { // 存在
                //downLoad({
                PJF.stm.util.elecSealHandler({
                  sealId: conf.jsonData.Vchr_Grp[i].Stmp_Bsn_Ctlg_ID,
                  sealRemotePath: sealInfo.sealPath,
                  sealFileMd5: sealInfo.sealMD5,
                }, function(downResult) {
                  if (downResult.status == 0) {
                    console.log('电子印章下载失败')
                    deferred.rejectWith(null, [downResult.errorMsg])
                  } else { // 下载成功
                    var sealBase64 = PJF.communication.fileSystem.readImage(downResult.localUrl)
                    //var sealBase64 = downResult.path
                    if (sealBase64.success) {
                      console.log('电子印章读取成功')
                      sealBase64 = sealBase64.result
                      // 合成电子印章
                      _composeSeal($.extend({
                        sealBase64: sealBase64,
                        callback: function(composeBase64Info) {
                          if (composeBase64Info)
                            deferred.resolveWith(null, [composeBase64Info])
                          else {
                            console.log('电子印章合成失败')
                            deferred.rejectWith(null, ['电子印章合成失败'])
                          }
                        }
                      }, data.Vchr_Grp[i]))
                    } else {
                      console.log('电子印章读取失败')
                      deferred.rejectWith(null, ['电子印章读取失败:' + sealBase64.error])
                    }
                  }
                })
              } else { // 服务报错或者seal不存在
                console.log('getElecSealInfo 电子印章不存在')
                deferred.rejectWith(null, ['电子印章查询失败'])
              }
            })(deferred, sealInfo, i);
          }

          $.when.apply(null, composeSealPromiseArr).done(function(){
            loadingCompose.destroy()
            conf.callback({
              success: true,
              Vchr_Grp: data.Vchr_Grp,
              sealArray: Array.prototype.slice.apply(arguments)
            })
          }).fail(function(errMsg){
            loadingCompose.destroy()
            _errCb(errMsg)
          })
        }).fail(function(jq, ts, err){
          loadingQuery.destroy()
          _errCb(ts + ' ' + err)
        })      
      },
      failure: function(data) {
        _errCb(data.BK_DESC)
      }
    })
  }

  /**
   *  生成打印的grid片段
   *  data  需要打印的数据
   *  obj 打印设置 
   *  配置说明：
    defaultFontSize: number, //默认为12px
    width: number, //page的宽度
    height: number, //page的高度
    showPageNumber:boolean, // 为true表示显示页脚
    autoPage :boolean，为true表示忽略分页设置，根据内容自动分页 
    verticalPrint: boolean，默认纵向打印,当为false时 则采用横向打印
    fixedColumnWidth :为JSON对象，用于设置自定义的列宽,如{"付款方开户行名称" : 100,"代理企业账号":100,"摘要" : 100},
    gridConf :为JSON对象，用于配制与grid相关的参数，如下： 
    { 
    showCheckbox:false,// 显示checkbox 
    showRowNumber:true,// 显示行号 
    },
    pageRenderCallBack: function //页面渲染回调
    sealCfg: Object // 是否开启电子印章, 对象
    ..CALLOUT_TXN_CD: 外呼交易码
    ..sealLeft: 印章横坐标, 默认为0
    ..sealTop: 印章纵坐标, 默认为0
    ..Vchr_Grp: 具体印章相关数据，数组(目前只需要长度为1)
    ....Ovrlsttn_Trck_No: 交易对应的全局跟踪号(必填)
    ....Clmn_Opt_Dsc: 校验印章栏位描述(具体参见A0161M539，可选)
  */
  
  exports.savePaginationHtml = function (data, conf) {
    if (conf.sealCfg) { // 配置电子印章功能的话，该api将变为异步
      var _sealId = '001'
      conf.sealCfg = $.extend({
        sealLeft: 0,
        sealTop: 0
      }, conf.sealCfg)
      // 先查询印章电子识别码, 发送A0161M539交易
      conf.sealCfg.Vchr_Grp && conf.sealCfg.Vchr_Grp.forEach(function(vchr) {
        var temp = {
          Stmp_Bsn_Ctlg_ID: _sealId,
          VchID: PJF.util.generateUUid()
        }
        $.extend(temp, vchr)
        $.extend(vchr, temp)
      })
      
      exports.getTransSeal({
        jsonData: conf.sealCfg,
        callback: function(sealData) {
          if (sealData.success) {
            conf.sealInfo = {
              sealContent: sealData.sealArray[0], // 分页打印这个只会生成1个印章
              sealLeft: conf.sealCfg.sealLeft || 0,
              sealTop: conf.sealCfg.sealTop || 0,
              Vchr_Grp: sealData.Vchr_Grp
            }
          }
          var saveHtmlResult = _savePaginationHtml(data, conf)
          if (!sealData.success) {
            saveHtmlResult.sealSuccess = false
            saveHtmlResult.sealErrMsg = sealData.errMsg
          } else {
            saveHtmlResult.Vchr_Grp = sealData.Vchr_Grp
            saveHtmlResult.sealInfo = conf.sealInfo
            saveHtmlResult.sealSuccess = true
          }
          conf.callback(saveHtmlResult)
        }
      })
    } else if (conf.sealInfo) { // 已经有sealInfo了， 现在使用场景是生成两份，一份是加密的，一份是没加密的
      var saveHtmlResult = _savePaginationHtml(data, conf)
      saveHtmlResult.Vchr_Grp = conf.sealInfo.Vchr_Grp
      saveHtmlResult.sealInfo = conf.sealInfo
      saveHtmlResult.sealSuccess = true
      conf.callback(saveHtmlResult)
    } else {
      return _savePaginationHtml(data, conf)
    }
  }
  var _savePaginationHtml = function (data, obj) {
    var me = {
      bodyCss: ""
    };
    var conf = {};
    conf = $.extend(conf, obj);
    var allRows = data && data.allRows;
    if (!allRows) {
      alert('无可打印的数据');
      return {success: false, errMsg: '无可打印的数据'};
    }
    var totalRec = allRows.length; // EEE
    if (totalRec == 0) {
      alert('无可打印的数据');
      return {success: false, errMsg: '无可打印的数据'};
    }

    if (!data.printMeta) {
      alert("返回数据格式不正确，不存在printMeta属性！");
      return {success: false, errMsg: '返回数据格式不正确，不存在printMeta属性！'};
    }

    if (!data.printMeta.firstPageNum || !data.printMeta.otherPageNum) {
      alert("返回数据格式不正确，不存在 firstPageNum或者 otherPageNum 属性！");
      return {success: false, errMsg: '返回数据格式不正确，不存在 firstPageNum或者 otherPageNum 属性！'};
    }

    // 显示窗口 
    // 1. 判断是否有更多数据
    try {
      // 没传该参数 则将默认为0
      me.hasMore = parseInt(data.hasMore);
    } catch (e) {
      me.hasMore = 0;
    }
    var p = {
      // 字体、列宽等控制
      // 默认情况下的固定列宽,如果用户在colWidthList中指定了列宽 则是用新值 ，否则使用 conf.defaultFontSize*colTitleLength
      defaultColWidth: conf.defaultColWidth,
      // 标题左右间距之和 4px 可以缩小该值 比如 2
      defaultTitleMargin: conf.defaultTitleMargin || 4,
      // 默认字体大小为12px
      defaultFontSize: conf.defaultFontSize || 12,
      // 默认列的最小宽度 4个字的宽度 即无论如何设置都不能小于该值
      defaultMinColWidth: conf.defaultMinColWidth || ((conf.defaultFontSize || 12) * 4),
      // 默认表头高度
      defaultHeadHeight: conf.defaultHeadHeight,
      fixedColumnWidth: conf.fixedColumnWidth,
      autoPage: conf.autoPage,
      isRepeat: true,
      width: conf.width,
      height: conf.height,
      verticalPrint: (typeof conf.verticalPrint === 'undefined' ? true : conf.verticalPrint),
      showPageNumber: conf.showPageNumber, // 是否显示页码
      nowrap: conf.nowrap, // 是否存在换行 true 为没有换行，默认均有换行
      isHeadAttachedAllPage: !!conf.isHeadAttachedAllPage,
      pageRenderCallBack: conf.pageRenderCallBack, // 每次渲染一页时的回调函数
      // 保存grid相关参数 待后续完善
      gridConf: $.extend({
        showRowNumber: true, // 是否显示行号 默认显示
        showCheckbox: false // 是否显示checkbox 默认不显示
        // 待定参数
      }, conf.gridConf),
      reqParamsBak: {} // 备份回传的参数
    };
    me.p = p;
    // =====================高度设置================================
    var pageWidth = 965; // 每页page最大的打印px宽度
    var pageHeight = 630; // 每页paper最大打印px高度

    if (me.p.verticalPrint == 1) { // 纵向打印 
      pageWidth = 750;
      pageHeight = 965;
    }
    me.p.width && (pageWidth = me.p.width);
    me.p.height && (pageHeight = me.p.height);

    var fixRowCount = 3;
    var gridHeadHeight = 30; // grid 表头行高
    var pageTitleHeight = 50; // 页面大标题高度 

    var headAttachHeight = 30; // 页头小标题 高度  临时值 后续再initBaseParams中修改

    var endAttachHeight = 30; //  页脚高度

    // IE6 20PX  IE78 25 IE9 24 PX
    var gridRowHeight = 25; // 一行的高度 
    var fixHeight = 2; // 高度矫正值 


    //=====================宽度设置================================
    var rowNumberWidth = 30; // 行号宽度
    var checkboxWidth = 27; // checkbox宽度 

    var gridWidth = pageWidth; // grid 默认情况为列宽之后 ， 最大为纸的宽度 

    var showCheckbox = me.p.gridConf.showCheckbox; // 是否显示checkbox
    var showRowNumber = me.p.gridConf.showRowNumber; // 是否显示rownumber
    var showPageNumber = me.p.showPageNumber; // 是否显示页码

    // 列展示最大宽度
    var containerMaxWidth = gridWidth - (showRowNumber ? rowNumberWidth : 0) - (showCheckbox ? checkboxWidth : 0) - 4; // 4px边框 其中2px左右边框 2px 左右间距
    // 列名数组
    var columnList = data.printMeta.columnList;
    // 列宽度控制
    var columnWidthList = data.printMeta.columnWidthList || [];

    // 每个单元格占据左右各4px内边距
    containerMaxWidth -= columnList.length * me.p.defaultTitleMargin;

    // 附加小标题 高度(initParam)
    var firstHeadAttachHeight = 0;

    // 整个grid外观宽度（除去边框、左右间距）
    var gridContentMaxWidth = gridWidth - 4; // 4px边框 其中2px左右边框 2px 左右间距
    var colsWidthObj = {}; // 保存每一列的宽度 key ='1' value=int

    var currRowIndex = 0; // 当前解析数据起始索引

    // 宽度设定
    var pageDomParams = {
      // 小标题 
      attachInfo_OuterWidth: pageWidth, // table 外宽
      attachInfo_LabelWidth: me.p.verticalPrint ? 104 : 241, // label　宽度
      attachInfo_ContentWidth: me.p.verticalPrint ? 191 : 241, // content 宽度
      // 小标题（附加） 外宽
      firstAttachInfo_OutWidth: pageWidth,
      // 小标题（附加） container外宽  (可能需要居中 故预留以配合CSS)
      // 宽度-10 padding设置为5px
      firstAttachInfoContainer_OutWidth: pageWidth - 10
    };

    // page Dom 基础结构
    var pageDomStruc = {

      pageTitle: '<div class="page-title">', // 大标题
      // 附加信息
      attachOuterHTML: '<div class="attach-info" >', // 包装小标题
      attachOuterHTML_EMPTY: '<div class="attach-info attach-info-empty">',
      attachEndHTML: '</div>',
      headAttach: '<span class="page-head-attach">', // 小标题
      endAttach: '<span class="page-foot-attach">', // 末页页脚
      pageTitleEnd: '</div>',
      attachEnd: '</span>',

      // 外层div
      firstHeadAttachOutHTML: '<div class="first-head-attach-info" style="width:' + pageDomParams.firstAttachInfo_OutWidth + 'px;">',
      firstHeadAttachEndHTML: '</div>',
      firstHeadAttachContainerHTML: '<div class="first-head-attach-container" style="width:' + pageDomParams.firstAttachInfoContainer_OutWidth + 'px;">',
      firstHeadAttachDetailLeftHTML: '<span class="first-head-attach-detail left">',
      firstHeadAttachDetailRightHTML: '<span class="first-head-attach-detail right">',
      firstHeadAttachDetailEndHTML: '</span>',
      firstHeadAttachContainerEndHTML: '</div>',

      // 附加信息 新版本
      attachInfoOuterHTML: '<div class="pjf_table_div" style="width: ' + pageDomParams.attachInfo_OuterWidth + 'px;"><table class="pjf_table" style="width: ' + pageDomParams.attachInfo_OuterWidth + 'px;"><tbody>',
      attachInfoEndHTML: '</tbody></table></div>',
      // label html
      attachInfoLabelHTML: '<td class="pjf_td_label" style="width: ' + pageDomParams.attachInfo_LabelWidth + 'px;">',
      attachInfoLabelEndHTML: '</td>',
      // content html
      attachInfoContentHTML: '<td class="pjf_td_content" style="width: ' + pageDomParams.attachInfo_ContentWidth + 'px;">',
      attachInfoContentEndHTML: '</td>',

      // bottom label html
      attachInfoBottomLabelHTML: '<td class="pjf_td_label" style="width: ' + pageDomParams.attachInfo_LabelWidth + 'px;border-bottom: 1px solid rgb(134, 189, 236);">',
      attachInfoBottomLabelEndHTML: '</td>',
      // bottom content html
      attachInfoBottomContentHTML: '<td class="pjf_td_content" style="width: ' + pageDomParams.attachInfo_ContentWidth + 'px;border-bottom: 1px solid rgb(134, 189, 236);">',
      attachInfoBottomContentEndHTML: '</td>',
      // 普通 页脚容器
      footerContainerHTML: '<div class="footer-info" >', // 页脚
      footerContainerEndHTML: '</div>', // 页脚容器结束
      // 页脚span
      footerHTML: '<span class="page-footer">',
      footerEndHTML: '</span>',

      baseOuterHTML: '<div class="panel datagrid" style="width:' + gridWidth + 'px;">' + '<div class="datagrid-wrap panel-body panel-body-noheader" title="" style="width: auto; ">', //height: 362px;

      baseEndHTML: '</div></div>',
      gridViewEnd: '</div>',
      gridView2: '<div class="datagrid-view2" style="height: auto; left:0px;">',
      gridView2End: '</div>',
      //下行代码 style height 改为 min-height zws modify 2016年4月7日16:08:24
      headView: '<div class="datagrid-header" style=" min-height: ' + (me.p.defaultHeadHeight || 29) + 'px;"><div class="datagrid-header-inner" style="display: block;">',
      headViewEnd: '</div></div>',
      bodyView: '<div class="datagrid-body" style="height: auto;">',
      bodyViewEnd: '</div>'
    };

    // 保存最小宽度
    var colsMinWidth = {};

    // 每页都显示页头
    var isHeadAttachedAllPage = me.p.isHeadAttachedAllPage;

    // 初始化基础数据  主要保存每列的最小宽度 --- 主要根据表头来设置 
    // 剔除高度计算
    initBaseParams();
    // 首页最大能够用于显示表格(含grid表头)的高度
    var firstPageGridMaxHeight = pageHeight - pageTitleHeight - headAttachHeight - endAttachHeight - fixHeight;

    // 其它页 最大用于显示表格(含grid表头)的高度
    var commonPageGridMaxHeight = pageHeight - fixHeight - endAttachHeight;
    // 所有页都要显示页头(其中默认是包含了大标题)
    if (isHeadAttachedAllPage) {
      commonPageGridMaxHeight -= pageTitleHeight + headAttachHeight;
    }

    var hasNotInit = true; // 设置是否初始化 以过滤掉多余的计算过程

    me.printDatas = []; // 待打印的内容

    var pageRowCount = {
      // 首页显示条数
      firstPage: parseInt(data.printMeta.firstPageNum),
      // 其它页显示条数
      otherPage: parseInt(data.printMeta.otherPageNum)
    };
    // 循环中需要使用的变量
    var showHeadAttach = true; //是否显示小标题
    var showEndAttach = true; // 是否显示页脚 默认每页都显示

    // 当前页显示多少条
    var currentPageRowCount = me.p.hasPrint ? pageRowCount.otherPage : pageRowCount.firstPage;

    me.p.rowNumber = me.p.rowNumber || 1; // 显示的行号

    var currentGridHeight = 0; // grid的显示高度 包含表头、行内容

    // 页码号  需要连着 ， 第二次打印 需要接着第一次打印的条数开始打印
    var currentPageNumber = me.p.currentPageNumber || 0;

    // 标记是否为最后一页
    var isLastPage = false;

    //设置表格列宽
    updateGridCellWidth();
    var pageCount = 0;
    if (!me.p.autoPage) {
      for (; currRowIndex < totalRec;) {
        currentGridHeight = initPaginationParams(); // 更新分页参数
        var realPageRowCount = -1;
        realPageRowCount = currentPageRowCount;
        // 在执行每页渲染前回调 以便动态设置页头 页脚等信息
        if (currRowIndex + realPageRowCount >= totalRec) {
          realPageRowCount = totalRec - currRowIndex;
        }

        var pageDomHTML = makePageDom(currRowIndex, realPageRowCount);
        me.printDatas.push(pageDomHTML);
        currRowIndex += realPageRowCount;
        pageCount++;
      }
    } else {
      var $container = $('<div></div>').appendTo($('body'));

      //生成虚拟页面，计算每行数据高度
      currentGridHeight = initPaginationParams();
      var pageDomHTML = makePageDom(currRowIndex, 0);
      $container.append("<style type='text/css'>" + me.bodyCss + "</style>");
      $container.append(pageDomHTML.replace(/\'/g, '＇'));

      var $datagrid_body = $container.find(".datagrid-body").find("tbody")[0];
      var height_header = $($container.find(".datagrid-header")).height();
      for (; currRowIndex < totalRec;) {
        var oldRowIndex = currRowIndex;
        var height = height_header;
        for (var i = currRowIndex; i < totalRec; i++) {
          me.p.rowNumber = 0;
          $datagrid_body.innerHTML = makeRowDom(i, true).replace(/\'/g, '＇');
          height += $($datagrid_body).height();
          if (height > currentGridHeight) { //超出表格高度
            height -= $($datagrid_body).height();
            currRowIndex = i;
            break;
          } else if (i == (totalRec - 1)) { //最后一行特殊处理，否则出现死循环
            currRowIndex = i + 1;
            break;
          }
        }

        me.p.rowNumber = oldRowIndex + 1;
        pageDomHTML = makePageDom(oldRowIndex, currRowIndex - oldRowIndex, height);
        me.printDatas.push(pageDomHTML);
        currentGridHeight = initPaginationParams(); // 更新分页参数
        pageCount++;

      }
      $container.remove();
    }

    //return ("<style type='text/css'>" + me.bodyCss + "</style>" + me.printDatas.join("").replace(/\'/g,'＇').replace(/共total页/g,'共'+pageCount+'页'));
    var html = '<!DOCTYPE html><html><head><meta http-equiv="X-UA-Compatible" content="IE=11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"></head><body>';
    html += "<style type='text/css'>" + me.bodyCss + "</style>" + me.printDatas.join("").replace(/\'/g, '＇').replace(/共total页/g, '共' + pageCount + '页');
    html += '</body></html>';
    var fileName = PJF.otherInfo.devId + Date.now() + PJF.util.generateUUid() + '.html';
    var res = PJF.communication.writeTextFile(fileName, html);
    if (res.success) {
      return {
        'path': res.result.replace(new RegExp("\\\\", "gm"), "/"),
        'count': pageCount,
        'success': true
      };
    } else {
      return {
        'errMsg': res.error,
        'success': false
      };
    }
    // 初始化基础数据
    function initBaseParams() {
      for (var x = 0; x < columnList.length; x++) {
        if (columnWidthList[x]) {
          // 指定了列宽
          columnWidthList[x] = parseInt(columnWidthList[x]);
        }
        colsMinWidth[x] = columnWidthList[x] || me.p.defaultColWidth || (columnList[x].length * me.p.defaultFontSize);
      }

      // 附加小标题 必输而偶数
      var headAttach = data.printMeta.headAttach || [];

      // 小标题前的附加小标题
      var firstHeadAttach = [];
      // 遍历 获取#起始的信息 以#开头的标题 是放在小标题前面的
      if (headAttach.length) {
        for (var x = 0; x < headAttach.length; x++) {
          var row = headAttach[x];
          if (row.des.substr(0, 1) == '#') {
            row.des = row.des.substr(1);
            firstHeadAttach.push(row);
            headAttach.splice(x, 1);
            x--;
          }
        }
      }

      // 复制新的headAttach
      data.printMeta.headAttach = headAttach;
      // 奇数情况下
      if (headAttach.length % 2 == 1) {
        data.printMeta.headAttach.push({
          "key": "",
          "value": "",
          "des": ""
        });
      }
      if (firstHeadAttach.length % 2 == 1) {
        firstHeadAttach.push({
          "key": "",
          "value": "",
          "des": ""
        });
      }
      data.printMeta.firstHeadAttach = firstHeadAttach;

      // 计算小标题的高度
      if (headAttach.length) {
        // 每行26px 1px 边框 2px 与grid的间距
        headAttachHeight = (headAttach.length / 2) * 26 + 1 + 2;
        firstHeadAttachHeight = (firstHeadAttach.length / 2) * 26;
        // 2px间距(附加小标题与小标题间2px间距)
        headAttachHeight += firstHeadAttachHeight + 2;
      }

      // 所有页都显示表头的情况 只支持单行表头
      if (isHeadAttachedAllPage) {
        headAttachHeight = 30;
      }
    };

    /**
     * 更新分页参数
     * 并返回每页grid的宽度
     * @return {[type]}
     */
    function initPaginationParams() {
      currentPageNumber++;
      if (currRowIndex == 0) { // 首页
        showHeadAttach = true;
        // 是否已经打印过了，如果打印过了，则返回的应该是普通页的高度
        return me.p.hasPrint ? commonPageGridMaxHeight : firstPageGridMaxHeight;
      } else { // 非首页
        showHeadAttach = false;
        if (isHeadAttachedAllPage) {
          showHeadAttach = true;
        }
        currentPageRowCount = pageRowCount.otherPage;
        return commonPageGridMaxHeight;
      }
    };

    // 生成某一页 Dom String
    // 根据rows 生成一个固定高度的grid,并可能附加head
    /**
     *  rowIndexStart 从data.allRows 第几行开始解析 int>=0
     *  showRowCount 解析多少行 int
     *  showHeight 每页显示的高度
     */

    function makePageDom(rowIndexStart, showRowCount, showHeight) {
      var pageDomArray = []; //保存domString
      // 判断是否为最后一页
      isLastPage = (rowIndexStart + showRowCount < totalRec) ? false : true;
      pageDomArray.push('<div class="page-start" style="position:relative;width:' + gridWidth + 'px;' + (isLastPage ? '' : 'page-break-after:always;') + '">');
      if (conf.sealInfo) {
        pageDomArray.push(PJF.util.formatTpl('<div style = "width:{{width}}px;height:{{height}}px;position:absolute;z-index:-1;left:{{left}};top:{{top}};">', {
          width: conf.sealInfo.sealContent.width, // 图片高
          height: conf.sealInfo.sealContent.height, // 图片宽
          left: conf.sealInfo.sealLeft, // 应用给的left
          top: conf.sealInfo.sealTop  // 应用给的top
        }))
        if (conf.sealInfo.sealContent.type == 'img') {          
          pageDomArray.push('<img src = "' + conf.sealInfo.sealContent.base64 + '" style="position:absolute"></img>')
          var rate = _sealRate
          // 下面的是采用dom添加文字的方式
          /* if (conf.sealInfo.Vchr_Grp && conf.sealInfo.Vchr_Grp[0]) {
            var vchr = conf.sealInfo.Vchr_Grp[0]
            var _position = [{
              top: parseInt(vchr.StmpFstBankPTYCordVal, 10) * rate + 'px',
              word: vchr.StmpFstBankPrtTxCntnt,
              font: parseInt(vchr.StmpFstBankPtTxFmtDsc, 10) * rate + 'px'
            }, {
              top: parseInt(vchr.StmpSndBankPTYCordVal, 10) * rate + 'px',
              word: vchr.StmpSndBankPrtTxCntnt,
              font: parseInt(vchr.StmpFstBankPtTxFmtDsc, 10) * rate + 'px'
            }, {
              top: parseInt(vchr.StmpTrdBankPTYCordVal, 10) * rate + 'px',
              word: vchr.ValiCd,
              font: parseInt(vchr.StmpTrdBankPtTxFmtDsc, 10) * rate + 'px'
            }]
            _position.forEach(function (p) {
              pageDomArray.push(PJF.util.formatTpl('<span style="width:100%;text-align:center;position:absolute;top:{{top}};font-size:{{font}}">{{word}}</span>', p))
            })
          } */          
        } else if (conf.sealInfo.sealContent.type === 'svg') {
          pageDomArray.push(conf.sealInfo.sealContent.svg)
        }
        pageDomArray.push('</div>')
      }
      
      showHeadAttach && pageDomArray.push(makePageHeadDom()); // 可能的title headAttach

      pageDomArray.push(pageDomStruc.baseOuterHTML);
      var height = showHeight ? showHeight : currentGridHeight;
      pageDomArray.push('<div class="datagrid-view" style="height: ' + (height) + 'px; ">');
      
      pageDomArray.push(pageDomStruc.gridView2); // ----view2 start
      pageDomArray.push(pageDomStruc.headView);
      pageDomArray.push(makeHeadDom());
      pageDomArray.push(pageDomStruc.headViewEnd);
      pageDomArray.push(pageDomStruc.bodyView);
      // 中途剔除内容
      var bodyDomJSON = makeBodyDom(rowIndexStart, showRowCount);

      pageDomArray.push(bodyDomJSON.header);
      pageDomArray.push(bodyDomJSON.content);
      pageDomArray.push(bodyDomJSON.footer);

      pageDomArray.push(pageDomStruc.bodyViewEnd);
      pageDomArray.push(pageDomStruc.gridView2End); // ----view2 end

      pageDomArray.push(pageDomStruc.gridViewEnd); // ======= end

      pageDomArray.push(pageDomStruc.baseEndHTML);

      pageDomArray.push(makePageFooterDom(rowIndexStart, showRowCount, showEndAttach));

      pageDomArray.push("</div>");

      return pageDomArray.join("");
    };

    // 生成可能有的小标题

    function makePageHeadDom() {
      // 如果已经打印过了，则不能再打印head了
      if (me.p.hasPrint) {
        //return "";
      }

      var pageHeadDomArray = [];
      var headAttach = data.printMeta.headAttach;
      var firstHeadAttach = data.printMeta.firstHeadAttach;
      var title = data.printMeta.title;
      // 大标题
      title && pageHeadDomArray.push(pageDomStruc.pageTitle + title + pageDomStruc.pageTitleEnd);

      if (headAttach) {
        pageHeadDomArray.push(pageDomStruc.attachOuterHTML);
        var separator = "";
        for (var i = 0, len = headAttach.length; i < len; i++) {
          var obj = headAttach[i];
          if (!obj['des']) {
            separator = "";
          } else {
            separator = "：";
          }
          pageHeadDomArray.push(pageDomStruc.headAttach + obj['des'] + separator + obj['value'] + pageDomStruc.attachEnd);
        }
        pageHeadDomArray.push(pageDomStruc.attachEndHTML);
        return pageHeadDomArray.join("");
      }

    };
    // 生成页脚

    function makePageFooterDom(rowIndexStart, showRowCount, showEndAttach) {
      var pageFooterDom = [];
      // 判断是否为最后一页
      var isLastPage = (rowIndexStart + showRowCount < totalRec) ? false : true;
      var endAttach = data.printMeta.endAttach;
      if (endAttach) {
        pageFooterDom.push(pageDomStruc.attachOuterHTML);
        var len = endAttach.length;
        for (var x = 0; x < len; x++) {
          var obj = endAttach[x];
          pageFooterDom.push(pageDomStruc.endAttach + obj['des'] + "：" + obj['value'] + pageDomStruc.attachEnd);
        }
        pageFooterDom.push(pageDomStruc.attachEndHTML);
      }
      if (showPageNumber) {
        var pageNumber = showPageNumber ? currentPageNumber : ''
        pageFooterDom.push(pageDomStruc.footerContainerHTML);
        pageFooterDom.push(pageDomStruc.footerHTML + '- 第' + pageNumber + '页' + " /共total页 -" + pageDomStruc.footerEndHTML);
        pageFooterDom.push(pageDomStruc.footerContainerEndHTML);
      }

      return pageFooterDom.join("");
    };

    // 生成每行内容
    function makeRowDom(rowIndex, flag) {
      var gridBodyDomContentArray = [];
      var newRowIndex = flag ? 0 : currRowIndex;

      gridBodyDomContentArray.push('<tr class="datagrid-row ' + (rowIndex % 2 == 1 ? "datagrid-row-alt" : "") + '" datagrid-row-index="0"  style="height:' + 24 + 'px;">');
      showRowNumber && gridBodyDomContentArray.push('<td class="datagrid-td-rownumber" style="width:25px;"><div class="datagrid-cell-rownumber">' + (me.p.rowNumber++) + '</div></td>');
      showCheckbox && gridBodyDomContentArray.push('<td field="ck" style="width:27px;"><div class="datagrid-cell-check " style=""><input type="checkbox" value="" name="ck" textcontent="cell"></div></td>');
      var row = allRows[rowIndex];
      var length = row.length;
      for (var i = 0; i < length; i++) {
        gridBodyDomContentArray.push('<td field="col_' + i + '" class="datagrid-cell-' + newRowIndex + '-' + i + '"><div class="datagrid-cell datagrid-cell-' + newRowIndex + '-' + i + '" style="height:auto;">' + row[i] + '</div></td>');
      }
      gridBodyDomContentArray.push("</tr>");
      return gridBodyDomContentArray.join("");
    };

    // 生成body内容
    function makeBodyDom(rowIndexStart, showRowCount) {
      var gridBodyDomJSON = {};

      var gridBodyDomBeginArray = [];
      gridBodyDomBeginArray.push(pageDomStruc.bodyView);
      // style="width: 1153px;" 删除
      gridBodyDomBeginArray.push('<table border="0" cellspacing="0" cellpadding="0" class="datagrid-btable datagrid-table-' + currRowIndex + '" ><tbody>');
      if (totalRec <= showRowCount + rowIndexStart) {
        // console.warn('Error: 没有多余行可供显示');
        showRowCount = totalRec - rowIndexStart;
      }
      gridBodyDomJSON.header = gridBodyDomBeginArray.join("");

      var allRowDom = []; // 保存所有行的信息
      for (var x = 0; x < showRowCount; x++) {
        allRowDom.push(makeRowDom(x + rowIndexStart));
      }
      //现在改为将css统一到一个style中，因为IE发现最多26个style标签
      me.bodyCss += makeStyle();
      // 保存body区内容
      gridBodyDomJSON.content = allRowDom.join("");

      var gridBodyDomEndArray = [];
      gridBodyDomEndArray.push('</tbody></table>');
      gridBodyDomEndArray.push(pageDomStruc.bodyViewEnd);
      gridBodyDomJSON.footer = gridBodyDomEndArray.join("");

      return gridBodyDomJSON;
    };

    // 生成head内容
    function makeHeadDom() {
      var gridHeadDomArray = [];

      gridHeadDomArray.push('<table border="0" cellspacing="0" cellpadding="0" class="datagrid-htable datagrid-table-' + currRowIndex + '" style="min-height: 30px;"><tbody><tr class="datagrid-header-row">');

      showRowNumber && gridHeadDomArray.push('<td rowspan="0" style="width:25px;"><div class="datagrid-header-rownumber"></div></td>');
      showCheckbox && gridHeadDomArray.push('<td field="ck" style="width:27px;"><div class="datagrid-header-check"><input type="checkbox" textcontent="header"></div></td>');


      var len = columnList.length;
      for (var x = 0; x < len; x++) {
        gridHeadDomArray.push('<td field="col_' + x + '" class="datagrid-cell-' + currRowIndex + '-' + x + '">' +
          '<div class="datagrid-cell datagrid-cell-' + currRowIndex + '-' + x + '"><span style="white-space: normal;">' + columnList[x] + '</span></div></td>');
      }
      gridHeadDomArray.push('</tr></tbody></table>');

      return gridHeadDomArray.join('');
    };

    // 更新列宽
    function updateColWidth(colIndex, newWidth, adx) {
      if (adx) {
        colsWidthObj[colIndex] += adx;
        return;
      }
      if (colsWidthObj[colIndex]) {
        if (newWidth < me.p.defaultMinColWidth) {
          newWidth = me.p.defaultMinColWidth;
        }
        if (colsWidthObj[colIndex] < newWidth) {
          colsWidthObj[colIndex] = newWidth;
        }
      } else {
        colsWidthObj[colIndex] = newWidth;
      }
    };

    //表格列宽根据文字比例分，若自定义列宽度，余下的列再平均分配
    function updateGridCellWidth() {
      for (var x = 0; x < columnList.length; x++) {
        hasNotInit && updateColWidth(x, getLen(columnList[x]) * me.p.defaultFontSize);
      }
      var widthCount = 0;
      var fixedWidthCount = 0;
      var colsLen = columnList.length;
      var colsWidthArray = [];
      //下行增加表头文字总数 
      var colsTotalFonts = 0;
      for (var i = 0; i < colsLen; i++) {
        var width = 0;
        me.p.fixedColumnWidth && (width = me.p.fixedColumnWidth[columnList[i]]);
        if (!width) {
          widthCount += colsWidthObj[i];
          //下行增加表头文字总数 zws add 2016年4月7日16:06:34
          colsTotalFonts += columnList[i].length;
        } else {
          fixedWidthCount += width;
        }
        colsWidthArray.push(colsWidthObj[i]);
      }
      // 最大宽度 不足以完全容纳情况
      // 设定每列最多文字
      if (widthCount > (containerMaxWidth - fixedWidthCount)) {
        widthCount = 0;
        for (var x in colsMinWidth) {
          colsWidthObj[x] = colsMinWidth[x];
          !(me.p.fixedColumnWidth && me.p.fixedColumnWidth[columnList[x]]) && (widthCount += colsMinWidth[x]);
        }
      }

      // 最大宽度 足够容纳 则平均分配宽度到每一列上
      var allAdx = containerMaxWidth - fixedWidthCount - widthCount;

      /**
       * 宽度补足比例分配,忽略最小宽度
       * 下面代码块修改宽度补足方案，由平分改为比例分
       * 自定义列宽度，余下的列再平均分配
       * */
      var adxPerFont = allAdx / colsTotalFonts;
      for (var x = 0; x < colsLen; x++) {
        var width = 0;
        me.p.fixedColumnWidth && (width = me.p.fixedColumnWidth[columnList[x]]);
        if (width) {
          colsWidthObj[x] = width;
        } else {
          updateColWidth(x, null, adxPerFont * columnList[x].length);
        }
      }
    };
    // 设置宽度style 计算宽度是否够
    function makeStyle() {
      // 生成style
      var styleArray = [];
      styleArray.push(".page-start{margin:0;padding:0;font-family: '宋体','Microsoft Yahei','微软雅黑';}");
      styleArray.push('.page-start{margin: 0 auto;}');
      styleArray.push('.page-start div,tr,td {box-sizing: border-box;-ms-box-sizing: border-box;-moz-box-sizing: border-box;-webkit-box-sizing: border-box;}');
      styleArray.push('.datagrid-view {position: relative;overflow: hidden;border: 1px solid #000;}');
      styleArray.push('.datagrid-header {overflow: hidden;border-bottom: 1px solid #000;cursor: default;font-weight: bold;}');
      styleArray.push('.datagrid-row {height: 25px;border-bottom: 1px solid #000;}');
      // 默认换行
      styleArray.push('.datagrid-body .datagrid-cell, .datagrid-footer .datagrid-cell{white-space:normal;}')
      styleArray.push('.page-start .datagrid-cell{word-break:break-all;}')
      styleArray.push('div.first-head-attach-info{padding-bottom: 2px;height:' + firstHeadAttachHeight + 'px;line-height:' + firstHeadAttachHeight + 'px;}');
      styleArray.push('div..first-head-attach-detail,.first-head-attach-container{height: 26px; 	padding: 0px 5px;line-height: 26px;}');
      styleArray.push('div.page-title{text-align: center;font-size: 16px;font-weight: bold;height: 50px;line-height: 50px;margin: 0 auto;width:' + gridContentMaxWidth + 'px;}');
      styleArray.push('div.attach-info{margin: 0 auto;height: auto;margin-bottom: 8px;width:' + gridContentMaxWidth + 'px;font-size: ' + me.p.defaultFontSize + 'px;}');
      styleArray.push('div.footer-info{margin: 0 auto;height: 30px;text-align: center;}');
      styleArray.push('.page-head-attach{padding-right: 15px;}');
      styleArray.push('.page-foot-attach{padding-right: 15px;}');
      styleArray.push(".page-start .pjf_table_div{padding-bottom: 2px;}");
      var lineHeight = me.p.defaultFontSize + 4;
      styleArray.push('table.datagrid-table-' + currRowIndex + "{width:" + gridContentMaxWidth + "px;overflow-x:hidden;line-height:" + lineHeight + "px;}");
      var colsLen = columnList.length;
      for (var x = 0; x < colsLen; x++) {
        styleArray.push('div.datagrid-cell-' + currRowIndex + '-' + x + '{width:' + colsWidthObj[x] + 'px;}');
        styleArray.push('td.datagrid-cell-' + currRowIndex + '-' + x + '{width:' + colsWidthObj[x] + 'px;text-align:left;}');

        var css = me.p.pageRenderCallBack && me.p.pageRenderCallBack(columnList[x]);
        if (css) {
          styleArray.push('td.datagrid-cell-' + currRowIndex + '-' + x + css);
        }
      }
      // 默认字体大小 标题和内容一致 只是标题加粗
      styleArray.push(".page-start .datagrid-header td{border-right: 1px solid #000;font-size: " + me.p.defaultFontSize + "px;}");
      styleArray.push(".page-start .datagrid-body td, .datagrid-footer td{font-size: " + me.p.defaultFontSize + "px;}");
      styleArray.push(".page-start .datagrid-body td{border-bottom: 1px solid #000;border-right: 1px solid #000;}");
      styleArray.push(".page-start .datagrid-body tr td:last-child{border-right:none;}");
      styleArray.push(".page-start .datagrid-header tr td:last-child{border-right:none;}");

      // 设置标题 padding
      styleArray.push(".page-start .datagrid-header .datagrid-cell{padding:2px " + me.p.defaultTitleMargin / 2 + "px;}");
      // 设置body padding
      styleArray.push(".page-start .datagrid-body .datagrid-cell, .page-start .datagrid-footer .datagrid-cell{padding:0px " + me.p.defaultTitleMargin / 2 + "px;}");

      if (me.p.defaultHeadHeight) {
        styleArray.push(".page-start .datagrid-header .datagrid-cell{white-space: normal;}");
      }

      return styleArray.join("");

    };
    /*得到相对合适的宽度,但可能影响性能*/
    function getLen(content) {
      if (!content) {
        return 0;
      }

      // 之后考虑 更合适的宽度
      var len = content.length;

      // 英文
      var reg1 = /[a-zA-z]/g;
      var letterCount = 0;
      if (content.match(reg1) != null) {
        letterCount = content.match(reg1).length;
      }

      //匹配数字      
      var reg2 = /\d/g;
      var numberCount = 0;
      if (content.match(reg2) != null) {
        numberCount = content.match(reg2).length;
      }

      //匹配中文              

      var reg3 = /[\u4e00-\u9fa5]/g;
      var chineseCount = 0;
      if (content.match(reg3) != null) {
        chineseCount = content.match(reg3).length;
      }
      var specialCharacter = 0;
      if (letterCount + numberCount + chineseCount != len) {
        specialCharacter = len - (letterCount + numberCount + chineseCount);
      }
      return Math.round((len - chineseCount) * (4 / 7) + chineseCount);
    };
  }

  var downLoad = function (a, b) {
    b({
      status: 1,
      errorMsg:'haha1',
      path: {
        success: true,
        error: 'haha2',
        result: '/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAErASsDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3+iiigAooooAKKKKACiiigAooooAKKiuLiC0gae5mjhiQZZ5GCqPqTXB638WtG08tFpscmoTDjcPkjH4nk/gPxrOpVhTV5Ox14XA4nFy5aEHL8vv2PQapX+radpab7++t7Zeo82QKT9AeteMSeLPHPi+VotNSeOInBWyjKKv1k6j8xVzT/hFrN8/n6tqEVsW5YAmaT8eg/U1z/WpT/hRue1/YVHDa46uoeS1f9fJnY3/xV8M2eRDNcXjDtBEcfm2K527+NPUWWi/Rpp/6Af1re0/4S+HLQA3Iubxu/mS7V/Jcfzro7Pwp4fsMfZtHslYdGMIZvzOTRy4mW7SF7bI6Gkacqj83Zfhb8jyh/iz4nu2K2tnZr7Rwu5/9C/pSDxn8RLnmG3usH/nnp+f/AGU17ciJGoVFCqOgAwKdR9WqPeoxf21go/Bg4/PX9DxD/hJPif8Ae8jU8f8AYLH/AMbpD4z+IltzNb3WB/z00/H/ALKK9woo+qz/AOfjD+3cO98JD7l/keIJ8WfE9owW6s7NvaSF0P6MP5VrWnxp6C90X6tDP/Qj+teruiSKVdQynqCMism88KeH7/P2nR7JmPVhCFb8xg0exrx+Gf3of9pZVV0q4W3+GX/DGBYfFXwzeYE01xZse08Rx+a5rqrDV9O1RN9hfW9yMZPlSBiPqB0rkdQ+Evhu7ybYXNk3by5dy/k2f51yWofCLWbF/O0nUIbkryoOYZPw6j9RR7TEw+KKfoH1TJsT/CrSpvtJXX9fM9oorwqPxZ458ISrFqSTyRA4C3sZdW+knU/ma7TRPi1o2oFYtSjk0+Y8bm+eM/iOR+I/Gqhi6cnZ6PzMMTw9jKUfaU7VI946/hv91z0Giore4gu4Fntpo5onGVeNgyn6EVLXUeG007MKKKKBBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUVi+IvFGmeGLPz7+b94w/dQJy8h9h6e54pSkoq7NKVKpWmqdNXb6I2HdY0Z3YKijLMxwAPWvO/E3xYsNOL22iot9cDgzH/VKfbu34YHvXGX+ueJ/iPqJsbKF0tAc/Z4jiNB6yN3/H8BXeeF/hfpejhLnUtt/ejnDD90h9l7/U/kK4nWqVnajou59JHLcHlsVPMZc0+kF+r/r5nB22i+MfiFcLdXckgtScrLcfJEo/2FHX6gfU16BoXws0LSwsl6rajcDqZhiMH2T/ABzXcAADA6UtaU8LCLvLV+Zx4vP8VWj7Oj+7h2jp+P8AwwyKKOCJYoY0jjUYVEUAD6Cn1Xnvba2tluZp0SBiqiQn5fmIA59yRz71g6x41sdNlWK2Rr+QTJFOYSdluGO3LuAQDkjjrW8pxitWeXSw1avK0Itv+up01FFUNVvJ7W2VLOHzryc7IFI+UH+8x7KOp/LqRVN2VzGEHOSihbTVrS+1C/sYJN09iyLMPTcu4Y/UfUGor/xFo+lyLHe6lbxSMwURl8tn/dHP41ztheaHYPqWgXskRgiVXu725kCC4uHJZwTx8w+U8HjOOMUWviDwrpLw2ug6abiebcIlsbXBkwMn52wG46nJrH2um6/ryPU+oLndoSa0tsla17uXS+9raLdnaA5GQc5qK7uUs7Ke6kz5cMbSNjrgDJ/lVbSru+vLQyX+mtp824gRNMsmR2OV/lVDxpO0HgzVin3ntzCo9S/yD/0KtJStByOGlQcsRGi+rS0afXutCSx8WaFqNxbW1rqdvJcXAykSvluBkg46HHrVyLWNOm+5ew585oNrOFO9WKFcHnOQR79q4qG6TT/E1vNeaW1gNN0l2EWUZpGZ1RcbCcltpAHXNQnQrDSLjwq+qQWkV1LcyXF5dSBR+82M4Usf9pgBz/CKwVaf9fI9SeXYe+jaurrZ3spN7W6Jfeek0VHDNFcQrNBKksTjKujBlP0IqSuo8Rpp2YyWKOeJopo0kjYYZHUEH6iuJ134WaFqoaSyVtOuD3hGYyfdP8MV0mn69Z6nq9/p9q3mNYhBLIOV3NuyoPqMDP19q1azlCnVWqudlHEYrA1P3cnB6P79Vdf5ng1zovjH4e3DXVpJIbUHLS2/zxMP9tT0/EfQ12Xhn4sWGoFLbWkWxuDwJh/qmPv3X8cj3r0YgEYPSuE8UfC/S9ZD3Om7bC9PPyj905917fUfka5XQqUdaLuuzPbjmmCzBcmYw5Zfzx/Vf8P6I7pHWRFdGDIwyrKcginV4NYa54n+HGoixvYWe0Jz9nkOY3HrG3b8PxFev+HfFGmeJ7Pz7Cb94o/ewPw8Z9x6e44rajiI1HyvR9jzsxyethI+1i+em9pLb59vyNqiiiug8gKKKKACiiigAooooAKKKKACiiigAoorz7x/8QF0JH0vS3V9SYfPJ1EAP829u1RUqRpx5pHVg8HWxlZUaKu3+Hmy542+IFr4Zja0tNlxqjDiPOVi92/wrgfDvg7WPHWoNrGs3EyWbnLTv9+X2QdAPfoO2a0fAvw8k1WRdb8QK7QufMjgkJ3TE87n749u/wBOvsCqqIqIoVVGAAMACuSNOWIfPU0XRH0FfGUMog8Ngveqfan28l/X3vanpWk2Oi2KWen2yQQr2Xqx9SepPuavUhOATzx6CuQv/GmJ4J9Mh8/S4JQup3LxMPIBIGACQdw6sMHAxXXKUaaPn6VGvi5trV9W+/r3fTuzsKKpTarZW99a2Uk4+03QJhjUFiwAyTwOB7nil1SSeHSbt7WNpLkQt5SKOS+Pl/XFVzLUxVKV4pq19vyOF8OQ3F34XSwufsdlpF288fmXL7nuDI7bRGuQFxx1ySRwO9UN8k/g+bTb++gt5I45LKHSrGAF5rhOAzcEn5gG+UADIJNSRxJofiDTbfS5v7UliQ6eZbwHyLSY4KhWC4BwrAgcnucmtJtIt4fGssNzcxxX17arcR3tsBG8U8Yw4AyflZSGKtkHBrgSbVvl/X9ep9XKcY1HN7P31pro3fR3a01b3svdR1Oh6v8A2lA8E8bwaharGt3A+MxsyhhyOCCOev1xUmqT3p2WWnKVuZgc3DJlIF7sexb0XuevANc1pHiC38PQ7NbJjW+ka5j1RYz5N1v5GeMxkLgbT2HU119ne2+oWq3NrJ5kL/dcAgH6ZrqhJSja+p4GJoOhV9ooe707X/yv0evR9TmvCOmWqWeo2M8S3P2LVJhG9wodskKwbJ74brVjxOoi1fwzd4GU1DyfoJI3H9BT9BSaHxH4kSSBoo3uIpYyejgxgEj8Vqr4ms9bnvtNEEMV1YrqNvOSPlkgCsM57MuM88EZ71NrU9F/SZ08znjbyktVfV/zR18up1lcz4tiOqPpmhJI6G7uRLM0ZwyxRfMT7fNsA9zXTViwaNLLLe3t7MyX10nlI0Dn/Rox0VD65+YnufYCtaibXKcGEnGlP2rdmtvXp92/yt1OT/saaXU/E5tJrm6vbCOBLOaaTdKGCmRgrY6nfgccZpbK1XxJrdjHZ6vqN7pVvGtzeG6dHRnIykWNuM4yWHYehq7oNl4jhi1K2dVhvbq8eS41F0G0LgKvlp/ESFyM4UZ74xT7Ce38EarLpNyZhpd1/pFtdupfa+AJFkYDqSNwJ9a5VFaN6L/g6HuzrS9+NNqU0ly21+ylJ7fOK0e77X66OGCxtfLtrdY4owSsUKBR68Acc1x+uXet6jqWnaYWXS7W8djNGkgM5gQZdmccJ2AAJ69e1dpHJHNEksTrJG6hkdTkMD0IPcVyNhY2XiXVdR12/US2UbG0tVZyI2ijPzswzhgXz1yPlFb1U2lFHlYGShKdWotutru70Vk3a99dewiB79LfSfCqpZaTbSK01+i/K+0g7I/75JHzNnHXk5rU0j5PE/iFNzcyQSBc8DMQGQPfbXPabFepb32qabrlxYaDbri2F0v2hZFUHc43YYJ2UA84qTwtN4j/ALW/tbVbBGttWgiy9sMGEgts3ITnBVuSM44z3rKMtVp/l2+47q9D93UtJWStr8Tbak7t7ystUnptvv3dFFVrG/tNStVubKdJoScbkPQ9wfQ+xrqv0PA5W1zW0ItV0mx1qxez1C2SeFuzdVPqD1B9xXjXiLwdrHgXUBq+jXEz2aHKzp9+L2cdCPfoe+K9waWNZUjaRRI+dilhlsdcDvSsqujI6hlYYKkZBFY1qEavk+56mXZrWwLt8UHvF7P+v+HOM8E/EC18TRraXey31RRzHnCy+6/4V2teO+Ovh7JpUja34fV1hRvMkgjJ3Qkc7k749u306dD4A+IC66iaXqjqmpKPkk6CcD/2b279qypVpRl7Krv37nbj8so1aP17L9YdY9Y/8D+tj0Giiiuw+dCiiigAooooAKKKKACiisLxZ4lt/C+iSXsuHmb5IIifvv8A4DqamUlFXZrRozrVFSpq7eiMX4g+N08N2X2KycNqk6/L38lf7x9/Qfj9eV+HngRtTlXxBrimSFm8yCKXkzN/fbPUZ6ev065/gnwzc+Ndem1vWS0tmsm6Qt/y3f8Auj/ZHGfbA+nuCqqKFVQqgYAA4ArjpwdeXtZ7dEfS42vDKaH1HDP94/jl+i/rT1ei0UdKYJYzM0QkQyKNxQNyB64ruPlrNmPfN4jgvkltpNJk04ODKsqPHKkeecNuKkgc5IFUWez07xLfyySQrpd9YfabgsQY96sELenzKwB9cVpa3p15qyR2KTJDp8uReMCfNdP7i8YAPQnOcdK5lRaaBbalpWqQCf7HatLp8j4zLApJVASCA6MQM4zyprnndPyPXwqjUp2+1azSWtrrXtdOz9NWReFojYeNfLgtGstPvLB3t4pzumbY6gElvmUYJwmcAAZGc16FXCy6HfJ4ytILLXLsSW9hJL5l0FuNm51ULyASDtPU/wANatro/iKbUAdX1yOSxjO5YbOLyTKf9s9QPYHnv7qk3FONuvkVj4068o1XUS93+9d726au1t3+BY8XWc954Zu0tIXlvEKS24TG4SKwKkZ9CPyzWRqPhC81Tw9YwPcIuotdC5vbgsVY71KyKpAP8J2gcDAFdpRWsqUZO7OKhjqtCCjT6O9/la3p5ET20EkKwvDG8a4wjKCBjpx7VLRRWhx3bCiiigQUUUUAFFFFAFXUbV73TLu0jlMLzwvGso6oWUgH8M1hW3hWR7C206/ul/s23QItjbKVWTH/AD0c8v6kDaD3Brp6KiUIyd2dFLE1aUeWDt1+f9f8A4dV1HxDdHw9d2rR2Gn3H+mXBUKt0ikGKNQPUFS3YY98V3HSiiiEOXzHiMR7ayS5Uui7vd/P8FZdDJm8Q2sLMgtdUkdTjCabOQfoSmP1riLzVhP4qW30KzOiapIVMs95Isccuf4XjG4MxGcZw3eu117WTpsMdvaIs+qXR8u0tyfvN/eb0RepPtXGWdvNbRyaZLtnvLnM17purxqBcNj55YZVGO3AycY/hrnrNt2v/X+Z62XU6cYSqcu60u9+7tZLlXnpfdo09GVbPxCs/ie4uF1xg0cEkr4tmU9ocYHPHDfNXcVxXh/TG1Y3hlmkufDDhorO0vAJC/I/eBj8wXghcknBzxXSaPpKaNaPaRXNxND5haITuXMakD5ATyQOcZ9a0o3S20OTMeRz1l7ytpbReS7W6x1Sd9TRrx74h+BH0yVvEGhq0cSt5k8UfBhPXeuOg9fT6dPYaRlV1KsoZSMEEcEVVajGrGzM8uzGrgK3tKe3VdGjifh943TxJZfYr1wuqQL83bzl/vD39R+P07evDvG3hm68Fa7DrejForNpN0ZX/lg/90/7J5x7ZH19U8J+JbfxTokd7EAk6/JPED9x/wDA9RWOHqyv7Kp8S/E783wFLkWOwn8KfT+V9v6/yN2iiius8AKKKKACiiigCOaaO3gkmmdUijUs7scBQOSTXhN/c3vxM8cpb2xZLRSViyOIoR1cj1P8yBXVfFvxOba1j0C1fEk4ElyQeidl/E8/Qe9bvw48LDw/oC3FxHi/vAJJcjlF/hT+p9z7Vw1b16nslstz6nAJZXgnj5r95PSC7d3/AF+p1Gm6dbaTp0FhZx7IIF2qP6n3PU1borI8RX81lpTJZsRqF0fIswACfNbocHjA5Y57A12NqMfQ+bjGdera+snu/wA3+pxHiq6nt3u9G1e/nvNHVkuLi7jiHnQZz5cRwAoyyqQ2PqOc1r+Db02v27+2GB1KSeKOa8Dq6TOyDZGpH8SjggDGSTnms77Ub46ekotI9TlEsYtZEwst+g2PJKcYwF5Ud9w9qzEin0MwtpfmXFgpljs1dSzxMFAlvFQDlR8wAPrxw2K4eZxnz/1/X9dT6p0VVw/1dqz+5Nrdrpry+jS7w19WhuYLkOYJo5QjlGKMG2sOoOOhHpWP4n8NQ+JbS1hkl8l7edZlk2bjgcFeo4I/lVR9Z0Lwn4TtpbaZZoDH/oyRtue5c9x6kk8n3rd0wXY023N+wa7ZA0u0YAY8lR7DOB9K7LxmuVnzvLVw0vb07qzaTe7tvp+frYjs7B4dTv76ZlaS4KImD9yJBwPruLn/AIF7Vfooq0rHJObm7v8Aq2gUUUUyQooooAKKKKACiiigAooooAKKKKACiiigCmul2i6vJqnlZvHiEJkJzhAScD05NctJcXfivUrrQ3gMdnZXbrd3IGN8f8MSHqCwOGI7Z/vV2tIFC5wAMnJwKzlC+nQ6qOKdNuTV5W0fb+lt94kcaRRrHGgREAVVUYAA6AUksscETyyuscaAszscBQO5NU9W1iy0W0W4vpSiu4jjVVLNI56KoHJJxXK6ums6hHa6hfaZPPbfaF8vR4sE7ME75jkAtwMLnAz3NE6ijotysPhJVmpTdovq+vkr/wDDLqxNa8U3EsMV7alYNJilVx5j+XNqAB5WFeu3vn+LpwMmut0zVLbVbVJ4CylkDmKQbZEBJA3L2zg/lXFJq19PrNzBZpZDxBdKUQyOGiso4xxGGx88mWJIXgZ54FLaajB4agbVvtFw0ckwt9UtrxgZxOAPnQ/xEAj5V4K4I6YOEarUrt6f1/Vj1K+BjOkqcI2l01ve/f8AG0ur2srHbalp1tq2nT2F5GJLedSrr/Ue4614hYXN78M/HL29wWe0YhZcDiWEnhwPUfzBFe6WtxHeWkNzFny5o1kXcMHBGRkVyXxH8LjxBoDXFvHm/swZIsDl1/iX+o9x708TTckqkN0TkuNjRqSwmJ/h1NH5Pv8A169Dr4Zo7iCOaF1eKRQyOpyGB5BFSV5f8JPE5uLWTQLqTMkAMlsSeqd1/A8/Qn0r1CtaNRVIKSPOzDBTwWIlQn02810YUUUVqcQVV1G+g0zTri+uW2wwRmRz7AdPrVqvMfjDrht9NtdFifD3J86YD+4p+Ufi3P8AwGsq1T2cHI7stwbxmKhQXV6+nX8DmPB+nz+OPHk2q367oIpPtMwPIz/An04/JTXutcn8OtB/sPwnb+YmLm7/ANIlz1GR8o/AY/HNdWSACScAdTWeFp8kLvd6s7M9xqxOKcafwQ92Py/r7rC0xoo3kSRo1Z0zsYrkrnrg9q4PSre5uLybV9N1f7Je6rNJPBZTKZIpoUwqsy9VzjO4EfeArdh8UfZJVtvEFo2mTsdqzFt9tIf9mTt9GxWkaqa10OWrgJwlam+Z9Vs/PTqk7q6v52MzxDomj213fXUouH1LVNv2VLeHfJHJGB86Y6HIUkkgcCmaLBrWvvJqkk8WlzOv2W4KfvpwYyVZV3fLGN2TwGJ45rthsfa67WyOGHoaz9Ks5LO41TcuI5rwzRe4MaZP/fW6pdJc1+hpHHy9g4vWStq9dNFZLbZLe+1yDSfCujaK3mWlmhuOpuJfnkJPXk9PoMCtmiitoxUVZHn1atSrLmqNt+YUUUUzMKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCKS2glnimkhR5Yc+W7Lkpnrj0rktS1TVtR1KTTX0/UtP0xHZZbqCFnkmAOMIVztUjnd154xXZUyXzBE5iCmTadgY4BPbPtUTjdaM6cPXVOV5Rv2v09On3o8/uLWzmurpbfRb6TTdPjW1tJNPVQ8EvDu4DMG3ZKDODypB6mug8OaPGbe31jUBcXOqTRhjNeKA8YPZUHEf0HPrR4ISWLw1HDdqVvo5pftat94Slyxz9QQQfQiugSWOUuI5Eco21grA7T6H0NZ06a0k/6/4Y7cbi5pyoR2Tte+62/wDJt3bRj6KKK3PJPCvGOnz+CPHkOq2C7IJZPtMIHAzn50+nP5MK9r06+g1PTre+tm3QzxiRPoR0+tc58RdBGueE7jy1zc2n+kRccnA+YfiM/iBXPfB7XDcabdaLK+Wtj50IP9xj8w/Buf8AgVcVP9zXcOktUfT4t/2jlccT9ul7svNdH/XmenUUUV2nzAV4RLnxz8Vth+e08/b7eTH1/PB/Fq9d8Xan/Y/hTUr0NtdISsZ9Hb5V/UivPvgzpQL6jqzr0xbRn/x5v/Za4sR79SFL5s+lyb/ZcFiMd1S5Y+r/AKR60BgVh+Kp5P7LTTbdit1qcotIyOqq2S7fggY/lW7WLqfhmx1C7W+RprTUE5S6t32sDjHI+63HHIrqqJuNkeHhJU4VVKo9F5X16X8r7nM3N/eabd32s6dYRXFjbouk2iLJtkVlIGVGCGBkIXGc/IKis9Suf7Lh0myvbGVpGSzFrPA7Thyd0kkqvjHyh2xtIz3PfYuTqli1uNasP7Ts7WUTR3VgpV0YAgF4c84zn5cjviq9xq1vdahdeIbPyLmO0tha2O1gXknlYZBHVedi4IB5auZqz3/rr/Wp7cZKUVaCfZ3um1pFO/Xv8L1bsO0LT7qLxHfto9yLXRLaYQNaOpkSRwMyFOR5eCcccZB44rs6o6Ppw0rSbezDb2jXMkh/jcnLN+LEn8avV0048sTxcZX9tVvulpfq7dX3b31CiiirOUKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAKmoalZaTam6v7iO3h3qpdzgZJwKz54dA1h/tKXNu02Bi5tbnZJjt86EEj2PFX9U0y11jTprC9jEkEy7WHce49CO1cnHDpUGnS2WuaVY3ep2rpAhaBd11vOInBxxu6E9irelY1G07O1j0cJThKHNFyU0+nZ7duu+vY0H0/Umka30zxjIJApYRTwwzsB68ANjkdc1pWV79mu7bRri4lvL8W5mnnEYAHIGWxwu45wP8AZNUZrXRvBtpNc6bp0Ud1dssMUMXBnkP3VGegyefbmtLRtNbTrVmuJBNfXDebdTf33Pp6KBwB2Aoimnbr6tjrzjKnzP4enuxi2+rdui9dX87aJAIwa8Ji/wCKG+K2wfJaCfb7eTJ0/LI/Fa93ryT4zaUA+naui9c20h/8eX/2assZF8imt4nfw5Vj9Ylhanw1U18+n6/eet0VieEdT/tjwppt6W3O8IWQ+rr8rfqDW3XVGSkk0eFWpSpVJU5bptfceb/GO/8AI8P2Vipw1zcbz7qg5/Vlrd+HOn/2f4H08EYecGdvfccj/wAd21wHxguWufE9jYp83lW4IH+07H+gFexWVstlYW1qn3YIljH0AA/pXJS97ETl20PoMd+4yfD0us25P9PwaLFFJuG7bkbsZxmuI03Rb241XXr3TdaurKT+0WQRsBNE+ETOVb3JHBGAAO1dM5ONrK54lChGqpOUuW3dO29umv4M7isTUvCml6nfw37Rvb3sLbluLdtjk/7XGG/Gl8K315qXh+G7vnR55JJQTGm1cCRlGB9AK2qPdnFNoTdXC1ZRjKzV07fc/kJS0UVZzhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFYdzoDXniu01m4uEaKyiZbe3EXIdurFs88dBityilKKluaUqs6Tbg7XTXye5gajo8tx4w0bVQWkgt0ljaMniNmU4f+n4it+is/VtVi0q186Qb8PGGUHlVZ1Qtj0G7NTZQuy3OpXcKa1aVl97f6mhXKfEbT/7Q8D6gAMvABOvttOT/wCO7q6Fb+3bU5NODH7THCsxUjjaxIGD9VP5in3tst7Y3Fq/3Jomjb6EY/rRNKcHErDVJYbEQqvSzT/U8++Dl/53h+9sWOWtrjePZXHH6q1ekV4r8H7lrbxRfWMny+bbkkf7SMP6E17VWGDlzUV5Hp8R0VSzGdtpWf3r/O54f4k/4mXxnigPKLd28f4AKT/WvcK8Psh9q+ODZ/hv5f8Ax0N/hXuFThNXOXmb8Qe5HDUu1Nf1+Bh6j4R0bVL9r+5gmN4QAJkuZVZQP7uGwB7Cuc0LRb+LTL690/xDfWy/bLk7ZkSdXCSMoJ3DOSF5Oa7q4hFxA8ReRAwwWjcqw+hHIrnD4MSGzktrDW9WtY3DDZ5wkTLZJJDAnkkk8jrWs6a5rpfocOGxsvZOnUqdVa65kkr97+XQzvDI8VWXhjTWt7fS7y2e3WVY2keGXDDdgnDKTz14ro9H1S+1BpkvdFudPeI4zI6OjH/ZIOT9cY96n0awl0vSbaxlujdNAgjEhjCcAYAwPar9VTg4pamOLxMKs5vkWrequuva9vwCiiitTgCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOZ8ZWW+wj1F7q8WG0dGmghnaNXiLAOTtwchcnr2rJWy0OLXb7R7Ke0EWr6eUG2YOyypkHnJOSHB5/uE1bm8baDc6jqWnXl5CbONfs5QKztMxzvwFBO0DA9zn2og1TSEljl0rwnfTSR/wCqli04QgZGDhn29uK5ZOEpXTR79GOJo0fZzjJaadFrZq7emj1/AdbXpnu/DWtt8r3Mb2Fz7ORuwfpJGR/wKuvrhbuz8QXWmSW2n+HYLI/avtqvcXys3m+Z5nAUEcnjr0NdvF5hiQyhRJtG8KcgHvj2rSk3rc4cfGKUXFrqrJp6Xutm+9vkeJeG/wDiW/GeWDojXdxH+BDEf0r3CvD73/RfjguO9/F/48F/xr3CscHopR7NnpcR+9KhV/mpx/r8TxDw/wD8lwm3f8/93/6DJXt9eH6X+4+OEmeM38//AI8H/wAa9wowfwy9WHEutWi/+ncfzYUUUV2HzgUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFADFjjQkoiqT1IGM0+iigL3CiiigDxDxDx8cIcf8/9n/KOvb68P1X/AEj44R45xfwf+OhP8K9wrjwvxT9T6PP9KWFX/Ttfkjw/Vf8AiX/G2NjwrX0LZ9nC5/nXuFeI/FWN9P8AHNrfoPvwxyg/7SsR/QV7XFKs0KSoco6hlPsaMNpOpHzHnn7zC4St3hb7rD6KKK7D5sKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKZLIsMTyucIilmPoBQCVzxLSv+Jh8bZGHKrfTNn2QNj+Ve4V4j8Ko31Dx1dX7j7kMkpP+0zAf1Ne3Vx4LWDl3Z9HxM+XEwo/yQS/M8t+M9gXsNL1AD/VyPCx/wB4ZH/oJ/Ouy8D3/wDaPgvSp85ZYBE31T5f6VB8QdNOqeCdRjVcyQp56fVDk/pkfjXM/BvUxLpN/pjN80EolQH+6wwfyK/rR8GK/wASG/8AacjVt6Uvwf8AwX+B6bRRRXYfNhRRRQAUUUUAFFFFABRRRQAUUUUAFFMiljnjEkMiSISQGRgRwcHn60+gGmtGFFFFABRUfnw/aDb+annBd5j3DcFzjOOuMg81JQNprcKKKKBBRRRQAUUUUAFFRyzwwtGss0cZlfZGHYDe2CcD1OAePapKB2YUUUUCCiiigAooooAK5/xvf/2b4L1WfOGaAxL9X+UfzroK8y+Mmp+VpNhpit808pmcD+6owPzLfpWOInyUpM9HKMP9Yx1Kn53fotX+RF8GLApYapqDD/WSpCp/3Rk/+hD8q9SrmPh9pp0vwTp0bLiSZPPf6ucj9MD8K6ejDw5KUUVnOI+sY+rUW17fdp+g10WRGR1DKwwwPcV4Z4XdvB3xRbT5WKwtK1oxPdW5Q/nsNe615B8YdGaC+stcgBXzB5MrDs45U/UjI/4CKyxcWoqot4s7+HasZVamDqfDVTXz6fqev0Vi+FNbXxB4as9QyDKybZgO0g4b9efoRW1XVGSkk0eDWpSo1JU57p2fyCiiimZhRRRQAVgeMtUvNE8OS6pZFd9tLGzxsARIpYKV9vvdR6VpatazXuk3VtbTyQTyRkRSxuVKP2OR74riNd1weIPhJe3bLsuVMcVzH/clWVAw/r9DWNadotdbM9LLsN7SrTm1ePPFNer/AF1NC7NyPippWyVoRLprG4iU5DhS2AfoT1rtK4++4+K2ln/qGy/+hGofDN5qGu+MdV1qCbGiKgs4VbJ84oc7l9ACW5/2sfSYT5ZNd3+htiMO6tKNS6SjBP1fM0l69vJHbVzvi/xH/YOmFLYeZqdyDHaxAjO7H3zn+Edf0rfl8zyX8kKZdp2bz8ue2cdq4vURpOjmYaso13Xb5dv2ZYgzMvUIic+XGOuT6E5Jq6smo6aeZy4ClCdVOa5rfZXX16JLrr/msi11nUPAnhK3hOh3LtK3yyXN1Hl5n5wsaljjPbjv3NehaVNez6VbS6jbpb3jxgyxI24K3+e3bpk9a8v8M2l8nk+Ixbf2pBZSSW/9nB3aWwAPSLccOQCP0wfT0zSNa0/XbT7Tp1ykydGUcMh9GXqD9axw77v0R6Oc00ruMU3d80lfftZt2/J9NFroVXub60slDXV1BAD0MsgX+dLd3SWVpJcyrI0cY3MI4y7Y9gOT+Fcrda9pmsNEZ/COrX4TJieXTVKjPoXIronNR06nlYbDSqvms+Vb2t+uhj3+u6NJ8Ura/fV7dLOx08hpElBWRyzDZ8p54YHHtXWad4u0rVr9LSxa5mLKT5otZBGCOxYjjv7cVyPhW91H7breraX4aeeG7uRHEBPFAqJGNoXGTzyc4GPc1073XjG4jzb6XpNm3/T1dvL/AOgIP51z0pStfu+z/M9jHUKd1Ta+GKim5x00u7xtfRtnSVzPjDULzSzolzYktK+pR25hMhRJRIrDDde+DnBxitXRxq62ZGtNZtdbzhrTcF2/8C71i+OFLjw6oOCdctsfhuNbVG/Z3Wh5mCpxWLUJWa19HoyvrOt+K9Mew3W2jRJe3kdog3yzFWfPJ4TgYPSqfjVPE1h4XvL9vEMaCIx/urS08onMijhy5Ydf6VF4u0/W1n0NrzXEkjk1mBI0gs1jMTHdhwSWyQOx4qLxda21t4Q10R+I7vU5z5HmwT3McgiPnJyFUDZ39q5pt2ne+3fy8j2cLCmp4eUOXWSvaLd/eS3ktPU9GhVo4Y0eQyuqgM5ABY+uBxz7VU1S5vrW2V7DTvt0hYAx+esWB65bir1c7qWj6pIt7OviK/SPazwwQpEm04zgvsJIz+OO9dc20tP6+8+fw8YzqXm0vW9n/wCA/wCaMLWbnU/FEl14Yn0yysr1YkuY3kvmLDnh02xc7SMHkdan0TUPE+tNqFil3ZWY06YWpuRbPOZWXrgs4BPHOR3rEsI0urC115tP1q4mkg2G6utZSBcZyyhlcNtz7Cq0lrZSXmlR2mi6S63t6YpD/akl52y+ewOMHOSfzri53fmf6rTpsj6b6vT5HRikrf4ZJSXxaSm3qls0erQTJJui8+KWeIATCPjDY9MkjPoTU1UbDRtL0tmaw061tWcYZoYlUkehIHNXq71e2p8pU5Ob3NvPQKKKKZAUUUUAFeFeJ5G8Y/FFdPhYtCsq2ikdlXlz+e81614s1tfD/hq8v9wEqpshHrIeF/Xn6A1538HtGae9vdcnBIjHkxMe7nlj9QMD/gRrixP7ycaS9WfTZIvqmGrZhLouWPq/6X4nrqIsaKiKFVRhQOwp1FFdp8yFZPiXRY/EHh+7018BpUzGx/hccqfz/TNa1FKSUlZl0qkqU1Ug7NO6PGPhXrcmka/c+H73Ma3DkKrfwTLwR+IGPqBXs9eNfFPQJdK1qDxHY7o1mceYyf8ALOZeQ34gfmD616R4S8Qx+JfD8F+pAmxsnQfwyDr+B6j2NcmGk4N0ZdNvQ+izylHE04ZlRWk9JeUl/X9XN2iiiuw+aCiiigAry/xh4eudKtPFmoRyKunX6W8nlA8mbzl3H27n/gXtXe6veataCI6ZpMeobjhw10ISnvypyP8AOK57XtO8V+JNEn057XSbOOcLuLXUjuMMG7JjtiueulKLVnf/AIB7GVTnQqxqOUVBtXu1spJ7Xv07FHxXY3Wp/ELTrC1uPs/2jT5EmlH3ljLHdt9yOPxrurKyt9OsobO0iWK3hUIiL2ArlT4f8TXOvwazcahpUFzDAYFWK3kddpOTnLjmrh0XxO9zHK/ixQiMGMSaciq3sfmJx+NKCcZOXK9fT/MrEuFWlTo+2ilFf3t7vtF9DX1Kyu74JFBqUllCQRKYIx5rfRzkL+WfQiuWvdMvPCtjqeoWV3ptnaohlM7WrzXMp9HdpOSTwPc9BXX3t9Bp9s1xcMwQEABELsxPQBRkkn0FYH9mX3iW+hutYh+zaXAwkt9PYgvI46PNjjjsgJ9/SrqRTem5hgqs4RvNpU+ui162Xd+t7HOWekar4e+HdxfS63c2rG2e5a3ihiGJHGQCxUtnJA4IxWnpPgbT7rStJ1Cae+g1IWyNNc285jkkLAEhj3xnGeuKg8XWXiG8mj8PxK11pepzqzXJX57ZA25kYjgjgFScHgjmu+VQqhVACgYAA4FZU6UXKzWi7nZi8dWhSVSM1zTbfu2WlrJPTvffsQWVmljbiFJJ5ADndPM0jH8WJNR6qty2k3YtLiK2uDE2yaUfKhx1P+Pb36VcprKrqVZQykYIIyCK6raWR4aqPn53qzjNI8Natoegwwy+KTb2VvEzyC2tY8DOWY73DE8knOB9Kj8BaZezXF34jvL2+kS8Gy1iuZMkwg/K7gYGTzjAAGT607xD4JuGsJ18O3LW8cnM2mO5+zz/ADBiAM/uycYO3APTjrW/4a1SfVdGSa5sGsJ43aGS3PRCvHHHSuaEEpqLVrba3PbxGJlLCzqwkpObtLRRaW+qW931123uzYrkvESLqXjLw9pYLERebeT7CQVULtU5HIyxxkV1cjFI2cIzlQSFXGW9hnisXQtKnhurvV9RAGo3xG5AciCMfdjB746k9zW1Rc1onm4Sapc1VvVJperVvwV362OW8WeFtLtJdBk2T3ElxrEEMr3Vw8xdG3ZU7iRjgVb8e6LpWneBNSkstNs7aT9yu+GBUOPOTuBWx4n0i91W80GS2IMNnqKXE6EgcL0b8ORj3rG+IOj65eWbrpcslxaXjxR3VoRuKYZSHT+6OBuHTvjqa56kFFTtH+rHr4PFSq1MMp1dnd3b6S2fy26Hd1mXev6PavJBPrOn2868FZbhAVPuCRWnVY2Fm139ra0gNyRjzjEN+PTd1rrlfoeBSdNP95f5HjLCw0TwqTDqPh66v4B8qx6cJ3ky3GZWJHQ5+72ArqbZbNLmxv2vtb1F7FmeCOz0Xyo/mGDx5QByM9/piuh8f213e+CtQt7K3M8zhPkX72A4JwO5wOldLXJChaVuyXfz8z3sRmiqUFUa1lKV9Y3taP8AdvZ3a+/V9MzR9YOrxyudN1Cx8tgAt7D5ZcHuOTWnRRXWk0tTwKkoyk3FWXYKKKKZAUUVheLfEMXhrw/PfttM2NkCH+KQ9PwHU+wqZSUVdmlGjOtUjTpq7bsjzT4qa5Jq+v23h+yzItuwDKv8czcAfgDj6k16l4a0WPw/4ftNNTBaJMyMP4nPLH8/0xXl/wALNAl1XWp/Ed/mRIHPls//AC0mbkt+AP5kelezVy4WLm3Wl129D6DPasKEKeW0npT1l5yf9fjboFFFFdh82FFFFAFHV9Ltta0q4067XMM6bT6qexHuDg14r4b1S6+HnjOfT9RyLR2EVxgcEfwyD88/QnvXvFcR8RvB3/CRaYL2zjzqVqp2AdZU6lPr3H5d65cTSbtUh8SPeyXHU4OWDxP8Kpo/J9H/AF5PodqjrIiujBkYZVgcgj1p1eUfC/xnwnhzUpMMvFpI/wD6LP8AT8vSvV61o1VVjzI8/McBUwNd0anyfddwooorU4QooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBrMqIzuwVVGSScACvCfEmqXXxD8aQadp2Taoxit89MfxSH8s/QDvXRfFDxmfn8OabJl24u5E/9Fj+v5etb/wAOfB3/AAjumG8vI8aldKN4PWJOoT69z+A7Vw1W68/ZR2W59VgKccqwrx9ZfvJaQX6/109TqdI0u20XSrfTrRcQwJtHqx7k+5OTV6iiu1JJWR8vOcpyc5O7YUUUUyQooooAKKKKAPJfiX4IeGWTxHpKEYO+6jj4Kn/nouP1/P1re+HvjpPEFqum6hIF1SJeGP8Ay3Udx/teo/H1x3ZAIIIBB4IPevGvHfgWfQbs6/oAdLZG8x0i4a3bruX/AGf5fTpw1YSoy9rT26o+owWJo5lQWAxbtJfBL9H/AFr62PZqK4TwJ8QIfEMSWGoMkWqKMDss49R/teo/Ee3d1106kakeaJ4GLwlbCVXSrKzX9XQUUUVZzBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAVwfxC8dJ4ftW03T5A2qSryw58hT3P+16D8fTK+O/iBD4eiew09km1Rhg91gHqf9r0H4n35TwJ4Fn167Gv68He2dvMSOXlrhv7zf7P8/p1461aUpeypb/kfR5bltKjS+v4/SC2XWT/AMvz9C58NPBDzSx+I9WQnJ32scnJY/8APRs/p+fpXrVIAAAAAAOAB2pa3o0o0o8qPKzHMKuOrurU+S7LsFFFFanCFFFFABRRRQAUUUUAFIQGBVgCDwQe9LRQB5D43+G8tpK+seHUbap3yWsf3oz13R+3t27e1zwV8T0n8vTfEMgjmHyx3h4VvZ/Q+/T1x1r1KuC8ZfDa014yX2m7LXUTywxiOY+/off8/WuKdCVOXtKPzR9Lhc0oYyksJmXT4Z9V6/169zvAQwBBBBGQR3pa8K0Txfr/AIDvf7K1a2lktUODbyn5kHrG3p+Y+lev6F4k0vxHa+fp1yrkD54m4kT6r/XpWtHERqabPscGY5PXwXv/ABU3tJbf8D+rGtRRRXQeSFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRWTrviTS/Dlr5+o3Kxkj5Il5d/ov9elKUlFXZdOlOrNQpq7fRGqSFBJIAHJJ7V5d41+J6QeZpvh6QSTH5ZLwchfZPU+/T0zXOa34v1/x5e/2VpNtLHaucC3iPzOPWRvT9PrXceDfhtaaCY77Utl1qI5UYzHCfb1Pv+VcUq0675aWi7n01LL8NlcVXzD3p9IL9f6t67HPeCPhtLdyprHiJG2sd8drJ96Q9d0nt7d+/v66AFAVQABwAO1LRXTSoxpRtE8XMMxr4+r7Sq/RdF6BRRRWpwBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAGbrWg6b4gszbalarMg+63RkPqp6ivJdb+HGu+G7r+0fD9xNcxxncphO2eP8B978Pyr2yisKuHhU1e/c9TL83xOC92DvF7xeq/4B5B4f+LlxbsLXxDbGUKdpuIV2uP95eh/DH0r07Sdd0vXIPO029iuFAyyqfmX6qeR+NUdf8G6J4jDNe2gW4I4uIvlkH49/wAc15rqnwq1zSJ/tehXn2nYcptbypl+nOD+Y+lY3xFHf3l+J6bhlGY6xfsJ9n8P/A/D0PaaK8Ps/iP4r8OzC01i2Nxt6pdxmOTHs3f6kGuy0v4teH70Kt6txYSHrvXen5rz+YFaQxdKWjdn5nHieHsdRXNGPPHvHX8N/wADvqKoWGt6XqgBsdRtrjPaOUEj8Ooq/XQmnqjxpwlB8s1Z+YUUUUyQooooAKKKKACiqF/rel6WCb7Uba3x2klAJ/Dqa5DVPi34fswy2S3F/IOmxdifm3P5A1nOrCHxM7MPl+KxP8Gm38tPv2O+rO1bXdL0ODztSvYrdSMqrH5m+ijk/hXkF58R/FfiKY2mj2xt93RLSMySY927fUAVPpfwq1zV5/teu3n2becvufzZm+vOB+Z+lczxTnpRjf8AI9mOQ08MufMayguy1l/X3lrxB8XLi4Y2vh62MQY7RcTLuc/7q9B+OfpVHRPhxrviS6/tHxBcTW0Uh3MZjunk/A/d/H8q9O0DwbonhwBrK0DXAGDcS/NIfx7fhit+hYaU3zVnfy6BUzujhYOlltPl/vPWT/r+kjM0XQdN8P2YttNtVhU/ebqzn1Y9TWnRRXYkkrI+dqVJ1JOc3dvqwooopkBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAEF3ZWt/CYby2huIj1SVAw/I1x+p/Cvw3f5aCKaykPeCT5c/wC62R+WK7eionThP4lc6sPjcRhnejNx9H+h45f/AAav4yW07VYJschZ0MZ/MZ/pVH/hHPiPovFtJfNGvTyLsOv/AHzn+le40VzvBU943R7EOJsZblrKM15r/Kx4f/wlPxI07ieG+Kj/AJ7WAI/Pbz+dH/C0/FtvxNa2pP8A00tmH8iK9wopfVqi2qMf9t4SX8TCQfpp+h4f/wALh8R9Psmm5/65Sf8AxdH/AAtPxbcDENrag/8ATO2Y/wAya9woo+r1f+fjD+2MAtsHH7/+AeH/APCU/EjUeIIb4Kf+eNgAPz28fnSf8I58R9a4uZL5Y26+fdhF/wC+c/0r3Gij6pf4ptj/ANYVT/gYeEfl/wAMeOWHwav5SG1HVYIc8lYEMh/M4/rXWaZ8K/DdgVaeKa+kHeeT5f8Avlcfrmu3orSGFox2Rx4jP8wr6SqNLy0/LX8SvaWVrYQiGztobeIdEiQKPyFWKKK6ErHkSk5O73CiiigQUUUUAFFFFABRRRQAUUUUAFFFFAH/2Q=='
      
      }
    }) 
  }


})(PJF.util);
/*
 * finite state machine
 * by shenye
 * 
 */
PJF.namespace('PJF.fsm');

(function(exports) {
	//fsm实例储存,虽然这样会浪费内存,不过应该没多少东西就是了,是为了通过id可以在不同场景获取fsm实例
	var fsmContainer = {};
	//创建fsm实例
	exports.create = function(conf) {
		//自己复制个配置好了, 免得别人改了
		var conf = $.extend({},conf);
		//下面是一些判断
		if (!conf.id) {
			alert('状态机id未定义');
			return;
		}

		if (fsmContainer[conf.id]){
			console.log('状态机ID重复:' + conf.id);
		}

		if (!conf.initial) {
			alert('状态机必须有初始状态');
			return;
		}
		if (!conf.actions || conf.actions.length <= 0) {
			alert('状态机必须至少有一个状态转化');
			return;
		}
		//定义fsm实例
		return fsmContainer[conf.id] = function() {
			var actions = conf.actions,  //fsm的动作、状态转化定义, i.e : [{name:'trafficGo',from:'redLight',to:'greenLight'}]
				callbacks = conf.callbacks, //一系列回调接口，暂时未实现
				states = [], //从actions中剥离出所有的状态
				outputFuncs = {}, //fsm对外暴露API
				currState = conf.initial, //当前状态
				nameMap = {}; //action name对应的map, 即动作名称

			for (var i = 0; i < actions.length; i++) {
				var action = actions[i];
				//把状态都找出来
				PJF.util.array.indexOf(states,action.from) == -1 && states.push(action.from);
				PJF.util.array.indexOf(states,action.to) == -1 && states.push(action.to);
				//动作名称的map
				nameMap[action.name] = {from: action.from, to: action.to};
				//绑定改变状态的方法
				(function(action) {
					outputFuncs[action.name] = function() {
						if (currState == action.from) {
							currState = action.to;
							console.log('状态机转化' + action.name + ', 从' + action.from + '转化为' + action.to);
						} else {
							console.log('状态机转化' + action.name + '错误, 不能从' + currState + '转化为' + action.to);
						}
					};
				})(action);
			}
			//状态机是否处在state状态
			outputFuncs.is = function(state){
				return currState === state;
			}
			//返回当前所在状态
			outputFuncs.current = function(){
				return currState;
			}
			//状态机是否能触发该动作
			outputFuncs.can = function(actionName){
				return nameMap[actionName] && nameMap[actionName].from == currState;
			}
			//状态机是否不能触发该动作
			outputFuncs.cannot = function(actionName){
				return !this.can(actionName);
			}	
			//判断状态机是否达到done状态
			outputFuncs.isDone = function(){
				return currState === conf.done; //现在是可选，其实这个done状态也没说就一定是最终状态了，目前拿来当做一个标记状态好了
			}		

			return outputFuncs;
		}();

	};
	//通过id获取状态机实例
	exports.get = function(id) {
		return fsmContainer[id];
	};
	//多个id是否都完成
	exports.isDone = function(ids){
		if(ids.length == 0 || !this.get(ids[0]))
			return true;
		return this.get(ids[0]).isDone() && this.isDone(ids.slice(1));
	};

	//这里只是记一个框架自己用到的状态机id, 写作常量比较好
	exports.fmIds = {
		STM_CAMERA : 'pjfStmCamera',
		STM_SIGNATURE : 'pjfStmSignature',
        STM_ICCARD : 'pjfStmIccard',
        STM_IDCARD : 'pjfStmIdcard',
        STM_PAD_TEMPLATEINFO : 'pjfStmPadTemInfo',  //是否经过面见审核
        STM_PRT: 'pjfStmPrt'
	};

})(PJF.fsm);


/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * @Author zhouyuhang
 * Create on: 2012-11-9
 * Last Updated: 
 * 说明:基础验证库，提供了数字，中文，email,手机,用户名等验证规则，如果想扩展只需：PJF.apply(PJF.validator.base,{ruleName:yourValidator})
 */


PJF.namespace('PJF.validator');
PJF.validator.base={

		/**
		 * 检查输入的一串字符是否全部是数字 输入:str 字符串 返回:true 或 flase; true表示为数字
		 */
		isNum:{
			key:'number',
			fn:function(str){
				if(str){
					//console.log("i am number");
					return str.match(/\D/) == null;
				}
				return false;
			}
		},
		/**
		 * 检查输入的一串字符是否为小数 输入:str 字符串 返回:true 或 flase; true表示为小数
		 */
		isDigit:{
			key:'digit',
			fn:function(str){
				if (str.match(/^-?\d+(\.\d+)?$/g) == null) {
			        return false;
			    }
			    else {
			        return true;
			    }
			}   
		},
		/**
		 * 检查输入的一串字符是否为整型数据 输入:str 字符串 返回:true 或 flase; true表示为小数
		 */
		isInt:{
			 key:'int',
			 fn:function(str){
				 if (str.match(/^[-+]?\d*$/) == null) {
				    return false;
				 }
				 else {
				    return true;
				 }
			}
		},
		/**
		* 验证非零正整数
		*/
		pInt:{
			key:'pInt',
			fn:function(str){
				if(str.match(/^\+?[1-9][0-9]*$/))
					return true;
				return false;
			}
		},
		/**
		* 非负整数
		*/
		notNegaInt:{
			key:'notNegaInt',
			fn:function(str){
				if(str.match(/^(0|[1-9]\d*)$/))
					return true;
				return false;
			}
		},
		/**
		* 验证非零正数
		*/
		pNum:{
			key:'pNum',
			fn:function(str){
				if(str.match(/^[\+]?[0-9]*\d(\.\d+)?$/)&&parseFloat(str)>0){
					return true;
				}else{
					return false;
				}
			}
		},
		/**
		* 验证(非零开头，除0外)正数包括0和浮点数
		*/
		greaterZero:{
			key:'gZero',
			fn:function(str){
				if(str.match(/^[\+]?[0-9]*\d(\.\d+)?$/))
					return true;
				return false;
			}
		},
		/**
		 * 检查输入的一串字符是否包含汉字 输入:str 字符串 返回:true 或 flase; true表示包含汉字
		 */
		isChinese:{
			 key:'chinese',
			 fn:function(str){
			 if (escape(str).indexOf("%u") != -1) {
				return true;
			 }
			 else {
			    return false;
			 }
		}
		},
		/**
		 * 检查输入的邮箱格式是否正确 输入:str 字符串 返回:true 或 flase; true表示格式正确
		 */
		isEmail:{
			key:'email',
			fn:function(str){
			var r = /^([\w-_]+(?:\.[\w-_]+)*)@((?:[a-z0-9]+(?:-[a-zA-Z0-9]+)*)+\.[a-z]{2,6})$/i;
			var newRule = /^[\w-_]+(\.[\w-_]+)*@[\w-_]+((\.[\w-_]+)+)$/;
			var oldRule = /[A-Za-z0-9_-]+[@](\S*)(net|com|cn|org|cc|tv|[0-9]{1,3})(\S*)/g;
			if (str.match(newRule) == null) {
		        return false;
		    }
		    else {
		        return true;
		    }
		}
		},
		/**
		 * 检查输入的手机号码格式是否正确 输入:str 字符串 返回:true 或 flase; true表示格式正确
		 */
		isMobile:{
			key:'mobile',
			fn:function(str){
			if (str.match(/^1\d{2}-?\d{5}(\d{3}|\*{3})$/) == null) {
		        return false;
		    }
		    else {
		        return true;
		    }
		}
		},
		/**
		 * 检查输入的固定电话号码是否正确 输入:str 字符串 返回:true 或 flase; true表示格式正确
		 */
		isTel:{
			key:'tel',
			fn:function(str){
			if (str.match(/^(([0\+]\d{2,3}-)?(0\d{2,3})-)(\d{7,8})(-(\d{3,}))?$/) == null) {
		        return false;
		    }
		    else {
		        return true;
		    }
		}
		},
		/**
		 * 检查输入的身份证号是否正确 输入:str 字符串 返回:true 或 flase; true表示格式正确
		 */
		isIDCard:{
			key:'IDCard',
			fn:function(str){
			 // 15位数身份证正则表达式
		    var arg1 = /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$/;
		    // 18位数身份证正则表达式
		    var arg2 = /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[X])$/;
		    
		    if(str.length == 15){
		    	var year = new Number('19'+str.slice(6,8));
			    var month = new Number(str.slice(8,10))-1;
			    var date = new Number(str.slice(10,12));
		    }else if(str.length == 18){
		    	var year = new Number(str.slice(6,10));
			    var month = new Number(str.slice(10,12))-1;
			    var date = new Number(str.slice(12,14));
		    }
		    var temp = new Date(year,month,date);
		    var today = new Date();
		    if (str.match(arg1) == null && str.match(arg2) == null) {
		        return false;
		    }else if(year<1900||temp>today){
		    	return false;
		    }else if(!(temp.getFullYear()==year&&temp.getMonth()==month&&temp.getDate()==date)){
		    	return false;
		    }
		    else {
		        return true;
		    }
		}
		},
		/**
		 * 检查输入的身份证号是否正确 输入:str 字符串 返回:true 或 flase; true表示格式正确
		 */
		is18IDCard:{
			key:'18IDCard',
			fn:function(str){
		    // 18位数身份证正则表达式
		    var arg2 = /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[X])$/;
		    
		    var year = new Number(str.slice(6,10));
		    var month = new Number(str.slice(10,12))-1;
		    var date = new Number(str.slice(12,14));
		    var temp = new Date(year,month,date);
		    var today = new Date();
		    if (str.match(arg2) == null) {
		        return false;
		    }
		    //判断身份证号中的生日日期合法性
		    else if(year<1900||temp>today){
		    	return false;
		    }
		    else if(!(temp.getFullYear()==year&&temp.getMonth()==month&&temp.getDate()==date)){
		    	return false;
		    }
		    else{
		        return true;
		    }
		}
		},
		/**
		 * 验证规则： 不包含 \ / : * ? " < > | 简体中文和繁体中文名字之间不应有空格；
		 * 英文字母一律大写，分隔符一律采用半角空格，英文字母上面加有其它字符的只填入英文字母，省略字母上的其它字符；
		 * 
		 */
		isName:{
			key:'user',
			fn:function(str){
			// 特殊符号
			var r1 = /(\\|:|\/|\*|\?|\"|>|<|\|)/;
			// 中文+空格 且排除首字母为空格的情况
		    var r2 = /^[\s]|[\u4E00-\u9FA5]\s/;
		    // 小写字母
		    var r3 = /[a-z]/;
		    // 半角字符
		    // var r4 = /([\uFF00-\uFFEF]|[\u3000-\u303F])/;
		    // 允许书名号 全角括号
		    // 300A 300B  (<< >>)  FF08 FF09 （）
		    var r4 = /([\uFF00-\uFF07] | [\uFF0A-\uFFEF] | [\u3000-\u3009] | [\u300C-\u303F])/;

		    if(str.match(r1)||str.match(r2)||str.match(r3)||str.match(r4)){
		    	return false;
		    }
		    return true;
			}
		},
		/**
		*只包含中文、英文、数字
		*/
		isCnNumEn:{
			key:'isCnNumEn',
			fn:function(str){
				var rule = /^[\u4e00-\u9fff\u3400-\u4DB5\uF900-\uFA2D\uFA30-\uFA6A\uFA70-\uFAD9\uFF00-\uFFEF\u2E80-\u2EFF\u3000-\u303F\u31C0-\u31EF\ue815-\ue864\ue000-\uefffA-Za-z0-9]*$/;
				if(str.match(rule))
					return true;
				return false;
			}
		},
		/**
		1.中文字符之间不能有空格
		2.中文字符与英文字符之间不能有空格
		3.英文字符之间最多一个空格
		4.全中文名字才允许有·
		5.英文之间，英文中文之间允许横杠字符-
		5.特殊中文 ： 〇(ling) 䶮(yan)
		6.例：张ha ha（正确） 张ha 张（错误)
		*/
		iciUserName:{
			key:'iciUserName',
			fn:function(str){
				
				var chinese = "\u4e00-\u9fff\u3400-\u4DB5\uF900-\uFA2D\uFA30-\uFA6A\uFA70-\uFAD9\uFF00-\uFFEF\u2E80-\u2EFF\u3000-\u303F\u31C0-\u31EF\ue815-\ue864\ue000-\uf5b1";
				//只能是以下字符
				var reg0 = new RegExp('^([' + chinese + 'A-Za-z])+((·| |-)([' + chinese + 'A-Za-z])+)*$');
				
				if(!str.match(reg0))
					return false;
				//中文字符之间不能有空格
				var reg1 = '([' + chinese + '])( )+([' + chinese + '])';
				if(str.match(reg1))
					return false;
				//中文字符与英文字符之间不能有空格
				var reg2 = '([' + chinese + ']( )+[A-Za-z])|([A-Za-z]( )+[' + chinese + '])'; 
				if(str.match(reg2))
					return false;
				//英文之间最多一个空格
				var r3 = /[A-Za-z]+( ){2,}[A-Za-z]+/;
				if(str.match(r3))
					return false;
				//只有纯中文名字才能出现·
				if(str.indexOf('·') != -1 && str.match(/([A-Za-z]| )/))
					return false;
				return true;				
			}
		},
		/**
		 * 验证规则： 不包含 \ / : * ? " < > | 
		 * 
		 * 
		 */
		isSpecChar:{
			key:'specChar',
			fn:function(str){
				// 特殊符号 首字符为空白符号
				var r1 = /(^[\s]|\\|:|\/|\*|\?|\"|>|<|\|)/;
				// 全角范围
				// var r2 = /([\uFF00-\uFFEF]|[\u3000-\u303F])/;
				/*只排除\ / : * ? " < > | 的全角情况*/
				var r2 = /(\uFF3C|\uFF0F|\uFF1A|\uFF0A|\uFF1F|\uFF02|\uFF1C|\uFF1E|\uFF5C)/;

			    if(str.match(r1) || str.match(r2)){
			    	return false;
			    }
			    return true;
			}
		},
		/**
		 * 验证规则： 值长度取值范围
		 * 使用方法：[4]或者[1,5]
		 * 如果只传一个参数，则表示长度必须为指定长度，如果传两个参数，则在范围之间
		 * 
		 */
		 length:{
			key:'length',
			fn:function(str,param){
				if(param){
					if(param.length==1){
						return str.length==param[0]
					}
					else if(param.length==2){
						return (str.length<=param[1])&&(str.length>=param[0]);
					}
				}
				return true;
			}
		},
		/**
		 * 验证规则： 只包含数字和字母 
		 * 
		 */
		isNumberOrLetter:{
			key:'isNumberOrLetter',
			fn:function(str){
				// 特殊符号
				var r1 = /^[A-Za-z0-9]+$/;
			    if(str.match(r1)){
			    	return true;
			    }
			    return false;
			}
		},
		/**
		 * 验证规则： 只包含中文
		 * 
		 */
		isChnChar:{
			key:'isChnChar',
			fn:function(str){
				// 中文+空格
			    var r1 = /[\u4E00-\u9FA5]/;
			    if(str.match(r1)){
			    	return true;
			    }
			    return false;
			}
		},
		/**
		 * 验证规则：小数验证，可以规定整数部分和小数部分长度
		 * 使用方法：[3,2]
		 * 输入一串字符可以验证是否为数字，数组第一个项为整数部分长度最值0-3，第二项为小数部分长度值;其中有一个不满足则报错
		*/
		decLength:{
			key:'decLength',
			fn:function(str,param){
				if(param){
					var s = '^-?([0-9])+(\\.[0-9]{1,'+param[1]+'})?$';//
					var ss = str.split(".");
					//if(ss.length>1)
						if(!str.match(s)||ss[0].length>param[0]){
							
							return false;
						}else{

							return true;
						}
					//return false;
				}
			}
		},
		/**
		* 验证规则：字节长度验证;一个中文字符占3个字节；
		* 使用方法：同length规则
		*/
		byteLength:{
			key:'byteLength',
			fn:function(str,param){
				var strLength;
				var aMatch;
				if(param){
					aMatch=str.match(/[^\x00-\xff]/g);
					if(!aMatch){
						aMatch = '';
					}
					strLength = (str.length-aMatch.length)+(aMatch.length*3)
					if(param.length==1){
						return strLength==param[0]
					}
					else if(param.length==2){
						return (strLength<=param[1])&&(strLength>=param[0]);
					}
				}
				return true;
			}
		},
		/**
		*1.密码不能采用简单的重复数字（如000000、888888）；
		 2.密码不能采用连续的数字排列（如123456、987654）；
         3.密码不能采用连续的双重复数字排列（如112233、665544）；
         4.密码不能采用连续的三重复数字排列（如777888、333222）；
         5.密码不能采用证件号码中任意连续的6位数字（如身份证号码为410101198204170012，
           则密码设置为410101、198204、820417、170012等均为不合法），证件类型包含开户时所有证件类型种类；
	     6.密码不能采用证件号码中生日为单数月单数日的6位数字(如身份证号码为410101198204070012，
	       则密码不能采用198247)，证件类型包含开户时所有证件类型种类；
		*/
		isStrNumPwd:{
			key : 'isStrNumPwd',
			fn : function(str,param){
				//校验器
				var validateDictionary = [];
				//需满足6位数字
				var sixNumLetter = function(str){
					return str.match(/^[0-9]{6}$/g);
				}
				validateDictionary.push(sixNumLetter);
				//不能6个相同的数字
				var sameCharacter = function(str){
					return !str.match(/^([0-9]{1})\1{5}$/g);
				}
				validateDictionary.push(sameCharacter);
			
				//等差数列
				var isEqualDifference = function(str){
					var desc = true;
					//降序
					for(var i = 0; i < str.length - 1; i++){
						if(str.charCodeAt(i) - str.charCodeAt(i + 1) != 1){
							desc = false;
							break;
						}
					}
					var asc = true
					//升序
					for(var i = 0; i < str.length - 1; i++){
						if(str.charCodeAt(i + 1) - str.charCodeAt(i) != 1){
							asc = false;
							break;
						}
					}
					return !desc && !asc;
				}
				validateDictionary.push(isEqualDifference);
				//不出现双重复、三重复(如112233,777888)
				var segment = function(str){
					if(str.match(/^([0-9]{1})\1{1}([0-9]{1})\2{1}([0-9]{1})\3{1}$/g))
						return false;
					else if(str.match(/^([0-9]{1})\1{2}([0-9]{1})\2{2}$/g))
						return false;
					return true;
				}
				validateDictionary.push(segment);
				//不来源于证件账号,且不能采用身份证号码中生日为单数月单数日的6位数字
				var isFromIdCard = function (str, param1){
					if(!param1) return true;
					var arr = param1.split(';');
					for(var i = 0, param; i < arr.length; i++){
						param = arr[i];
						// 18位数身份证正则表达式
						var idcard = /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$/;
						//只有当传入了证件号码才做验证
							//18位身份证号码中生日为单数月单数日的6位数字
						if(param.match(idcard) && param[10] == '0' && param[12] == '0' && str.substring(0,4) == param.substring(6,10) && str[4] == param[11] && str[5] == param[13]){
							return false;
						}
						if(param.indexOf(str) != -1)
							return false;
					}		   				 					
					return true;
				}
				validateDictionary.push(isFromIdCard);	
				//判断所有的校验
				for(var index = 0; index < validateDictionary.length; index++) {  
	                var result = validateDictionary[index].call(this, str, param);  
	                if(!result)  
	                	return false;  
	            }  
	            return true; 
			}
		},
		/**
		* 验证规则：贷款账户专用格式验证；
		* 使用方法：loanAccount
		*/
		loanAccount:{
			key:'loanAccount',
			fn:function(str,param){
				var aMatch;
				if(param){
					aMatch = str.match('\\d{2}\\s\\d{3}\\s\\d{3}\\s\\d{4}-\\d{14}');
					if(aMatch){
						return true;
					}else{
						return false;
					}
				}
			}
		},
		/**
		*邮政编码
		*/
		zipCode : {
			key : 'zipCode',
			fn : function(str){
				var r = /^[0-9]\d{5}$/;
				return str.match(r) ? true : false;
			}
		},
		/**
		 * 验证规则： 固定格式数字校验  允许有-,  定义最多多少位整数 和 最多多少位小数 ，可以没有小数
		 * 使用方法：[int,int]
		 * 第一个int表示 最多多少位整数>=1  第二个int表示 做多多少位 小数 >=0
		 *
		 */
		numFixedFormat: {
			key: 'numFixedFormat',
			fn: function(str, param) {
				if (!param || param.length != 2) {
					alert('numFixedFormat 参数格式错误 ,格式为[int,int]');
					return false;
				}

				// 整数位数
				var pNumCount = param[0] || 1;
				// 小数位数
				var xsNumCount = param[1];

				// 特殊情况
				var specialReg = /^-0$/;
				if (specialReg.test(str)) {
					return false;
				}

				// 整数 规则
				var pNumRegStr = '^[-]?(([1-9]\\d{0,' + (pNumCount-1) + '})|([0]))';
				// 小数部分规则
				var xsNumRegStr = '';

				// 如果允许存在小数
				if (xsNumCount > 0) {
					xsNumRegStr = '(\\.\\d{1,' + xsNumCount + '})?$';
				} else {
					xsNumRegStr = '$';
				}
				console.log(pNumRegStr + xsNumRegStr);

				// 正则
				var regex = new RegExp(pNumRegStr + xsNumRegStr);

				return regex.test(str);
			}
		},
		isPhoneNumber:{
			key:'isPhoneNumber',
			fn:function(str){
			if (str.match(/^1\d{2}-?\d{5}(\d{3}|\*{3})$/) == null) {
		        return false;
		    }
		    else {
		        return true;
		    }
			}
		},
		/**
		* 针对证件类型的校验
		* 目前包含港澳(1070),台湾(1080),外国人永久居留证(1121)
		*/
		identityType : {
			key : 'identityType',
			fn : function(str,param){
				if(!param)
					return false;
				var reg;
				param = (param.length == 1 ? param[0] : param);
				switch (param){
					case PJF.constants.IDENTITY_GANG_AO :
					    reg = /^(H|M)\d{8}$/;
					    break;
					case PJF.constants.IDENTITY_TAI_WAN :
						reg = /^\d{8}$/;
						break;
					/*case PJF.constants.IDENTITY_FOREIGN :
						reg = /^[A-Z0-9]{15}$/;
						break;*/
					defaults:
						return;
				}
				return str.match(reg) ? true : false;
			}
		}
	};


/**
 * 验证规则的mapping,供validate方法调用
 */

PJF.validator.rules=function(){
	if(PJF.validator.base){
		var pb = PJF.validator.base;
		var result = {};
		for(var a in pb){
			result[pb[a].key]=pb[a].fn;
		}
		return result;
	}
};

/*
 * 验证器供外部调用的验证方法,value是要被验证的是字符串,rules是规则名
 */
PJF.validator.validate=function(value,param,rules){
	rules = rules||'';
	rules = rules.split(",");
	var pr = PJF.validator.rules();
	for(var r=0;r<rules.length;r++){
		if(pr[rules[r]]){
			if(!pr[rules[r]](value,param)){
				return rules[r];
			}
		}
	}
	return;
};
/*
 * 
 */
PJF.validator.expand=function(rules){
	PJF.apply(PJF.validator.base,rules);
	if(!$.fn.validatebox) return;
	var pr = PJF.validator.rules(); 
	var result = {};
	var f = function(r) {
		return {
			fn : function(value,param) {
				if (PJF.validator.validate(value,param, r)) {
					return false;
				} else {
					return true;
				}
			}
		}
	};
	for ( var r in pr) {
		result[r] = {
			validator : f(r).fn,
			message : r + "!"
		}
	}
	$.extend($.fn.validatebox.defaults.rules, result);
}


/**
 * 该文件是对P2所有AJAX出去的请求，将jsonData进行新一代安全组件加密，以供P2S校验
 * 1. mac
 * 2. _login_tk
 *  
 */
;

(function () {

  //为序列化的对象添加参数：如a=1&b=2这种格式的
  //att. 若有重复的key，直接替换掉,如对a=1&b=2添加{b:3},变为a=1&b=3
  function addParam(serializedStr, param) {
    serializedStr = serializedStr || "";
    var splitsArr = serializedStr.split('&');
    var keys = [];
    //不敢用Object.keys，毕竟有低版本IE
    for (var key in param) {
      keys.push(key);
    }
    //若重复 删除掉
    for (var i = splitsArr.length; i-- > 0;) {
      //低版本IE array没有indexOf方法
      if (PJF.util.array.indexOf(keys, splitsArr[i].split('=')[0]) != -1) {
        splitsArr.splice(i, 1);
      }
    }
    serializedStr = splitsArr.join('&')
    for (var key in param) {
      param[key] = param[key] || "";
      serializedStr += (serializedStr === '' ? '' : '&') + key + '=' + encodeURIComponent(param[key]);
    }
    return serializedStr;
  }

  function getParam(serializedStr, key) {
    serializedStr = serializedStr || "";
    var splitsArr = serializedStr.split('&');
    for (var i = 0, len = splitsArr.length; i < len; i++) {
      if (splitsArr[i].split('=')[0] === key)
        return splitsArr[i].split('=')[1];
    }
  }

  /**
   * 是否需要计算MACCONTENT的逻辑判断
   * 1. 各个平台保持原有判断
   * 2. 针对termType = pc，新增判断，原因是因为pc平台ztree里，传递给$.ajax的是序列化的data
  */
  function needMac(options, originalOptions) {
    if (originalOptions.data && originalOptions.data.jsonData && typeof (originalOptions.data.jsonData) == 'string') {
      return true
    } else if (PJF.constants.termType == 'pc' && options.data && typeof(getParam(options.data, 'jsonData')) === 'string') {
      return true
    }
  }

  $.ajaxPrefilter(function (options, originalOptions, jqxhr) {
    // 添加登陆token
    if (PJF.constants.termType == 'pc' && !PJF.constants.D2D && PJF.constants.LOGIN_TOKEN && typeof(PJF.util.getValue(originalOptions,'data.jsonData')) == 'string') {
      var loginToken = PJF.util.getLoginToken()
      if (loginToken) {
        var jsonData = decodeURIComponent(getParam(options.data, 'jsonData').replace(/\+/g, ' '))
        try {
          jsonData = eval('(' + jsonData + ')')
          jsonData._login_tk = loginToken
          options.data = addParam(options.data, {
            jsonData: JSON.stringify(jsonData)
          })
        } catch(e) {
          console.info('注入login token时jsondata eval失败:' + e.message)
        }
      }
    }

    if (PJF.constants.NO_AJAX_PREFILTER) return; //留一手
    //STM密钥是用设备号生成的
    var _operCode = PJF.constants.termType == 'stm' ? PJF.util.getValue(window, 'PJF.otherInfo.devId') : PJF.util.getValue(window, 'PJF.userInfo.userCode');

    //只有含有jsonData这种情况才去计算mac
    if (_operCode && needMac(options, originalOptions)) {

      var encryptData; //若异常出错，将encryptData设置为错误信息，客户端版本不支持的除外
      switch (PJF.constants.termType) {
        case 'pc':
          if (PJF.communication.client.isInP2()) {
            //1.这里用序列化过的jsonData来加密，是考虑到arqc manager那里会去更改options.data里的arqc,如果是授权审核之类的就麻烦了
            //2.另外，之所以不去替换originalOptions里的jsonData，是考虑到应用就传的字符串，替换了也没用
            //3.另外空格在序列化的时候被替换为+号了，在mac的时候替换回去
            /*var macRst
            if (typeof(originalOptions.data) === 'string') { // 说明传入的已经被序列化了, 所以jquery不会去$.param, 这时候不能decodeuricomponent了
              macRst = PJF.communication.client.macContent(getParam(options.data, 'jsonData').replace(/\+/g, ' '))
            } else {
              macRst = PJF.communication.client.macContent(decodeURIComponent(getParam(options.data, 'jsonData').replace(/\+/g, ' ')))
            }*/
            /* 这里加密要分情况了 
              1. 大部分场景, 应用data都传的是对象, jquery会用$.param去操作编码
              2. data传的是字符串(比如ztree!), jquery不会操作, 这时候就要区分jsonData是否被编码了, 坑爹
            */
            var macRst
            if (typeof(originalOptions.data) !== 'string') { // 场景1, jq的processData应该没人去false吧
              console.debug('macData普通情况')
              macRst = PJF.communication.client.macContent(decodeURIComponent(getParam(options.data, 'jsonData').replace(/\+/g, ' ')))
            } else { // 传入的data是string
              var jsonData = getParam(options.data, 'jsonData').replace(/\+/g, ' ')
              // 判断下是否需要decodeURIComponent, 只想到一个比较土的办法判断是否应用自己ecnodeURIComponent
              try {
                if (decodeURIComponent(jsonData) !== jsonData) { // 若为true, 说明是encode的
                  console.debug('macData data为encode字符串情况')
                  macRst = PJF.communication.client.macContent(decodeURIComponent(jsonData))
                } else { // 没有encode过
                  console.debug('macData data为未encode字符串情况')
                  macRst = PJF.communication.client.macContent(jsonData)
                }
              } catch (e) { // 异常说明肯定没有encode过, 比如上开的那个问题, 比如有一段是 '利率为10%。', 这时decode会报错
                  console.debug('macData data为未encode字符串情况, 并且有%号的情况')
                  macRst = PJF.communication.client.macContent(jsonData)
              }
            }
            if (macRst[0] == 0) {
              encryptData = macRst[1];
            }
            
          } else {
            encryptData = 'pc not in client';
          }
          break;
        case 'stm':
          if (PJF.util.compareClientVersion('1.17.1.0')) {
            var macres = PJF.communication.SecAPI.generateMac(PJF.otherInfo.devId, PJF.otherInfo.token, PJF.otherInfo.secNode, originalOptions.data.jsonData);
            encryptData = macres.success ? macres.result : macres.error;
          }
          break;

        case 'mobile':
          encryptData = PJF.client.encryptData(originalOptions.data.jsonData);
          break;

        case 'pad':
          encryptData = PJF.util.encryptData(originalOptions.data.jsonData);
          break;

        default:
          encryptData = 'unknown device type : ' + PJF.constants.termType;
          console.log('ajax mac加密失败, 未知的设备类型:' + PJF.constants.termType);
      }
      if (encryptData) {
        options.data = addParam(options.data, {
          macData: encryptData,
          _terminal_type: PJF.constants.termType, //设备平台
          OPER_CODE: _operCode //解密用的
        });
      }
    }
  })

})();
/**
 * P2 Framework JS Library 1.0 Copyright(c) 2012, China Construction Bank.
 *
 * @Author famingyuan Create on: 2015-02-28
 *  Last Updated:
 *  说明:提供事件模块
 */
PJF.namespace('PJF.event');
/**
 * PJF event 事件监听、发布管理模块
 */
PJF.event = (function() {

	// 保存事件以及关联的执行队列 key-callback list
	var events = {};
	// 保存事件执行的上下文对象
	var contexts=[];

	// 对外暴露接口
	return {
		/**
		 * 触发事件
		 * @param  {[type]} eventName [事件名称]
		 * @param  {[type]} data      [数据 支持多个参数 默认情况下 对外保持一个参数]
		 * @return {[type]}           [description]
		 */
		publish: function(eventName) {
			var callbackList = events[eventName];
			if (!callbackList) {
				return;
			}
			var params = Array.prototype.slice.call(arguments, 1);
			// 防止在调用的时候 修改了
			callbackList = callbackList.slice();
			var lastRet = undefined;
			for (var i = 0, len = callbackList.length; i < len; i++) {
				try{
					if(callbackList[i].__run_once){
						PJF.event.removeSubscriber(eventName, callbackList[i]);
					}
					lastRet = callbackList[i].apply(window, params);					
				}
				catch(e){
					console.log('publish callback error for event:' + eventName);
					console.log(e.stack);
				}
			}
			return lastRet;
		},
		/**
		 * 异步事件触发
		 * @param  {[type]} eventName [事件名称]
		 * @param  {[type]} data      [数据 支持多个参数 默认情况下 对外保持一个参数]
		 * @return {[type]}           [description]
		 */
		asyncPublish: function(eventName) {
			var args = arguments;
			setTimeout(function() {
				var callbackList = events[eventName];
				if (!callbackList) {
					return;
				}
				var params = Array.prototype.slice.call(args, 1);
				// 防止在调用的时候 修改了
				callbackList = callbackList.slice();
				for (var i = 0, len = callbackList.length; i < len; i++) {
					try{
						if(callbackList[i].__run_once){
							PJF.event.removeSubscriber(eventName, callbackList[i]);
						}
						callbackList[i].apply(window, params);
					}
					catch(e){
						console.log('asyncPublish callback error for event:' + eventName);
						console.log(e.stack);
					}
				}
				
			}, 0);
		},
		hasEvent : function(evt){
			return evt in events;
		},
		onceSubscriber : function(eventName, callback){  // 运行一次，自动注销
			if(typeof callback != 'function'){
				return;
			}
			callback.__run_once = true;
			this.addSubscriber(eventName, callback, null);
		},
		/**
		 * 添加某个事件的监听
		 * @param  {[type]}   eventName [事件名称]
		 * @param  {Function} callback  [回调函数]
		 * @param  {Object} context  [回调函数执行时的上下文]
		 * * @return {[type]}             [description]
		 */
		addSubscriber: function(eventName, callback, context, overide) {
			if (!eventName) {
				return;
			}
			if (events[eventName] && !overide) {
				events[eventName].push(callback);
			} else {
				events[eventName] = [callback];
			}
			// 暂时不实现
			// contexts.push(context);
		},
		/**
		 * 取消事件订阅
		 * 1. 如果不传任何参数 将会移除所有的事件监听
		 * 2. 不传callback 则删除对应事件的所有回调 如果传 则删除指定的某个回调
		 * @param  {[type]}   eventName [事件名称]
		 * @param  {Function} callback  [回调函数]
		 * @return {[type]}             [description]
		 */
		removeSubscriber: function(eventName, callback) {

			// 如果不指定名称 也不指定回调 那么就移除所有的
			if (!(eventName || callback)) {
				events = {};
				return;
			}
			// 无指定的事件监听队列
			var callbackList = events[eventName];
			if (!callbackList) {
				return;
			}
			// 指定移除某个回调
			if (callback) {
				for (var i = 0, len = callbackList.length; i < len; i++) {
					// 删除指定的某一个回调
					if (callback === callbackList[i]) {
						callbackList.splice(i, 1);
						break;
					}
				}
			} else {
				// 如果没有指定callback 则所有回调都删除
				callbackList = [];
			}

			if(callbackList.length === 0) delete events[eventName];
		},

		getCallBackList:function(eventName){
			return events[eventName] || [];
		}
	};
})();
PJF.namespace('PJF.html');

PJF.html = {

	/*
	 * 为批量组件设置值
	 * @param data 设置的数据,其中key为组件的id,value为组件的值
	 */
	setAreaData : function(data){
		for(var i in data){
			var component = PJF.ui.componentMgr.get(i);
			if(component.setValue)
				component.setValue(data[i]);
		}
	},
	/*
	 * 得到当前页面所有组件的值
	 * @return result 值的集合,key为组件的id
	 */
	getAreaData : function(areaId){
		var allComponent = {};
		if (areaId) {
			allComponent = PJF.ui.componentMgr.getOuterAll(areaId);
		} else {
			allComponent = PJF.ui.componentMgr.getAll();
		}
		var result = {};
		for(var i in allComponent){
			if(allComponent[i].getValue)
				result[i] = allComponent[i].getValue();
		}
		return result;
	},
	/***
 	 * 将一个区域的元素disable
 	 * @param areaId 区域的id
 	 * @param flag 为true代表disable,false代表enable
	 */
	disableArea: function(areaId, flag) {
		var allComponent = PJF.ui.componentMgr.getAll(areaId);

		for(var i in allComponent){
			if (flag) {
				(allComponent[i].disabled instanceof Function) && allComponent[i].disabled();
			} else {
				(allComponent[i].enable instanceof Function) && allComponent[i].enable();
			}
		}
	},
	 /***
 	 * 将一个区域的元素readOnly
 	 * @param areaId 区域的id
 	 * @param flag 为true代表readOnly
	 */
	readOnlyArea: function(areaId, flag) {
		var allComponent = PJF.ui.componentMgr.getAll(areaId);

		for(var i in allComponent){
			(allComponent[i].readOnly instanceof Function) && allComponent[i].readOnly(flag);
		}
	},
	validatedArea: function(areaId) {
		var allComponent = PJF.ui.componentMgr.getAll(areaId);
		var flag = true;
		for(var i in allComponent){
			if (allComponent[i].com.is(':visible') && allComponent[i].validated instanceof Function) {
				var msg = allComponent[i].validated();
				msg && (flag = false);
			}
		}
		return flag;
	},
	/*
	 * 根据模板来生成相应html内容，依赖于jsrender
	 * @param tempStr 模板
	 * @param data 数据
	 */
	template: function(tempStr, data) {
		var temp = $.templates(tempStr);
		return temp.render(data);
	},
	/***
 	 * 得到某个dom节点
 	 * @param id dom节点的id
 	 * @return 对应的DOM节点 
	 */
	getDom: function(id) {
		return $('#' + id)[0];
	},
	/***
 	 * 得到当前url的参数(参数必须是调用escape进行过转码的)
 	 * @param name 参数名
 	 * @return 参数值
	 */
	getUrlParam: function(name) {
		var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
		var r = window.location.search.substr(1).match(reg);
		if (r != null)
			return unescape(r[2]);
		return null;

	},
	/**
	 * 根据domID或者script标签id 获取模板对象
	 * @return {[type]} [description]
	 */
	getTemplate: function(domId) {
		var target = document.getElementById(domId);

		// 获取可能存在的模板对象
		var templateObj = $.data(target, 'templateObj');
		// 没有的话 生成模板对象并缓存
		if (!templateObj) {
			var templateStr = target.innerHTML || target.text;
			if(templateStr){
				templateStr = templateStr.replace(/&gt;/g,'>').replace(/&lt;/g,'<');
			}
			templateObj = $.templates(templateStr);
			$.data(target, 'templateObj', templateObj);
		}
		// 返回模板对象
		return templateObj;
	},
	/**
	 * 根据指定模板对象或者模板ID 和指定数据 渲染到指定的dom中
	 * @param  {[template object or DomID]} template [模板对象 ，可以通过PJF.html.getTemplate获取到]
	 * @param  {[JSON or JSON Array]} data     [数据源 可以为JSON或者JSON数组]
	 * @param  {[String or null]} domId    [渲染后的数据 更新到页面指定容器中 如果不传 则不更新到页面中]
	 * @return {[String]}          [description]
	 */
	render: function(template, data, outputDomId) {
		if (!template) {
			return;
		}
		// 如果为容器ID 则根据容器获取
		if (typeof(template) === 'string') {
			template = PJF.html.getTemplate(template);
		}
		// 渲染结果
		var renderResult = template.render(data);

		// 如果指定目标容器ID将渲染得到的内容更新到页面
		outputDomId && $("#" + outputDomId).html(renderResult);

		// 默认统一返回渲染后的字符串
		return renderResult;
	},
	 /***
 	 * 清空一个dom元素内的html,等价于innerHTML=""
 	 * @param domId  dom节点的id
	 */
	empty: function(domId) {
		$("#" + domId).empty();
	},
	 /***
 	 * 删除html元素
 	 * @param domId  dom节点的id
	 */
	remove: function(domId) {
		$("#" + domId).remove();
	},
	 /***
 	 * 设置dom元素内的内容，等价于innerHTML=content。
 	 * @param domId  dom节点的id
 	 * @param content 要设置的内容
	 */
	content: function(domId, content) {
		$("#" + domId).html(content);
	},
	 /***
 	 * 添加内容到dom元素后方
 	 * @param domId  dom节点的id
 	 * @param content 要添加的内容
	 */
	append: function(domId, content) {
		$("#" + domId).append(content);
	},
	/**
	* 重设html的fontSize，作为rem的基准
	*/
	resetRem: function(conf){
		var fontSize;
		//只监听宽度
		if(conf && conf.width){
			fontSize = Math.min($(window).width() / PJF.constants.DEFAULT_WINDOWWIDTH * PJF.constants.DEFAULT_FONTSIZE,
					document.body.clientHeight / PJF.constants.DEFAULT_WINDOWHEIGHT * PJF.constants.DEFAULT_FONTSIZE);
		}
		else{
			fontSize = Math.min($(window).width() / PJF.constants.DEFAULT_WINDOWWIDTH * PJF.constants.DEFAULT_FONTSIZE,
					$(window).height() / PJF.constants.DEFAULT_WINDOWHEIGHT * PJF.constants.DEFAULT_FONTSIZE);
		}		
		
		$('html').css('fontSize',fontSize + 'px');
	},

	px2Rem:function(px){
		var pxNum = typeof(px) == 'string' ? px.split('px')[0] : px;
		var htmlFont = $('html').css('fontSize').split('px')[0];
		return pxNum / htmlFont;
	},
	//URL转为绝对路径
	toAbsURL:function(){
		var directlink = function(url) {
			var a = document.createElement('a');
			a.href = url;
			return a.href;
		};
		return directlink('') === '' ? function(url) {
			var div = document.createElement('div');
			div.innerHTML = '<a href="' + url.replace(/"/g, '%22') + '"/>';
			return div.firstChild.href;
		} : directlink;
	}(),
	/*
	* 为url添加参数
	*/
	addUrlParam : function(url, paramObj){
		if(typeof(url) != 'string') return;
		if($.isEmptyObject(paramObj)) return;
		url.indexOf('?') == -1 ? (url += '?') : (url += '&'); //是否已经有参数了
		var paramArr = [];
		for(var key in paramObj){
			paramArr.push(key + "=" + paramObj[key]);			
		}
		return url += paramArr.join("&");
	}

};
/*
 * Optimized version of jQuery Templates, for rendering to string.
 * Does not require jQuery, or HTML DOM
 * Integrates with JsViews (http://github.com/BorisMoore/jsviews)
 * Copyright 2012, Boris Moore
 * Released under the MIT License.
 */
// informal pre beta commit counter: 24b

(function(global, jQuery, undefined) {
	// global is the this object, which is window when running in the usual browser environment.
	"use strict";

	if (jQuery && jQuery.views || global.jsviews) {
		return;
	} // JsRender is already loaded

	//========================== Top-level vars ==========================

	var versionNumber = "v1.0pre",

		$, jsvStoreName, rTag, rTmplString,
		//TODO	tmplFnsCache = {},
		delimOpenChar0 = "{",
		delimOpenChar1 = "{",
		delimCloseChar0 = "}",
		delimCloseChar1 = "}",
		linkChar = "^",
		FALSE = false,
		TRUE = true,

		rPath = /^(?:null|true|false|\d[\d.]*|([\w$]+|\.|~([\w$]+)|#(view|([\w$]+))?)([\w$.^]*?)(?:[.[^]([\w$]+)\]?)?)$/g,
		//                                     object     helper    view  viewProperty pathTokens      leafToken

		rParams = /(\()(?=|\s*\()|(?:([([])\s*)?(?:([#~]?[\w$.^]+)?\s*((\+\+|--)|\+|-|&&|\|\||===|!==|==|!=|<=|>=|[<>%*!:?\/]|(=))\s*|([#~]?[\w$.^]+)([([])?)|(,\s*)|(\(?)\\?(?:(')|("))|(?:\s*([)\]])([([]?))|(\s+)/g,
		//          lftPrn        lftPrn2                 path    operator err                                                eq          path2       prn    comma   lftPrn2   apos quot        rtPrn   prn2   space
		// (left paren? followed by (path? followed by operator) or (path followed by paren?)) or comma or apos or quot or right paren or space

		rNewLine = /\r?\n/g,
		rUnescapeQuotes = /\\(['"])/g,
		// escape quotes and \ character
		rEscapeQuotes = /([\\'"])/g,
		rBuildHash = /\x08(~)?([^\x08]+)\x08/g,
		rTestElseIf = /^if\s/,
		rFirstElem = /<(\w+)[>\s]/,
		rPrevElem = /<(\w+)[^>\/]*>[^>]*$/,
		autoTmplName = 0,
		viewId = 0,
		escapeMapForHtml = {
			"&": "&amp;",
			"<": "&lt;",
			">": "&gt;"
		},
		attrEncodeChars = /[<"'&]/g,
		htmlEncodeChars = /[\x00<>"'&]/g,
		tmplAttr = "data-jsv-tmpl",
		fnDeclStr = "var j=j||" + (jQuery ? "jQuery." : "js") + "views,",
		slice = [].slice,

		$render = {},
		jsvStores = {
			template: {
				compile: compileTmpl
			},
			tag: {
				compile: compileTag
			},
			helper: {},
			converter: {}
		},

		// jsviews object ($.views if jQuery is loaded)
		$views = {
			jsviews: versionNumber,
			render: $render,
			View: View,
			settings: {
				delimiters: $viewsDelimiters,
				debugMode: TRUE,
				tryCatch: TRUE
			},
			sub: {
				// subscription, e.g. JsViews integration
				Error: JsViewsError,
				tmplFn: tmplFn,
				parse: parseParams,
				extend: $extend,
				error: error
				//TODO			invoke: $invoke
			},
			_cnvt: convertVal,
			_tag: renderTag,

			// TODO provide better debug experience - e.g. support $.views.onError callback
			_err: function(e) {
				// Place a breakpoint here to intercept template rendering errors
				return $viewsSettings.debugMode ? ("Error: " + (e.message || e)) + ". " : '';
			}
		};

	function JsViewsError(message, object) {
		// Error exception type for JsViews/JsRender
		// Override of $.views.sub.Error is possible
		if (object && object.onError) {
			if (object.onError(message) === FALSE) {
				return;
			}
		}
		this.name = "JsRender Error";
		this.message = message || "JsRender error";
	}

	function $extend(target, source) {
		var name;
		target = target || {};
		for (name in source) {
			target[name] = source[name];
		}
		return target;
	}

	//TODO		function $invoke() {
	//			try {
	//				return arguments[1].apply(arguments[0], arguments[2]);
	//			}
	//			catch(e) {
	//				throw new $views.sub.Error(e, arguments[0]);
	//			}
	//		}

	(JsViewsError.prototype = new Error()).constructor = JsViewsError;

	//========================== Top-level functions ==========================

	//===================
	// jsviews.delimiters
	//===================

	function $viewsDelimiters(openChars, closeChars, link) {
		// Set the tag opening and closing delimiters and 'link' character. Default is "{{", "}}" and "^"
		// openChars, closeChars: opening and closing strings, each with two characters

		if (!$viewsSub.rTag || arguments.length) {
			delimOpenChar0 = openChars ? openChars.charAt(0) : delimOpenChar0; // Escape the characters - since they could be regex special characters
			delimOpenChar1 = openChars ? openChars.charAt(1) : delimOpenChar1;
			delimCloseChar0 = closeChars ? closeChars.charAt(0) : delimCloseChar0;
			delimCloseChar1 = closeChars ? closeChars.charAt(1) : delimCloseChar1;
			linkChar = link || linkChar;
			openChars = "\\" + delimOpenChar0 + "(\\" + linkChar + ")?\\" + delimOpenChar1; // Default is "{^{"
			closeChars = "\\" + delimCloseChar0 + "\\" + delimCloseChar1; // Default is "}}"
			// Build regex with new delimiters
			//          tag    (followed by / space or })   or cvtr+colon or html or code
			rTag = "(?:(?:(\\w+(?=[\\/\\s\\" + delimCloseChar0 + "]))|(?:(\\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\\*)))" + "\\s*((?:[^\\" + delimCloseChar0 + "]|\\" + delimCloseChar0 + "(?!\\" + delimCloseChar1 + "))*?)";

			// make rTag available to JsViews (or other components) for parsing binding expressions
			$viewsSub.rTag = rTag + ")";

			rTag = new RegExp(openChars + rTag + "(\\/)?|(?:\\/(\\w+)))" + closeChars, "g");

			// Default:    bind           tag       converter colon html     comment            code      params            slash   closeBlock
			//           /{(\^)?{(?:(?:(\w+(?=[\/\s}]))|(?:(\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\*)))\s*((?:[^}]|}(?!}))*?)(\/)?|(?:\/(\w+)))}}/g

			rTmplString = new RegExp("<.*>|([^\\\\]|^)[{}]|" + openChars + ".*" + closeChars);
			// rTmplString looks for html tags or { or } char not preceded by \\, or JsRender tags {{xxx}}. Each of these strings are considered NOT to be jQuery selectors
		}
		return [delimOpenChar0, delimOpenChar1, delimCloseChar0, delimCloseChar1, linkChar];
	}

	//=========
	// View.get
	//=========

	function getView(type) {
		// TODO complete/test/provide samples for this
		// If type is undefined, returns root view (view under top view).
		var view = this,
			root = !type || type === "root";
		while (root && view.parent.parent || view && view.type !== type) {
			view = view.parent;
		}
		return view;
	}

	function getIndex() {
		var view = this.get("item");
		return view ? view.index : undefined;
	}

	getIndex.depends = function(view) {
		return [view.get("item"), "index"];
	}
	//==========
	// View._hlp
	//==========

	function getHelper(helper) {
		// Helper method called as view._hlp(key) from compiled template, for helper functions or template parameters ~foo
		var wrapped,
		view = this,
			res = (view.ctx || {})[helper];

		res = res === undefined ? view.getRsc("helpers", helper) : res;

		if (res) {
			if (typeof res === "function") {
				wrapped = function() {
					// If it is of type function, we will wrap it so it gets called with view as 'this' context.
					// If the helper ~foo() was in a data-link expression, the view will have a 'temporary' linkCtx property too.
					// However note that helper functions on deeper paths will not have access to view and tagCtx.
					// For example, ~util.foo() will have the ~util object as 'this' pointer
					return res.apply(view, arguments);
				};
				$extend(wrapped, res);
			}
		}
		return wrapped || res;
	}

	//==============
	// jsviews._cnvt
	//==============

	function convertVal(converter, view, self, tagCtx, bindingPaths, text) {
		// self is template object or linkCtx object
		if (converter || bindingPaths) {
			var tmplConverter,
			linkCtx = !self.markup && self,
				tag = {
					tagName: converter + ":",
					tagCtx: tagCtx
				},
				args = tagCtx.args = slice.call(arguments, 5);

			tagCtx.view = view;
			tagCtx.bind = !! (linkCtx || bindingPaths);

			if (linkCtx) {
				linkCtx.tag = tag;
				tag.linkCtx = linkCtx;
				tagCtx.ctx = extendCtx(tagCtx.ctx, linkCtx.view.ctx);
			}
			tag.ctx = tagCtx.ctx || {};
			tagCtx.props = tagCtx.props || {};
			delete tagCtx.ctx;

			if (converter && ((tmplConverter = view.getRsc("converters", converter)) || error("Unknown converter: {{" + converter + ":"))) {
				// A call to {{cnvt: ... }} or {^{cnvt: ... }} or data-link="{cnvt: ... }"
				text = tmplConverter.apply(tag, args);
			}
			if (bindingPaths) {
				// A call to {^{: ... }} or {^{cnvt: ... }}
				bindingPaths = view.tmpl.bnds[bindingPaths - 1];
				linkCtx.paths = bindingPaths;
				// Consider being able to switch off binding if parent view is not currently bound.
				view._.tag = tag; // Provide this tag on view, for markerNode on bound tags, and for getting the tagCtx and linkCtx during rendering.
				// Provide this tag on view, for addMarkerNode on bound tags to add the tag to view._.bnds, associated with the tag id,
				// and so when rendering subsequent {{else}}, will be associated with this tag
				//TODO does this work with nested elses and with {^{foo:...}} which also adds tag to view, for markerNodes.
				text = view._.onRender(text, view, TRUE);
				//Example:  text = '<script type="jsv123"></script>' + text + '<script type="jsv123/"></script>';
			}
		}
		return text;
	}

	//=============
	// jsviews._tag
	//=============

	function getResource(storeName, item) {
		var res,
		view = this,
			store = $views[storeName];

		res = store && store[item];
		while ((res === undefined) && view) {
			store = view.tmpl[storeName];
			res = store && store[item];
			view = view.parent;
		}
		return res;
	}

	function getResource2(storeName, item, root) {
		var view = this,
			store = !root && $views[storeName];
		return store && store[item] || (store = view.tmpl[storeName], store && store[item]) || view.parent && view.parent.getRsc(storeName, item, TRUE);
	}

	function renderTag(tagName, parentView, self, content, tagCtx, bind) {
		// Called from within compiled template function, to render a template tag
		// Returns the rendered tag

		var ret, render, ctx, elses, tag, tags,
		tmpl = self.markup && self,
			// self is either a template object (if rendering a tag) or a linkCtx object (if linking using a link tag)
			linkCtx = !tmpl && self,
			parentView_ = parentView._,
			parentTmpl = tmpl || parentView.tmpl,
			childTemplates = parentTmpl.templates,
			tagDef = parentView.getRsc("tags", tagName) || error("Unknown tag: {{" + tagName + "}}"),
			args = tagCtx.args = arguments.length > 6 ? slice.call(arguments, 6) : [],
			props = tagCtx.props = tagCtx.props || {};

		tagCtx.view = parentView;
		tagCtx.ctx = extendCtx(tagCtx.ctx, parentView.ctx); // Extend parentView.ctx
		ctx = tagCtx.ctx || {};
		delete tagCtx.ctx;

		// Set the tmpl property to the content of the block tag, unless set as an override property on the tag
		tmpl = props.tmpl;
		content = content && parentTmpl.tmpls[content - 1];
		tmpl = tmpl || content || tagDef.template || undefined;
		tmpl = "" + tmpl === tmpl // if a string
		?
		parentView.getRsc("templates", tmpl) || $templates(tmpl) : tmpl;

		if (tagName === "else") {
			tag = parentView._.tag;
			// Switch current tagCtx of tag instance to this {{else ...}}
			elses = tag._elses = tag._elses || [];
			elses.push(tmpl);
			tagCtx.isElse = elses.length;
			render = tag.render;
		}
		if (tagDef.init) {
			// init is the constructor for the tag/control instance

			// tags hash: tag.ctx.tags, merged with parentView.ctx.tags,
			tags = ctx.tags = parentView.ctx && extendCtx(ctx.tags, parentView.ctx.tags) || {};

			tag = tag || linkCtx.tag;
			if (tag) {
				// tag has already been instantiated, so keep it, but attach the current context, which may have changed
				// Add tag to tags hash
				tags[tagName] = tag;
			} else {
				// If the tag has not already been instantiated, we will create a new instance and add to the tags hash,
				// so ~tags.tagName will access the tag, even within the rendering of the template content of this tag
				//	TODO provide error handling owned by the tag - using tag.onError
				//			try {
				tag = tags[tagName] = new tagDef.init(tagCtx, linkCtx, ctx);
				//				}
				//				catch(e) {
				//					tagDef.onError(e);
				//				}
				tag.tmpl = tmpl;

				if (linkCtx) {
					tag.attr =
					// Setting attr on tag so renderContent knows whether to include script node markers.
					linkCtx.attr =
					// Setting attr on self to ensure outputting to the correct target attribute.
					linkCtx.attr || tagDef.attr || "";
				}
			}
			ctx.tag = tag;
		} else {
			// This is a simple tag declared as a function. We won't instantiate a specific tag constructor - just a standard instance object.
			tag = tag || {
				// tag instance object if no init constructor
				render: tagDef.render,
				renderContent: renderContent,
				tmpl: tmpl,
				tagName: tagName
			};
		}

		// Provide tagCtx, linkCtx and ctx access from tag
		tag.tagCtx = tagCtx;
		tag.ctx = ctx;
		if (linkCtx) {
			linkCtx.tag = tag;
			tag.linkCtx = linkCtx;
		}

		tag._is = "tag";
		tag._done = tagCtx.isElse ? tag._done : FALSE; // If not an {{else}} this is a new
		tmpl = tmpl || tag.tmpl;
		elses = tag._elses;

		//TODO The above works for initial rendering, but when refreshing {^{foo}} need also to associate with {{else}} tags. Use compilation to bind else content templates and expressions with the primary tag template and expression.

		parentView_.tag = tag;
		// Provide this tag on view, for addMarkerNode on bound tags to add the tag to view._.bnds, associated with the tag id,
		// for getting the tagCtx and linkCtx during rendering, and so when rendering subsequent {{else}}, will be associated with this tag
		//TODO does this work with nested elses and with {^{foo:...}} which also adds tag to view, for markerNodes.

		//		while (tmpl) {
		// If tagDef has a 'render' function, call it.
		// If the return result is undefined, return "", or, if a template (or content) is provided,
		// return the rendered template(using the current data or the first parameter as data);
		if (render = render || tag.render) {
			ret = render.apply(tag, args);

			//	TODO		ret = $invoke(tag, render, args);
		}
		ret = ret !== undefined ? ret // Return result of render function unless it is undefined, in which case return rendered template
		:
		tmpl
		// render template on args[0] if defined, or otherwise on the current data item
		?
		tag.renderContent(tagCtx.data !== undefined ? tagCtx.data : parentView.data, undefined, parentView) : ""; // No return value from render, and no template defined, so return ::

		//			tmpl = (tag !== "else" && elses) ? (tagCtx.isElse = tagCtx.isElse || 0, elses[tagCtx.isElse++]) : undefined;
		//}

		// If bind, for {^{tag ... }}, insert script marker nodes
		return bind ? parentView_.onRender(ret, parentView, bind) : ret;
	}

	//=================
	// View constructor
	//=================

	function View(context, type, parentView, data, template, key, onRender) {
		// Constructor for view object in view hierarchy. (Augmented by JsViews if JsViews is loaded)
		var views, parentView_,
		isArray = type === "array",
			self_ = {
				key: 0,
				useKey: isArray ? 0 : 1,
				id: "" + viewId++,
				onRender: onRender,
				bnd: {}
			},
			self = {
				data: data,
				tmpl: template,
				views: isArray ? [] : {},
				parent: parentView,
				ctx: context,
				type: type,
				// If the data is an array, this is an 'array view' with a views array for each child 'item view'
				// If the data is not an array, this is an 'item view' with a views 'map' object for any child nested views
				// ._.useKey is non zero if is not an 'array view' (owning a data array). Uuse this as next key for adding to child views map
				get: getView,
				getIndex: getIndex,
				getRsc: getResource,
				_hlp: getHelper,
				_: self_
			};

		if (parentView) {
			views = parentView.views;
			parentView_ = parentView._;
			if (parentView_.useKey) {
				// Parent is an 'item view'. Add this view to its views object
				// self._key = is the key in the parent view map
				views[self_.key = "_" + parentView_.useKey++] = self;
			} else {
				// Parent is an 'array view'. Add this view to its views array
				views.splice(
				// self._.key = self.index - the index in the parent view array
				self_.key = self.index = key !== undefined ? key : views.length,
				0, self);
			}
			// If no context was passed in, use parent context
			// If context was passed in, it should have been merged already with parent context
			self.ctx = context || parentView.ctx;
		}
		return self;
	}

	//=============
	// Registration
	//=============

	function compileChildResources(parentTmpl) {
		var storeName, resources, resourceName, settings, compile;
		for (storeName in jsvStores) {
			settings = jsvStores[storeName];
			if ((compile = settings.compile) && (resources = parentTmpl[storeName + "s"])) {
				for (resourceName in resources) {
					// compile child resource declarations (templates, tags, converters or helpers)
					resources[resourceName] = compile(resourceName, resources[resourceName], parentTmpl, storeName, settings);
				}
			}
		}
	}

	function compileTag(name, item, parentTmpl) {
		var init, tmpl;
		if (typeof item === "function") {
			// Simple tag declared as function. No presenter instantation.
			item = {
				tagName: name,
				render: item,
				depends: item.depends
			};
		} else {
			// Tag declared as object, used as the prototype for tag instantiation (control/presenter)
			item.tagName = name;
			if (tmpl = item.template) {
				item.template = "" + tmpl === tmpl ? ($templates[tmpl] || $templates(tmpl)) : tmpl;
			}
			if (item.init !== FALSE) {
				init = item.init = item.init || function(tagCtx) {};
				init.prototype = item;
				(init.prototype = item).constructor = init;
			}
		}
		item.renderContent = renderContent;
		item.attr = "html";
		if (parentTmpl) {
			item._parentTmpl = parentTmpl;
		}
		//TODO	item.onError = function(e) {
		//			var error;
		//			if (error = this.prototype.onError) {
		//				error.call(this, e);
		//			} else {
		//				throw e;
		//			}
		//		}
		return item;
	}

	function compileTmpl(name, tmpl, parentTmpl, storeName, storeSettings, options) {
		// tmpl is either a template object, a selector for a template script block, the name of a compiled template, or a template object

		//==== nested functions ====

		function tmplOrMarkupFromStr(value) {
			// If value is of type string - treat as selector, or name of compiled template
			// Return the template object, if already compiled, or the markup string

			if (("" + value === value) || value.nodeType > 0) {
				try {
					elem = value.nodeType > 0 ? value : !rTmplString.test(value)
					// If value is a string and does not contain HTML or tag content, then test as selector
					&&
					jQuery && jQuery(value)[0];
					// If selector is valid and returns at least one element, get first element
					// If invalid, jQuery will throw. We will stay with the original string.
				} catch (e) {}

				if (elem) {
					// Generally this is a script element.
					// However we allow it to be any element, so you can for example take the content of a div,
					// use it as a template, and replace it by the same content rendered against data.
					// e.g. for linking the content of a div to a container, and using the initial content as template:
					// $.link("#content", model, {tmpl: "#content"});

					value = elem.getAttribute(tmplAttr);
					name = name || value;
					value = $templates[value];
					if (!value) {
						// Not already compiled and cached, so compile and cache the name
						// Create a name for compiled template if none provided
						name = name || "_" + autoTmplName++;
						elem.setAttribute(tmplAttr, name);
						value = $templates[name] = compileTmpl(name, elem.innerHTML, parentTmpl, storeName, storeSettings, options); // Use tmpl as options
					}
				}
				return value;
			}
			// If value is not a string, return undefined
		}

		var tmplOrMarkup, elem;

		//==== Compile the template ====
		tmpl = tmpl || "";
		tmplOrMarkup = tmplOrMarkupFromStr(tmpl);

		// If options, then this was already compiled from a (script) element template declaration.
		// If not, then if tmpl is a template object, use it for options
		options = options || (tmpl.markup ? tmpl : {});
		options.tmplName = name;
		if (parentTmpl) {
			options._parentTmpl = parentTmpl;
		}
		// If tmpl is not a markup string or a selector string, then it must be a template object
		// In that case, get it from the markup property of the object
		if (!tmplOrMarkup && tmpl.markup && (tmplOrMarkup = tmplOrMarkupFromStr(tmpl.markup))) {
			if (tmplOrMarkup.fn && (tmplOrMarkup.debug !== tmpl.debug || tmplOrMarkup.allowCode !== tmpl.allowCode)) {
				// if the string references a compiled template object, but the debug or allowCode props are different, need to recompile
				tmplOrMarkup = tmplOrMarkup.markup;
			}
		}
		if (tmplOrMarkup !== undefined) {
			if (name && !parentTmpl) {
				$render[name] = function() {
					return tmpl.render.apply(tmpl, arguments);
				};
			}
			if (tmplOrMarkup.fn || tmpl.fn) {
				// tmpl is already compiled, so use it, or if different name is provided, clone it
				if (tmplOrMarkup.fn) {
					if (name && name !== tmplOrMarkup.tmplName) {
						tmpl = extendCtx(options, tmplOrMarkup);
					} else {
						tmpl = tmplOrMarkup;
					}
				}
			} else {
				// tmplOrMarkup is a markup string, not a compiled template
				// Create template object
				tmpl = TmplObject(tmplOrMarkup, options);
				// Compile to AST and then to compiled function
				tmplFn(tmplOrMarkup, tmpl);
			}
			compileChildResources(options);
			return tmpl;
		}
	}
	//==== /end of function compile ====

	function TmplObject(markup, options) {
		// Template object constructor
		var htmlTag,
		wrapMap = $viewsSettings.wrapMap || {},
		tmpl = $extend({
			markup: markup,
			tmpls: [],
			links: {},
			bnds: [],
			render: renderContent
		},
		options);

		if (!options.htmlTag) {
			// Set tmpl.tag to the top-level HTML tag used in the template, if any...
			htmlTag = rFirstElem.exec(markup);
			tmpl.htmlTag = htmlTag ? htmlTag[1].toLowerCase() : "";
		}
		htmlTag = wrapMap[tmpl.htmlTag];
		if (htmlTag && htmlTag !== wrapMap.div) {
			// When using JsViews, we trim templates which are inserted into HTML contexts where text nodes are not rendered (i.e. not 'Phrasing Content').
			tmpl.markup = $.trim(tmpl.markup);
			tmpl._elCnt = TRUE; // element content model (no rendered text nodes), not phrasing content model
		}

		return tmpl;
	}

	function registerStore(storeName, storeSettings) {

		function theStore(name, item, parentTmpl) {
			// The store is also the function used to add items to the store. e.g. $.templates, or $.views.tags

			// For store of name 'thing', Call as:
			//    $.views.things(items[, parentTmpl]),
			// or $.views.things(name, item[, parentTmpl])

			var onStore, compile, items, itemName, childTemplates, childTemplate, thisStore, childStoreName;

			if (name && "" + name !== name && !name.nodeType && !name.markup) {
				// Call to $.views.things(items[, parentTmpl]),

				// Adding items to the store
				// If name is a map, then item is parentTmpl. Iterate over map and call store for key.
				for (itemName in name) {
					theStore(itemName, name[itemName], item);
				}
				return $views;
			}
			thisStore = parentTmpl ? parentTmpl[storeNames] = parentTmpl[storeNames] || {} : theStore;

			// Adding a single unnamed item to the store
			if (item === undefined) {
				item = name;
				name = undefined;
			}
			compile = storeSettings.compile;
			if (onStore = $viewsSub.onBeforeStoreItem) {
				// e.g. provide an external compiler or preprocess the item.
				compile = onStore(thisStore, name, item, compile) || compile;
			}
			if (!name) {
				item = compile(undefined, item);
			} else if ("" + name === name) { // name must be a string
				if (item === null) {
					// If item is null, delete this entry
					delete thisStore[name];
				} else {
					thisStore[name] = compile ? (item = compile(name, item, parentTmpl, storeName, storeSettings)) : item;
				}
			}
			if (item) {
				item._is = storeName;
			}
			if (onStore = $viewsSub.onStoreItem) {
				// e.g. JsViews integration
				onStore(thisStore, name, item, compile);
			}
			return item;
		}

		var storeNames = storeName + "s";

		$views[storeNames] = theStore;
		jsvStores[storeName] = storeSettings;
	}

	//==============
	// renderContent
	//==============

	function renderContent(data, context, parentView, key, isLayout, onRender) {
		// Render template against data as a tree of subviews (nested rendered template instances), or as a string (top-level template).
		// If the data is the parent view, treat as layout template, re-render with the same data context.
		var i, l, dataItem, newView, childView, itemResult, parentContext, props, swapContent, tagCtx, isTag, outerOnRender,
		self = this,
			tmpl = self,
			allowDataLink = self.attr === undefined || self.attr === "html",
			result = "";

		if (key === TRUE) {
			swapContent = TRUE;
			key = 0;
		}
		if (isTag = self._is === "tag") {
			tagCtx = self.tagCtx;
			// This is a call from renderTag
			tmpl = tagCtx.isElse ? self._elses[tagCtx.isElse - 1] : self.tmpl;
			context = extendCtx(context, self.ctx);
			props = tagCtx.props;
			if (props.link === FALSE) {
				// link=false setting on block tag
				// We will override inherited value of link by the explicit setting link=false taken from props
				// The child views of an unlinked view are also unlinked. So setting child back to true will not have any effect.
				context = context || {};
				context.link = FALSE;
			}
			parentView = parentView || tagCtx.view;
		} else {
			tmpl = self.jquery && (self[0] || error('Unknown template: "' + self.selector + '"')) // This is a call from $(selector).render
			||
			self;
		}
		if (tmpl) {
			if (parentView) {
				onRender = onRender || parentView._.onRender;
				parentContext = parentView.ctx;
				if (data === parentView) {
					// Inherit the data from the parent view.
					// This may be the contents of an {{if}} block
					// Set isLayout = true so we don't iterate the if block if the data is an array.
					data = parentView.data;
					isLayout = TRUE;
				}
			}

			// Set additional context on views created here, (as modified context inherited from the parent, and to be inherited by child views)
			// Note: If no jQuery, $extend does not support chained copies - so limit extend() to two parameters
			context = extendCtx(context, parentContext);

			if (!tmpl.fn) {
				tmpl = $templates[tmpl] || $templates(tmpl);
			}

			if (tmpl) {
				onRender = (context && context.link) !== FALSE && allowDataLink && onRender;
				// If link===false, do not call onRender, so no data-linking marker nodes
				outerOnRender = onRender;
				if (onRender === TRUE) {
					// Used by view.refresh(). Don't create a new wrapper view.
					outerOnRender = undefined;
					onRender = parentView._.onRender;
				}
				if ($.isArray(data) && !isLayout) {
					// Create a view for the array, whose child views correspond to each data item. (Note: if key and parentView are passed in
					// along with parent view, treat as insert -e.g. from view.addViews - so parentView is already the view item for array)
					newView = swapContent ? parentView : (key !== undefined && parentView) || View(context, "array", parentView, data, tmpl, key, onRender);
					for (i = 0, l = data.length; i < l; i++) {
						// Create a view for each data item.
						dataItem = data[i];
						childView = View(context, "item", newView, dataItem, tmpl, (key || 0) + i, onRender);
						itemResult = tmpl.fn(dataItem, childView, $views);
						result += newView._.onRender ? newView._.onRender(itemResult, childView) : itemResult;
					}
				} else {
					// Create a view for singleton data object. The type of the view will be the tag name, e.g. "if" or "myTag" except for
					// "item", "array" and "data" views. A "data" view is from programatic render(object) against a 'singleton'. 
					newView = swapContent ? parentView : View(context, self.tagName || "data", parentView, data, tmpl, key, onRender);
					result += tmpl.fn(data, newView, $views);
				}
				return outerOnRender ? outerOnRender(result, newView) : result;
			}
		}
		return "";
	}

	//===========================
	// Build and compile template
	//===========================

	// Generate a reusable function that will serve to render a template against data
	// (Compile AST then build template function)

	function error(message) {
		if ($viewsSettings.debugMode) {
			throw new $views.sub.Error(message);
		}
	}

	function syntaxError(message) {
		error("Syntax error\n" + message);
	}

	function tmplFn(markup, tmpl, isLinkExpression) {
		// Compile markup to AST (abtract syntax tree) then build the template function code from the AST nodes
		// Used for compiling templates, and also by JsViews to build functions for data link expressions


		//==== nested functions ====

		function pushprecedingContent(shift) {
			shift -= loc;
			if (shift) {
				content.push(markup.substr(loc, shift).replace(rNewLine, "\\n"));
			}
		}

		function blockTagCheck(tagName) {
			tagName && syntaxError('Unmatched or missing tag: "{{/' + tagName + '}}" in template:\n' + markup);
		}

		function parseTag(all, bind, tagName, converter, colon, html, comment, codeTag, params, slash, closeBlock, index) {

			//    bind         tag        converter colon html     comment            code      params            slash   closeBlock
			// /{(\^)?{(?:(?:(\w+(?=[\/\s}]))|(?:(\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\*)))\s*((?:[^}]|}(?!}))*?)(\/)?|(?:\/(\w+)))}}/g
			// Build abstract syntax tree (AST): [ tagName, converter, params, content, hash, bindings, contentMarkup ]
			if (html) {
				colon = ":";
				converter = "html";
			}
			var noError, current0,
			pathBindings = [],
				code = "",
				hash = "",
				passedCtx = "",
				// Block tag if not self-closing and not {{:}} or {{>}} (special case) and not a data-link expression
				block = !slash && !colon && !comment && !isLinkExpression;

			//==== nested helper function ====
			tagName = tagName || colon;
			pushprecedingContent(index);
			loc = index + all.length; // location marker - parsed up to here
			if (codeTag) {
				if (allowCode) {
					content.push(["*", "\n" + params.replace(rUnescapeQuotes, "$1") + "\n"]);
				}
			} else if (tagName) {
				if (tagName === "else") {
					if (rTestElseIf.test(params)) {
						syntaxError('for "{{else if expr}}" use "{{else expr}}"');
					}
					current[7] = markup.substring(current[7], index); // contentMarkup for block tag
					current = stack.pop();
					content = current[3];
					block = TRUE;
				}
				if (params) {
					params = params.replace(/\s*\n\s*/g, " "); // remove newlines from the params string, to avoid compiled code errors for unterminated strings
					code = parseParams(params, pathBindings)
						.replace(rBuildHash, function(all, isCtx, keyValue) {
						if (isCtx) {
							passedCtx += keyValue + ",";
						} else {
							hash += keyValue + ",";
						}
						return "";
					});
				}
				hash = hash.slice(0, -1);
				code = code.slice(0, -1);
				noError = hash && (hash.indexOf("noerror:true") + 1) && hash || "";

				newNode = [
				tagName,
				converter || "",
				code,
				block && [],
					"{" + (hash ? ("props:" + (noError ? "hsh" : "{" + hash + "}") + ",") : "") + 'params:"' + params + '"' + (passedCtx ? ",ctx:{" + passedCtx.slice(0, -1) + "}" : "") + "},",
				noError,
				//"{" + (hash ? ("props:{" + hash + "},") : "") + 'params:"' + params + '"' + (passedCtx ? ",ctx:{" + passedCtx.slice(0, -1) + "}" : "") + "},",
				bind && pathBindings || 0];
				content.push(newNode);
				if (block) {
					stack.push(current);
					current = newNode;
					current[7] = loc; // Store current location of open tag, to be able to add contentMarkup when we reach closing tag
				}
			} else if (closeBlock) {
				current0 = current[0];
				blockTagCheck(closeBlock !== current0 && current0 && current0 !== "else");
				current[7] = markup.substring(current[7], index); // contentMarkup for block tag
				current = stack.pop();
			}
			blockTagCheck(!current && closeBlock);
			content = current[3];
		}
		//==== /end of nested functions ====

		var newNode,
		allowCode = tmpl && tmpl.allowCode,
			astTop = [],
			loc = 0,
			stack = [],
			content = astTop,
			current = [, , , astTop];

		markup = markup.replace(rEscapeQuotes, "\\$1");

		//TODO	result = tmplFnsCache[markup];  // Only cache if template is not named and markup length < ..., and there are no bindings or subtemplates?? Consider standard optimization for data-link="a.b.c"
		//		if (result) {
		//			tmpl.fn = result;
		//		} else {

		//		result = markup;

		blockTagCheck(stack[0] && stack[0][3].pop()[0]);

		// Build the AST (abstract syntax tree) under astTop
		markup.replace(rTag, parseTag);

		pushprecedingContent(markup.length);

		if (loc = astTop[astTop.length - 1]) {
			blockTagCheck("" + loc !== loc && (+loc[7] === loc[7]) && loc[0]);
		}
		//			result = tmplFnsCache[markup] = buildCode(astTop, tmpl);
		//		}
		return buildCode(astTop, tmpl);
	}

	function buildCode(ast, tmpl) {
		// Build the template function code from the AST nodes, and set as property on the passed-in template object
		// Used for compiling templates, and also by JsViews to build functions for data link expressions
		var ret, i, node, hasTag, noError, hasEncoder, getsValue, hasConverter, hasViewPath, tagName, converter, params, hash, bindings, bindingPaths, nestedTmpls, nestedTmpl, allowCode, content, markup,
		code = "",
			tmplOptions = {},
			l = ast.length;

		if (tmpl) {
			if (allowCode = tmpl.allowCode) {
				tmplOptions.allowCode = TRUE;
			}
			if (tmpl.debug) {
				tmplOptions.debug = TRUE;
			}
			bindings = tmpl.bnds;
			nestedTmpls = tmpl.tmpls;
		}

		for (i = 0; i < l; i++) {
			// AST nodes: [ tagName, converter, params, content, hash, bindings, contentMarkup, link ]
			node = ast[i];

			// Add newline for each callout to t() c() etc. and each markup string
			ret = "";
			if ("" + node === node) {
				// a markup string to be inserted
				ret = 'ret+="' + node + '";';
			} else {
				// a compiled tag expression to be inserted
				tagName = node[0];
				if (tagName === "*") {
					// Code tag: {{* }}
					ret = "" + node[1];
				} else {
					converter = node[1];
					params = node[2];
					content = node[3];
					hash = node[4];
					noError = node[5];
					bindingPaths = node[6];
					markup = node[7];

					if (content) {
						// Create template object for nested template
						nestedTmpl = TmplObject(markup, tmplOptions);
						// Compile to AST and then to compiled function
						buildCode(content, nestedTmpl);
						nestedTmpls.push(nestedTmpl);
					}
					if (bindingPaths) {
						// Add leaf binding paths to template
						bindings.push(bindingPaths);
						bindingPaths = bindings.length;
					}
					hasViewPath = hasViewPath || hash.indexOf("view") > -1;
					// Add newline for each callout to t() c() etc.

					//TODO consider passing in ret to c() and t() so they can look at the previous ret, and detect whether this is a jsrender tag _within_an_HTML_element_tag_
					// and if so, don't insert marker nodes, add data-link attributes to the HTML element markup... No need for people to set link=false.

					if (noError) {
						// If the tag includes noerror=true, we will do a try catch around expressions for named or unnamed parameters
						// passed to the tag, and return the empty string for each expression if it throws during evaluation
						// TODO perhaps support noerror=xxx and return the value of the expression xxx||'', rather than always the empty string
						noError = "try{prm=" + params + ";hsh={" + noError + '};}catch(e){prm="";hsh={};}\n';
						params = "prm";
					}

					ret += noError + "ret+=" + (tagName === ":" ? (converter === "html" && !bindingPaths ? (hasEncoder = TRUE, "h(" + params + ");") : converter || bindingPaths // Call _cnvt if there is a converter, or binding: {{cnvt: ... }}, {^{: ... }} or {^{cnvt: ... }}
					?
					(hasConverter = TRUE, 'c("' + converter + '",view,this,' + hash + bindingPaths + "," + params + ");") : (getsValue = TRUE, "(v=" + params + ')!=u?v:"";')) : (hasTag = TRUE, 't("' + tagName + '",view,this,' + (content ? nestedTmpls.length : '""') // For block tags, pass in the key (nestedTmpls.length) to the nested content template
					+
						"," + hash + bindingPaths + (params ? "," : "") + params) + ");");
				}
			}
			code += "\n" + ret;
		}

		// Include only the var references that are needed in the code
		code = fnDeclStr + (noError ? "prm,hsh," : "") + (getsValue ? "v," : "") + (hasTag ? "t=j._tag," : "") + (hasConverter ? "c=j._cnvt," : "") + (hasEncoder ? "h=j.converters.html," : "") + 'ret="";\n' + ($viewsSettings.tryCatch ? "try{\n" : "") + (tmplOptions.debug ? "debugger;" : "") + code + "\nreturn ret;\n" + ($viewsSettings.tryCatch ? "\n}catch(e){return j._err(e);}" : "");

		try {
			code = new Function("data, view, j, u", code);
		} catch (e) {
			syntaxError("Compiled template code:\n\n" + code, e);
		}

		if (tmpl) {
			tmpl.fn = code;
		}
		return code;
	}

	function parseParams(params, bindings) {

		function parseTokens(all, lftPrn0, lftPrn, path, operator, err, eq, path2, prn, comma, lftPrn2, apos, quot, rtPrn, prn2, space) {
			// rParams = /(\()(?=|\s*\()|(?:([([])\s*)?(?:([#~]?[\w$^.]+)?\s*((\+\+|--)|\+|-|&&|\|\||===|!==|==|!=|<=|>=|[<>%*!:?\/]|(=))\s*|([#~]?[\w$^.]+)([([])?)|(,\s*)|(\(?)\\?(?:(')|("))|(?:\s*([)\]])([([]?))|(\s+)
			//          lftPrn0-flwed by (- lftPrn               path    operator err                                                eq         path2       prn    comma   lftPrn3   apos quot        rtPrn   prn2   space
			// (left paren? followed by (path? followed by operator) or (path followed by paren?)) or comma or apos or quot or right paren or space
			operator = operator || "";
			lftPrn = lftPrn || lftPrn0 || lftPrn2;
			path = path || path2;
			prn = prn || prn2 || "";

			function parsePath(all, object, helper, view, viewProperty, pathTokens, leafToken) {
				// rPath = /^(?:null|true|false|\d[\d.]*|([\w$]+|~([\w$]+)|#(view|([\w$]+))?)([\w$.^]*?)(?:[.[^]([\w$]+)\]?)?)$/g,
				//                                        object   helper    view  viewProperty pathTokens       leafToken

				if (object) {
					bindings.push(path);
					if (object !== ".") {
						var leaf,
						ret = (helper ? 'view._hlp("' + helper + '")' : view ? "view" : "data") + (leafToken ? (viewProperty ? "." + viewProperty : helper ? "" : (view ? "" : "." + object)) + (pathTokens || "") : (leafToken = helper ? "" : view ? viewProperty || "" : object, ""));

						leaf = (leafToken ? "." + leafToken : "");
						ret = ret + leaf;
						ret = ret.slice(0, 9) === "view.data" ? ret.slice(5) // convert #view.data... to data...
						:
						ret;
						return ret;
					}
				}
				return all;
			}

			if (err) {
				syntaxError(params);
			} else {
				return (aposed
				// within single-quoted string
				?
				(aposed = !apos, (aposed ? all : '"')) : quoted
				// within double-quoted string
				?
				(quoted = !quot, (quoted ? all : '"')) : (
				(lftPrn ? (parenDepth++, lftPrn) : "") + (space ? (parenDepth ? "" : named ? (named = FALSE, "\b") : ",") : eq
				// named param
				// Insert backspace \b (\x08) as separator for named params, used subsequently by rBuildHash
				?
				(parenDepth && syntaxError(params), named = TRUE, '\b' + path + ':') : path
				// path
				?
				(path.split("^").join(".").replace(rPath, parsePath) + (prn ? (fnCall[++parenDepth] = TRUE, prn) : operator)) : operator ? operator : rtPrn
				// function
				?
				((fnCall[parenDepth--] = FALSE, rtPrn) + (prn ? (fnCall[++parenDepth] = TRUE, prn) : "")) : comma ? (fnCall[parenDepth] || syntaxError(params), ",") // We don't allow top-level literal arrays or objects
				:
				lftPrn0 ? "" : (aposed = apos, quoted = quot, '"'))));
			}
		}
		var named,
		fnCall = {},
		parenDepth = 0,
			quoted = FALSE, // boolean for string content in double quotes
			aposed = FALSE; // or in single quotes

		bindings.expr = params.replace(rUnescapeQuotes, "$1");
		return (params + " ").replace(rParams, parseTokens);
	}

	//==========
	// Utilities
	//==========

	// HTML encoding helper

	function replacerForHtml(ch) {
		// Original code from Mike Samuel <msamuel@google.com>
		return escapeMapForHtml[ch]
		// Intentional assignment that caches the result of encoding ch.
		||
		(escapeMapForHtml[ch] = "&#" + ch.charCodeAt(0) + ";");
	}

	// Merge objects, in particular contexts which inherit from parent contexts

	function extendCtx(context, parentContext) {
		// Return copy of parentContext, unless context is defined and is different, in which case return a new merged context
		// If neither context nor parentContext are undefined, return undefined
		return context && context !== parentContext ? (parentContext ? $extend($extend({}, parentContext), context) : context) : parentContext && $extend({}, parentContext);
	}

	//========================== Initialize ==========================

	for (jsvStoreName in jsvStores) {
		registerStore(jsvStoreName, jsvStores[jsvStoreName]);
	}

	var $templates = $views.templates,
		$converters = $views.converters,
		$helpers = $views.helpers,
		$tags = $views.tags,
		$viewsSub = $views.sub,
		$viewsSettings = $views.settings;

	if (jQuery) {
		////////////////////////////////////////////////////////////////////////////////////////////////
		// jQuery is loaded, so make $ the jQuery object
		$ = jQuery;
		$.render = $render;
		$.views = $views;
		$.templates = $templates = $views.templates;
		$.fn.render = renderContent;

	} else {
		////////////////////////////////////////////////////////////////////////////////////////////////
		// jQuery is not loaded.

		$ = global.jsviews = $views;

		$.isArray = Array && Array.isArray || function(obj) {
			return Object.prototype.toString.call(obj) === "[object Array]";
		};
	}

	//========================== Register tags ==========================

	$tags({
		"if": function(val) {
			var self = this;
			// If not done and val is truey, set done=true on tag instance and render content. Otherwise return ""
			// On else will call this function again on the same tag instance.
			return (self._done || arguments.length && !val) ? "" : (self._done = true,
			// Test is satisfied, so render content on current context. Rather than return undefined
			// (which will render the tmpl/content on the current context but will iterate if it is an array),
			// we pass in the view. This ensures treating as a layout template - with no iteration
			self.renderContent(self.tagCtx.view));
		},
		// Temporary fix for binding to {{if}}
		//	"if": {
		//		render: function(val) {
		//			var self = this;
		//			return (self._done || arguments.length && !val) ? "" : (self._done = true, self.renderContent(self.tagCtx.view));
		//		}
		//	},
		"else": function() {}, // Does nothing but ensures {{else}} tags are recognized as valid
		"for": function() {
			var i, arg, undef,
			self = this,
				tagCtx = self.tagCtx,
				result = "",
				args = arguments,
				done = 0,
				l = args.length;

			if (!l) {
				return tagCtx.done ? "" : (tagCtx.done = TRUE,
				// Test is satisfied, so render content on current context. Rather than return undefined
				// (which will render the tmpl/content on the current context but will iterate if it is an array),
				// we pass in the view. This ensures treating as a layout template - with no iteration
				self.renderContent(tagCtx.view));
			}
			for (i = 0; i < l; i++) {
				arg = args[i];
				undef = arg === undefined;
				if (!undef) {
					done += $.isArray(arg) ? arg.length : 1;
					result += self.renderContent(arg);
				} else {
					return "";
				}
			}
			tagCtx.done = done;
			return result;
		},
		"*": function(value) {
			return value;
		}
	});

	//========================== Register global helpers ==========================

	//	$helpers({ // Global helper functions
	//		// TODO add any useful built-in helper functions
	//	});

	//========================== Register converters ==========================

	$converters({
		html: function(text) {
			// HTML encoding helper: Replace < > & and ' and " by corresponding entities.
			return text != undefined ? String(text).replace(htmlEncodeChars, replacerForHtml) : "";
		},
		attr: function(text) {
			// Attribute encoding helper: Replace < & ' and " by corresponding entities.
			return text != undefined ? String(text).replace(attrEncodeChars, replacerForHtml) : "";
		},
		url: function(text) {
			// TODO - support chaining {{attr|url:....}} to protect against injection attacks from url parameters containing " or '.
			// URL encoding helper.
			return text != undefined ? encodeURI(String(text)) : "";
		}
	});

	//========================== Define default delimiters ==========================
	$viewsDelimiters();

})(this, this.jQuery);
/**
 * 扫描dom树，抽出文字和图片以及所需样式，写成html，用于局部区域截屏
 * Created by zhoukang on 2015/10/23.
 */
(function(domTrans){

    (function(exports){

        /**
         *   把current dom的所有子节点放入数组arr中，包括任意类型的节点
         */
        function _pushAllChildren(current , arr){
            if(!current) return arr;

            var next = current.firstChild;
            while(next){
                arr.push(next);
                current = next;
                next = current.nextSibling;
            }
            return arr;
        }

        /**
         * 宽度优先遍历树
         * @param rootNode  要遍历树的根节点
         * @param filter    对dom的过滤函数，返回true(visitor访问该dom，不再扫描其子节点)/false(接着扫描其所有子节点)
         * @param visitor   对dom的访问函数
         * */
        exports.walkDomTree = function (rootNode, filter, visitor){
            var obj = {}, elementFlag, eleStyle, _toWalkArr = [rootNode];
            while(_toWalkArr.length >0){
                var to_walk_dom = _toWalkArr.shift();
                if(!to_walk_dom) continue;

                elementFlag = to_walk_dom.nodeType === Node.ELEMENT_NODE;
                eleStyle = elementFlag ? getComputedStyle(to_walk_dom) : obj;
                // display : none的element， 不访问该node以及子节点
                if(eleStyle.display !== "none") {
                    if(filter(to_walk_dom, eleStyle)){  // 是要访问的节点
                        visitor && visitor(to_walk_dom);  // 访问了，下级节点就不管了
                    }
                    else if(elementFlag){  // 是中间父节点
                        _pushAllChildren(to_walk_dom, _toWalkArr);  // 所有子节点入队列
                    }
                }
            }
        }

    })(domTrans);

    (function(exports){

        var inputTags = ["INPUT","TEXTAREA","SELECT"];
        var canvasTag = "CANVAS";
        var TextNodeType = Node.TEXT_NODE;  // 3

        /**
         * 筛选出感兴趣的dom节点，。。。然后访问。。。结果存入arr
         * @param arr
         * @param dom
         * @param eleStyle
         * @returns {boolean}
         * @private
         */
        function _filter(arr, dom, eleStyle){
            var tagName = dom.tagName, flag = true;
            if(tagName && _checkBackground(eleStyle)){
                arr.push(_toBackgroundNode(dom, eleStyle)); // backround  和 text什么的分离作为两个节点 ！！！ 所以bg node必须先插入
            }
            if(inputTags.indexOf(tagName) !== -1){ // form node
                var value = _getFormEleTextValue(dom);
                if(_isVisibleStr(value))
                    arr.push(_toTextNode(dom, value, eleStyle));
            }else if(canvasTag === tagName){ // canvas node
                arr.push(_toCanvasNode(dom));
            }else if("IMG" === tagName){
                arr.push(_toImgNode(dom));
            }else if(dom.nodeType === TextNodeType){ // text node
                if(_isVisibleStr(dom.nodeValue))
                    arr.push(_toTextNode(dom.parentNode, dom.nodeValue, getComputedStyle(dom.parentNode)));
            }else {  // 不感兴趣
                flag = false;
            }
            return flag;
        }

        // 检测background是否有值
        function _checkBackground(eleStyle){
            var color = eleStyle.backgroundColor.replace(/\s+/g,"");
            return eleStyle.backgroundImage.indexOf("url(") !== -1
                || ( color.indexOf("transparent") === -1 && color.indexOf("255,255,255") === -1 && color.indexOf("0,0,0,0") === -1);
        }

        // 获取表单元素的文本值
        function _getFormEleTextValue(formEle){
            var ret = null;
            switch (formEle.tagName){
                case "INPUT":
                    switch(formEle.type){
                        case "checkbox":
                        case "radio":
                            ret = formEle.checked + "";
                            break;
                        default:
                            ret = formEle.value;
                    }
                    break;
                case "SELECT":
                    ret = formEle.options[formEle.selectedIndex].text;
                    break;
                case "TEXTAREA":
                    ret = formEle.value;
                    break;
            }
            return ret;
        }

        /**
         * str是否包含 可见字符串
         * @param str
         * @returns {boolean}
         */
        function _isVisibleStr(str){
            return !!str && !/^\s*$/.test(str)
        }


        /**
         * 从TextNode中抽出描述性对象
         * @param dom
         * @param text
         * @param eleStyle
         */
        function _toTextNode(dom, text, eleStyle){
            var rect = dom.getBoundingClientRect();
            return _addSize({
                content : text
                ,type : 'text'
                ,"color": eleStyle.color
                //,"fontFamily": eleStyle.fontFamily
                ,"fontSize": eleStyle.fontSize
                ,"input" : dom.tagName === "INPUT" || dom.tagName === "SELECT"
                ,"textAlign" : eleStyle.textAlign
                ,"lineHeight" : eleStyle.lineHeight
                ,"whiteSpace" : eleStyle.whiteSpace
            }, rect);
        }
        /**
         * 从canva中抽出描述性对象
         */
        function _toCanvasNode(dom){
            var rect = dom.getBoundingClientRect();
            return _addSize({
                content : dom.toDataURL()
                ,type : 'img'
            },rect);
        }

        /**
         * 抽取dom的 background style 单独作为一个DIV存在
         * @param dom
         * @param eleStyle
         * @returns {*}
         */
        function _toBackgroundNode(dom, eleStyle){
            var rect = dom.getBoundingClientRect(), e = eleStyle;
            return _addSize({
                type : 'bg'
                ,"background" :  e.backgroundColor + " " +e.backgroundImage + " " + e.backgroundRepeat + " "
                                    + e.backgroundAttachment + " " + e.backgroundPosition + " / "+ e.backgroundSize + " "
                                    + e.backgroundOrigin + " " + e.backgroundClip
            }, rect);
        }

        /**
         * 从img标签中，生成。。。
         * @param dom
         * @returns {{top: string, left: string, height: string, width: string, content: *, type: string}}
         * @private
         */
        function _toImgNode(dom){
            var rect = dom.getBoundingClientRect();
            return _addSize({
                content : dom.src
                ,type : 'img'
            },rect);
        }

        function _addSize(obj, rect){
            obj.top = rect.top;
            obj.left = rect.left;
            obj.height = rect.height;
            obj.width = rect.width;
            return obj;
        }

        /**
         * 将扫描回来的item转换为html
         * @param itemArr
         * @param height
         * @param width
         * @returns {string}
         * @private
         */
        function _toHtml(itemArr, width, height, deltaTop, deltaLeft, bottom){
            //var rectScope = itemArr.reduce(function(obj, item, index){
            //    if(item.top < obj.min) obj.min = item.top;
            //    if((item.top + item.height) > obj.max) obj.max = (item.top + item.height);
            //    return obj;
            //},{min:0,max:0});

            //var flag = top < 0;
            //top = -top;

            var html = '<!DOCTYPE html><html><head lang="en"><meta charset="UTF-8"><style>' +
                'body,html{height:{0};width:{1};font-family:"Microsoft Yahei","微软雅黑"; -ms-overflow-style: -ms-autohiding-scrollbar;} ' +
                'html::-webkit-scrollbar{ display: none;} div{word-break: break-all;}' +
                ' .abs{position: absolute;} *{margin: 0;padding: 0;}</style></head><body>{2}</body></html>';

            var s = "",
                divTmpl = '<div class="abs" style=\'top: {top}px; left: {left}px; height: {height}px; width: {width}px;color:{color}; ' +
                    'text-align:{textAlign};font-size:{fontSize};white-space:{whiteSpace};{?line-height:<lineHeight>;}\'>{content}</div>',  // font-family:{fontFamily};
                bgTmpl = '<div class="abs" style=\'top: {top}px; left: {left}px; height: {height}px; width: {width}px; background:{background};\'></div>',
                imgTmpl = '<img class="abs" style=\'top: {top}px; left: {left}px; height: {height}px; width: {width}px;\' src="{content}"/>';
            itemArr.forEach(function(item){
                //if(flag)
                item.top = item.top - deltaTop;  // 平移，去掉scrollTop和root top的影响
                item.left = item.left - deltaLeft; // 平移，去掉scrollLeft和root left的影响
                if(item.type === 'text'){
                    if(item.input) item.lineHeight = item.height + "px";
                    s += _fillTmpl(divTmpl, item);
                }
                else if(item.type === 'img')
                    s += _fillTmpl(imgTmpl, item);
                else if(item.type === 'bg')
                    s += _fillTmpl(bgTmpl, item);
            });

            return _fillNumTmpl(html , height + "px", width + "px", s);
        }

        /**
         * 字符串填充函数
         * @param tmpl   "xxx {proertyA}  yyyy {propertyB}"
         * @param dataObj
         * @returns {string}
         * @private
         */
        function _fillTmpl(tmpl, dataObj){
            return tmpl.replace(/{([^\}]+)\}/g , function($0, $1){
                var value ;
                // 如果是条件显示
                if($1.charAt(0) === "?"){
                    $1 = $1.substr(1);  // 去掉问号
                    var match = /<([^>]+)>/.exec($1);  // 挖出条件  [$0,$1]
                    if(match.length != 2) return "";  // error
                    value = dataObj[match[1]];
                    return value == null ? "" : $1.replace(match[0], value);
                }
                else{  // 正常填充
                    value = dataObj[$1];
                    return value == null ? "" : value;
                }
            });
        }

        //  ("xxx {0}  yyyy {1}" , "first params", "22" )
        function _fillNumTmpl(tmpl){
            var arr = Array.prototype.slice.call(arguments);
            arr.shift();
            return tmpl.replace(/{(\d+)\}/g , function($0, $1){
                return arr[$1] || "";
            });
        }

        exports.transFilter = _filter;
        exports.transToHtml = _toHtml;
        exports.transFillTmpl = _fillTmpl;

    })(domTrans);

    /**
     * 抽出指定root dom下的內容，拼裝成html
     * @param {Element}dom
     * @returns {{
     * height: number,  新的html完全展开的height
     * width: number,
     * html: string
     * } || null}
     */
    domTrans.extractHtml = function(dom){
        if(!dom || dom.nodeType !== Node.ELEMENT_NODE)
            return console.warn("invalid dom to extract");

        var ret = [];
        this.walkDomTree(dom, this.transFilter.bind(null, ret));
        var rect = dom.getBoundingClientRect();
        return {
            height : dom.scrollHeight,
            width : dom.scrollWidth,
            html : this.transToHtml(ret, dom.scrollWidth, dom.scrollHeight, rect.top - dom.scrollTop, rect.left - dom.scrollLeft, rect.bottom)
        };
    };

    /**
     * dom截屏
     * @param {string} rootId  root dom id
     * @param {function} cb  截屏成功回调
     * @returns {*}
     */
    domTrans.htmlToJpg = function(rootId, cb){
        var ret = this.extractHtml(document.getElementById(rootId));
        //lobby.logDebug({html_height : ret.height + 5 , html_width : ret.width + 5});
        return PJF.communication.HtmlToJpg(ret.html, ret.width + 5, ret.height + 5, cb);
    };

})(PJF.html.domTrans = {});
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * @Author zhouyuhang
 * Create on: 2012-10-16
 * Last Updated: 
 * 说明:定义component基类,在构造函数中将dom id转为jquery识别的#id方式，同时生成component id
 */
PJF.namespace('PJF.ui');
PJF.ui.component=function(conf){
	if(this.validateParam(conf)){
		
		var visible = true;
		if(typeof(conf.accessControl) != 'undefined'){
			visible = eval(conf.accessControl);
		}
		if(!visible){
			$('#' + conf.dom).hide();
			return;
		}
		
		this.params = conf;
		this.id = conf.id;
		if(typeof conf=="string"){
			this.com = $('#'+conf);
		}
		else if(typeof conf.dom=='string'){
			this.com = $('#'+conf.dom);	
		}
		
		if(!this.id){
			this.id = this.generateId();
		}
		//将组件id设置为容器属性
		if(this.com){
			this.com.attr('componentId',this.id);
			this.com.attr('componentType',this.getClassName())
		}
		//此方法被子类继承
		var beforeInitTime  = new Date().getTime();
		this.init(conf);
		//console.log('组件'+this.getClassName()+'花费时间 : ' + (new Date().getTime() - beforeInitTime));
		//注册
		PJF.ui.componentMgr.reg(this);
	}
}
//为component添加默认的方法
PJF.apply(PJF.ui.component.prototype,{
	//init方法需由子类实现
	init:function(){},
	//得到当前组件的id
	getId:function(){
		return this.id;
	},
	//验证参数信息
	validateParam:function(){
		return true;
	},
	//是否disable状态·
	isDisabled:function(){
		return false;
	},
	//是否只读状态
	isReadOnly:function(){
		return false;
	},
	//是否显示状态
	isDisplay:function(){
		return true;
	},
	//显示组件
	show:function(){
		this.com.show();
	},
	//隐藏组件
	hide:function(){
	    this.com.hide();
	},
	//设置keyIndex和keyScope属性
	setKey:function(conf){
		if(conf.keyIndex&&conf.keyScope){
			this.params.keyIndex = conf.keyIndex;
			this.params.keyScope = conf.keyScope;
			//注册
			PJF.ui.componentMgr.reg(this);	
		}else{
			alert('请同时传入keyScope和keyIndex!');
		}
	},
	//调用jquery的remove并且从componentMgr里面去除
	destroy:function(){
		this.com.remove();
		PJF.ui.componentMgr.remove(this.id);
		this.com = null;
		this.params = null;
		this.id = null;
	},
	//生成唯一的id
	generateId:function(){
		var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
		var chars = CHARS, uuid = new Array(36), rnd=0, r;
	    for (var i = 0; i < 36; i++) {
	      if (i==8 || i==13 ||  i==18 || i==23) {
	        uuid[i] = '-';
	      } else if (i==14) {
	        uuid[i] = '4';
	      } else {
	        if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;
	        r = rnd & 0xf;
	        rnd = rnd >> 4;
	        uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
	      }
	    }
	    
	    return uuid.join('').replace(/-/g,"");
	},
	//默认是focus在dom上面
	focus:function(){
		this.com.focus();
	},
	getClassName:function(){
		return 'PJF.ui.component'
	},
	//是否能调用focus
	focusable:function(){
		return false;
	},
	//以下方法将不推荐使用，将会被废弃
	//用于控制组件的显隐,会被show/hide方法取代
	display:function(flag){
	    if(!flag){
	        this.com.hide();
	    }else{
	        this.com.show();
	    }
	},
	/*这个方法是针对全键盘模式中,调用displayArea,disableArea,readOnlyArea
	针对被影响的pjf组件所设置的标志位,为对象，里面共三个标志，分别代表isDisplay,isDisable,isReadonly
	均为true
	*/
	setAreaKeyBoardFlag:function(flagObj){
		this.areaKeyBoardFlag = this.areaKeyBoardFlag || {isDisplay:true,isDisable:false,isReadonly:false}; //在这里初始化而不是init方法中是为了代码整洁
		PJF.apply(this.areaKeyBoardFlag, flagObj);
	},
	/*判断是否受displayArea,disableArea,readOnlyArea三个影响，
	  返回true代表可以focus
	*/
	isAreaKeyBoardValid:function(){
		this.areaKeyBoardFlag = this.areaKeyBoardFlag || {isDisplay:true,isDisable:false,isReadonly:false}; //在这里初始化而不是init方法中是为了代码整洁
		return this.areaKeyBoardFlag.isDisplay && !this.areaKeyBoardFlag.isDisable && !this.areaKeyBoardFlag.isReadonly
	}
})


/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * @Author zhouyuhang
 * Create on: 2012-10-16
 * Last Updated: 
 * 说明:component的管理器，所有component在创建之后都会在此管理器里注册
 */

PJF.ui.componentMgr=function(){
	//定义一个集合对象
	var map = new PJF.util.Collection();
	//采用闭包的方式，外界无法访问map
	return {
		//根据id得到对应的component
		get:function(id){
			return map.item(id);
		},
		//将component放入mgr
		reg:function(com){
			if(map.containsKey(com.getId())){
				console.log(resource.REG_EXIST_ID_INFO+com.getId()+resource.REG_EXIST_ID_INFO1);
			}
			map.add(com.getId(),com);
			if(!com.params.noDestroy)
				PJF.event.publish("onCompCreated",com);
		},
		//根据id删除对应的component,组件destroy时应调用此方法
		remove:function(id){
			map.removeKey(id);
		},
		//清空集合
		clear:function(){
			map.clear();
		},
		//得到所有组件的集合,格式为组件的id对应组件对象
		getAll:function(areaId){
			var result = {};
			map.eachKey(function(key,component){
				if(areaId){
					if($('#' + areaId).find('[componentid="' + key + '"]').length == 1){
						result[key] = component;
					}
				}
				else{
					result[key] = component;
				}				
			})
			return result;
		},
		//得到组件的集合，嵌套组件的不包含里面的组件
		getOuterAll: function(areaId){
			var result = {};
			function getOuterComponent(dom){
				if(dom.is('[componentid]')){
					var id = dom.attr('componentid');
					result[id] = map.item(id)
					return;
				}
				var data =  dom.children();
				for(var i = 0; i < data.length;i++){
					getOuterComponent($(data[i]))
				}
			}
			getOuterComponent($('#' + areaId));
			return result;
		}
	}
}();
/**
 * ajax通信组件 包括最基础的ajax组件和定制的cps请求组件
 * 
 * @author zhouyuhang
 * @date 2012.10.25 Last Updated:添加了针对同一trans_id的cps交易,延迟发送该交易 by shenye
 *       2014.3.17 Last
 *       Updated:为ajax和cpsJsonReq方法添加了traditional字段，涉及到jquery.param()方法的解析方式(具体可查阅jquery
 *       API) by shenye 2014.03.28 Last Updated:为ajax方法回调新增参数，知识管理项目组需求 by
 *       shenye 2014.5.29
 */

// 命名空间
PJF.namespace('PJF.communication');

/**
 * 普通ajax请求 可能有的参数校验
 * 
 * @param {[type]}
 *            conf [description]
 * @param {[type]}
 *            params [description]
 * @return {[type]} [description]
 */
PJF.communication.validateAjaxReqParams = function (conf, params) {
  return true;
};
/*******************************************************************************
 * 普通ajax请求 参数组装
 * 
 * @param {[type]}
 *            conf [配置参数]
 * @param {[type]}
 *            params [可能有的更多的传递参数 为JSON]
 */
PJF.communication.prepareAjaxReqParams = function (conf, params) {
  var myData = {};
  if (conf.data) {
    if (PJF.util.getType(conf.data) == 'string') {
      myData = eval('(' + conf.data + ')');
    } else {
      myData = conf.data;
    }
    myData.REQ_LANG = myData.REQ_LANG || CLIENT_LANGUAGE;
  }
  // 将p2client信息添加到请求中
  if (conf.safe) {
    if (PJF.util.getType(myData.jsonData) == 'string') {
      myData.jsonData = eval('(' + myData.jsonData + ')')
    } else {
      myData.jsonData = myData.jsonData || {};
    }
    PJF.communication.addParam(myData.jsonData);
    if (conf.noRoleTransaction || myData._fw_service_id == 'noRoleSimpleTransaction') {
      myData.jsonData.RL_IDS = [];
    }
    myData.jsonData = PJF.util.json2str2(myData.jsonData);
  }
  if (myData._fw_service_id == 'noRoleSimpleTransaction') {
    myData._fw_service_id = 'simpleTransaction'
  }
  conf.data = myData
  // 异步参数设置
  conf.async = (conf.async !== false);
};
/**
 * [ 发送交易前的回调]
 * 
 * @param {[type]}
 *            conf [配置参数]
 * @param {[type]}
 *            data [请求的数据]
 * @param {[type]}
 *            params [可能有的更多的传递参数 为JSON]
 * @return {[boolean]} [return false 将取消调用即将发送的请求]
 */
PJF.communication.beforeAjaxReq = function (conf, data, params) {
  return true;
};
/**
 * [ 发送交易完毕的回调]
 * 
 * @param {[type]}
 *            conf [配置参数]
 * @param {[type]}
 *            data [请求的数据]
 * @param {[type]}
 *            params [可能有的更多的传递参数 为JSON]
 * @return {[boolean]} [return false 将取消调用即将发送的请求]
 */
PJF.communication.afterAjaxReq = function (conf, data, params) {
  return true;
};

/**
 * [ 具体发送交易]
 * 
 * @param {[type]}
 *            conf [配置参数]
 * @param {[type]}
 *            data [请求的数据]
 * @param {[type]}
 *            params [可能有的更多的传递参数 为JSON]
 * @return {[type]} [description]
 */
PJF.communication.sendAjaxReq = function (conf, data, params) {
  // promise
  $.ajax({
    // 请求地址
    url: conf.url,
    // 默认为json格式
    dataType: conf.dataType || PJF.constants.AJAX_DATA_TYPE,
    // 传递的数据
    data: data,
    // 同步模式：默认为异步
    async: conf.async,
    // jquery的param()方法，为true则采用jquery1.4之前版本的解析方式
    traditional: conf.traditional,
    // 默认为post
    type: conf.type || PJF.constants.AJAX_METHOD,
    //如果有header属性可以添加
    headers: conf.headers || {},
    // 默认为10秒
    timeout: conf.timeOut || PJF.constants.AJAX_TIMEOUT,
    success: function (data, ts, jq) {
      conf.success(data, ts, jq);
    },
    // 通信失败回调函数
    error: function (jq, ts, error) {
      console.log(JSON.stringify(jq.statusCode()));
      if (conf.failure) {
        conf.failure(jq, ts, error);
      } else {
        if (ts == 'timeout') {
          // 具体处理措施由专门的函数处理
          PJF.configuration.ajaxTimeOut();
        } else if (ts == 'parsererror') {
          // 具体处理措施由专门的函数处理
          PJF.configuration.ajaxParseError();
        } else {
          // 具体处理措施由专门的函数处理
          PJF.configuration.ajaxFailure();
        }

      }
    },
    complete: function () {
      conf.complete && conf.complete();
      // ajax请求完毕回调
      PJF.communication.afterAjaxReq(conf, data, params);
    }
  });

};
/*******************************************************************************
 * 基础Ajax通信组件，最基本的ajax请求
 * <p>
 * 
 * @param conf
 *            配置，具体参数如下:
 *            <ul>
 *            <li> url : ajax请求url地址,必填
 *            <li> safe : 是是否将p2client端的信息(操作员等信息)添加到请求中，默认false
 *            <li> data : 发送的数据
 *            <li> success : ajax请求成功后返回的处理回调函数,必填
 *            <li> failure : ajax请求失败后的回调函数，如果不设置则会调用PJF默认的处理函数
 *            <li> type : 请求的方法，默认为post
 *            <li> timeOut : 请求的超时时间,默认为30秒
 *            <li> dataType : ajax请求的数据格式，默认为json
 *            <li> async : 默认为true(异步)
 *            <li> header : request header里面加参数
 *            <li> traditional : 数据序列化方式，默认false
 *            </ul>
 */
PJF.communication.ajax = function (conf) {

  // 可能有的更多的传递参数 用于在各函数间传递参数
  var params = {};

  // 校验参数是否满足 参数校验不合法 返回
  if (PJF.communication.validateAjaxReqParams(conf, params) === false) {
    return;
  }
  // 准备请求参数
  var data = PJF.communication.prepareAjaxReqParams(conf, params) || conf.data;

  // 发送请求前回调
  if (PJF.communication.beforeAjaxReq(conf, data, params) === false) {
    return;
  }
  // 发送请求
  var reqResult = PJF.communication.sendAjaxReq(conf, data, params);

  // 返回可能的请求结果
  return reqResult;
};

/*******************************************************************************
 * 校验参数是否满足
 * 
 * @param {[type]}
 *            conf [配置参数]
 * @param {[type]}
 *            params [可能有的更多的传递参数 为JSON]*
 */
PJF.communication.validateCPSJsonReqParams = function (conf, params) {
  if ((!conf.fwServiceId) || (!conf.fwTranId) || (!conf.success)) {
    alert('PJF.communication.cpsJsonReq参数不正确!当前参数为:fwServiceId=' + conf.fwServiceId + ',fwTranId=' + conf.fwTranId + ',success=' + conf.success);
    return false;
  }
  //记录最近一次的外呼，是因为要在errormessagebox中外联知识库，然而错误的时候返回数据并没有，所以出此下策
  PJF.constants.lastTransId = conf.fwTranId;
};
/*******************************************************************************
 * @param {[type]}
 *            conf [配置参数]
 * @param {[type]}
 *            params [可能有的更多的传递参数 为JSON]
 */
PJF.communication.prepareCPSJsonReqParams = function (conf, params) {
  /*
   * 所有涉及到授权资源的全局变量，统一初始化
   */
  if (!conf.pjfReSend) {
    PJF.communication.cleanResource();
  } else {
    delete conf.pjfReSend;
  }
  // 当集中授权被拒绝后，第二次发起交易附带上次被拒绝的相关信息
  if (PJF.communication.ra)
    conf.jsonData = PJF.communication.ra.copyRefuseInfo(conf.jsonData);
  // 拷贝配置,用于资源请求重发交易
  params.copyOfConf = PJF.apply({}, conf);
  // 将p2client端的信息加入请求中
  var data = PJF.communication.setEcpJsonParam(conf.fwServiceId, conf.fwTranId, conf.jsonData, true, conf.encrypt, conf.sqlId, conf.fmtPrintId, conf);
  // 异步模式 默认为true 除非显示设置为false 不修改参数原则
  // conf.async = (conf.async !== false);

  return data;
};
/**
 * [ 发送交易前的回调]
 * 
 * @param {[type]}
 *            conf [配置参数]
 * @param {[type]}
 *            data [请求的数据]
 * @param {[type]}
 *            params [可能有的更多的传递参数 为JSON]
 * @return {[boolean]} [return false 将取消调用即将发送的请求]
 */
PJF.communication.beforeCPSJsonReq = function (conf, data, params) {


  function maskFn() {
    // 如果需要遮罩层
    if (conf.mask) {
      params.ajaxMask = new PJF.ui.loading({
        dom: conf.mask,
        text: conf.loadingText
      });
    } else if (conf.maskAll) {
      params.ajaxMask = new PJF.ui.loading({
        maskBody: true,
        text: conf.loadingText
      });
    }
  }
  var elecSignParam = conf.elecSignParam || {};
  //这种情况下，必须互动终端或者电子签名开关打开一个，涉及交易风险
  if (elecSignParam.ootcSign) {
    if (!PJF.communication.elecSign.getTelclrFlag() && !PJF.communication.elecSign.canElecSign()) {
      new PJF.ui.messageBox({
        style: "warning",
        title: '警告',
        content: '系统无法执行交易，请开通互动确认或电子签名开关'
      })
      return false;
    }
  }
  //fmtPrintId代表需要委托PJF做协议确认或签名
  if (elecSignParam.fmtPrintId && PJF.communication.elecSign && !elecSignParam.noNeedProtocolSign) {
    params.copyOfConf.elecSignParam.noNeedProtocolSign = true; //这是因为万一有授权拦截呢，不能重复签协议吧

    PJF.communication.elecSign.protocolSign({
      fmtPrintId: elecSignParam.fmtPrintId,
      jsonData: conf.jsonData,
      agentName: elecSignParam.agentName,
      customerName: elecSignParam.customerName, //用户姓名
      onetime: elecSignParam.onetime, //是否不签字先确认
      callback: function (result) {
        if (result.status == 0) {
          //赋值两次是考虑到授权重发, notconfirm和uploadProtocolList都有可能无值，不过没关系
          params.copyOfConf.elecSignParam.notConfirm = conf.elecSignParam.notConfirm = result.notConfirm || result.notAttnProtocol;
          params.copyOfConf.elecSignParam.elecSignUploadData = conf.elecSignParam.elecSignUploadData = result.uploadProtocolList;
          maskFn();
          PJF.communication.sendCPSJsonReq(conf, data, params);
        } else {
          //失败了，这里什么都不做，因为取消交易了
        }
      }
    })

    return false; // send cps的动作在前面的回调里执行
  } else {
    maskFn();
    return true;
  }
};
/**
 * [ description]
 * 
 * @param {[type]}
 *            conf [配置参数]
 * @param {[type]}
 *            data [请求的数据]
 * @param {[type]}
 *            params [可能有的更多的传递参数 为JSON]
 * @return {[type]} [description]
 */
PJF.communication.sendCPSJsonReq = function (conf, data, params) {
  var beginTime = new Date().getTime()
  // 返回 jqXHR
  return $.ajax({
    url: conf.url || PJF.constants.DEFAULT_ACTION,
    dataType: conf.dataType || PJF.constants.AJAX_DATA_TYPE,
    data: data,
    // jquery的param()方法，为true则采用jquery1.4之前版本的解析方式
    traditional: conf.traditional,
    async: (conf.async !== false),
    type: PJF.constants.AJAX_METHOD,
    timeout: conf.timeOut || PJF.constants.AJAX_TIMEOUT,
    success: function (data) {
      if (params.ajaxMask) {
        params.ajaxMask.destroy();
        params.ajaxMask = undefined;
      }
      if (data) {
        if (typeof (data) == 'string') {
          data = eval('(' + data + ')');
        }
        if (data.BK_STATUS && (data.BK_STATUS == PJF.constants.BK_CODE_SUCCESS)) {
          if (data._COMMON && data._COMMON.P2S_EVT_TRACE_ID)
            PJF.loadResource.PJF_LOAD_RESOURCES_CONF.sysEvtTraceId = data._COMMON.P2S_EVT_TRACE_ID;
          if (data.BK_CODE && (data.BK_CODE.indexOf('IOK') == 0 || data.BK_CODE.indexOf('WOK') == '0' || data.BK_CODE == '999999999999') && PJF.constants.TIP_WARNING) {
            if (PJF.constants.floatDiv)
              PJF.constants.floatDiv.setMessage(data.BK_DESC);
            else
              PJF.constants.floatDiv = new PJF.ui.floatDiv({
                msg: data.BK_DESC
              });
          }
          // 集中授权场景，将告知远程交易结果动作提前 modify@20180201
          if (conf.raTellSuccRst) { //判定是否是集中授权
            conf.raTellSuccRst(data);
          }
          //应用配置了电子签名的参数
          if (conf.elecSignParam) {
            PJF.communication.afterCpsSucc(conf, data, params);
            return;
          }
          conf.success(data, conf.authUserInfo);
        }
        // 资源访问需要授权，2.2期开始新授权采用_curr_val_key判断,2.1期老授权依然用_val_page判断
        else if (data._curr_val_key || data._val_page) {
          PJF.communication.handleAuthResource(data, params.copyOfConf);
          // 授权成功后的回调函数
          PJF.loadResource.PJF_LOAD_RESOURCES_CALLBACK = function (authUserInfo, authType) {
            PJF.communication.cpsJsonReqResend(authUserInfo, authType);
          }
        } else if (data._similar_trans_status) {
          PJF.communication.handleSimilarTrans(data, params.copyOfConf);
        } else {
          conf.failure(data);
        }
      } else {
        alert('提示：无返回数据！');
      }
    },
    error: function (jq, ts, error) {
      console.log(JSON.stringify(jq.statusCode()));
      if (params.ajaxMask) {
        params.ajaxMask.destroy();
        params.ajaxMask = undefined;
      }

      if (ts == 'timeout') {
        // 具体处理措施由专门的函数处理
        PJF.configuration.ajaxTimeOut(conf.failure);
      } else if (ts == 'parsererror') {
        // 具体处理措施由专门的函数处理
        PJF.configuration.ajaxParseError(conf.failure);
      } else {
        // 具体处理措施由专门的函数处理
        PJF.configuration.ajaxFailure(conf.failure);
      }
    },
    complete: function (jq, ts) {
      if (params.ajaxMask) {
        params.ajaxMask.destroy();
        params.ajaxMask = undefined;
      }
      if (conf.complete)
        conf.complete(jq, ts);
      console.log('cps ajax共耗时' + (new Date().getTime() - beginTime) + 'ms,参数为:' + conf.fwTranId + ',' + conf.fwServiceId + (conf.sqlId ? ',' + conf.sqlId : ''));
      // ajax请求完毕回调
      PJF.communication.afterCPSJsonReq(conf, data, params);
    }
  });
};
//cps 成功后, 因为有异步，所以在这里执行success回调吧
PJF.communication.afterCpsSucc = function (conf, data, params) {
  var sysTraceId;
  data._COMMON && (sysTraceId = data._COMMON.P2S_EVT_TRACE_ID || data._COMMON.SYS_EVT_TRACE_ID);
  if (!PJF.communication.elecSign.canElecSign()) {
    handleVoucherMapNoSign();
  }
  //有签字的协议，上传之，可能来自于应用传递
  else if (conf.elecSignParam.elecSignUploadData) {
    conf.elecSignParam.elecSignUploadData.sysEvtTraceId = sysTraceId;
    PJF.communication.elecSign.uploadSign({
      SIGN_DATA: conf.elecSignParam.elecSignUploadData,
      callback: function (uploadRes) {
        //最终确认不签名成功
        if (uploadRes.status == 2) {
          handleVoucherMapNoSign();
        }
        //上传签名成功
        else if (uploadRes.status == 0) {
          handleVoucherMap();
        }
        //上传的请求失败了
        else if (uploadRes.status == 1) {
          handleVoucherMap();
        }
      }
    })
  }
  //这个交易不玩签名了
  else if (conf.elecSignParam.notConfirm) {
    conf.elecSignParam.notConfirm.sysEvtTraceId = sysTraceId;
    PJF.communication.elecSign.uploadSign({
      CONFIRM_NO_SIGN_DATA: conf.elecSignParam.notConfirm,
      callback: function (uploadRes) {
        handleVoucherMapNoSign();
      }
    })
  }
  //没有要上传的协议
  else {
    handleVoucherMap();
  }


  function handleVoucherMapNoSign() {
    if (data.PRINT_VOUCHER_STRING_MAP && data.needSignFlag) {
      var printIds = [];
      for (var key in data.PRINT_VOUCHER_STRING_MAP) {
        data.PRINT_VOUCHER_STRING_MAP[key].paperPrintFlag = true;
        data.PRINT_VOUCHER_STRING_MAP[key].confirmNoSign = true;
        printIds.push(key)
      }
      if (printIds.length > 0) {
        PJF.communication.elecSign.uploadSign({
          CONFIRM_NO_SIGN_DATA: {
            sysEvtTraceId: sysTraceId,
            voucherIDS: printIds.join(",")
          }
        })
      }
    }
    conf.success(data, conf.authUserInfo); //cps成功回调
  }

  function handleVoucherMap() {
    //有凭证map, p2s告知需要签字
    if (data.PRINT_VOUCHER_STRING_MAP && data.needSignFlag) {
      //柜外清签名的模式,不用让用户签名了，直接上传
      if (conf.elecSignParam.ootcSignUploadData) {
        conf.elecSignParam.ootcSignUploadData.sysEvtTraceId = sysTraceId;
        var voucherIDS = [];
        var printIDS = [];
        for (var key in data.PRINT_VOUCHER_STRING_MAP) {
          if (data.PRINT_VOUCHER_STRING_MAP[key].elecSignFlag) {
            voucherIDS.push(key);
          }
          if (data.PRINT_VOUCHER_STRING_MAP[key].paperPrintFlag) {
            printIDS.push(key);
          }
        }
        if (voucherIDS.length > 0 || printIDS.length > 0) {
          conf.elecSignParam.ootcSignUploadData.voucherIDS = voucherIDS.join(",");
          var CONFIRM_NO_SIGN_DATA;
          //立马也上传不签名标志
          if (printIDS.length > 0) {
            CONFIRM_NO_SIGN_DATA = {
              sysEvtTraceId: sysTraceId,
              voucherIDS: printIDS.join(",")
            }
          }
          // 上传接口会干掉BASE64等字段节约带宽。。。其实不应该改变原来的数据结构，下次再改吧
          var signPicDataTmp = conf.elecSignParam.ootcSignUploadData.signPicData
          PJF.communication.elecSign.uploadSign({
            SIGN_DATA: conf.elecSignParam.ootcSignUploadData,
            CONFIRM_NO_SIGN_DATA: CONFIRM_NO_SIGN_DATA,
            PRINT_VOUCHER_STRING_MAP: data.PRINT_VOUCHER_STRING_MAP,
            callback: function (uploadRes) {
              if (uploadRes.status == 0) {
                // 添加电子签名BASE64数据，可能要纸质打印
                for (var key in data.PRINT_VOUCHER_STRING_MAP) {
                  if (data.PRINT_VOUCHER_STRING_MAP[key].elecSignFlag) {
                    data.PRINT_VOUCHER_STRING_MAP[key].elecSignPicBase64 = signPicDataTmp // 赋值签名数据，可以打印出来
                  }
                }
                conf.success(data, conf.authUserInfo);
              } else
                handleVoucherMapNoSign();
            }
          });
        } else {
          conf.success(data, conf.authUserInfo);
        }
      }
      //转为了交易确认
      else if (conf.elecSignParam.ootcSignUploadData === false) {
        handleVoucherMapNoSign();
      } else {
        PJF.communication.elecSign.oneTimeSign($.extend({}, conf.elecSignParam, {
          data: data,
          /* 
          					agentName: conf.elecSignParam.agentName,
          					customerName: conf.elecSignParam.customerName, */
          callback: function () {
            conf.success(data, conf.authUserInfo); //cps成功回调
          }
        }));
      }

    } else {
      conf.success(data, conf.authUserInfo); //cps成功回调
    }
  }
  return;
}
/**
 * [ 交易完成 --- 无论成功或失败的回调函数]
 * 
 * @param {[type]}
 *            conf [description]
 * @param {[type]}
 *            data [description]
 * @param {[type]}
 *            params [可能有的更多的传递参数 为JSON]
 * @return {[none]} [description]
 */
PJF.communication.afterCPSJsonReq = function (conf, data, params) {};

/*******************************************************************************
 * CPS请求方法，标准交易均使用此方法
 * 
 * @param conf
 *            配置，具体参数如下:
 *            <ul>
 *            <li> url : ajax请求url地址,默认为ecpJsonDispatch.action
 *            <li> fwServiceId : 交易服务id,必填
 *            <li> jsonData : 需要传送的请求信息数据，选填
 *            <li> fwTranId : 交易码，必填。
 *            <li> sqlId: 如果请求p2 server本身提供的服务,则传入对应ibatis中的sqlId即可
 *            <li> fmtPrintId: 套打打印ID
 *            <li> success : 如果交易码BK_STATUS是00则调用此方法
 *            <li> failure : 如果交易码BK_STATUS不是00则调用此方法
 *            <li> mask: 请求时出现遮罩层,参数为要被遮罩的区域的div id，和maskAll属性2选1
 *            <li> maskAll: 请求时遮罩整个页面，默认为false
 *            <li> loadingText : 通过该方法设置遮罩层显示文字，默认显示loading
 *            <li> type : 请求的方法，默认为post
 *            <li> timeOut : 请求的超时时间,默认为30秒
 *            <li> dataType : ajax请求的数据格式，默认为json
 *            <li> async : 默认为true(异步)
 *            <li> traditional : 数据序列化方式，默认false
 *            <li> interceptParams : 交易拦截相关配置
 *            </ul>
 */
PJF.communication.cpsJsonReq = function (conf) {

  // 可能有的更多的传递参数 用于在各函数间传递参数
  var params = {};

  // 校验参数是否满足 参数校验不合法 返回
  if (PJF.communication.validateCPSJsonReqParams(conf, params) === false) {
    return;
  }
  // 准备请求参数
  var data = PJF.communication.prepareCPSJsonReqParams(conf, params);

  // 发送请求前回调
  if (PJF.communication.beforeCPSJsonReq(conf, data, params) === false) {
    return;
  }
  // 发送请求
  var reqResult = PJF.communication.sendCPSJsonReq(conf, data, params);

  // 返回可能的请求结果
  return reqResult;
};


/*
 * 这是P2S做的一层疑似重复交易拦截
 */
PJF.communication.handleSimilarTrans = function (data, copyOfConf) {
  if (data._similar_trans_status == 'SUCC') {
    new PJF.ui.messageBox({
      buttonText: ['继续交易', '取消'],
      closable: false,
      style: 'confirm',
      title: '疑似重复交易',
      content: data._flow_guide,
      cancel: function () {
        PJF.event.publish(PJF.loadResource.PJF_AUTH_FAILURE, {
          type: 'ST'
        });
      },
      ok: function () {
        if (copyOfConf.atchBtchNo && PJF.communication.client.isInP2()) {
          //如果应用控制传入atch btch no， 那么授权重发交易换一个值
          var uNo = PJF.communication.client.getUniqueNo();
          if (uNo[0] == 0) copyOfConf.atchBtchNo = uNo[1];
        }
        var tempJsonData = copyOfConf.jsonData;
        if (!tempJsonData) tempJsonData = {};
        else if (typeof (tempJsonData) == 'string') tempJsonData = eval('(' + tempJsonData + ')');
        if (typeof (data._curr_val_no) == 'string' && !isNaN(data._curr_val_no)) {
          data._curr_val_no = parseInt(data._curr_val_no, 10);
        }
        if (typeof (data._curr_val_no) == 'number') {
          tempJsonData._curr_val_no = data._curr_val_no + 1;
        }
        copyOfConf.jsonData = PJF.util.json2str(tempJsonData);
        PJF.communication.cpsJsonReq(copyOfConf);
      }
    });
  } else if (data._similar_trans_status == 'NOSU') {
    new PJF.ui.messageBox({
      style: "warning",
      title: '交易可能重复',
      content: data._flow_guide,
      fn: function () {
        PJF.event.publish(PJF.loadResource.PJF_AUTH_FAILURE, {
          type: 'ST'
        });
      }
    })
  }
};
/**
 * 统一处理ajax(grid中使用)和cps授权返回数据,弹出授权框 参数： data : 授权被拦截后返回数据 copyOfConf :
 * ajax或cps的配置
 */
PJF.communication.handleAuthResource = function (data, copyOfConf, cancelCallback) {
  // 存下授权时的数据
  PJF.auth._lastAuthData = data
  //复制最原始的success方法和failure,针对二次集中授权
  if (copyOfConf.originalSuccess) {
    copyOfConf.success = copyOfConf.originalSuccess;
    delete copyOfConf.originalSuccess;
  }
  if (copyOfConf.originalFailure) {
    copyOfConf.failure = copyOfConf.originalFailure;
    delete copyOfConf.originalFailure;
  }
  // 将交易参数conf复制，用于授权通过后重发
  PJF.loadResource.PJF_LOAD_RESOURCES_CONF = {};
  PJF.apply(PJF.loadResource.PJF_LOAD_RESOURCES_CONF, copyOfConf);
  // 根据conf配置来判断是ajax还是cps
  var isAjax = copyOfConf.fwServiceId ? false : true;
  if (!isAjax && copyOfConf.atchBtchNo && PJF.communication.client.isInP2()) {
    //如果应用控制传入atch btch no， 那么授权重发交易换一个值
    var uNo = PJF.communication.client.getUniqueNo();
    if (uNo[0] == 0) PJF.loadResource.PJF_LOAD_RESOURCES_CONF.atchBtchNo = uNo[1];
  }
  // ajax和cpsajax的conf结构不同
  var tempJsonData = isAjax ? copyOfConf.data.jsonData : copyOfConf.jsonData;
  // eval空字符串会返回undefined,默认其不会传入多个空白字符串,如' '
  if (!tempJsonData) tempJsonData = {};
  else if (typeof (tempJsonData) == 'string') tempJsonData = eval('(' + tempJsonData + ')');
  // 互动终端获取模板信息
  var ootcData = tempJsonData.ootcData;
  // 针对柜外清的情况
  if (data._curr_val_key == 'IT') tempJsonData._inte_trl_auth = 1;
  //针对复核授权
  if (data._curr_val_key == 'HW') tempJsonData.AUTH_AUDIT_TAG = 1;
  //针对让用户输入密码的
  if (data._curr_val_key == 'CP') tempJsonData._customer_pwd_input = 1;
  // 下面两个针对旧的授权逻辑
  if (typeof (data._auth_step_no) == 'number') {
    tempJsonData._auth_step_no = data._auth_step_no + 1;
  }
  if (typeof (data._curr_val_no) == 'number') {
    tempJsonData._curr_val_no = data._curr_val_no;
  }

  var valData = data._val_data || {};
  if (typeof (valData) == 'string') {
    valData = eval('(' + valData + ')')
  }

  //这代表是CCBS主机授权,需要添加信息
  if (data.AuthCategory == 'dynamic' && valData.CCBS_AUTH_CODE) {
    tempJsonData.CCBS_AUTH_CODE = valData.CCBS_AUTH_CODE;
    if (PJF.communication.client.isInP2())
      tempJsonData.autherPwd = PJF.communication.client.encrypt0x88(16)[1];
  }
  tempJsonData._auth_info = $.extend(true, {}, tempJsonData._auth_info, {
    AHN_INFOS: []
  });
  //新一代后端组件授权,可能有多个授权码,储存为数组,SA授权建爷加了，这里针对下集中授权
  if (valData.dynAuths) {
    var dynArray = [];
    for (var i in valData.dynAuths) {
      dynArray.push({
        AHN_CD: valData.dynAuths[i].authCode
      });
    }
    //mapping com5中为此路径
    tempJsonData._auth_info.AHN_INFOS = tempJsonData._auth_info.AHN_INFOS.concat(dynArray);
  }

  tempJsonData = PJF.util.json2str(tempJsonData);
  // 将转换的jsonData赋值回全局变量
  if (isAjax) PJF.loadResource.PJF_LOAD_RESOURCES_CONF.data.jsonData = copyOfConf.data.jsonData = tempJsonData;
  else PJF.loadResource.PJF_LOAD_RESOURCES_CONF.jsonData = copyOfConf.jsonData = tempJsonData;
  /*-------------以下为全局变量设置，为了给授权页面使用------------*/
  PJF.loadResource._val_msg = data._val_msg;
  // fwTranId用于授权时使用,在common/auth/authCom.js中
  PJF.loadResource.PJF_LOAD_RESOURCES_CONF.fwTranId = isAjax ? copyOfConf.data.transaction_id : copyOfConf.fwTranId;
  // 将服务端返回数据赋值全局变量
  PJF.loadResource.AUTH_SERVER_RTDATA = data;
  // valData
  PJF.loadResource.AUTH_VAL_DATA = valData;
  /*-----------------------赋值全局变量结束-----------------------*/


  //高亮显示以下栏位
  if (valData._red_columns) {
    for (var i in valData._red_columns) {
      var domId = $.trim(valData._red_columns[i]); //免得有业务随便乱输了空格之类的导致报错
      if (!domId)
        continue;
      //这是最好的方式，走组件的API	
      if (PJF.ui.componentMgr.get(domId)) {
        PJF.ui.componentMgr.get(domId).addHighlight();
      }
      //二笔姿势。。。从DOM结构去找
      else {
        //input本身、子节点有input、子节点第一个兄弟的子节点有input(dateinput)、子节点的第一个兄弟是input(p:select)，name属性的判断5种
        var selector = ["#" + domId + ":input:visible", '#' + domId + ' > input:visible', '#' + domId + ' + > input:visible', '#' + domId + ' +:input:visible', '[name="' + domId + '"]:visible'];
        for (var i = 0; i < selector.length; i++) {
          var result = $(selector[i]);
          if (result.length > 0) {
            result.addClass('validatebox-tipcolor error-border');
            break;
          }
        }
      }
    }
  }

  //针对一次集中授权转同终端，二次授权同样适用同终端
  if (PJF.loadResource.CHANGE_SA == '2') {
    PJF.communication.handleSAIT(data, cancelCallback);
  }

  // 2.2期新授权用_curr_val_key判断,2.1老授权同终端授权不带_curr_val_key字段
  else if ((data._curr_val_key == 'IT' || data._curr_val_key == 'SA') || (!data._curr_val_key && data._val_page)) {
    if (data._curr_val_key == 'IT' && ootcData) {
      PJF.communication.ootcTemplate(ootcData);
      if (PJF.communication.client.OOTC_CONTENT == '') return;
    }
    PJF.communication.client.OOTC_CONTENT = $.trim(PJF.communication.client.OOTC_CONTENT); //据说有的应用不要空格
    //包含试运行逻辑
    if (data.Test_Run == '1' && data._curr_val_key == 'SA') {
      //alert('试运行第二次CA:' + PJF.loadResource.CA_TWICE)
      //这是针对试运行时出现多次授权，则保存第一次选择的授权模式
      if (PJF.loadResource.Test_Run_Flag == 'CA') {
        //此时采集页面已经展开
        if (PJF.loadResource.CA_TWICE) {
          PJF.communication.handleTwiceCA(data);
        }
      } else if (PJF.loadResource.Test_Run_Flag == 'SA') {
        PJF.communication.handleSAIT(data, cancelCallback);
      } else {
        new PJF.ui.messageBox({
          style: 'confirm',
          closable: false,
          title: '授权提示',
          content: '该交易处于远程集中授权试运行期，确定将进行远程集中授权，取消将进行本地授权',
          ok: function () {
            PJF.loadResource.PJF_LOAD_RESOURCES_CONF.authResourceType = 'CA';
            PJF.loadResource.Test_Run_Flag = 'CA';
            PJF.communication.handleCA(data);
          },
          cancel: function () {
            PJF.loadResource.Test_Run_Flag = 'SA';
            PJF.communication.handleSAIT(data, cancelCallback);
          }
        })
      }
    } else {
      PJF.communication.handleSAIT(data, cancelCallback);
    }

  } else if (data._curr_val_key == 'CA') {
    PJF.loadResource.PJF_LOAD_RESOURCES_CONF.authResourceType = 'CA';
    if (PJF.loadResource.CA_TWICE) {
      PJF.communication.handleTwiceCA(data);
    } else {
      PJF.communication.handleCA(data);
    }
  }
  // 跨终端授权,预留
  else if (data._curr_val_key == 'KA') {

  }
  // 双敲复核
  else if (data._curr_val_key == 'RW') {
    new PJF.ui.messageBox({
      style: 'info',
      title: resource.AUTH_REVIEW_TITLE,
      content: data._val_msg,
      fn: function () {
        if (copyOfConf.interceptParams && copyOfConf.interceptParams.rwCallBack) copyOfConf.interceptParams.rwCallBack(data);
      }
    });
  } else if (data._curr_val_key == 'HW') {
    var loading = new PJF.ui.loading({
      maskBody: true,
      text: resource.AJAX_HW_REAUTH
    })
    //不允许关闭页面
    PJF.communication.client.beforeCloseTab = function () {
      return false;
    }
    PJF.communication.client.registerEvent("SQFH_msg_003", function (hwData) {
      //允许关闭页面
      PJF.communication.client.beforeCloseTab = function () {
        return true;
      }
      console.log('收到复核消息:' + hwData);
      hwData = eval('(' + hwData + ')');
      if (hwData.msgData._event_id == data._event_id) {
        loading.destroy();
        if (hwData.msgData._val_ret == '1') {
          PJF.communication.cpsJsonReqResend();
        } else {
          new PJF.ui.messageBox({
            style: 'info',
            title: '',
            content: hwData.msgData._val_data
          });
          PJF.event.publish(PJF.loadResource.PJF_AUTH_FAILURE, {
            type: 'HW'
          });
        }
      }

    })
  } else if (data._curr_val_key == 'AP') {
    PJF.communication.handleSAIT(data)
  } else if (data._curr_val_key == 'CP') {
    PJF.communication.handleSAIT(data);
  } else if (data._curr_val_key == 'MA') {
    new PJF.ui.messageBox({
      style: 'warning',
      title: '交易未上送加密数据',
      content: '请重新启动员工渠道后重试'
    });
  } else if (data._curr_val_key == 'VC') {
    new PJF.ui.messageBox({
      style: 'warning',
      title: '错误',
      content: '验证码过期或输入错误'
    })
  } else if (data._curr_val_key == 'IDEN') {
    // 若没有window dom,新建dom用于window
    if (PJF.html.getDom(PJF.loadResource.PJF_LOAD_RESOURCES_DOM_ID) == undefined) {
      var winDiv = document.createElement('div');
      document.body.appendChild(winDiv);
      winDiv.setAttribute('id', PJF.loadResource.PJF_LOAD_RESOURCES_DOM_ID);
    }
    new PJF.ui.window({
      dom: PJF.loadResource.PJF_LOAD_RESOURCES_DOM_ID,
      id: PJF.loadResource.PJF_LOAD_RESOURCES_ID,
      title: '身份证联网核查',
      /*left: 0,
      position: 'fixed',
      fixPosition: true,
      top: (window.innerHeight || document.documentElement.height) - 300,*/
      width: 850,
      height: 450,
      showTip: true,
      closable: false,
      url: CONTEXT_PATH + data._val_page,
      //cache: false,
      onClose: function () {
        PJF.event.publish(PJF.loadResource.PJF_AUTH_FAILURE, {
          type: data._curr_val_key
        })
      }
    })
  } else {
    new PJF.ui.messageBox({
      style: 'warning',
      title: '后端返回不正确标志',
      content: data._curr_val_key
    });
  }
}

//二次CA授权的操作(错误码配置的情况)
PJF.communication.handleTwiceCA = function (data) {
  if (!PJF.auth.startAuth()) {
    new PJF.ui.messageBox({
      title: '禁止进行授权交易',
      style: 'warning',
      content: '当前存在处于授权等待中的交易，前先完成前序交易！'
    })
    return
  }
  //这里再次初始化授权loading是因为第一次交易成功后,cps再度发交易可能出现将老的loading顶替的情况
  PJF.communication.ra.initLoading();
  PJF.communication.ra.tellAuthMoreRA(PJF.loadResource.PJF_LOAD_RESOURCES_CA_BACKDATA, data);
}

//同终端或者互动终端，或者让客户输入密码
PJF.communication.handleSAIT = function (data, cancelCallback) {
  var conf = PJF.loadResource.PJF_LOAD_RESOURCES_CONF;
  var _closable = true;
  // 若没有window dom,新建dom用于window
  if (PJF.html.getDom(PJF.loadResource.PJF_LOAD_RESOURCES_DOM_ID) == undefined) {
    var winDiv = document.createElement('div');
    document.body.appendChild(winDiv);
    winDiv.setAttribute('id', PJF.loadResource.PJF_LOAD_RESOURCES_DOM_ID);
  }
  //触发同终端前多一个回调,CA是因为被转为同终端了
  if ((data._curr_val_key == 'IT' || data._curr_val_key == 'CA') && conf.interceptParams && conf.interceptParams.beforeHandleSA) {
    conf.interceptParams.beforeHandleSA(data);
  }
  // 审批前的回调
  if (data._curr_val_key == 'AP' && conf.interceptParams && conf.interceptParams.beforeHandleAP) {
    conf.interceptParams.beforeHandleAP(data)
  }
  //新建window，打开授权的_val_page页面
  var url = data._val_page;
  //若是远程授权页面特殊原因，转回本地授权，并且触发二次授权，这时本地授权URL是在_TO_SAME_URL字段中，而非_val_page
  if (data._curr_val_key == 'CA') {
    var valData = data._val_data || {};
    if (typeof (valData) == 'string') {
      valData = eval('(' + valData + ')')
    }
    url = valData._TO_SAME_URL || url;
  }
  var title = resource.AUTH_WINDOW_TITLE[0];
  if (data._curr_val_key == 'IT') {
    title = resource.AUTH_WINDOW_TITLE[1];
    if (conf.elecSignParam && conf.elecSignParam.ootcSign && PJF.communication.elecSign.canElecSign() && PJF.communication.elecSign.getElecSignCapability()) {
      url = PJF.constants.OOTC_SIGN_URL;
      _closable = false;
    }
  } else if (data._curr_val_key == 'CP') {
    title = resource.AUTH_WINDOW_TITLE[2];
  } else if (data._curr_val_key == 'AP') {
    title = resource.AUTH_WINDOW_TITLE[3];
  }
  if (data._curr_val_key == 'SA') {
    if (!PJF.auth.startAuth()) {
      new PJF.ui.messageBox({
        title: '禁止进行授权交易',
        style: 'warning',
        content: '当前存在处于授权等待中的交易，前先完成前序交易！'
      })
      return
    }
  }
  new PJF.ui.window({
    dom: PJF.loadResource.PJF_LOAD_RESOURCES_DOM_ID,
    id: PJF.loadResource.PJF_LOAD_RESOURCES_ID,
    title: title,
    left: 0,
    position: 'fixed',
    fixPosition: true,
    top: (window.innerHeight || document.documentElement.height) - 300,
    width: 420,
    height: 300,
    showTip: true,
    closable: _closable,
    url: CONTEXT_PATH + url,
    cache: false,
    onClose: function () {
      PJF.auth.endAuth()
      PJF.event.publish(PJF.loadResource.PJF_AUTH_FAILURE, {
        type: data._curr_val_key
      });
      cancelCallback && cancelCallback();
    }
  })

}

//打开授权采集页面
PJF.communication.handleCA = function (data) {
  if (!PJF.auth.startAuth()) {
    new PJF.ui.messageBox({
      title: '禁止进行授权交易',
      style: 'warning',
      content: '当前存在处于授权等待中的交易，前先完成前序交易！'
    })
    return
  }
  PJF.communication.ra.initLoading();
  // 打开集中授权页面
  PJF.communication.client.openAuthPage(data._val_data, 'YGQD');
  // 集中授权统一处理	
  PJF.communication.ra.registerHandler(data);
}

/*
 * 资源访问授权通过后，回调此函数重新发送交易请求 authUserInfo.CCB_EmpID,//授权柜员新一代柜员号
 * authUserInfo.CCB_EmpNm,//授权柜员姓名 authUserInfo.CCBS_EmpID,//授权柜员CCBS柜员号
 */
PJF.communication.cpsJsonReqResend = function (authUserInfo, authType) {
  PJF.auth.endAuth()
  //当此次授权是集中授权转同终端，那么记标志位，以便在可能出现的动态授权时继续使用同终端
  if (PJF.loadResource.CHANGE_SA == '1') {
    PJF.loadResource.CHANGE_SA = '2';
  }
  // 得到window
  var cpsAuthWin = PJF.ui.componentMgr.get(PJF.loadResource.PJF_LOAD_RESOURCES_ID);
  if (cpsAuthWin) {
    cpsAuthWin.destroy();
    cpsAuthWin = null;
  }
  var re = {};
  PJF.apply(re, PJF.loadResource.PJF_LOAD_RESOURCES_CONF);
  //授权通过后,重发交易,通过conf判断是ajax还是cps
  var tempJsonData = re.fwServiceId ? re.jsonData : re.data.jsonData;
  if (!tempJsonData) tempJsonData = {};
  else if (typeof (tempJsonData) == 'string') tempJsonData = eval('(' + tempJsonData + ')');
  if (re.interceptParams && re.interceptParams.beforeSaResend) {
    var tmpData = re.interceptParams.beforeSaResend(tempJsonData, authUserInfo, PJF.loadResource.AUTH_VAL_DATA);
    tempJsonData = tmpData ? tmpData : tempJsonData;
  }
  //新一代后端组件授权，添加授权人编号
  if (tempJsonData._auth_info && tempJsonData._auth_info.AHN_INFOS) {
    for (var i in tempJsonData._auth_info.AHN_INFOS) {
      tempJsonData._auth_info.AHN_INFOS[i].AHN_STFF_ID = authUserInfo.CCB_EmpID;
      tempJsonData._auth_info.AHN_INFOS[i].AUTH_TYPE = 0;
    }
  }
  // 为了二次绕过授权，并上传高级柜员账号，bis
  if (PJF.loadResource.operIdKey && authUserInfo && authUserInfo.CCB_EmpID) authUserInfo[PJF.loadResource.operIdKey] = authUserInfo.CCB_EmpID;

  re.pjfReSend = true; //代表该笔交易是授权之后发起
  re.authUserInfo = authUserInfo; //这个到时候成功的时候传给应用success回调,当然可能为undefined
  //cps的情况
  if (re.fwServiceId) {
    if (authUserInfo) {
      PJF.apply(tempJsonData, authUserInfo);
      re.jsonData = PJF.util.json2str(tempJsonData);
    }
    PJF.communication.cpsJsonReq(re);
  }
  //crossDomain的情况
  else if (re.data && re.data.isFromCrossDomain) {
    delete re.data.isFromCrossDomain;
    if (authUserInfo) {
      PJF.apply(tempJsonData, authUserInfo);
      if (PJF.communication.client.isInP2()) {
        var uNo = PJF.communication.client.getUniqueNo();
        if (uNo[0] == 0) tempJsonData.ATCH_BTCH_NO = uNo[1];
      }
      re.data.jsonData = tempJsonData;
    }
    re.data = PJF.util.json2str(re.data);
    PJF.communication.crossDomainReq(re);
  }
  //普通ajax的情况
  else {
    if (authUserInfo) {
      PJF.apply(tempJsonData, authUserInfo);
      re.data.jsonData = PJF.util.json2str(tempJsonData);
    }
    // ajax重发的情况下，要保证获取新的ATCH_BTCH_NO值
    if (PJF.communication.client.isInP2()) {
      var uNo = PJF.communication.client.getUniqueNo();
      if (uNo[0] == 0) tempJsonData.ATCH_BTCH_NO = uNo[1];
      re.data.jsonData = PJF.util.json2str(tempJsonData);
    }
    PJF.communication.ajax(re);
  }

}

PJF.communication.cleanResource = function () {
  PJF.loadResource.Already_Run = null; //集中授权中，成功的事件是否已执行
  PJF.loadResource.Test_Run_Flag = null; //记录试运行选择的授权方式
  PJF.loadResource.CA_TWICE = null; //是否已通过第一次集中授权
  PJF.loadResource.CHANGE_SA = null; //是否从集中授权转为同终端
}

/*
 * 额外需要传递的信息,包括操作员信息以及机器信息等等
 * 注意 这里conf可能没有
 */
PJF.communication.setEcpJsonParam = function (serviceId, tranId, data, needAdapterId, encryptDatas, sqlId, fmtPrintId, conf) {
  var myData = {};
  var enData = {};
  //若没有fmtPrintId，默认使用交易码,by liu chao
  fmtPrintId = fmtPrintId || tranId;
  conf = conf || {};
  // 添加操作员信息
  myData = PJF.communication.addParam(myData, serviceId);
  if (serviceId == 'noRoleSimpleTransaction' || conf.noRoleTransaction) {
    myData.RL_IDS = [];
  }
  // menuId
  var menuId = conf.menuId || PJF.html.getUrlParam('menuId')
  if (menuId) {
    myData._menu_id = menuId
  }
  // 加密处理
  if (encryptDatas) {
    var dataObj;
    if (data == '') dataObj = {};
    else dataObj = eval('(' + data + ')')
    for (var a = 0; a < encryptDatas.length; a++) {
      var key = encryptDatas[a];
      if (dataObj[key]) {
        var result = PJF.communication.client.encryptParam(dataObj[key]);
        if (result[0] == 0) enData[key] = result[1]
      }
    }
  }

  if (PJF.util.getType(data) == 'string' && data != '') {
    data = eval('(' + data + ')');
  }
  //添加ecp_log需要的当前客户端时间字段 201707起不送CLIENT_TIME字段了 这个时间根据BSN_MT_ENT_IDR字段根据p2s时间自动生成，记录到数据库并填充到外呼报文
  //myData.CLIENT_TIME = PJF.util.formatDate(new Date(),'yyyy/MM/dd hh:mm:ss');
  // 避免集中授权中data带了旧的ATCH_BTCH_NO导致重复交易
  if (myData.ATCH_BTCH_NO && data) data.ATCH_BTCH_NO = myData.ATCH_BTCH_NO;
  myData = PJF.apply(myData, data);
  //有的项目组想自己控制重复交易
  if (conf.atchBtchNo)
    myData.ATCH_BTCH_NO = conf.atchBtchNo;
  // 是否开启互动终端
  // 是否有tabname
  if (PJF.communication.client.isInP2()) {
    try {
      var telclrFlag = PJF.communication.client.getClientEnv('telclrFlag');
      if (telclrFlag && telclrFlag[1] == 'true') {
        myData._inte_trl_enable = 1;
      }
    } catch (ex) {}
    //配置了ootcSign的情况，并且打开了电子签名, 那么在这次交易中默认互动开关就是开的
    if (conf.elecSignParam && conf.elecSignParam.ootcSign && PJF.constants.termType == 'pc' && PJF.communication.elecSign.canElecSign()) {
      myData._inte_trl_enable = 1;
    }
    var tabName = PJF.communication.client.getClientEnv('cuurentMenu.menuName');
    if (tabName[0] == '0')
      myData.TAB_NAME = tabName[1];
  }
  // 把加密的加上
  myData = PJF.apply(myData, enData);
  // 临时：授权通过后,重发交易,通过conf判断是ajax还是cps
  // if(PJF.loadResource.authUser)
  // myData = PJF.apply(myData,PJF.loadResource.authUser);
  //这个是客户端打开的页面后面带的字段，为了大概为了统计一个业务的整个周期耗时用的
  if (!PJF.constants.D2D) {
    var QUOTA_BATCHNO = PJF.html.getUrlParam('batchNo');
    if (QUOTA_BATCHNO) myData.QUOTA_BATCHNO = QUOTA_BATCHNO;
  }

  if (serviceId == 'noRoleSimpleTransaction') {
    serviceId = 'simpleTransaction';
  }

  var resultData;

  if (needAdapterId) resultData = {
    'adapterId': 'ecpJson',
    '_fw_service_id': serviceId,
    'jsonData': PJF.util.json2str2(myData),
    'transaction_id': tranId
  };
  else resultData = {
    '_fw_service_id': serviceId,
    'jsonData': PJF.util.json2str2(myData),
    'transaction_id': tranId
  };
  if (sqlId) resultData._sql_id = sqlId;
  if (fmtPrintId) resultData.fmtPrintId = fmtPrintId;
  if (conf) {
    conf.docType && (resultData.docType = conf.docType);
    conf.transFlag && (resultData.transFlag = conf.transFlag);
    conf.serverFilePath && (resultData.serverFilePath = conf.serverFilePath);
    conf.remotePath && (resultData.remotePath = conf.remotePath);
    //为了避免以后越来越多的与jsonData同级的参数，所以加入此参数
    if (conf.otherParams) {
      for (var i in conf.otherParams) {
        resultData[i] = conf.otherParams[i];
      }
    }
  }
  typeof (CLIENT_LANGUAGE) != 'undefined' && (resultData.REQ_LANG = CLIENT_LANGUAGE);
  return resultData;
}
/*******************************************************************************
 * 注入客户端操作员等信息
 * 
 * @param myData
 *            需要被添加操作员信息的Object
 * @return 返回添加了信息的myData
 */
PJF.communication.addParam = function (myData, serviceId) {
  if (myData) {
    // 三多语言
    myData.REQ_LANG = CLIENT_LANGUAGE;
    // 操作员信息
    if (PJF.userInfo) {
      myData.OPER_CODE = PJF.userInfo.userCode;
      myData.OPER_NAME = PJF.userInfo.userName;
      myData.CCBS_ID = PJF.userInfo.ccbsId;
    }
    // 其他信息信息
    if (PJF.otherInfo) {
      myData.TOKEN = PJF.otherInfo.token;
      myData.TERMINAL_MAC = PJF.otherInfo.macAddress;
      myData.TERMINAL_IP = PJF.otherInfo.clientIP;
      if (!PJF.otherInfo.chaType) PJF.otherInfo.chaType = '0101';
      if (!myData.TXN_ITT_CHNL_CGY_CODE) myData.TXN_ITT_CHNL_CGY_CODE = PJF.otherInfo.chaType;
      if (PJF.otherInfo.logicTerminalNo) myData.LOGIC_TERMINAL_NO = PJF.otherInfo.logicTerminalNo;
      if (PJF.otherInfo.chaTypeId) myData.TXN_ITT_CHNL_ID = PJF.otherInfo.chaTypeId;
      //添加扫描凭证信息 on2015.7.23 by zhouyh
      if (PJF.otherInfo.seqId)
        myData.SCAN_SEQ_ID = PJF.otherInfo.seqId
      if (PJF.constants.termType == 'pc') {
        PJF.otherInfo.customerAcctNo && (myData._customer_account_no = PJF.otherInfo.customerAcctNo);
        PJF.otherInfo.customerIdenNo && (myData._customer_identity_no = PJF.otherInfo.customerIdenNo);
        PJF.otherInfo.customerIdenNm && (myData._customer_identity_name = PJF.otherInfo.customerIdenNm);
      }
      typeof (PJF.otherInfo.scp) != 'undefined' && (myData.CLUSTER_ID = PJF.otherInfo.scp);
    }
    // 操作员机构信息
    if (PJF.orgInfo) {
      myData.ORG_SHORT_CNAME = PJF.orgInfo.orgShortCName;
      PJF.orgInfo.orgShortEName && (myData.ORG_SHORT_ENAME = PJF.orgInfo.orgShortEName);
      myData.ORG_PHYSIC_CLASS = PJF.orgInfo.orgClass;
      if (PJF.orgInfo.instLevel1BranchId) myData.INST_LEVEL1_BRANCH_ID = PJF.orgInfo.instLevel1BranchId;
      // 新增三多字段
      //PJF.orgInfo.instSvrlLgPsnID && (myData.REQ_TENANCY_ID = PJF.orgInfo.instSvrlLgPsnID);
      PJF.orgInfo.instSvrlLgPsnID && (myData.BSN_MT_ENT_IDR = PJF.orgInfo.instSvrlLgPsnID);
      PJF.orgInfo.instSvrlLgPsnNm && (myData.REQ_TENANCY_NAME = PJF.orgInfo.instSvrlLgPsnNm);
      PJF.orgInfo.lclCcyCd && (myData.LOC_CCY = PJF.orgInfo.lclCcyCd);
      PJF.orgInfo.ctyRgonCd && (myData.COUN_CD = PJF.orgInfo.ctyRgonCd);
      PJF.orgInfo.tmzonCd && (myData.CLIENT_TIMEZONE = PJF.orgInfo.tmzonCd);
    }
    // 操作员职位信息
    if (PJF.roleInfo) {
      myData.OPER_ROLE = PJF.roleInfo.positionId

      // 如果权限信息不为数组(bs登录情况下会出现)，同时也做去重处理			
      if (PJF.roleInfo.noRepeatRoleAuthInfoList && !(PJF.roleInfo.noRepeatRoleAuthInfoList.constructor === Array)) {
        var tempArr = [];
        var tempPstRlIds = [];
        for (var a in PJF.roleInfo.noRepeatRoleAuthInfoList) {
          if (PJF.util.array.indexOf(tempPstRlIds, PJF.roleInfo.noRepeatRoleAuthInfoList[a].pstRlId) < 0) {
            tempPstRlIds.push(PJF.roleInfo.noRepeatRoleAuthInfoList[a].pstRlId);
            tempArr.push(PJF.roleInfo.noRepeatRoleAuthInfoList[a])
          }
        }
        PJF.roleInfo.noRepeatRoleAuthInfoList = tempArr;
      }
      //这样做是为了避免太多的日志

      myData.RL_IDS = [];
      for (var i in PJF.roleInfo.noRepeatRoleAuthInfoList) {
        myData.RL_IDS.push({
          pstRlId: PJF.roleInfo.noRepeatRoleAuthInfoList[i].pstRlId
        });
      }
      if (serviceId == 'databaseTransaction') {
        myData.RL_IDS = [];
      }
      if (!myData.BRANCH_ID) myData.BRANCH_ID = PJF.roleInfo.orgCode;
    }

    if (PJF.communication.client && PJF.communication.client.isInP2()) {
      var uNo = PJF.communication.client.getUniqueNo();
      if (PJF.util.getType(uNo) == 'array' && uNo[0] == 0) myData.ATCH_BTCH_NO = uNo[1];
      //所属一级
      var inst1 = PJF.communication.client.getClientEnv("outputLoginBean.orgAncestorInfo.instLevel1BranchId");
      inst1[0] == 0 && inst1[1] && (myData.LVL1_BRANCH_ID = inst1[1]);
      //所属总行
      var head1 = PJF.communication.client.getClientEnv("outputLoginBean.orgAncestorInfo.instHeadOfficeId");
      head1[0] == 0 && (myData.HEAD_BRANCH_ID = head1[1]);
    }

    myData._terminal_type = PJF.constants.termType;
    if (PJF.communication.elecSign && PJF.communication.client && PJF.communication.client.isInP2()) {
      PJF.communication.elecSign.addElecParam(myData);
    }
    return myData;
  }
}
/*******************************************************************************
 * 请求标准数据
 * 
 * @param conf
 *            请求配置，具体参数如下:
 *            <ul>
 *            <li>categoryId:对应的categoryId,必填
 *            <li>appId：对应的appId
 *            <li>clcd:对应的clcd
 *            <li>success:成功的回调函数,在这里处理返回的数据,必填
 *            <li>async : 同步或异步
 *            <li>sorted : 是否排序
 *            </ul>
 */
PJF.communication.getStandardCode = function (conf) {

  //如果传了法人，代表说这个标准数据会加入法人的维度
  var reqLang = conf.REQ_LANG || CLIENT_LANGUAGE;
  if (conf.lgPsn) {
    var lgPsns = conf.lgPsn.split(",");
    var instSvrlLgPsnID = PJF.orgInfo && PJF.orgInfo.instSvrlLgPsnID;
    if (instSvrlLgPsnID) {
      for (var i = 0, len = lgPsns.length; i < len; i++) {
        if (lgPsns[i] == instSvrlLgPsnID) {
          reqLang += "_" + instSvrlLgPsnID;
          break;
        }
      }
    }
  }

  if (conf.categoryId) {
    var useCache = (!PJF.constants.D2D && PJF.constants.termType == 'pc' && PJF.communication.client.isInP2()); //pc上，非端到端才走这个功能
    var key;
    //对端到端暂时不开放此功能
    //优先从客户端获取缓存
    if (useCache) {
      key = [conf.categoryId, conf.appId || "00000", conf.clcd || "00000", reqLang].join('');
      var result = PJF.communication.client.doCommonCommand('InvokeSptCommandHandler', 'cltFuns.b.dat', 'getStdCode', key)[1];
      if (result[0] == '0' && result.substr(2)) {
        var stdInfo = JSON.parse(result.substr(2));
        conf.async === false ? conf.success(stdInfo, 'success', {}) : setTimeout(function () {
          conf.success(stdInfo, 'success', {})
        }, 0); //后面两个参数不过是为了模仿ajax返回;
        return; //执行到这里说明缓存获取成功了，没必要走后面了
      }
    }

    var jsonData = {};
    // 定义后台服务名
    var fw_id = 'fetchStanderdCodeModelListByParams';
    // 后台服务参数
    var jClass = 'com.ccb.model.StandardDataCategory';
    // 后台服务地址
    var action = 'ecpJson2Bean.action';
    jsonData.categoryId = conf.categoryId;
    if (conf.appId) jsonData.appId = conf.appId;
    if (conf.clcd) jsonData.clcd = conf.clcd;
    if (conf.sorted) jsonData.sorted = conf.sorted;
    /*
     * if(typeof(CLIENT_LANGUAGE) != 'undefined' && CLIENT_LANGUAGE){
     * jsonData.REQ_LANG = CLIENT_LANGUAGE; }
     */
    var data = {};
    data.REQ_LANG = reqLang;
    data._fw_service_id = fw_id;
    data.jsonClass = jClass;
    data.jsonData = PJF.util.json2str(jsonData);
    PJF.communication.ajax({
      data: data,
      async: conf.async,
      url: action,
      success: function (data, ts, jq) {
        //缓存下来
        if (useCache) {
          try {
            PJF.communication.client.doCommonCommand('InvokeSptCommandHandler', 'cltFuns.b.dat', 'setStdCode', key, JSON.stringify(data));
          } catch (e) {
            console.log('pc cliet set std cache error:' + e.message);
          }
        }
        conf.success(data, ts, jq)
      }
    })
  } else {
    alert('PJF.communication.getStandardCode需要的参数信息不正确!当前参数为:categoryId:' + conf.categoryId + ',appId:' + conf.appId + ',clcd:' + conf.clcd);
  }
}
/*******************************************************************************
 * 根据机构号取机构描述
 * 
 * @param conf
 *            请求配置, 具体参数如下：
 *            <ul>
 *            <li>success:取回机构描述后的回调函数,参数为data(机构号数组),必填
 *            <li>codes:机构号数组,必填
 *            </ul>
 */
PJF.communication.getOrgDesc = function (conf) {
  if (!conf || !conf.codes || !$.isArray(conf.codes) ||
    conf.codes.length === 0 || !conf.codes[0]) {
    alert('PJF.communication.getOrgDesc没有传入机构号信息!');
    return;
  }

  new PJF.communication.ajax({
    url: '/bosWeb/ecpJson.action',
    data: {
      _fw_service_id: "orgTextService",
      nodeArr: conf.codes,
      REQ_LANG: CLIENT_LANGUAGE
    },
    async: conf.async,
    success: conf.success,
    failure: conf.failure
  })
}

/*******************************************************************************
 * 统一打印服务
 * 
 * @param conf
 *            请求配置，具体参数如下：
 *            <ul>
 *            <li>callback:打印信息返回的回调函数，有两个参数，第一个为retCode,第二个为retMessage
 *            <li>teminalId:teminalId
 *            <li>fileName:文件名
 *			  <li>failure:回调，只针对访问都出错了
 *            <ul>
 */
PJF.communication.printData = function (conf) {
  var tId = conf.teminalId;
  var fileName = conf.fileName;
  var uuid = PJF.util.generateUUid(); // 避免打印同一个文件产生缓存
  var url = conf.url + '/print/PrintService?IN_teminalId=' + tId + '&IN_fileName=' + fileName + '&uuid=' + uuid;
  console.log('PJF.communication.printData统一打印服务URL为:' + url);
  // 之前用jquery appendto发现有重复发请求的现象，所以采用js原生方法
  var script = document.createElement("script");
  script.type = "text/javascript";
  script.src = url
  script.onerror = function () {
    conf.failure && conf.failure();
  }
  PJF.communication.printData.callback = conf.callback;
  document.body.appendChild(script);
}
/*******************************************************************************
 * 通过客户端发送http post请求,主要用来实现页面的跨域ajax请求,注意现在只支持同步
 * 
 * @param conf
 *            请求配置，具体参数如下：
 *            <ul>
 *            <li>url:请求的地址，注意是http全路径,必填
 *            <li>data:json格式的字符串
 *            <li>success:成功后回调的函数，这里的成功是请求的成功，非业务上的成功
 *            <li>failure:失败后会调的函数，这里的失败是调用api发生了异常，非业务上的异常
 *            </ul>
 */
PJF.communication.crossDomainReq = function (conf) {
  //加入mac校验
  if (typeof (conf.data) == 'string') {
    var dataTmp = eval('(' + conf.data + ')')
    var token = PJF.util.getLoginToken()
    if (token && dataTmp.jsonData) {
      if (typeof (dataTmp.jsonData) == 'string') {
        try {
          dataTmp.jsonData = eval('(' + dataTmp.jsonData + ')')
          dataTmp.jsonData._login_tk = token
        } catch (e) {
          console.info('crossdomain req 添加login token出错:' + e.message)
        }
      } else {
        dataTmp.jsonData._login_tk = token
      }

    }
    if (PJF.util.getValue(window, 'PJF.userInfo.userCode')) {
      if (dataTmp.jsonData) {
        if (typeof (dataTmp.jsonData) == 'object') {
          dataTmp.jsonData = PJF.util.jsontostr(dataTmp.jsonData);
        }
        dataTmp.macData = PJF.communication.client.macContent(dataTmp.jsonData)[1];
      }
      dataTmp.OPER_CODE = PJF.util.getValue(window, 'PJF.userInfo.userCode');
      dataTmp._terminal_type = PJF.constants.termType;
    }
    conf.data = PJF.util.jsontostr(dataTmp);
  }
  var copyOfConf = $.extend(true, {}, conf);
  if (typeof (copyOfConf.data) == 'string') {
    copyOfConf.data = eval('(' + copyOfConf.data + ')')
  }

  copyOfConf.data.isFromCrossDomain = true; // 标记，这样在重发的时候调用crossDomainReq方法
  var success = function (data) {
    //授权等情况
    if (typeof (data) == 'string' && (data.indexOf('_curr_val_key') != -1 || data.indexOf('_val_page') != -1)) {
      //这里返回是未处理的，应该是字符串
      data = data || {};
      if (typeof (data) == 'string') {
        data = eval('(' + data + ')')
      }
      PJF.communication.handleAuthResource(data, copyOfConf);
    } else if (conf.elecSignParam) {
      var datatmp = data || {};
      if (typeof (datatmp) == 'string') {
        datatmp = eval('(' + datatmp + ')')
      }
      if (datatmp.BK_STATUS == PJF.constants.BK_CODE_SUCCESS)
        PJF.communication.afterCpsSucc(copyOfConf, datatmp, {});
      else
        conf.success(data);
    } else {
      //不变以前的逻辑，转为json串再调用成功函数
      conf.success(data);
    }
  }
  var url = conf.url;
  // 如果有postData
  if (conf.data) {
    var result = PJF.communication.client.sendHttp(url, conf.data);
    if (result[0] == 0) {
      success(result[1]);
    } else conf.failure(result[1])
  } else {
    var result = PJF.communication.client.sendHttp(url);
    if (result[0] == 0) {
      success(result[1]);
    } else conf.failure(result[1])
  }
}
/*******************************************************************************
 * 根据标准数据的categoryId和itemValue的值去查询标准数据
 * 
 * @param conf
 *            请求配置，具体参数如下：
 *            <ul>
 *            <li>categroyId: 标准数据id(必填)
 *            <li>value:标准数据的itemValue(代码值,必填)
 *            <li>appId:标准数据的appId(选填)
 *            <li>clcd:标准数据的clcd(选填)
 *            <li>success:处理成功后的回调函数(必填)
 *            </ul>
 */
PJF.communication.getStandardCodeDescByValue = function (conf) {
  if (conf.categoryId && conf.value) {
    var useCache = (!PJF.constants.D2D && PJF.constants.termType == 'pc' && PJF.communication.client.isInP2()); //pc上，非端到端才走这个功能
    var key;
    //对端到端暂时不开放此功能
    //优先从客户端获取缓存
    if (useCache) {
      key = [conf.categoryId, conf.appId || "00000", conf.clcd || "00000", conf.value].join('');
      var result = PJF.communication.client.doCommonCommand('InvokeSptCommandHandler', 'cltFuns.b.dat', 'getStdCode', key)[1];
      if (result[0] == '0' && result.substr(2)) {
        var stdInfo = JSON.parse(result.substr(2));
        conf.success(stdInfo, 'success', {}); //这个接口默认就是同步
        return; //执行到这里说明缓存获取成功了，没必要走后面了
      }
    }


    var jsonData = {};
    // 定义后台服务名
    var fw_id = 'getDataItemNameByCategoryAndItem';
    // 后台服务参数
    var jClass = 'com.ccb.model.StandardDataCategory';
    // 后台服务地址
    var action = 'ecpJson.action';
    jsonData.category = conf.categoryId;
    if (conf.appId) jsonData.appId = conf.appId;
    if (conf.clcd) jsonData.clcd = conf.clcd;
    if (conf.value) jsonData.value = conf.value;
    var data = {};
    data._fw_service_id = fw_id;
    data.jsonClass = jClass;
    data.jsonData = PJF.util.json2str(jsonData);
    PJF.communication.ajax({
      data: data,
      async: false,
      url: action,
      success: function (data, ts, jq) {
        //缓存下来
        if (useCache && data) {
          try {
            PJF.communication.client.doCommonCommand('InvokeSptCommandHandler', 'cltFuns.b.dat', 'setStdCode', key, JSON.stringify(data));
          } catch (e) {
            console.log('pc cliet set std value cache error:' + e.message);
          }
        }
        conf.success(data, ts, jq)
      }
    });
  } else {
    alert("必须输入categoryId和value");
  }
}

/*******************************************************************************
 * 功能简介 获取P2S的套打服务
 * 
 * @param conf
 *            配置，具体参数如下：
 *            <ul>
 *            <li>funId:套打的子服务ID，默认为根据client传入的参数等生成对应凭证的打印串（选填）
 *            <li>voucherId:凭证的ID(选填),
 *            <li>jsonData:对应子服务需要的其他请求参数(json object,选填)
 *            <li>success:得到数据后的处理(必填)
 *            </ul>
 */

PJF.communication.printServiceReq = function (conf) {
  // 成功后的回调函数是必须的！
  if (!conf.success) {
    alert('PJF.communication.printServiceReq需要的参数信息不正确!');
    return;
  }

  var DEFAULFT_PRINT_SERVICE_FUN_ID = "genPrintString";
  var PRINT_SERVICE_ID = "FormatPrintService";

  // 功能ID可以不配置，默认访问生成打印串的功能
  if (!conf.funId) {
    conf.funId = DEFAULFT_PRINT_SERVICE_FUN_ID;
  }

  if (!conf.voucherId) {
    conf.voucherId = "all";
  }

  if (!conf.jsonData) {
    conf.jsonData = {};
  }

  var async = false;
  if (conf.async) {
    async = conf.async;
  }

  // 后台服务地址
  var action = 'ecpJson.action';
  var data = {};
  data._fw_service_id = PRINT_SERVICE_ID;
  data.funId = conf.funId;
  data.voucherId = conf.voucherId;
  // 获取当前操作员的机构号
  data.branchId = PJF.userInfo.orgCode;
  //增加version参数
  if (conf.version)
    data.version = conf.version;
  data.jsonData = PJF.util.json2str(conf.jsonData);

  PJF.communication.ajax({
    data: data,
    async: async,
    url: 'ecpJson.action',
    success: conf.success
  });
}

/**
 * 获取交易的打印数据：使用新一代统一凭证库中的凭证,返回的是图形打印方式的打印内容
 * 
 * @param conf：包括3个必填属性和一个可选属性
 *            success：成功后的回调处理函数 fmtPrintId：交易的ID，其实就是一个打印凭证集合的代号
 *            jsonData：打印凭证需要的动态数据 async：是否异步提交处理，可选参数。默认是同步处理。
 */
PJF.communication.getVoucherPrintContent = function (conf) {
  // 校验必填参数
  if (!conf.success || !conf.fmtPrintId || !conf.jsonData) {
    alert('PJF.communication.getVoucherPrintContent需要的参数信息不正确!');
    return;
  }

  var async = false;
  if (conf.async) {
    async = conf.async;
  }
  conf.printType = typeof (conf.printType) == 'undefined' ? 1 : conf.printType;
  var data = {};
  data._fw_service_id = "voucherPrintServiceReq";
  data.unitedVoucherId = conf.fmtPrintId;
  data.jsonData = PJF.util.json2str(conf.jsonData);
  data._print_type = conf.printType;
  data._elec_seal_switch = PJF.communication.elecSign.canElecSign();
  data._elec_seal = PJF.communication.elecSign.canElecSeal();
  PJF.communication.ajax({
    data: data,
    async: async,
    url: 'ecpJson.action',
    success: conf.success
  });
}

/*******************************************************************************
 * 获取当前系统时间
 * 
 * @param timePattern
 *            时间格式,默认为yyyyMMdd
 * @param legalPerson
 *            法人信息
 * @return 若获取失败返回null，成功返回当前时间的字符串
 */
PJF.communication.getServerTime = function (timePattern, legalPerson) {
  timePattern = timePattern || 'yyyyMMdd';
  var url = 'ecpJson.action';
  var result = null;

  var legalPersonParam = '';
  if (legalPerson)
    legalPersonParam = legalPerson;
  else if (PJF.orgInfo && PJF.orgInfo.instSvrlLgPsnID) {
    legalPersonParam = PJF.orgInfo.instSvrlLgPsnID;
  }
  // 设置缓存时间只支持本地法人
  var setCache = (!PJF.constants.D2D && PJF.constants.termType == 'pc' && PJF.communication.client.isInP2() && legalPersonParam && !legalPerson); //是否设置缓存
  var useCache = (timePattern == 'yyyyMMdd' && setCache); //是否使用缓存
  // stm暂时肯定是cn000, 所以不用判断其他法人的情况
  var setCacheNew = (PJF.constants.termType == 'stm' && !legalPerson);
  var useCacheNew = (timePattern == 'yyyyMMdd' && setCacheNew);



  if (useCache) {
    try {
      var result = PJF.communication.client.doCommonCommand('InvokeSptCommandHandler', 'cltFuns.b.dat', 'getServerTime')[1];
      if (result[0] == '0' && result.substr(2)) {
        return result.substr(2);
      }
    } catch (e) {
      console.log('pc client get servertime cache error: ' + e.message);
    }
  } else if (useCacheNew) {
    var result = PJF.cache.getServerTime();
    if (result) return result;
  }
  (setCache || setCacheNew) && (timePattern += ',yyyyMMddHHmmss'); //多加个这个，待会发到P2S取回来给客户端设置时间缓存用, 之所以加个逗号，是怕万一应用传的yyyy呢，就有问题了
  PJF.communication.ajax({
    url: url,
    async: false,
    data: {
      _fw_service_id: 'getServerTime',
      timePattern: timePattern,
      legalPerson: legalPersonParam
    },
    success: function (data) {
      result = data;
      //正确获取到了时间, 并且给设置客户端缓存
      if ((setCache || setCacheNew) && result && result.currentTime) {
        try {
          var cacheTime = result.currentTime.substr(timePattern.length - 15).substr(1); //用来设置缓存的
          result.currentTime = result.currentTime.substr(0, timePattern.length - 15); //应用实际需要的
          if (setCache) {
            PJF.communication.client.doCommonCommand('InvokeSptCommandHandler', 'cltFuns.b.dat', 'setServerTime', cacheTime);
          } else if (setCacheNew) {
            PJF.cache.setServerTime(cacheTime);
          }
        } catch (e) {
          console.log('set servertime cache error: ' + e.message);
        }
      }
    },
    failure: function (jq, ts, err) {
      /*new PJF.ui.messageBox({
      	title: '失败',
      	content: '获取系统当前时间失败'
      });*/
      console.log('获取系统时间失败,错误原因:' + ts);
    }
  })
  return result ? result.currentTime : result;
}


/*
 * type为1，调用convertDateStringToLegalPerson
 * type为2，调用convertDateStringToBaseTz
 */
PJF.communication.convertDateString = function (type) {
  var srcDateString = arguments[1];
  var srcPattern = arguments[2] || "yyyyMMdd HH:mm:ss";
  var destPattern = arguments[3] || srcPattern;
  var legalPerson = arguments[4] || PJF.util.getValue(PJF, "orgInfo.instSvrlLgPsnID") || "CN000";
  var _args, _fw_service_id;
  switch (type) {
    case 1:
      _fw_service_id = "convertDateStringToLegalPerson";
      _args = [destPattern, legalPerson];
      break;
    case 2:
      _fw_service_id = "convertDateStringToBaseTz";
      _args = [legalPerson, destPattern];
      break;
  }
  PJF.communication.ajax({
    traditional: true,
    url: 'ecpJson.action',
    async: false,
    data: {
      _fw_service_id: _fw_service_id,
      arg0: srcDateString,
      arg1: srcPattern,
      args: _args
    },
    success: function (data) {
      result = data;
    },
    failure: function (jq, ts, err) {
      console.log('获取系统时间失败,错误原因:' + ts);
    }
  });
  return result ? result.i18nTime : result;
}

/**
 * 获取时间字符串在法人所在时区的表示
 * 
 * @param srcDateString
 *            日期时间在“Asia/Shanghai时区”的字符串表示
 * @param srcPattern
 *            日期时间字符串格式，可为空，默认为“yyyyMMdd HH:mm:ss”
 * @param destPattern
 *            目标字符串格式，可为空，默认为srcPattern
 * @param legalPerson
 *            法人id，可为空，默认为当前法人，或者“CN000”				
 **/
PJF.communication.convertDateStringToLegalPerson = function (srcDateString, srcPattern, destPattern, legalPerson) {
  return PJF.communication.convertDateString.apply(window, Array.prototype.concat.apply([1], arguments));
}
/**
 * 获取时间字符串在基准时区的表示
 * 
 * @param srcDateString
 *            日期时间在法人所在时区的字符串表示
 * @param srcPattern
 *            法人日期时间字符串格式，可为空，默认为“yyyyMMdd HH:mm:ss”
 * @param destPattern
 *            目标字符串格式，可为空，默认为srcPattern
 * @param legalPerson
 *            法人id，可为空，默认为当前法人, 或者“CN000”	 
 **/
PJF.communication.convertDateStringToBaseTz = function (srcDateString, srcPattern, destPattern, legalPerson) {
  return PJF.communication.convertDateString.apply(window, Array.prototype.concat.apply([2], arguments));
}
PJF.communication.file2Swf = function (conf) {

  // 目前默认实时转换为swf
  conf.convertModel = 'real';
  conf.convertType = 'swf';
  PJF.communication.ajax({
    url: "/bosWeb/ecpJson.action",
    // async : false,
    data: {
      '_fw_service_id': 'file2SwfNew',
      'jsonData': PJF.util.json2str(conf)
    },
    success: function (data) {
      if (data.TX_STATUS == "00") {
        PJF.html.openWin('/bosWeb/page/swfdemo/viewSwf.html?fileName=' + data.FILE_NAME, 'pdf文件浏览');
      } else {
        new PJF.ui.messageBox({
          style: 'warning',
          title: '提示',
          content: '打开pdf文件' + data.FILE_NAME + '失败,错误描述信息[' + data.ERROR_MSG + ']!'
        });
        return null;
      }
    },
    failure: function (data) {
      new PJF.ui.messageBox({
        style: 'warning',
        title: '提示',
        content: '打开pdf文件发生异常, 请稍后再试!'
      });
      return null;
    }
  });

}

PJF.communication.ootcTemplate = function (ootcData) {

  PJF.communication.ajax({
    url: "/bosWeb/ecpJsonAsym.action",
    async: false,
    data: {
      '_fw_service_id': 'transformData',
      'jsonData': PJF.util.json2str(ootcData)
    },
    dataType: 'html',
    success: function (data) {
      var obj = data;
      if (typeof (data) == 'string') {
        try {
          obj = eval('(' + data + ')');
        } catch (e) {
          PJF.communication.client.OOTC_CONTENT = data;
          return;
        }
      }
      // 说明出错了
      PJF.communication.client.OOTC_CONTENT = '';
      var desc = obj.BK_DESC;
      if (obj.FLLW_GUIDE) {
        desc += '~' + obj.FLLW_GUIDE;
      }
      var transId = "";
      if (data._COMMON && data._COMMON.SYS_EVT_TRACE_ID) {
        transId = data._COMMON.SYS_EVT_TRACE_ID;
      }
      new PJF.ui.errorMessageBox({
        title: '提示',
        desc: desc,
        code: obj.BK_CODE,
        traceId: transId
      });

    },
    failure: function (data) {
      new PJF.ui.messageBox({
        style: 'warning',
        title: '提示',
        content: '获取互动终端显示内容失败'
      });
      PJF.communication.client.OOTC_CONTENT = '';
    }
  });
}

/*******************************************************************************
 * 将汉语转化为拼音
 * 
 * @param conf
 *            配置，具体参数如下：
 *            <ul>
 *            <li> content : 待转换的内容
 *            <li> seperater : 分隔符，默认空字符串
 *            <li> caseType : 大小写，LOWER_CASE或者UPPER_CASE,默认LOWER_CASE
 *            <li> toneType :
 *            是否有音标，WITHOUT_TONE或者WITH_TONE_NUMBER，默认WITHOUT_TONE
 *            <li> vCharType :
 *            WITH_V、WITH_U_UNICODE或者WITH_U_AND_COLON,默认WITH_U_UNICODE
 *            </ul>
 * @return 若获取失败返回空字符串，成功返回拼音
 */
PJF.communication.hanyu2PinYin = function (conf) {
  if (!conf) conf = {};
  var url = 'ecpJson.action';
  var result = "";
  PJF.communication.ajax({
    url: url,
    async: false,
    data: {
      _fw_service_id: 'hanyu2PinYin',
      jsonData: PJF.util.json2str(conf)
    },
    success: function (data) {
      data.replace(/·/g, "");
      result = data;
    },
    failure: function (data) {
      new PJF.ui.messageBox({
        title: '失败',
        content: '转换拼音失败'
      });
    }
  })
  return result;
}
/*
 * 根据省市县编码去获得对应的邮政编码
 * conf传入的属性:
 * value:对应的省市县编码
 * success:成功的回调函数
 */
PJF.communication.getPostCode = function (conf) {
  conf.categoryId = 'p20015';
  conf.appId = 'p2015';
  conf.clcd = 'p2015';
  PJF.communication.getStandardCodeDescByValue(conf);
}
/*
 * 根据传入的城市地址返回对应的城市编码
 * conf传入属性:
 * address:城市地址
 * success:成功的回调函数
 */
PJF.communication.getCityCodeByDesc = function (conf) {
  var jsonData = {};
  //定义后台服务名
  var fw_id = 'parseAddress';
  //后台服务地址
  var action = 'ecpJson.action';
  jsonData.address = conf.address;

  var data = {};
  data._fw_service_id = fw_id;
  data.jsonData = PJF.util.json2str(jsonData);
  PJF.communication.ajax({
    data: data,
    async: false,
    url: action,
    success: conf.success

  });

}


/**
 * 预制卡自动销记
 * @param insId 所属机构号
 * @param tellerId 尾箱所属柜员号
 * @param pcsCrdSegments 欲销记的预制卡号段，支持多号段一次销记
 *                        格式：[{
 *                            IpOpR_PD_ID 预制卡卡种代码
 *                            Beg_Num 号段起始号（不包含校验位）
 *                            Cnt_Num 数量
 *                        },...]
 * @param succCallBack 成功回调函数
 */
PJF.communication.PcsCrdAutoWtof = function (insId, tellerId, pcsCrdSegments, succCallBack, failCallBack) {
  var param = {
    Blng_InsNo: insId,
    BnkTailBox_Blng_TrID: tellerId,
    Mnplt_Tp_Ind: '0', //销记
    Mnul_Ind: '0', //自动处理
    SEGMENT_GRP: pcsCrdSegments
  };
  new PJF.communication.cpsJsonReq({
    fwServiceId: 'simpleTransaction',
    fwTranId: 'A0791T847',
    jsonData: PJF.util.json2str(param),
    maskAll: true,
    success: function (data) {
      if (succCallBack) succCallBack(data);
      var cloneData = {};
      PJF.util.extend(true, cloneData, data);
      console.log("Call A0791T847 success,result type = [object], result value = [" + PJF.util.json2str(cloneData) + "]");
    },
    failure: function (data) {
      if (failCallBack) failCallBack(data);
      else {
        if (typeof data === "string") {
          console.log("Call A0791T847 fail,result type = [string], result value = [" + data + "]");
          new PJF.ui.messageBox({
            title: '错误',
            content: data
          });
        } else {
          var cloneData = {};
          PJF.util.extend(true, cloneData, data);
          console.log("Call A0791T847 fail,result type = [object], result value = [" + PJF.util.json2str(cloneData) + "]");
          new PJF.ui.errorMessageBox({
            title: '预制卡自动销记失败，请尝试手工销记',
            desc: data && data.BK_DESC,
            code: data && data.BK_CODE,
            traceId: data && data._COMMON && data._COMMON.SYS_EVT_TRACE_ID
          });
        }
      }
    }
  });
}
//PJF即时通讯模块，使用http(long-pulll)/websocket建立即时通讯的链接，同时暴露登录，查询，更新用户的接口，依赖strophe
// 命名空间
PJF.namespace('PJF.im');
//im的构造函数
PJF.im=function(conf){
	if(PJF.constants.termType ==="pc"){
		//判定pc客户端是否启动openfire组件
		var result = PJF.communication.client.doCommonCommand("cmdCfg","_SWC_IM_TP");
		if(result[1] === "1"){
			PJF.im = PJF.ecp.im; 
			return new PJF.ecp.im(conf);
		}
	}
	if(!conf.id||!conf.type){
		alert('PJF.im初始化出错,请传入id,type属性');
		return;
	}
	this.url = conf.url||PJF.constants.IM_URL;
	this.username=conf.id.toLowerCase()+conf.type;
	this.recMsgHandler = conf.recMsgHandler;
	this.offMsgHandler = conf.offMsgHandler;
	this.onlineStatusHandler = conf.onlineStatusHandler;
	this.chatMsgHandler=conf.chatMsgHandler;
	this.type = conf.type;
	this.orgCode = conf.orgCode;
	this.chatPresHandler=conf.chatPresHandler;
	this.inviteHandler = conf.inviteHandler;
	this.resources = "strophe";
	this.receiptHandler = conf.receiptHandler;
 
	this.ackHandler=conf.ackHandler;
	//默认retry,默认重试连接5次 ，重试间隔依失败次数递增，时间间隔为5s 10s 30s 1m 2m
	this.retry = !(conf.retry===false);
	this.retryCount = 0; 
	this.MaxRetryCount = 5;
	this.retryTimeSpan = [5,10,30,60,120];	
	this.lastError = "";
	var me = this;

	this.messageSendAckHandler = function (stanza) {
	    if ("message" == stanza.nodeName) { 
			var msgBodyElems = stanza.getElementsByTagName('body');
    		var msgPicElems = stanza.getElementsByTagName('pic');
    		if(msgBodyElems.length == 0 && msgPicElems.length == 0){
				//normal message should contian a body or pic node
				return;
			}
			if(me.ackHandler)
				try{
					var id = stanza.getAttribute("id");
					var tojId = stanza.getAttribute("to");
					me.ackHandler(id,Strophe.getNodeFromJid(tojId));
				}catch(error){
					//忽略异常，防止正常处理流程断开
				}
	    }
	}; 

	Strophe.log = function(level,msg){
		//记录Strophe输出的错误信息
		if(level == 3){
			me.lastError = msg;
		}
	};

	var reportConnError = function(errorCode , error){
		var condition = {};
		condition._fw_service_id = "remoteDatabaseTransaction";
		condition.transaction_id = "update";
		condition._sql_id = "im.addErrorInfo";
		condition._db_no = "1";
		var jsonData = {
			'im_id':me.username,
			'error_reason':errorCode,
			'param_remark':error+"["+me.lastError+"]",
			'create_time':PJF.util.formatDate(new Date(),"yyyy-MM-dd HH:mm:ss")};
		
		condition.jsonData = JSON.stringify(jsonData);
		$.ajax({
			data :condition,
			dataType:"json",
			url:'ecpJson.action',
			success:function(data){
				if(data.BK_STATUS == "00"){
					console.log('上报连接错误状态成功');
				}else if (data.BK_STATUS =="01"){
					console.log('上报连接错误状态异常:'+data);
				}
			},
			error:function(jq,ts,error){
				console.log('上报连接错误状态异常'+ error);}
		});
	};
	
	var onConnect = function(status){
		if (status == Strophe.Status.CONNECTING) 
		{	
			console.log('即时通讯正在连接');
			PJF.event.publish(PJF.constants.IM_CONNECTING_EVENT);
	    } 
		else if (status == Strophe.Status.CONNFAIL) {
		   console.log('即时通讯连接失败');
		   //上报连接异常		   
			reportConnError(status,'即时通讯连接失败:'+ me.url);			
		   if(me.retry && me.retryCount < me.MaxRetryCount - 1 ){		
			   me.retryCount = me.retryCount + 1;
			   setTimeout(function(){
					me.connection.connect(me.username+'@'+me.domainName+'/'+me.resources,PJF.constants.DEF_IM_PASSWORD,onConnect);
			   }, me.retryTimeSpan[me.retryCount]*1000);

		   }else
		   {
			   PJF.event.publish(PJF.constants.IM_CONNECT_FAIL);
		   }
	    } 
		else if (status == Strophe.Status.DISCONNECTING) {
			console.log('即时通讯正在断开');
			PJF.event.publish(PJF.constants.IM_DISCONNECTING_EVENT);
	    } 
		else if (status == Strophe.Status.DISCONNECTED) {
			console.log('即时通讯已断开');
			PJF.event.publish(PJF.constants.IM_DISCONNECTED_EVENT);
	    }
	    else if (status == Strophe.Status.AUTHFAIL) {
			console.log('用户验证失败');			 
			var errorInfo  = "用户验证失败:[user->"+me.username+'@'+me.domainName+"/pwd->"+PJF.constants.DEF_IM_PASSWORD+"]";
			reportConnError(status,errorInfo);
			PJF.event.publish(PJF.constants.IM_CONNECT_AUTHFAIL);	
		} 
		else if (status == Strophe.Status.CONNTIMEOUT){
			//http 连接超时，ws连接超时不走这
			console.log('连接超时');
			reportConnError(status,"连接超时:"+me.url);
		}else if (status == Strophe.Status.ERROR){
			//未知异常
			reportConnError(status,"未知异常");
		}
		else if (status == Strophe.Status.CONNECTED) {
			console.log('即时通讯已连接');
			me.retryCount = 0;
			PJF.event.publish(PJF.constants.IM_CONNECTED_EVENT);
			//默认开启stream-management 确认回复    	
			if(me.ackHandler){
				me.connection.streamManagement.enable();      
				me.connection.streamManagement.sendCountOnEveryIncomingStanza = true;
				me.connection.streamManagement.requestResponseInterval = 1; 	
			}			
			var handleMessage = function(msg) {  
			    var to = msg.getAttribute('to');  
			    var from = msg.getAttribute('from');  
			    var type = msg.getAttribute('type');
			    var pic = msg.getElementsByTagName('pic');  
			    var elems = msg.getElementsByTagName('body');  
			    //处理消息类型为异常的情况
			    if(type == "error"){
			    	 console.info("服务器返回异常消息"+Strophe.serialize(msg));
			    	 return;
				}
			    var offDuration = 0 ;
				var delay = msg.getElementsByTagName('delay');
				if(delay.length > 0){
					var duration = delay[0].getAttribute("duration");
					offDuration = parseInt(duration);
				}
			    
			    if (elems.length > 0) {  
				    var body = elems[0];
				    var content = Strophe.getText(body);
			    	console.log('即时通信：目标:'+to+',内容:'+content+',来自于:'+from+',消息类型:'+type)
			    	//如果收到的消息不是当前组，则不处理消息
			    	if(type=='groupchat'&&(to!=me.orgCode+me.type)){
			    		return;
			    	}
				    //消息为离线消息且存在offMessageHandler
					if(offDuration > 0 && me.offMsgHandler){
						//离线消息
						me.offMsgHandler(content,from,to,type,pic,offDuration);
					}else{
				    if(me.recMsgHandler){
				    	me.recMsgHandler(content,from,to,type,pic);				    	
						}
				    }
				    return;
				}
				//聊天室逻辑				
			    var xs = msg.getElementsByTagName("x");
			    var room = null;
			    var reason = null;
			    var inviter = null;			    
			    for (var i = 0; i < xs.length; i++) {
			    	var xmlns = xs[i].getAttribute("xmlns");
			        if (xmlns == "jabber:x:conference") {
			        	room = xs[i].getAttribute("jid");
			        }
			        if (xmlns == Strophe.NS.MUC_USER) {
			        	var inviteEle = xs[i].getElementsByTagName("invite")[0];
			            inviter = inviteEle.getAttribute("from");
			            reason = Strophe.getText(inviteEle.firstElementChild);
			        }
			    }
			    if(room != null){
			    	//收到邀请加入聊天室
			    	//通知应用收到邀请
			    	if(inviteHandler){
						me.inviteHandler(room,inviter,reason);
					}
				    var nickName = Strophe.getNodeFromJid(me.connection.jid);
				    me.connection.muc.join(room, nickName, function (s, r) {
				    	try {
				    		console.info(Strophe.serialize(s));
							var from = s.getAttribute("from");
							var room = Strophe.getBareJidFromJid(from);
							var memeber = Strophe.getResourceFromJid(from);
							var msg = Strophe.getText(s.getElementsByTagName("body")[0]);
							var pic = s.getElementsByTagName('pic'); 
							if(me.chatchatMsgHandler){
								me.chatMsgHandler(room,memeber,msg,pic);    
							}
				    	} catch (error) {
				    		console.error(error);
						}
						return true;
						}, function (s, r) {
							try{
								console.info(Strophe.serialize(s));
								var from = s.getAttribute("from");
								var room = Strophe.getBareJidFromJid(from);
								var memeber = Strophe.getResourceFromJid(from);
								var type = s.getAttribute("type");	
								var status = (type != "unavailable");
								if(me.chatPresHandler){
									me.chatPresHandler(room,memeber,status);
				                };
							}catch(error){
								console.error(error);
							}
			                return true;  
						},function (s, r) { return true; });
			    }
			};
			
			var handleMessageInvoker = function(stanza){
				//防止handlerMessage处理消息时异常导致handler被移除，后续消息不能正常接收的问题
				try{
					handleMessage(stanza);
				}catch(error){
					console.error(error);
				}
				return true;
			};

			me.connection.addHandler(handleMessageInvoker, null, 'message', null, null,  null);
			var handlePreInvoker = function(stanza){
				try{
					var from = stanza.getAttribute("from");
					var to = stanza.getAttribute("to");
					//忽略自已的presence
					if (to == from) {
						return true;
					}
					var type = stanza.getAttribute("type");
					//默认类型为available
					if(!type){
						type = "available";
					} 
					switch (type) {
						case "available":
							//好友或组成员上线
							if(me.onlineStatusHandler)
								me.onlineStatusHandler(Strophe.getNodeFromJid(from),true);
							break;
						case "unavailable":
							//好友或组成员下线
							if(me.onlineStatusHandler)
								me.onlineStatusHandler(Strophe.getNodeFromJid(from),false);
							break;
						case "subscribe":
							//接收到状态订阅请求
							break;
						case "subscribed":
							//订阅他人状态成功
							break;
						case "unsubscribe":
							//他人取消对我状态的订阅
							break;						
						default:
							//未知presence类型
							break;
						}
					
				}catch(error){
					console.error(error);
				}
				return true;
			}
			me.connection.addHandler(handlePreInvoker , null , 'presence', null , null , null);
			me.connection.send($pres().tree());
	    }
	};


	var createGn = function(groupName){
		$.ajax({
			url:PJF.constants.IM_HTTP_URL+'/plugins/restapi/v1/users/'+me.username+'/groups/'+groupName,
			data:null,
			type:'POST',
			beforeSend:function(xhr){
				xhr.setRequestHeader('Authorization',PJF.constants.IM_REQ_AUTH);
				xhr.setRequestHeader('Accept','application/json');
				xhr.setRequestHeader('Content-Type','application/json');
			},
			success:function(data){
				console.log('即时通讯:当前用户组注册成功:'+conf.orgCode+me.type);
				me.connection = new Strophe.Connection(me.url);	
				if(me.receiptHandler){
					me.connection.receipts._resendCount = 0;
					me.connection.receipts.addReceiptHandler(function(stanza){
						stanza = stanza.tree();
						 var to = Strophe.getNodeFromJid(stanza.getAttribute('to'));					  
						 var elems = stanza.getElementsByTagName('body');
						 if (elems.length > 0) {   
							 var content = Strophe.getText(elems[0]);
						 }
						 me.receiptHandler(to,content,true);
					});				
					me.connection.receipts.addTimeoutHandler(function(stanza){
						stanza = stanza.tree();
						var to = Strophe.getNodeFromJid(stanza.getAttribute('to'));					 
						var elems = stanza.getElementsByTagName('body');
						 var content;
						 if (elems.length > 0) {   
							 content = Strophe.getText(elems[0]);
						 }
						 me.receiptHandler(to,content,false);
					});			
				}
				if(me.ackHandler){
					me.connection.streamManagement.returnWholeStanza = true;
					me.connection.streamManagement._acknowledgedStanzaListeners = [];
					me.connection.streamManagement.addAcknowledgedStanzaListener(me.messageSendAckHandler);					
				}
				me.connection.connect(me.username+'@'+me.domainName+'/'+me.resources,PJF.constants.DEF_IM_PASSWORD,onConnect);
			},
			error:function(jq, ts, error){
				var errorInfo = '即时通讯:当前用户组创建失败，失败原因:'+error;
				console.log(errorInfo);
				reportConnError(24,errorInfo)
				PJF.event.publish(PJF.constants.IM_CONNECT_FAIL);
			}	
		})
	};

	//1.获取domainName
	$.ajax({
		url:PJF.constants.IM_HTTP_URL+'/plugins/restapi/v1/system/properties/xmpp.domain',
		data:null,
		type:'GET',
		beforeSend:function(xhr){
			xhr.setRequestHeader('Authorization',PJF.constants.IM_REQ_AUTH);
			xhr.setRequestHeader('Accept','application/json');
		},
		success:function(data){
			me.domainName=data['@value'];
			console.log('即时通讯:domainName:'+me.domainName);
			var username = conf.id.toLowerCase()+conf.type;
			//2.查询当前用户是否存在
			$.ajax({
				url:PJF.constants.IM_HTTP_URL+'/plugins/restapi/v1/users/'+username,
				data:null,
				type:'GET',
				beforeSend:function(xhr){
					xhr.setRequestHeader('Authorization',PJF.constants.IM_REQ_AUTH);
					xhr.setRequestHeader('Accept','application/json');
				},
				success:function(data){
					//需要判断当前用户已有的组是否在当前岗位下（存在切换岗位机构号变化的情况）
					$.ajax({
						url:PJF.constants.IM_HTTP_URL+'/plugins/restapi/v1/users/'+username+'/groups',
						data:null,
						type:'GET',
						beforeSend:function(xhr){
							xhr.setRequestHeader('Authorization',PJF.constants.IM_REQ_AUTH);
							xhr.setRequestHeader('Accept','application/json');
						},
						success:function(data){
							if(data&&data.groupname){
								console.log('即时通讯:当前用户:'+username+',所属组'+PJF.util.json2str2(data));
								var gn=data.groupname;
								if((PJF.util.getType(gn)=='string'&&gn!=(me.orgCode+me.type))||
										(PJF.util.getType(gn)=='array'&&PJF.util.array.indexOf(gn,me.orgCode+me.type)<0)){
									console.log('即时通讯:当前用户:'+username+',所属组'+gn+'不在'+me.orgCode+me.type+'中,需要创建新组');
									createGn(me.orgCode+me.type);
								}
								
								else{
									me.connection = new Strophe.Connection(conf.url);									
									if(me.receiptHandler){
										me.connection.receipts._resendCount = 0;
										me.connection.receipts.addReceiptHandler(function(stanza){
											stanza = stanza.tree();
											 var to = Strophe.getNodeFromJid(stanza.getAttribute('to'));
											 var elems = stanza.getElementsByTagName('body');
											 if (elems.length > 0) {   
												 var content = Strophe.getText(elems[0]);
											 }
											 me.receiptHandler(to,content,true);
										},null,null,null);
										me.connection.receipts.addTimeoutHandler(function(stanza){
											stanza = stanza.tree();
											var to = Strophe.getNodeFromJid(stanza.getAttribute('to'));
											 var elems = stanza.getElementsByTagName('body');
											 var content;
											 if (elems.length > 0) {   
												 content = Strophe.getText(elems[0]);
											 }
											 me.receiptHandler(to,content,false);
										});
									}
									if(me.ackHandler){
										me.connection.streamManagement.returnWholeStanza = true;
										me.connection.streamManagement._acknowledgedStanzaListeners = [];
										me.connection.streamManagement.addAcknowledgedStanzaListener(me.messageSendAckHandler);										
									}
									me.connection.connect(username+'@'+me.domainName +'/'+me.resources,PJF.constants.DEF_IM_PASSWORD,onConnect);
								}
							}
						},
						error:function(jq, ts, error){
							var errorInfo = '即时通讯:当前用户组获取失败，失败原因:'+error;
							console.log(errorInfo);
							reportConnError(25,errorInfo);
							PJF.event.publish(PJF.constants.IM_CONNECT_FAIL);
						}
					})
				},
				error:function(jq, ts, error){
					//用户没有建立
					if(error=='Not Found'){
						console.log('即时通讯:当前用户没注册:'+conf.id.toLowerCase()+conf.type);
						//1.建立用户
						$.ajax({
							url:PJF.constants.IM_HTTP_URL+'/plugins/restapi/v1/users',
							data:'{"username":"'+username+'","password":"'+PJF.constants.DEF_IM_PASSWORD+'"}',
							type:'POST',
							beforeSend:function(xhr){
								xhr.setRequestHeader('Authorization',PJF.constants.IM_REQ_AUTH);
								xhr.setRequestHeader('Accept','application/json');
								xhr.setRequestHeader('Content-Type','application/json');
							},
							success:function(data){
								console.log('即时通讯:当前用户注册成功:'+username+',开始创建用户组:'+conf.orgCode+me.type);
								//2.创建group
								createGn(conf.orgCode+me.type);
							},
							error:function(jq, ts, error){
								var errorInfo = '即时通讯:当前用户创建失败，失败原因:'+error;
								console.log(errorInfo);
								reportConnError(22,errorInfo);
								PJF.event.publish(PJF.constants.IM_CONNECT_FAIL);
							}		
						});
					}else{
						var errorInfo = '即时通讯:查找用户失败，失败原因:'+error;
						console.log(errorInfo);
						reportConnError(23,errorInfo);
						PJF.event.publish(PJF.constants.IM_CONNECT_FAIL);
					}					
				}
				
			});
		},
		error:function(jq, ts, error){
			var errorInfo = '即时通讯:获取domainName失败,失败原因:'+error;
			console.log(errorInfo);
			reportConnError(21,errorInfo);
			PJF.event.publish(PJF.constants.IM_CONNECT_FAIL);
		}		
	});	
}

PJF.im.prototype={
	/*
	 * msg:需要传递的消息
	 * success:发送成功后的callback
	 * failure:发送失败后的callback
	 */
	sendMessageToAll:function(conf){
		$.ajax({
			url:PJF.constants.IM_HTTP_URL+'/plugins/restapi/v1/messages/users',
			data:'{"body":"'+conf.msg+'"}',
			type:'POST',
			beforeSend:function(xhr){
				xhr.setRequestHeader('Authorization',PJF.constants.IM_REQ_AUTH);
				xhr.setRequestHeader('Accept','application/json');
				xhr.setRequestHeader('Content-Type','application/json');
			},
			success:function(data){
				console.log('即时通讯:发送所有用户消息成功!');
				if(conf.success)
					conf.success();
			},
			error:function(jq, ts, error){
				console.log('即时通讯:发送所有用户消息失败!');
				if(conf.failure)
					conf.failure(jq,ts,error);
			}		
		});
	},
	isUserExist:function(username,callback){
		$.ajax({
				url:PJF.constants.IM_HTTP_URL+'/plugins/restapi/v1/users/'+username,
				data:null,
				type:'GET',
				beforeSend:function(xhr){
					xhr.setRequestHeader('Authorization',PJF.constants.IM_REQ_AUTH);
					xhr.setRequestHeader('Accept','application/json');
				},
				success:function(data){
					callback(true);
				},
				error:function(jq, ts, error){
					//用户没有建立
					callback(false);					
				}
				
			});
	},
	
	/*
	 * msg:需要传递的消息
	 * toIds:消息接收者ID列表
	 * success:发送成功后的callback
	 * failure:发送失败后的callback
	 */
	sendMessageToMany:function(conf){
		var params = {};
		params.many = conf.toIds;
		params.content = conf.msg;		
		$.ajax({
			url:PJF.constants.IM_HTTP_URL+"/plugins/restapi/v1/messages/many",
			data:JSON.stringify(params),
			type:'POST',
			beforeSend:function(xhr){
				xhr.setRequestHeader('Authorization',PJF.constants.IM_REQ_AUTH);
				xhr.setRequestHeader('Accept','application/json');
				xhr.setRequestHeader('Content-Type','application/json');
			},
			success:function(data){
				console.log('即时通讯:发送多人消息成功!');
				if(conf.success)
					conf.success();
			},
			error:function(jq, ts, error){
				console.log('即时通讯:发送多人消息失败!');
				if(conf.failure)
					conf.failure(jq,ts,error);
			}
		});
	},
	/*
	 * msg:需要传递的消息
	 * toId:消息接收方
	 * success:发送成功后的callback
	 * failure:发送失败后的callback
	 */
	sendMessageToUser:function(conf){
		var ele;
		var id = this.connection.getUniqueId();
		if(conf.pic){
			ele = $msg({ to: conf.toId+'@ygqd-im', type: 'chat',id : id }).c('body').t(conf.msg).up().c('pic').attrs({xmlns:'http://ccb.com.cn/protocol/picture'}).t(conf.pic);	
		}
		else
			ele = $msg({ to: conf.toId+'@ygqd-im', type: 'chat',id : id }).c('body').t(conf.msg);
		if(this.receiptHandler){
			this.connection.receipts.sendMessage(ele);
		}else{
			this.connection.send(ele);
		}
		return id;
	},

	addRoster:function(toId){
		var pres = $pres({to: toId+'@ygqd-im', type: "subscribe"});
		this.connection.send(pres)
	},

	/*
	 * msg:需要传递的消息
	 * group:消息接收群组
	 * success:发送成功后的callback
	 * failure:发送失败后的callback
	 */
	sendMessageToGroups:function(conf){
			var ele;
			if(conf.pic){
				ele = $msg({ to: conf.group+'@broadcast.ygqd-im', type: 'chat' }).c('body').t(conf.msg).up().c('pic').attrs({xmlns:'http://ccb.com.cn/protocol/picture'}).t(conf.pic).tree();
			}
			else
				ele = $msg({ to: conf.group+'@broadcast.ygqd-im', type: 'chat' }).c('body').t(conf.msg).tree();
    		this.connection.send(ele);
	},
	/*
	 *断开链接
	*/ 
	logout:function(){
		this.connection.disconnect();	
	},
	/*
	 *将当前用户加入到一个新的群组里面
	 *
	 */
	createGroup:function(groupName){

	},
	
	/*
	 * 得到用户在线状态
	 *@param userId:用户号
	 *@param success_cb:状态查询成功后回调 
	 *   	 @cb-param userId 查询的用户号
	 *       @cb-param status 查询的用户状态 true(在线)/false(离线)
	 *@param failure_cb:状态查询失败后回调
	 *       @cb-param reason 查询失败的原因 如ajax通讯失败/给定的userid不存在等
	 */
	getUserStatus:function(userId,success_cb,failure_cb){
		if(success_cb == null){
			success_cb = function(u,s){
				console.info(u+" status is :"+ s?"online":"offline");
				};		
		}
		
		if(failure_cb == null){
			failure_cb = function(r){console.warn(r);};
		}
		
		$.ajax({
				url:PJF.constants.IM_HTTP_URL+'/plugins/presence/status?type=xml&jid='+userId+'@'+this.domainName,
				type:'GET',
				success:function(data){
					var stanza = data.firstChild;
			        var type = stanza.getAttribute("type");
			        if (type == "error") {
			        	failure_cb("user not exists!");
			            return;
			        }else if (type == "unavailable") {
			        	success_cb(userId,false);
			        }else{
			        	success_cb(userId,true);
			        }
			        
			        
				},
				error:function(jq, ts, error){
					console.log('即时通讯:获取'+userId+'失败');
					if(failure)
						failure_cb("http request error");
				}		
			});
	},
	/*
	 *创建聊天室
	 *返回创建的聊天室id
	 *@param success_cb:创建成功后的callback
	 *@param error_cb:创建失败后的callback
	 */
	createRoom:function( success_cb, error_cb){		

		var nickName = Strophe.getNodeFromJid(this.connection.jid);		
	    //保存房间名唯一
	    var room = nickName+"-" + Strophe.getUniqueId() + "@conference.ygqd-im";
	    var me = this;
	    this.connection.muc.join(room, nickName, function (s, r) {
					    	try {
					    		console.info(Strophe.serialize(s));
								var from = s.getAttribute("from");
								var room = Strophe.getBareJidFromJid(from);
								var memeber = Strophe.getResourceFromJid(from);
								var msg = Strophe.getText(s.getElementsByTagName("body")[0]);
								var pic = s.getElementsByTagName('pic'); 
								me.chatMsgHandler(room,memeber,msg,pic);    
					    	} catch (error) {
					    		console.error(error);
							}
							return true;
			                    
		                }, function (s, r) { 
		                	try{
								console.info(Strophe.serialize(s));
								var from = s.getAttribute("from");
								var room = Strophe.getBareJidFromJid(from);
								var memeber = Strophe.getResourceFromJid(from);
								var type = s.getAttribute("type");	
								var status = (type != "unavailable");
								if(me.chatPresHandler){
									me.chatPresHandler(room,memeber,status);
				                };
							}catch(error){
								console.error(error);
							}
			                return true;  
		                },function (s, r) {return true; });

		this.connection.muc.createInstantRoom(room, success_cb, error_cb);
		
    	return room;
	},
	/*
	 *邀请用户进入聊天室
	 *@param 房间id
	 *@param 被邀请用户号
	 *@param 邀请原因
	 */
	inviteUserToRoom:function(room,userId,reason){
		this.connection.muc.invite(room, userId+'@ygqd-im', reason);
	},
	/*
	 *发送聊天室信息
	 *@param 房间id
	 *@param 消息内容
	 *
	 */
	sendRoomMsg:function(room,msg){
		this.connection.muc.groupchat(room, msg);
	},
	/**
	 * 设置个人信息键值对
	 * @param key 信息键 
	 * @param val  值
	 * @param success 设置成功的回调
	 * @param failed 设置失败的回调
	 */
	setInfo:function(key,val,success,failed){	
		var vCardIQ = $iq({type:'get'}).c("vCard").attrs({xmlns:'vcard-temp'});
		var setFailedHandler = function(){
			if(failed){
				failed();
			}
		};
		//读取当前个人信息
		this.connection.sendIQ(vCardIQ,function(stanza){
			stanza.removeAttribute("to");
			stanza.removeAttribute("id");
			stanza.setAttribute("type","set");
			var vCardEle = stanza.getElementsByTagName("vCard")[0];
			var keyEles = vCardEle.getElementsByTagName(key);
			if(keyEles.length > 0){
				vCardEle.removeChild(keyEles[0]);
			}
			var newKeyEle = Strophe.xmlElement(key);
			newKeyEle.append(val);
			vCardEle.appendChild(newKeyEle);
			//更新个人信息
			this.connection.sendIQ(stanza,function(s){
				if(success){
					success();
				}
			},function(s){
				console.log("设置个人信息失败,"+Strophe.serialize(s));
				setFailedHandler();
			},function(){
				console.log("设置个人信息超时");
				setFailedHandler();
			})
		},function(stanza){
			console.log("设置个人信息失败,"+Strophe.serialize(s));
			setFailedHandler();
		},function(){
			console.log("设置个人信息超时");
			setFailedHandler();
		});
	},
	/**
	 * 查询指定ID的个人信息键值
	 * @param 个人ID
	 * @param key 个人信息键
	 * @param success 查询个人信息成功回调function(val){},参数为查询成功的信息值，若Key对应的信息不存在，则返回空串
	 * @param failed 查询个人信息失败回调
	 */
	getInfo:function(id,key,success,failed){
		if(!id){
			id = conn.jid;
		}
		 if(id.indexOf("@") == -1){
			id = id + "@" + this.domainName;
		}  
		//查询个人信息
		var vCardIQ = $iq({type:'get',to:Strophe.getBareJidFromJid(id)}).c("vCard").attrs({xmlns:'vcard-temp'});
		this.connection.sendIQ(vCardIQ,function(stanza){
			var keyEles = stanza.getElementsByTagName(key);
			var val = "";
			if(keyEles.length > 0){
				val = Strophe.getText(keyEles[0]);
			}
			if(success){
				success(val);
			}               
		},function(stanza){
			console.log("获取个人信息失败,"+Strophe.serialize(s));
			if(failed){
				failed();
			}        
		},function(){
			console.log("获取个人信息超时");
			if(failed){
				failed();
			}
		});
	}
}
/*
 * 额外需要传递的信息,包括操作员信息以及机器信息等等
 */
PJF.communication.setEcpJsonParam = function(serviceId, tranId, data, needAdapterId, encryptDatas, sqlId, fmtPrintId, conf) {
	var myData = {};
	var enData = {};
	// 添加操作员信息
	fmtPrintId = fmtPrintId;
	myData = PJF.communication.addParam(myData);
	
	//如果传入了userCode属性，则用userCode覆盖
	if(conf.userCode)
		myData.OPER_CODE = conf.userCode;		
	myData._cli_sec_id = PJF.otherInfo.devId;
	myData.IS_SELF_SERVICE_BANK = true; //1214全国推送新回单
	PJF.otherInfo.devId && (myData.STM_DEV_ID = PJF.otherInfo.devId);
	if(PJF.util.deviceType.pad){
		myData.STM_DEV_ID = PJF.otherInfo.devId;
		myData.TXN_ELMT11 = PJF.userInfo.userCode;
	}
	PJF.otherInfo.MENU_ID && (myData.STM_MNU_ID = PJF.otherInfo.MENU_ID, myData._menu_id = PJF.otherInfo.MENU_ID);
	PJF.otherInfo.SVC_ID && (myData.STM_SVC_ID = PJF.otherInfo.SVC_ID);
	PJF.roleInfo.orgName && (myData.STM_INS_NAME = PJF.roleInfo.orgName);
	PJF.otherInfo.typeInfo && (myData.STM_DEV_TYPE = PJF.otherInfo.typeInfo);
	conf.IS_AUTH&&(myData.IS_AUTH = conf.IS_AUTH);
	conf.IS_SIGN&&(myData.IS_SIGN = conf.IS_SIGN);
	conf.cashTransaction && (myData.TXN_ITT_CHNL_CGY_CODE = PJF.otherInfo.cashChaType); //现金类交易用别的渠道编号
    conf.cashTransaction && (myData.TXN_ITT_CHNL_ID = PJF.otherInfo.cashChaId); //现金类交易用开机取回来的渠道id
    //conf.IS_SIGN&&(myData.SIGN_PIC_NAME = (PJF.otherInfo.SVC_ID + "_01.jpg"));
	conf.AUTH_OPER_CODE&&(myData.AUTH_OPER_CODE = conf.AUTH_OPER_CODE);
    PJF.otherInfo.transTime && (myData.STM_START_TXN_DT = PJF.otherInfo.transTime); //交易开始时间
    //记录身份审核操作员信息及可能存在的人脸识别相似度、人脸灰名单标志
    if(PJF.util.isExist('PJF.stm.idenAuth.idenAudit')){
        PJF.stm.idenAuth.idenAudit.STM_IDENTITY_AUDIT_CODE && (myData.STM_IDENTITY_AUDIT_CODE = PJF.stm.idenAuth.idenAudit.STM_IDENTITY_AUDIT_CODE);
        PJF.stm.idenAuth.idenAudit.STM_IDENTITY_AUDIT_NAME && (myData.STM_IDENTITY_AUDIT_NAME = PJF.stm.idenAuth.idenAudit.STM_IDENTITY_AUDIT_NAME);
        PJF.stm.idenAuth.idenAudit.STM_FACE_SMLR_DGR && (myData.STM_FACE_SMLR_DGR = PJF.stm.idenAuth.idenAudit.STM_FACE_SMLR_DGR + '|');
        PJF.stm.idenAuth.idenAudit.STM_FACE_BLACK && (myData.STM_FACE_BLACK = PJF.stm.idenAuth.idenAudit.STM_FACE_BLACK);
    }
    //记录面见审核操作员信息
    if(PJF.util.isExist('PJF.stm.faceAudit')){
        PJF.stm.faceAudit.STM_FACE_AUDIT_CODE && (myData.STM_FACE_AUDIT_CODE = PJF.stm.faceAudit.STM_FACE_AUDIT_CODE);
        PJF.stm.faceAudit.STM_FACE_AUDIT_NAME && (myData.STM_FACE_AUDIT_NAME = PJF.stm.faceAudit.STM_FACE_AUDIT_NAME);
        if(PJF.stm.faceAudit.STM_FACE_SMLR_DGR){
            if(myData.STM_FACE_SMLR_DGR) myData.STM_FACE_SMLR_DGR += PJF.stm.faceAudit.STM_FACE_SMLR_DGR;
            else myData.STM_FACE_SMLR_DGR = '|' + PJF.stm.faceAudit.STM_FACE_SMLR_DGR;
        }
    }

    //stm电子印章
    myData._elec_seal_switch = PJF.roleInfo._elec_seal_switch;
    myData._elec_seal_capability = true;

	//传身份审核的信息，如果是代办就传户主的，之所以不判断是否审核标志，因为有的是审核完了吐卡，就不保留审核标志了
	if(PJF.util.isExist('PJF.stm.idenAuth.selfCustInfo')){
		PJF.stm.idenAuth.selfCustInfo.idBack&&(myData.ID_BACK = PJF.stm.idenAuth.selfCustInfo.idBack);
		PJF.stm.idenAuth.selfCustInfo.idFront&&(myData.ID_FRONT = PJF.stm.idenAuth.selfCustInfo.idFront);
		PJF.stm.idenAuth.selfCustInfo.idPhoto&&(myData.ID_PHOTO = PJF.stm.idenAuth.selfCustInfo.idPhoto);		
		PJF.stm.idenAuth.selfCustInfo.name&&(myData.CUST_NM = PJF.stm.idenAuth.selfCustInfo.name);
		PJF.stm.idenAuth.selfCustInfo.identity&&(myData.CRDT_NO = PJF.stm.idenAuth.selfCustInfo.identity);
		PJF.stm.idenAuth.selfCustInfo.identity&&(myData.CRDT_TPCD = '1010');
        if(PJF.util.isExist('PJF.stm.idenAuth.custInfo')){
			PJF.stm.idenAuth.custInfo.name&&(myData.STM_AGENT_NAME = PJF.stm.idenAuth.custInfo.name);//代办人名称
		}
		
	}
	//非代办的
	else if(PJF.util.isExist('PJF.stm.idenAuth.custInfo')){
        if (PJF.stm.idenAuth.isNonIdentityAuth) {
            //非居民身份证
            PJF.stm.idenAuth.custInfo.psrBack&&(myData.ID_BACK = PJF.stm.idenAuth.custInfo.psrBack);
            PJF.stm.idenAuth.custInfo.psrFront&&(myData.ID_FRONT = PJF.stm.idenAuth.custInfo.psrFront);
            PJF.stm.idenAuth.custInfo.psrPhoto&&(myData.ID_PHOTO = PJF.stm.idenAuth.custInfo.psrPhoto);
            PJF.stm.idenAuth.custInfo.photo&&(myData.SNAP_FILE_NAME = PJF.stm.idenAuth.custInfo.photo);
            PJF.stm.idenAuth.custInfo.nativeName&&(myData.CUST_NM = PJF.stm.idenAuth.custInfo.nativeName);
            PJF.stm.idenAuth.custInfo.credID&&(myData.CRDT_NO = PJF.stm.idenAuth.custInfo.credID);
            PJF.stm.idenAuth.custInfo.tpcd&&(myData.CRDT_TPCD = PJF.stm.idenAuth.custInfo.tpcd);
        } else {
            PJF.stm.idenAuth.custInfo.idBack&&(myData.ID_BACK = PJF.stm.idenAuth.custInfo.idBack);
            PJF.stm.idenAuth.custInfo.idFront&&(myData.ID_FRONT = PJF.stm.idenAuth.custInfo.idFront);
            PJF.stm.idenAuth.custInfo.idPhoto&&(myData.ID_PHOTO = PJF.stm.idenAuth.custInfo.idPhoto);
            PJF.stm.idenAuth.custInfo.photo&&(myData.SNAP_FILE_NAME = PJF.stm.idenAuth.custInfo.photo);
            PJF.stm.idenAuth.custInfo.name&&(myData.CUST_NM = PJF.stm.idenAuth.custInfo.name);
            PJF.stm.idenAuth.custInfo.identity&&(myData.CRDT_NO = PJF.stm.idenAuth.custInfo.identity);
            PJF.stm.idenAuth.custInfo.identity&&(myData.CRDT_TPCD = '1010');
        }
	}	


	//这里如果是插卡的, 用卡客户信息来覆盖，因为可能传了上一个人的身份证信息
	if(PJF.stm.util && PJF.stm.util.hasInsertedCard && PJF.stm.util.hasInsertedCard(true, true)){
		PJF.stm.CUSTOM_INFO.Idv_Lgl_Nm&&(myData.CUST_NM = PJF.stm.CUSTOM_INFO.Idv_Lgl_Nm);
		PJF.stm.CUSTOM_INFO['Crdt_No']&&(myData.CRDT_NO = PJF.stm.CUSTOM_INFO['Crdt_No']);
		PJF.stm.CUSTOM_INFO['Crdt_TpCd']&&(myData.CRDT_TPCD = PJF.stm.CUSTOM_INFO['Crdt_TpCd']);
                PJF.stm.CUSTOM_INFO['Cst_ID']&&(myData.CUST_ID = PJF.stm.CUSTOM_INFO['Cst_ID']);
        }
	else if(PJF.stm.util && PJF.stm.util.hasInsertedCardCor && PJF.stm.util.hasInsertedCardCor()){
		PJF.stm.CUSTOM_INFO_COR.CrdHldr_Nm&&(myData.CUST_NM = PJF.stm.CUSTOM_INFO_COR.CrdHldr_Nm);
		PJF.stm.CUSTOM_INFO_COR.CrdHldr_Crdt_No&&(myData.CRDT_NO = PJF.stm.CUSTOM_INFO_COR.CrdHldr_Crdt_No);
		PJF.stm.CUSTOM_INFO_COR.CrdHldr_Crdt_TpCd&&(myData.CRDT_TPCD = PJF.stm.CUSTOM_INFO_COR.CrdHldr_Crdt_TpCd);
	}
	//TODO 这里有个问题，身份证的图片之类的可能还是用的之前的...

    //刁老师他们要的   
    var isIdentity = (PJF.util.isExist('PJF.stm.idenAuth.selfCustInfo') || PJF.util.isExist('PJF.stm.idenAuth.custInfo')) && !PJF.stm.idenAuth.faceCheck;
    var isCard = PJF.stm.util && ((PJF.stm.util.hasInsertedCard && PJF.stm.util.hasInsertedCard(false, true)) || PJF.stm.util.hasInsertedCardCor && PJF.stm.util.hasInsertedCardCor());
    var isPassbook = (PJF.stm.IC_CARD_INFO && PJF.stm.IC_CARD_INFO.isPassbook) || PJF.util.isExist('PJF.stm.PASSBOOK_INFO');
    var isFromFace = PJF.util.isExist('PJF.stm.idenAuth') && PJF.stm.idenAuth.fromFace && !PJF.stm.idenAuth.faceCheck;

    if(isIdentity && isCard){
    	myData.ACCT_TYPE = '3';//身份证+卡
    	myData.ACCT_TYPE_DESC = '卡证';
    }
    else if(isIdentity && isPassbook){
    	myData.ACCT_TYPE = '4';//身份证+折
    	myData.ACCT_TYPE_DESC = '折证';
    }
    else if(isPassbook){
    	myData.ACCT_TYPE = '0'; //仅折
    	myData.ACCT_TYPE_DESC = '存折';
    }
    else if(isCard){
    	myData.ACCT_TYPE = '1'; //仅卡
    	myData.ACCT_TYPE_DESC = '卡';
    }
    else if(isIdentity){
    	myData.ACCT_TYPE = '2'; //仅身份证
    	myData.ACCT_TYPE_DESC = '身份证';
    }
    else{
    	myData.ACCT_TYPE = '5'; //其他
    	myData.ACCT_TYPE_DESC = '其他';
    }

    if (isFromFace) {
        myData.ACCT_TYPE = '6'; //刷脸
        myData.ACCT_TYPE_DESC = '刷脸';
	}

	if (PJF.util.isExist('PJF.stm.idenAuth') && PJF.stm.idenAuth.authAfterFace) {
        myData.ACCT_TYPE = '7'; //脸证
        myData.ACCT_TYPE_DESC = '脸证';
	}
    //王亮他们的需要
    if(PJF.util.deviceType.stm){
    	myData.STM_LOCAL_CHNL = PJF.util.deviceType.tcr ? '2' : (PJF.util.deviceType.icm ? '3' : '1');
    }
    else{
    	myData.STM_LOCAL_CHNL = PJF.util.deviceType.pad ? '5' : '4';
    }
    conf.cashTransaction ? (myData.STM_LOCAL_CHNL += '2') : (myData.STM_LOCAL_CHNL += '1');

	// 加密处理
	if (encryptDatas) {
		var dataObj;
		if (data == '') dataObj = {};
		else dataObj = eval('(' + data + ')')
		for (var a = 0; a < encryptDatas.length; a++) {
			var key = encryptDatas[a];
			if (dataObj[key]) {
				var result = PJF.communication.client.encryptParam(dataObj[key]);
				if (result[0] == 0) enData[key] = result[1]
			}
		}
	}

	if (PJF.util.getType(data) == 'string' && data != '') {
		data = eval('(' + data + ')');
	}
	// 避免集中授权中data带了旧的ATCH_BTCH_NO导致重复交易
	if (myData.ATCH_BTCH_NO && data) data.ATCH_BTCH_NO = myData.ATCH_BTCH_NO;
	myData = PJF.apply(myData, data);

	//凭证需要的身份审核相关图片
	myData.STM_IDPHOTOS = myData.STM_IDPHOTOS || [];
	myData.STM_PIC_PATH = PJF.otherInfo.picPath + PJF.otherInfo.devId + '/IMAGE/';
	if(PJF.util.isExist('PJF.stm.idenAuth.selfCustInfo')){
		var master = PJF.stm.idenAuth.selfCustInfo;
		myData.STM_IDPHOTOS = myData.STM_IDPHOTOS.concat([master.idBack,master.idFront,master.idPhoto]);
	}
	if(PJF.util.isExist('PJF.stm.idenAuth.custInfo')){
		var iden = PJF.stm.idenAuth.custInfo;
        if (PJF.stm.idenAuth.isNonIdentityAuth) {
            //非居民身份证
            myData.STM_IDPHOTOS = myData.STM_IDPHOTOS.concat([iden.psrBack,iden.psrFront,iden.psrPhoto,iden.photo]);
        } else {
            myData.STM_IDPHOTOS = myData.STM_IDPHOTOS.concat([iden.idBack,iden.idFront,iden.idPhoto,iden.photo]);
        }
	}
	myData.STM_IDPHOTOS = myData.STM_IDPHOTOS.join(',');

	// 把加密的加上
	myData = PJF.apply(myData, enData);
	
	var macContent = '';
	if (PJF.otherInfo && PJF.otherInfo.txnList && PJF.util.array.indexOf(PJF.otherInfo.txnList, tranId) > -1) {
		var macResult = PJF.communication.client.macContent(PJF.util.json2str(myData))
		if (macResult[0] == 0) {
			macContent = macResult[1];
		}
	}
	if (conf && conf.coverJsonData) {
		PJF.apply(myData, conf.coverJsonData)
	}
	var resultData;
	if (needAdapterId) resultData = {
		'adapterId': 'ecpJsonStm',
		'_fw_service_id': serviceId,
		'jsonData': PJF.util.json2str(myData),
		'transaction_id': tranId,
		'macData': macContent
	};
	else resultData = {
		'_fw_service_id': serviceId,
		'jsonData': PJF.util.json2str(myData),
		'transaction_id': tranId,
		'macData': macContent
	};
	if (sqlId) resultData._sql_id = sqlId;
	if (fmtPrintId) resultData.fmtPrintId = fmtPrintId;
	if (conf) {
		conf.docType && (resultData.docType = conf.docType);
		conf.transFlag && (resultData.transFlag = conf.transFlag);
		conf.serverFilePath && (resultData.serverFilePath = conf.serverFilePath);
		conf.remotePath && (resultData.remotePath = conf.remotePath);
	}
	resultData.REQ_LANG = CLIENT_LANGUAGE;
	return resultData;
}
PJF.communication.getHostStmSeqNo = function(conf){

	var data = {};
	data._fw_service_id = "getStmSvcNo";
	//data.adapterId = 'ecpJsonStm';
	data.jsonData=PJF.util.json2str({STM_DEV_ID:PJF.otherInfo.devId,_menu_id:conf || PJF.otherInfo.MENU_ID});
	var result = "";
	PJF.communication.ajax({
		data: data,
		async: false,
		url: 'ecpJson.action',
		success: function(data){
			result = data.hostTimeSeqNo;
		}
	})
	return result;
}
/*
*PJF.communication.returnCardTrade = function(conf){
	var data = {};
	data._fw_service_id = "returnCardTrade";
	data.adapterId = 'ecpJsonStm';
	data.jsonData = PJF.util.json2str({
		devId:PJF.otherInfo.devId,
		result:conf.result,
		_spl_log_mapping:"returnCardTrade"
	})
	console.log('returnCardTrade发送请求:' + data.jsonData);
	PJF.communication.ajax({
		data: data,
		async: conf.async,
		url: PJF.constants.DEFAULT_ACTION,
		success: function(data){
			console.log('returnCardTrade返回结果:' + JSON.stringify(data));
		}
	})
}
*/

//发送交易到pad呼叫大堂来处理
PJF.communication.callPad = function(conf,fnSuc,fnFail){
    var json = {};

    json.INS_ID = PJF.roleInfo.orgCode;//机构号
    json.DEV_ID = PJF.otherInfo.devId;//设备号
    json.CALL_FLAG = '1';//是否呼叫
    json.CALL_DATE = PJF.communication.getServerTime() || PJF.util.formatDate(new Date(), 'yyyyMMdd');//呼叫日期
    json.CALL_TIM = PJF.communication.getServerTime('HHmmss') || PJF.util.formatDate(new Date(), 'hhmmss');//呼叫时间
    json.BUSI_NM = conf.busiName;//业务名称描述
    json.CUST_NM = conf.custName || (PJF.stm.idenAuth.custInfo ? PJF.stm.idenAuth.custInfo.name : "");//客户姓名
    json.CUST_ID = conf.custId || (PJF.stm.idenAuth.custInfo ? PJF.stm.idenAuth.custInfo.identity : "");//客户号
    json.DEAL_STA = '0';//处理状态
    json.BUSI_TYPE = conf.busiType || '2';//业务类型
    if(conf.dealContent){
        json.DEAL_CONTENT = JSON.stringify(conf.dealContent);
    }
    console.log('插入呼叫表参数为'+ JSON.stringify(json));
    var url = PJF.constants.AUTH_SERVER + '/bosWeb/ecpJson.action';
    var reqDataStr = "jsonData="+JSON.stringify(json)+"&_fw_service_id=databaseTransaction"+"&transaction_id=update"+"&_sql_id=stm.checkCall";
    //跨域
    PJF.communication.Http.SendCrossDomainRequest(url,reqDataStr,30000,function(status,responseData){
        console.log('跨域返回结果,status:'+status+';responseData:'+responseData);
        status = JSON.parse(status);
        if(status.success && responseData){
            responseData = JSON.parse(responseData);
            if (responseData && responseData.BK_STATUS && (responseData.BK_STATUS == PJF.constants.BK_CODE_SUCCESS)) {
                console.log(conf.busiName + '，插入呼叫表成功');
                if(json.BUSI_TYPE == '2') PJF.stm.util.imHandler && PJF.stm.util.imHandler('警告类');
                fnSuc && (typeof fnSuc == 'function') && fnSuc(responseData);
            }else{
                console.log(conf.busiName + '，插入呼叫表失败');
                fnFail && (typeof fnFail == 'function') && fnFail(responseData);
            }
        }else{
            console.log(conf.busiName + '，插入呼叫表，通信失败');
            fnFail && (typeof fnFail == 'function') && fnFail(status.error);
        }
    });
};

PJF.communication.returnCardTrade = function(conf){
	var data = {};
	data._fw_service_id = "returnCardTrade";
	//data.adapterId = 'ecpJsonStm';
	data.jsonData = PJF.util.json2str({
		devId:PJF.otherInfo.devId,
		result:conf.result
	})
	console.log('returnCardTrade发送请求:' + data.jsonData);
	PJF.communication.ajax({
		data: data,
		async: conf.async,
		url: 'ecpJson.action',
		success: function(data){
			console.log('returnCardTrade返回结果:' + JSON.stringify(data));
		}
	})
}

PJF.communication.returnKeyTrade = function(conf){
	var data = {};
	data._fw_service_id = "returnKeyTrade";
	//data.adapterId = 'ecpJsonStm';
	data.jsonData = PJF.util.json2str({
		devId:PJF.otherInfo.devId,
		result:conf.result
	})
	console.log('returnKeyTrade发送请求:' + data.jsonData);
	PJF.communication.ajax({
		data: data,
		async: conf.async,
		url: 'ecpJson.action',
		success: function(data){
			console.log('returnKeyTrade返回结果:' + JSON.stringify(data));
		}
	})
}

PJF.communication.returnCard = function(conf){
	var jsonData = {};
	PJF.otherInfo.devId && (jsonData.devId = PJF.otherInfo.devId);
	PJF.roleInfo.orgCode && (jsonData.insId = PJF.roleInfo.orgCode);
	jsonData.ourbnkCrdInd = jsonData.ourbnkCrdInd || '0' // 他行卡
	if(PJF.stm.IC_CARD_INFO_BAK && PJF.stm.IC_CARD_INFO_BAK.resInfo){
		jsonData.ourbnkCrdInd = '1'
		PJF.stm.IC_CARD_INFO_BAK.resInfo.accountNo && (jsonData.accountNo = PJF.stm.IC_CARD_INFO_BAK.resInfo.accountNo);
		PJF.stm.CUSTOM_INFO_BAK.Idv_Lgl_Nm && (jsonData.customerName = PJF.stm.CUSTOM_INFO_BAK.Idv_Lgl_Nm);
		PJF.stm.CUSTOM_INFO_BAK.Crdt_TpCd && (jsonData.certType = PJF.stm.CUSTOM_INFO_BAK.Crdt_TpCd);
		PJF.stm.CUSTOM_INFO_BAK.Crdt_No && (jsonData.identityCardno = PJF.stm.CUSTOM_INFO_BAK.Crdt_No);		
	}else if(PJF.stm.IC_CARD_INFO_COR_BAK && PJF.stm.IC_CARD_INFO_COR_BAK.resInfo){
        //对公结算卡
        PJF.stm.IC_CARD_INFO_COR_BAK.resInfo.accountNo && (jsonData.accountNo = PJF.stm.IC_CARD_INFO_COR_BAK.resInfo.accountNo);
        PJF.stm.CUSTOM_INFO_COR_BAK.Idv_Lgl_Nm && (jsonData.customerName = PJF.stm.CUSTOM_INFO_COR_BAK.Idv_Lgl_Nm);
        PJF.stm.CUSTOM_INFO_COR_BAK.Crdt_TpCd && (jsonData.certType = PJF.stm.CUSTOM_INFO_COR_BAK.Crdt_TpCd);
		PJF.stm.CUSTOM_INFO_COR_BAK.Crdt_No && (jsonData.identityCardno = PJF.stm.CUSTOM_INFO_COR_BAK.Crdt_No);
		jsonData.ourbnkCrdInd = '1'
    }
	var date = PJF.util.formatDate(new Date(),'yyyyMMddhhmmss');
	jsonData.operateDate = date.substr(0,8);
	jsonData.operateTime = date.substr(8);
	jsonData.insName = PJF.roleInfo.orgName
	jsonData.recycleType = conf.recycleType || '9'
	console.log('insertStmCardRecycle发送请求:'+JSON.stringify(jsonData));
	PJF.communication.cpsJsonReq({
		jsonData : PJF.util.json2str(jsonData),
		//maskAll : true,
		fwServiceId : 'p8DatabaseTransaction',
		fwTranId : 'update',
		sqlId : 'stm.insertStmCardRecycle',
		success : function(data) {
			console.log('insertStmCardRecycle业务吞卡返回结果:'+JSON.stringify(data));
		},
		failure : function(data) {
			console.log('insertStmCardRecycle业务吞卡返回结果:'+JSON.stringify(data));
		}
	});
	PJF.communication.addSwallowCardRecord(jsonData)
}

PJF.communication.addSwallowCardRecord = function(jsonData) {

	PJF.communication.ajax({
		url: 'ecpJson.action',
		safe: true,
		data: {
			jsonData: jsonData,
			_fw_service_id: 'stm.addSwallowCardRecord'	
		},
		success: function (data) {
			console.log('外来吞卡stm.addSwallowCardRecord返回结果', JSON.stringify(data))
		},
		failure: function (jq, ts, err) {

		}
	})
}

PJF.communication.setSendCardSate=function(conf){
	var jsonData = {};
	var data = {};

	data._fw_service_id = 'setSendCardSate';
	PJF.otherInfo.devId && (jsonData.devId = PJF.otherInfo.devId);
	conf.devCardNo && (jsonData.devCardNo = conf.devCardNo);
	conf.devCardBoxNo && (jsonData.devCardBoxNo = conf.devCardBoxNo);
	conf.sendingCardNo  && (jsonData.sendingCardNo  = conf.sendingCardNo );
	data.jsonData = PJF.util.json2str(jsonData);
	//data.adapterId = 'ecpJsonStm';
	console.log('setSendCardSate发送请求:'+data.jsonData);
	PJF.communication.ajax({
		data: data,
		async: conf.async,
		url: 'ecpJson.action',
		success: function(data){
			console.log('setSendCardSate返回结果:' + JSON.stringify(data));
		}
	})
}

PJF.communication.setSendKeySate=function(conf){
	var jsonData = {};
	var data = {};

	data._fw_service_id = 'setSendKeySate';
	PJF.otherInfo.devId && (jsonData.devId = PJF.otherInfo.devId);
	conf.devKeyNo && (jsonData.devKeyNo = conf.devKeyNo);
	conf.devKeyBoxNo && (jsonData.devKeyBoxNo = conf.devKeyBoxNo);
	conf.sendingKeyNo  && (jsonData.sendingKeyNo  = conf.sendingKeyNo);
	data.jsonData = PJF.util.json2str(jsonData);
	//data.adapterId = 'ecpJsonStm';
	console.log('setSendKeySate发送请求:'+data.jsonData);
	PJF.communication.ajax({
		data: data,
		async: conf.async,
		url: 'ecpJson.action',
		success: function(data){
			console.log('setSendKeySate返回结果:' + JSON.stringify(data));
		}
	})
}

PJF.communication.sendCardTrade = function(conf){
	var jsonData = {};
	var data = {};

	data._fw_service_id = 'sendCardTrade';
	data.jsonClass = 'com.ccb.p2.stm.localManagement.moder.CardTrade';
	PJF.otherInfo.devId && (jsonData.devId = PJF.otherInfo.devId);
	conf.cardTypeId && (jsonData.cardTypeId = conf.cardTypeId);
	conf.devCardNo && (jsonData.devCardNo = conf.devCardNo);
	conf.devCardBoxNo && (jsonData.devCardBoxNo = conf.devCardBoxNo);
	conf.tranType && (jsonData.tranType = conf.tranType);
	conf.cardNo && (jsonData.cardNo = conf.cardNo);
	conf.sendType && (jsonData.sendType = conf.sendType);
	conf.customerName && (jsonData.customerName = conf.customerName);
	conf.certType && (jsonData.certType = conf.certType);
	conf.identityCardNo && (jsonData.identityCardNo = conf.identityCardNo);
	conf.operateDate && (jsonData.operateDate = conf.operateDate);
	conf.operateTime && (jsonData.operateTime = conf.operateTime);
	conf.cardMediaId && (jsonData.cardMediaId = conf.cardMediaId);
	conf.depositAmt && (jsonData.depositAmt = conf.depositAmt);
	PJF.otherInfo.SVC_ID && (jsonData.transerialNo = PJF.otherInfo.SVC_ID);
    data.jsonData = PJF.util.json2str(jsonData);
    //data.adapterId = 'ecpJsonStm';
	PJF.communication.ajax({
		data: data,
		async: conf.async,
		url: 'ecpJson2BeanRaw.action',
		success: function(data){
			console.log('sendCardTrade返回结果:' + JSON.stringify(data));
		}
	})

}

PJF.communication.sendKeyTrade = function(conf){
	var jsonData = {};
	var data = {};

	data._fw_service_id = 'sendKeyTrade';
	data.jsonClass = 'com.ccb.p2.stm.localManagement.moder.KeyTrade';
	PJF.otherInfo.devId && (jsonData.devId = PJF.otherInfo.devId);
	conf.keyTypeId && (jsonData.keyTypeId = conf.keyTypeId);
	conf.devKeyNo && (jsonData.devKeyNo = conf.devKeyNo);
	conf.devKeyBoxNo && (jsonData.devKeyBoxNo = conf.devKeyBoxNo);
	conf.tranType && (jsonData.tranType = conf.tranType);
	conf.keyNo && (jsonData.keyNo = conf.keyNo);
	conf.sendType && (jsonData.sendType = conf.sendType);
	conf.customerName && (jsonData.customerName = conf.customerName);
	conf.certType && (jsonData.certType = conf.certType);
	conf.identityCardNo && (jsonData.identityCardNo = conf.identityCardNo);
	conf.operateDate && (jsonData.operateDate = conf.operateDate);
	conf.operateTime && (jsonData.operateTime = conf.operateTime);
	PJF.otherInfo.SVC_ID && (jsonData.transerialNo = PJF.otherInfo.SVC_ID);
	data.jsonData = PJF.util.json2str(jsonData);
	//data.adapterId = 'ecpJsonStm';
	PJF.communication.ajax({
		data: data,
		async: conf.async,
		url: 'ecpJson2BeanRaw.action',
		success: function(data){
			console.log('sendCardTrade返回结果:' + JSON.stringify(data));
		}
	})

}

//发送base64图片请求,data为{picStr:'base64',path:'p2s路径'}
PJF.communication.sendPicRequest=function(data,callback){
	var fw_id = 'imageTransService';
	var action = 'ecpJson.action';
	var myData={};
	myData._fw_service_id = fw_id;
	data.path=PJF.otherInfo.picPath+data.path;
	myData.jsonData = PJF.util.json2str(data);
	PJF.communication.ajax({
		data: myData,
		dataType:'text',
		url: action,
		success: function(data){
			console.log('sendPicRequest图片发送成功,返回结果:' + data);
			if(callback)
			   callback();
		},
		failure:function(jq, ts, err){
			console.log('sendPicRequest图片发送失败,原因:' + ts + ',' + err);
		}
	})
	
};

//发送base64图片请求,data为{picStr:'base64',path:'p2s路径'}，增加执行错误处理
PJF.communication.sendPicReq=function(data,callback,fnFail){
    var fw_id = 'imageTransService';
    var action = 'ecpJson.action';
    var myData={};
    myData._fw_service_id = fw_id;
    data.path=PJF.otherInfo.picPath+data.path;
    myData.jsonData = PJF.util.json2str(data);
    PJF.communication.ajax({
        data: myData,
        url: action,
        success: function(data){
            console.log('sendPicReq图片发送成功,返回结果:' + JSON.stringify(data));
            if(data && data.BK_STATUS == '01'){
                fnFail && fnFail();
            }else{
                callback && callback(data);
            }
        },
        failure:function(jq, ts, err){
            console.log('sendPicRequest图片发送失败,原因:' + ts + ',' + err);
            fnFail && fnFail(ts);
        }
    })

    /*data.path=PJF.otherInfo.picPath+data.path;
    data.picStr = data.picStr.replace(/\+/g,'%2B');//base64编码中+转义为%2B
    var url = PJF.constants.AUTH_SERVER + '/bosWeb/ecpJson.action';
    var reqData = 'jsonData='+JSON.stringify(data)+'&_fw_service_id=imageTransService';
    //跨域
    PJF.communication.Http.SendCrossDomainRequest(url,reqData,30000,function(status,responseData){
        console.log('跨域返回结果,status:'+status+';responseData:'+responseData);
        status = JSON.parse(status);
        if(status.success){
            if($.trim(responseData) != '') {
                responseData = JSON.parse(responseData);
            }
            if (responseData && responseData.BK_STATUS && (responseData.BK_STATUS == '01')) {
                console.log('跨域发送图片发送失败');
                fnFail && fnFail();
            }else{
                console.log('跨域发送图片发送成功');
                callback && callback(responseData);
            }
        }else{
            console.log('通信失败，跨域发送图片');
            fnFail && fnFail(status.error);
        }
    });*/

};

PJF.communication.createVoucherImageReq = function(c) {
	if (!c.success || !c.jsonData)
		alert("PJF.communication.createVoucherImageReq\u9700\u8981\u7684\u53c2\u6570\u4fe1\u606f\u4e0d\u6b63\u786e!");
		else {
			if(!c.jsonData.path){
				alert("生成凭证图片路径必须填写！");
					return;
				}
				var d = !1;
				c.async && (d = c.async);
				var e = {
					_fw_service_id : "createVoucherImageReq"
				};
				e.jsonData = PJF.util.json2str(c.jsonData);
				PJF.communication.ajax({
					data : e,
					async : d,
					url : "ecpJson.action",
					success : c.success
				})
			}
	};
/*
* 获取虚拟柜员
* @param dev_operUser 从菜单来
* @param operIndex 当前岗位的第几个柜员
*/
PJF.communication.getUserInfo = function(dev_operUser, operIndex){
	var fw_id = 'selTermMatchByParam';
	var action = 'ecpJson.action';
	var jsondata = {},myData = {};
	jsondata.devId = PJF.otherInfo.devId
	myData._fw_service_id = fw_id;
	myData.jsonData = PJF.util.json2str(jsondata);
	var successFlag = false;
	PJF.communication.ajax({
		data: myData,
		url: action,
		async: false,
        safe: true,
		success: function(data){
			if(data && data.BK_STATUS == '00'){		
				PJF.otherInfo.dev_operUser = data.dev_operUser;		
				var info = data.dev_operUser[dev_operUser];
				if(info){
					successFlag = true;
					operIndex = operIndex || 0;
					PJF.userInfo.userCode = info[operIndex].USER_CODE;
					PJF.userInfo.ccbsId = info[operIndex].CCBS_ID;
					PJF.otherInfo.logicTerminalNo = info[operIndex].ZD_NO;
					info[operIndex].CCBINS_CHN_SHRTNM && (PJF.orgInfo.orgShortCName = info[operIndex].CCBINS_CHN_SHRTNM);
					info[operIndex].CCBINS_TPCD && (PJF.orgInfo.orgType = info[operIndex].CCBINS_TPCD);
					console.log('获取当前设备柜员号成功:'+JSON.stringify(data));
				}
				else{
					console.log('获取柜员号成功，但是对应编号的柜员不存在，编号为:' + dev_operUser)
				}
			}
			else{
				var errMsg = (data && data.BK_MSG) ? data.BK_MSG : '无'
				console.log('获取当前设备柜员失败，错误信息为:' + errMsg);
			}
		},
		failure: function(jq,ts){
			console.log('获取当前设备柜员号失败:'+ts);
		}

	})
	return successFlag;
}

PJF.communication.stmManageAjax = function(conf){
	conf.retryTime = conf.retryTime || 1;
	conf.async = typeof(conf.async) == 'undefined' ? true : conf.async
	//stm的外设测试页面，这里不发原子服务了，默认成功！
	if(template.getLocation() == 'stmDriveTest'){
		conf.success && conf.success({});
		return;
	}
	var data = {};
	data._fw_service_id = conf.fwServiceId;
	if(typeof(conf.jsonData) == 'string'){
		conf.jsonData = JSON.parse(conf.jsonData);
	}
	PJF.communication.addParam(conf.jsonData);
	conf.jsonClass && (data.jsonClass = conf.jsonClass);
	conf.jsonData.dev_type = PJF.otherInfo.typeInfo;	
	conf.jsonData._spl_log_mapping = data.fwServiceId; //记录到stm_log表
	data.jsonData = JSON.stringify(PJF.communication.addParam(conf.jsonData));
	var loading;
	if(conf.maskBody){
		loading = new PJF.ui.loading({text:conf.loadingText});
	}
	conf.url = conf.url || 'ecpJson.action';
	console.log('stmManageAjax参数为:' + JSON.stringify(data));
	//重复3此后，走客户端试试，看下还会不会出现神奇的错误
	if(conf.retryTime == 4 && PJF.communication.isInClient()){
		var reqDataStr = $.param(data,true);
		var actionReg = /$\/.*/g;
		conf.url = "http://" + location.host + (conf.url.match(actionReg) ? "" : "/bosWeb/") + conf.url;
		var syncResult = PJF.communication.Http.SendCrossDomainAjax(conf.url,reqDataStr,30000,true,conf.async,function(status, responseData){
			loading && loading.destroy();
			console.log('stm后台管理服务返回status:' + status);
			console.log('stm后台管理服务返回responseData:' + responseData);		
			status = JSON.parse(status);			
			status.result = responseData;
			try{
				if (status.success && status.result) {
					status.result = JSON.parse(status.result);
					if (status.result && status.result.BK_STATUS && (status.result.BK_STATUS == PJF.constants.BK_CODE_SUCCESS)) {
						conf.success && (typeof conf.success == 'function') && conf.success(status.result);
						nofifyPad(status.result);
					} else {
						conf.failure && (typeof conf.failure == 'function') && conf.failure(status.result);
					}
				} else {
					conf.failure && conf.failure({BK_STATUS:'01',BK_DESC:'STM库存HTTP网络请求出错:' + JSON.stringify(status)});
				}
			}
			catch (e) {
				console.log('stm后台管理服务返回解析出错:' + e.message);
				console.log(e.stack);
				//ie 抛出去的异常用的是这个 ....  - - |
				e.description = 'stm后台管理服务返回解析出错:' + e.description;
				throw e;
			}
		})
	}
	else{
		$.ajax({
			async: conf.async,
			data: data,
			type: conf.type || PJF.constants.AJAX_METHOD,
			dataType: conf.dataType || PJF.constants.AJAX_DATA_TYPE,
			url: conf.url,
			success:function(data){
				console.log('stm后台管理服务' + conf.fwServiceId + "返回结果:" + JSON.stringify(data))
				if(data && data.BK_STATUS == PJF.constants.BK_CODE_SUCCESS){
					conf.success && conf.success(data);
					nofifyPad(data);
				}
				else{
					conf.failure && conf.failure(data);
				}
			},
			error:function(jq, ts, err){
				//{"readyState":0,"status":0,"statusText":"error"}				
				console.log(JSON.stringify(jq.statusCode()));
				console.log('stm后台管理服务' + conf.fwServiceId + "异常返回结果:" + ts + ',' + err)
				var jqStatus = jq.statusCode();
				if(jqStatus.readyState == 0 && jqStatus.status == 0 && jqStatus.statusText == 'error' && conf.retryTime <= 3){
					conf.retryTime++;
					PJF.communication.stmManageAjax(conf);
					return;
				}
				conf.failure && conf.failure({BK_STATUS:'01',BK_DESC:'STM库存HTTP网络请求出错:' + ts + ',' + err});
			},
			complete:function(){
				loading && loading.destroy();
			}
		})
	}
	function nofifyPad(data){
		//如果卡盾不够了，给pad发个消息
		if ((conf.fwServiceId == 'stm.doModifyCardKeySurplus' || conf.fwServiceId == 'stm.doSellCheques') && data.STM_LOW_STORAGE) {
			var json = {};
			json.busiName = data.STM_LOW_STORAGE_DESC;
			json.dealContent = {
				CARDKEY_TYPE: data.CARDKEY_TYPE,
				CHECK_TYPE: data.CHECK_TYPE,
				LEFT_CARDKEY: data.LEFT_CARDKEY
			};
			PJF.communication.callPad(json);
		}
	}
}

//记录fwTranId和全局跟踪号
PJF.communication.sendCPSJsonReq = function(conf, data, params) {
	conf.retryTime = typeof(conf.retryTime) == 'undefined' ? -1 : conf.retryTime
    var beginTime = new Date().getTime()
    // 返回 jqXHR
    return $.ajax({
        url: conf.url || PJF.constants.DEFAULT_ACTION,
        dataType: conf.dataType || PJF.constants.AJAX_DATA_TYPE,
        data: data,
        // jquery的param()方法，为true则采用jquery1.4之前版本的解析方式
        traditional: conf.traditional,
        async: (conf.async !== false),
        type: PJF.constants.AJAX_METHOD,
        timeout: conf.timeOut || PJF.constants.AJAX_TIMEOUT,
        success: function(data) {
            if (params.ajaxMask) {
                params.ajaxMask.destroy();
                params.ajaxMask = undefined;
            }
            if (data) {
                if (typeof(data) == 'string') {
                    data = eval('(' + data + ')');
                }
                data._COMMON = data._COMMON || {};
                if (data.BK_STATUS && (data.BK_STATUS == PJF.constants.BK_CODE_SUCCESS)) {
                    //成功时，打印交易号和全局跟踪号
                    if(data._COMMON && data._COMMON.SYS_EVT_TRACE_ID){
                        PJF.stm.log(conf.fwTranId+'，流水号：'+data._COMMON.SYS_EVT_TRACE_ID,'PJF_LOG_TRANSACTION');
                    }else{
                        PJF.stm.log(conf.fwTranId,'PJF_LOG_TRANSACTION');
                    }
                    conf.success(data);
                }else {
                    //失败时，打印交易号
                    PJF.stm.log(conf.fwTranId,'PJF_LOG_TRANSACTION');
                    conf.failure(data);
                }
            } else {
                alert('提示：无返回数据！');
            }
        },
        error: function(jq, ts, error) {
        	console.log(JSON.stringify(jq.statusCode()));
            if (params.ajaxMask) {
                params.ajaxMask.destroy();
                params.ajaxMask = undefined;
            }
			var jqStatus = jq.statusCode();
			// jqStatus.readyState = 0; jqStatus.status = 0; jqStatus.statusText = 'NetworkError';
            if(jqStatus.readyState == 0 && jqStatus.status == 0 && jqStatus.statusText == 'NetworkError' && conf.retryTime != -1){
				PJF.communication.retryCps(conf, data)
				return
            }
            //失败时，打印交易号
            PJF.stm.log(conf.fwTranId,'PJF_LOG_TRANSACTION');

            if (ts == 'timeout') {
                // 具体处理措施由专门的函数处理
                PJF.configuration.ajaxTimeOut(conf.failure);
            } else if (ts == 'parsererror') {
                // 具体处理措施由专门的函数处理
                PJF.configuration.ajaxParseError(conf.failure);
            } else {
                // 具体处理措施由专门的函数处理
                PJF.configuration.ajaxFailure(conf.failure);
            }
        },
        complete: function(jq, ts) {
            if (params.ajaxMask) {
                params.ajaxMask.destroy();
                params.ajaxMask = undefined;
            }
            if(conf.complete)
                conf.complete(jq, ts);
            console.log('cps ajax共耗时' + (new Date().getTime() - beginTime) + 'ms,参数为:' + conf.fwTranId + ',' + conf.fwServiceId);
            // ajax请求完毕回调
            PJF.communication.afterCPSJsonReq(conf, data, params);
        }
    });
};

PJF.communication.sendToMDM = function () {
	PJF.communication.Http.SendCrossDomainRequest("http://mdm.jh/zeus/app/checkstatuscallback",
		$.param({
			deviceidentifier: PJF.communication.getMDMuuid().result,
			appPkgName: 'STMClient[' + PJF.otherInfo.verInfo + ']',
			status: '设备编号=' + PJF.otherInfo.devId + '|INFO\n机构号=' + PJF.roleInfo.orgCode + '|INFO'
		}, true),
		30000, function (status, responsedata) {});
}

/**
* 分行的外呼交易, 或许以后要跨域
*/
PJF.communication.FHTSCpsJsonReq = function(conf){
	conf.timeOut = conf.timeOut || 61000;
	conf.async = typeof(conf.async) == 'undefined' ? true : conf.async
	conf.post = (conf.type === undefined || conf.type == PJF.constants.AJAX_METHOD) ? true : false;
	var failure = conf.failure;
	conf.failure = function() {
		var data = arguments[0];
		if (conf.noTransfer && data && data.BK_DESC) {
			//分行不想要没转义的那些信息
			var match = data.BK_DESC.match(/(\[)([^\]]*)(\])/);
			if (match && match[2])
				data.BK_DESC = match[2];
		}
		failure && failure.apply(conf, arguments);
	}
	// pad由于不支持跨域同步。。。所以还是发业务集群吧
	if(PJF.constants.FHTS_GROUP && PJF.communication.isInClient() && !PJF.util.deviceType.pad && !conf.isFHTSZW){
		// 可能有的更多的传递参数 用于在各函数间传递参数
		var params = {};
		// 校验参数是否满足 参数校验不合法 返回
		if (PJF.communication.validateCPSJsonReqParams(conf, params) === false) {
			return;
		}
		// 准备请求参数
		var data = PJF.communication.prepareCPSJsonReqParams(conf, params);
		// 发送请求前回调
		if (PJF.communication.beforeCPSJsonReq(conf, data, params) === false) {
			return;
		}
		var url = PJF.constants.FHTS_GROUP;
    	var reqDataStr = $.param(data,true); //转为url get方式
    	//尼玛只有异步才有回调。。。。
		var syncResult = PJF.communication.Http.SendCrossDomainAjax(url,reqDataStr,conf.timeOut,conf.post,conf.async,function(status, responseData){
			if (params.ajaxMask) {
				params.ajaxMask.destroy();
				params.ajaxMask = undefined;
			}
			console.log('分行跨域请求返回stats:' + status);
			console.log('分行跨域请求返回responseData:' + responseData);		
			status = JSON.parse(status);			
			status.result = responseData;
			try{
				if (status.success && status.result) {
					status.result = JSON.parse(status.result);
					if (status.result && status.result.BK_STATUS && (status.result.BK_STATUS == PJF.constants.BK_CODE_SUCCESS)) {
						conf.success && (typeof conf.success == 'function') && conf.success(status.result);
					} else {
						conf.failure && (typeof conf.failure == 'function') && conf.failure(status.result);
					}
				} else {
					conf.failure && (typeof conf.failure == 'function') && conf.failure({BK_DESC:status.error,_COMMON:{}});					
				}
				conf.complete && conf.complete();
			}
			catch (e) {
				console.log('分行特色路由外呼交易出错:' + e.message);
				console.log(e.stack);
				//ie 抛出去的异常用的是这个 ....  - - |
				e.description = '分行特色路由外呼交易出错:' + e.description;
				throw e;
			}
		})
	}
	else{
		PJF.communication.cpsJsonReq(conf);
	}
}

PJF.communication.retryCps = function (conf, data) {
	console.log('cps resend')
	if (conf.retryTime == -1) return;
	else if (conf.retryTime == 0) { // 用跨域重发
		conf.async = typeof(conf.async) == 'undefined' ? true : conf.async
		var loading
		if (conf.loadingText)
			loading = new PJF.ui.loading({text: conf.loadingText})
		conf.url = conf.url || PJF.constants.DEFAULT_ACTION
		var reqDataStr = $.param(data,true);
		var actionReg = /^\/?bosWeb.*/;
		conf.url = "http://" + location.host + (conf.url.match(actionReg) ? "" : "/bosWeb/") + conf.url;
		var syncResult = PJF.communication.Http.SendCrossDomainAjax(conf.url,reqDataStr,conf.timeOut || PJF.constants.AJAX_TIMEOUT,true,conf.async,function(status, responseData){
			loading && loading.destroy();
			console.log('retryCps服务返回status:' + status);
			console.log('retryCps服务返回responseData:' + responseData);		
			status = JSON.parse(status);			
			status.result = responseData;
			try{
				if (status.success && status.result) {
					status.result = JSON.parse(status.result);
					if (status.result && status.result.BK_STATUS && (status.result.BK_STATUS == PJF.constants.BK_CODE_SUCCESS)) {
						conf.success && (typeof conf.success == 'function') && conf.success(status.result);						
					} else {
						conf.failure && (typeof conf.failure == 'function') && conf.failure(status.result);
					}
				} else {
					conf.failure && conf.failure({BK_STATUS:'01',BK_DESC:'retryCps网络请求出错:' + JSON.stringify(status)});
				}
			}
			catch (e) {
				console.log('retryCps服务返回解析出错:' + e.message);
				console.log(e.stack);
				//ie 抛出去的异常用的是这个 ....  - - |
				e.description = 'retryCps服务返回解析出错:' + e.description;
				throw e;
			}
		})
	} else {
		conf.retryTime--
		PJF.communication.cpsJsonReq(conf)
	}
	
}

PJF.communication.cashCpsJsonReq = function(conf){
	conf.cashTransaction = true;
	return PJF.communication.cpsJsonReq(conf);
}

PJF.communication.FHTSLogReq = function(conf){
	conf = $.extend(true, {
		fwServiceId: 'databaseTransaction',
		fwTranId: 'update',
		sqlId: 'stm.insertStmRgstBook_fhts',
		success: function(){},
		failure: function(){}
	}, conf);
	return PJF.communication.cpsJsonReq(conf);
}

/**
 * websocket API包装
 * 
 * @author zhouyuhang
 * @date 2016.2.26
 *      
 */

// 命名空间
PJF.namespace('PJF.communication');

/**
 *websocket对象封装
 *@param url websocket地址
 *		 onOpen 建立链接后的回调事件
 *		 onMessage 收到消息后的回调事件
 *        
 */
PJF.communication.websocket=function(conf){
	if(!WebSocket)
		return;
	if(!conf.url){
		console.error('websocket没有传入url');
		return
	}
	
	this.ws = new WebSocket(conf.url);
	this.ws.onopen=function(){
		console.log('建立websocket链接,url为:'+conf.url);
		conf.onOpen();
	}
	this.ws.onmessage=function(message){
		console.log('收到服务端信息:'+message);
		conf.onMessage(message);
	}		
}
/**
 *websocket 发送信息方法
 *@param message 发送内容
 *        
 */
PJF.communication.websocket.prototype.sendMessage=function(message){
	console.log('发送服务端信息:'+message);
	this.ws.send(message);
}
﻿/**
 * P2 Framework JS Library 1.0
 *
 * Copyright(c) 2012, China Construction Bank.
 *
 * @Author hcl Create on: 2015-01-27 Last Updated: 说明:PJF和P2
 *         Pad client平台可之间的互相调用以及Ajax调用方式
 */


// 此文件和Event.js模块可以被系统单独引用
if (typeof(PJF) == 'undefined') {
    PJF = {};
    PJF.communication = {};
    PJF.padClientEvents = {};
} else {
    PJF.communication = PJF.communication || {};
    PJF.padClientEvents = PJF.padClientEvents || {};
}
window.navigator = window.navigator || {};

// PJF库工作正常标志
PJF.communication.isPageLoadSucceed = false;

/* 来自客户端的事件通知, 需用Event模块注册PJF.PadClientEvents中的事件 */
PJF.PadClientEvents = {
    download: {
        // 事件说明: 添加新下载，
        // 参数格式: (fileName)
        addNew: 'Client_DownloadAddNew',

        // 事件说明: 下载进度通知，
        // 参数格式: (fileName, finishedPercent, averageRatio, status)
        progressUpdate: 'Client_DownloadProgress',

        // 事件说明: 下载失败，
        // 参数格式: (fileName)
        failed: 'Client_DownloadFailed',

        // 事件说明: 下载完成，
        // 参数格式: (fileName)
        completed: 'Client_DownloadCompleted'
    },
    upload: {
        // 事件说明: 添加新上传，
        // 参数格式: (fileName)
        addNew: 'Client_UploadAddNew',

        // 事件说明: 上传进度通知，
        // 参数格式: (fileName, finishedPercent, averageRatio, status)
        progressUpdate: 'Client_UploadProgress',

        // 事件说明: 上传失败，
        // 参数格式: (fileName)
        failed: 'Client_UploadFailed',

        // 事件说明: 上传完成，
        // 参数格式: (fileName)
        completed: 'Client_UploadCompleted'
    },
    shell: {
        // 事件说明: 客户端通用运行错误，
        // 参数格式: (ErrorDetails)
        generalError: 'Client_GeneralClientError',

        // 事件说明: 应用超时锁屏，
        // 参数格式: ()
        lockApp: 'Client_LockApplication',

        // 事件说明: 客户端弹出屏幕键盘通知, 前端页面将当前的输入框显示到键盘之上，
        // 参数格式: (KeyBoardHeight)
        keyboardShow: 'Client_KeyboardShow',

        // 事件说明: 客户端关闭屏幕键盘通知, 前端页面恢复页面展示
        // 参数格式: ()
        keyboardHide: 'Client_KeyboardHide',

        keyboardHeightChanged: 'Client_KeyboardHeightChanged',

        // 事件说明: 汉王输入法发送的按键事件(清空,完成)
        keyboardClicked: 'Client_KeyboardClicked',

        // 事件说明: 客户端通知设置Tab页面添加一条新日志
        // 参数格式: (logString)
        logAppend: 'Client_LogAppend',

        htmlToPic: 'htmlToPic_Done'
    },
    player: {
        videoPlayComplete: 'Player_videoPlayComplete'
    },
    dns: {
        dnsResolved: 'Dns_Resolved'
    },
    device: {
        pinKeyPressed: 'dev_pinKeyPressed',
        genDeviceEvent: 'dev_genDeviceEvent'
    },
    tab: {
        // 关闭当前tab页之前, 询问应用是否可以关闭, 1-true, 0-false, 默认为1
        canCloseThisTab: 'CanUserCloseThisTab',
        // 当Tab页被激活到最顶层
        tabActived: 'TabActived'
    }
};

// 客户端异步通知，需用Event模块注册PJF.PadClientEvents中的事件
PJF.communication.shell = {
    OnGeneralError: function(errorString) {
        PJF.event.asyncPublish(PJF.PadClientEvents.shell.generalError, errorString);
    },
    OnLockApp: function(CurrentTimeoutInterval) {
        PJF.event.asyncPublish(PJF.PadClientEvents.shell.lockApp, CurrentTimeoutInterval);
    },
    OnKeyboardShow: function(keyboardHeight) {
        PJF.event.asyncPublish(PJF.PadClientEvents.shell.keyboardShow, keyboardHeight);
    },
    OnKeyboardHide: function(keyboardHeight) {
        PJF.event.asyncPublish(PJF.PadClientEvents.shell.keyboardHide, keyboardHeight);
    },
    OnKeyboardClick :function(keyval){
        PJF.event.asyncPublish(PJF.PadClientEvents.shell.keyboardClicked, keyval);
    },
    OnKeyboardHeightChanged : function(keyboardHeight){
        PJF.event.asyncPublish(PJF.PadClientEvents.shell.keyboardHeightChanged, keyboardHeight);
    },
    OnLogAppend: function(logTime, logDetail) {
        var logItem = [{
            time: logTime,
            detail: logDetail
        }];
        PJF.event.asyncPublish(PJF.PadClientEvents.shell.logAppend, logItem);
    },
    OnDnsResolved: function(result) {
        PJF.event.asyncPublish(PJF.PadClientEvents.dns.dnsResolved, result);
    },
    OnHtmlToPicDone: function(eventId, result) {
        return PJF.event.asyncPublish(eventId, result);
    }
};


/* 内部函数 */
function ClientCallProxy() {
    try {
        var args = Array.prototype.slice.call(arguments);
        var fn = args.shift();
        return eval(fn).apply(window, args);
    } catch (e) {
        return 0xcdefcdfe;
    }
}

/* 内部函数 */
function json2str(o) {
    var arr = [];
    var fmt = function(s) {
        if (typeof s == 'object' && s != null) {
            return json2str(s);
        }
        return /^(string|number)$/.test(typeof s) ? "'" + s + "'" : s;
    };
    if (o.constructor === Array) {
        for (var i in o) {
            arr.push(fmt(o[i]));
        }
        return '[' + arr.join(',') + ']';
    } else {
        for (var i in o) {
            arr.push("'" + i + "':" + fmt(o[i]));
        }
        return '{' + arr.join(',') + '}';
    }
}

(function (exports) {
    //操作ui线程的方法..
    var _uiMethods = [
        "opendoconline", "exit", "appRestart", "unlockapp",
        "createClientLoading", "destroyClientLoading",
        "ChangeMaintainMode", "IsSecondScreen", "debugwindow", "showToolbar",
        "openVideo", "playVideo", "pauseVideo", "showVideoPlayer", "hideVideoPlayer", "rotateVideoPlayer", "showAndRotate", "getCurrentVideoUrl",
        "singlepoint", "broadcastTabMessage", "activateTabByIndex", "ExecuteScript", "GetCurrentTabIndex", "GetActivedTabIndex",
        "IsTabActived", "RefreshThisPage", "OpenNewTab", "CloseThisTab", "GetWebBrowserListInUse", "ShowLoadingMask", "HideLoadingMask",
        "RecordVideo", "RecordVideoEx", "RecordAudio", "RecordAudioEx", "TakePicture", "GetThumbnailImage", "OpenMediaViewer",
        "openCamera", "startDetect", "endDetect", "closeCamera",
        "closeSoftKeyboard", "openSoftKeyboard"
    ];
    /* 内部函数 */
    /* 调用客户端接口一: 插件方式. (!!此接口应用不应直接使用!!)
     * 参数：
     *     extId : extId
     *     method: 函数名称
     *     jsonArgs: JSON对象
     *     callback: 返回结果的回调
     */
    exports.CallShellExt = function(extId, method, jsonArgs, callback) {
        try {
            if (PJF.communication.isInClient()) {
                if(PJF.communication.getClientType() != 'Kylin'){
                    // !!!WARN：同步调用不会触发回调,若同步调用使用callback,则事件管理器中事件将不断累积!!!
                    var eventId = PJF.communication.generateEventId();
                    jsonArgs["__eventId__"] = eventId;
                    if (callback) {
                        PJF.event.onceSubscriber(eventId, function() {
                            callback.apply(window, arguments);
                        });
                    }
                    var tmp = external.callDynamicExt(extId, method, JSON.stringify(jsonArgs), eventId);
                    return JSON.parse(tmp);
                }
                else{
                    return PJF.communication.CallClientPro(extId,method, jsonArgs, callback);
                }
            } else {
                var ret = "0";
                return {
                    success: false,
                    error: '须在客户端里调用此方法',
                    errorCode: '1',
                    result: ret
                };
            }
        } catch (e) {
            return {
                success: false,
                error: 'call client exception' + e,
                errorCode: '1',
                result: ' '
            };
        }
    };

    /* 内部函数 */
    /* 调用客户端接口二: 推荐使用 (!!此接口应用不应直接使用!!) (Supported from STM1.16.6.0/PAD2.0.3.0)
     * 参数：
     *     moduleId : 模块名
     *     method:    函数名称
     *     jsonArgs:  JSON对象
     *     callback:  返回结果的回调, 同步接口此参数须为null
     */
    exports.CallClientPro = function(moduleId, method, jsonArgs, callback) {
        try {
            if (PJF.communication.isInClient()) {
                var eventId = PJF.communication.generateEventId();
                // !!!WARN：同步调用不会触发回调,若同步调用使用callback,则事件管理器中事件将不断累积!!!
                if (callback) {
                    PJF.event.onceSubscriber(eventId, function() {
                        callback.apply(window, arguments);
                    });
                }

                //非linux
                if(PJF.communication.getClientType() != 'Kylin'){
                    var tmp = external.InvokeFromJsPro(moduleId, method, JSON.stringify(jsonArgs), eventId);
                    return JSON.parse(tmp);
                }
                //linux
                else{
                    var status = {'success':true, 'errorCode':'0', 'error':'', 'result':''};
                    var basync = (callback != null || jsonArgs['eventId'] != undefined) ? true : false;
                    if (jsonArgs['eventId'] != undefined) {
                        eventId = jsonArgs['eventId']
                    }
                    //ui操作12316端口，其他如外设操作12315端口
                    var _port = (_uiMethods.indexOf(method) >= 0) ? "12316" : "12315";
                    $.ajax({
                        async: basync,
                        type: "post",
                        url: "http://localhost:" + _port + "/CallClient",
                        data: JSON.stringify({
                            "moduleId": moduleId,
                            "method": method,
                            "jsonArgs": JSON.stringify(jsonArgs),
                            "eventId": eventId,
                        }),
                        contentType: "text/plain",
                        success: function (d) {
                            if (basync) {
                                if (Object.prototype.toString.call(d) == "[object Array]") {
                                    d.unshift(eventId);
                                    PJF.event.asyncPublish.apply(window,d);
                                } else {
                                    PJF.event.asyncPublish(eventId, d);
                                }
                            }
                            else {
                                status = d;
                            }
                        },
                        error: function (d) {
                            status = JSON.stringify({success: false, errorCode: '0', error: d, result: 0});
                        }
                    });
                    return status;
                }
            } else {
                var ret = "0";
                return {
                    success: false,
                    error: '须在客户端里调用此方法',
                    errorCode: '1',
                    result: ret
                };
            }
        } catch (e) {
            return {
                success: false,
                error: 'call client exception' + e,
                errorCode: '1',
                result: ' '
            };
        }
    };

    /* 内部函数 */
    /* 调用客户端接口三: 谨慎使用 (!!此接口应用不应直接使用!!)
     * 参数：
     *     methodName: 函数名称
     *     inData: 参数列表的JSON字串，该字串必须与客户端中的函数参数名一致，否则会找不到函数入口
     *     remoteDebugCallback: 在浏览器中调试时的异步回调
     * 返回值：
     *     为JSON对象，字段如下
     *         success:   True: 调用成功，False:调用失败
     *         errorCode: 函数调用返回值
     *         error:     对errorCode的说明
     *         result:    remoteFunc执行的返回值
     */
    exports.CallClient = function(funcName, paramJson, remoteDebugCallback) {
        try {
            if (PJF.communication.isInClient()) {
                if(PJF.communication.getClientType() != 'Kylin'){
                    var remoteFunc = {
                        'methodName': funcName,
                        'inData': paramJson
                    };
                    var tmp = window.external.InvokeFromJs(JSON.stringify(remoteFunc));
                    var retJson = eval('(' + tmp + ')');
                    return retJson;
                }
                else{
                    return PJF.communication.CallClientPro("LegacyAPI",funcName, paramJson, null);
                }
            } else {
                var ret = "0";
                return {
                    success: false,
                    error: '须在客户端里调用此方法',
                    errorCode: '1',
                    result: ret
                };
            }
        } catch (e) {
            return {
                success: false,
                error: 'call client exception' + e,
                errorCode: '1',
                result: ' '
            };
        }
    };
})(PJF.communication);

/***************************************以下为客户端功能API集合***********************************/
/**
 * 兼容client中部分方法
 * @type {Object}
 */
PJF.communication.isInClient = function() {
    return (window.external && (typeof window.external.InvokeFromJs != "undefined")) || (navigator.platform != "Win32");
};

PJF.communication.getClientType = function() {
    try {
        switch (navigator.platform) {
            case "Linux aarch64" :
                return "Kylin";
            case "Linux armv81" :
                return "android";
            case "Win32" :
                return "windows";
            default:
                return false;
        }
    } catch (e) {
        return "windows"
    }
};


PJF.communication.readTextFile = function(args, callback) {
    var id = PJF.communication.generateEventId();
    PJF.event.onceSubscriber(id, callback);
    return PJF.communication.CallClient("readTextFile", {
        eventId: id,
        jsonArgs: JSON.stringify(args)
    });
};

/*
 fileName : 文件名
 content : 文件内容
 返回{
 result : 文件全路径
 }
 */
PJF.communication.writeTextFile = function(fileName, content, charset) {
    content == null ? '' : content;
    content = encodeURIComponent(content);
    var args = {
        fileName: fileName,
        content: content,
        charset: charset == null ? "utf-8" : charset
    };
    
    var params = {
        jsonArgs: JSON.stringify(args)
    }

    return PJF.communication.CallClient("writeTextFile", params);
};

/**
 * params:
 *       imgEncodeByBase64:以base64编码的图片，该值应是base64字符串
 *      saveFullPath:图片保存的路径,该路径应该包含文件名和文件后缀，比如:"C:/Users/hasee/Pictures/test.jpg"
 *
 *return:
 *      为JSON对象，字段如下:
 *      success:   True: 调用成功
 *      result:    保存的图片文件的全路径
 * */
PJF.communication.saveBase64Image = function(imgEncodeByBase64, saveFullPath) {
    var params = {
        imgEncodeByBase64: imgEncodeByBase64,
        saveFullPath: saveFullPath
    };
    return PJF.communication.CallClient("saveBase64Image", params);
};

/**
 * params:
 *      idleInterval:系统闲时跳转到指定homepage的超时时间为idleInterval,idleInterval的单位是ms(毫秒)
 *                   如:idleInterval的值设置为60000时，即超时时间为60000ms即60s.
 *
 * example:
 *      PJF.communication.setIdleInterval(30000);//将系统闲时超时跳转回homepage的时间设置为30s。
 *
 * return:
 *      无返回值。
 * */
PJF.communication.setIdleInterval = function(idleInterval) {
    var param = {
        idleInterval: idleInterval ? idleInterval : 60000
    }
    PJF.communication.CallClient("setIdleInterval", param);
}

PJF.communication.ClearCache = function() {
    var params = {
        'type': '',
        'key': ''
    };
    return PJF.communication.CallClient("ClearCache", params);
};

PJF.communication.Refresh = function() {
    var params = {
        'type': '',
        'key': ''
    };
    return PJF.communication.CallClient("Refresh", params);
};

PJF.communication.PageLoadSucceed = function() {
    if (arguments.length == 1 && (arguments[0] == true || arguments[0] == false)) {
        PJF.communication.isPageLoadSucceed = arguments[0];
    }
    return PJF.communication.isPageLoadSucceed;
};


/*
 * 客户端数据存储：SQL查询
 *
 * */
PJF.communication.Database = {
    /* SQL 查询
     * 示例：
     * 'sqlStr': 'select * from TestTable'
     * 'sqlStr': 'insert into TestTable values("2","Name2")'
     * */
    SqlQuery: function(sql) {
        var params = {
            'sqlStr': sql
        };
        return PJF.communication.CallClient("ExecSql", params);
    },
    /* 写入数据
     * 'type' : 0: 当前进程会话存储， 1永久存储
     * 'key'  : string
     * 'value': string
     * 'bForceUpdate': false， 是否覆盖已存在的值
     */
    Write: function(type, key, value, forceUpdate) {
        var params = {
            'type': type,
            'key': key,
            'value': value,
            'bForceUpdate': forceUpdate
        };
        return PJF.communication.CallClient("setvalue", params);
    },

    /* 读取数据
     * 'type' :  0: 当前进程会话存储， 1永久存储
     * 'key'  : string
     * */
    Read: function(type, key) {
        var params = {
            'type': type,
            'key': key
        };
        return PJF.communication.CallClient("getvalue", params);
    },

    Delete: function(type, key) {
        var params = {
            'type': type,
            'key': key
        };
        return PJF.communication.CallClient("delvalue", params);
    }

};

/*
 * 客户端数据存储：永久存储
 * */
PJF.communication.localStorage = {
    setValue: function(key, value) {
        if (PJF.communication.isInClient()) {
            PJF.communication.Database.Write(1, key, value, true);
        } else {
            window.localStorage.setItem(key, value);
        }
    },

    getValue: function(key) {
        if (PJF.communication.isInClient()) {
            return PJF.communication.Database.Read(1, key);
        } else {
            var value = window.localStorage.getItem(key);
            var ret = '';
            if (value == null) {
                ret = {
                    success: false,
                    error: 'Not Exist',
                    errorCode: '1',
                    result: ''
                };
            } else {
                ret = {
                    success: true,
                    error: '',
                    errorCode: '',
                    result: value
                };
            }
            return ret;
        }
    },

    removeItem: function(key) {
        if (PJF.communication.isInClient()) {
            PJF.communication.Database.Delete(1, key);
        } else {
            window.localStorage.removeItem(key);
        }
    },

    clear: function() {
        if (PJF.communication.isInClient()) {
            // !!! DO NOT SUPPORT !!!
        } else {
            window.localStorage.clear();
        }
    }
};

/*
 * 客户端数据存储：会话存储, 客户端退出后自动销毁
 * */
PJF.communication.sessionStorage = {
    setValue: function(key, value) {
        if (PJF.communication.isInClient()) {
            PJF.communication.Database.Write(0, key, value, true);
        } else {
            window.sessionStorage.setItem(key, value);
        }
    },

    getValue: function(key) {
        if (PJF.communication.isInClient()) {
            return PJF.communication.Database.Read(0, key);
        } else {
            var value = window.sessionStorage.getItem(key);
            var ret = '';
            if (value == null) {
                ret = {
                    success: false,
                    error: 'Not Exist',
                    errorCode: '1',
                    result: ''
                };
            } else {
                ret = {
                    success: true,
                    error: '',
                    errorCode: '',
                    result: value
                };
            }
            return ret;
        }
    },

    removeItem: function(key) {
        if (PJF.communication.isInClient()) {
            PJF.communication.Database.Delete(0, key);
        } else {
            window.sessionStorage.removeItem(key);
        }
    },

    clear: function() {
        if (PJF.communication.isInClient()) {
            // !!! DO NOT SUPPORT !!!
        } else {
            window.sessionStorage.clear();
        }
    }
};

// 打开在线文档
/*
 canPrintPdf : 是否允许PDF打印
 printerArgs : 打印参数，详情参见外设打印规范
 {
 iTotalPaperNum  预期打印的回单张数
 iSlotType       纸槽类别
 iChapterType    盖章模式
 pchChapterPos   盖章位置
 iChapterNum     需要盖的章的总个数
 pchPrinterName  打印机名称
 pchPDFFilePath..文件全路径(如果打印本地文件)
 readButtonText "我已阅读"按钮的实际文本
 }
 */
PJF.communication.OpenDocOnline = function(docAddr, canPrintPdf, printerArgs, callback) {
    docAddr = PJF.util.addAtchBtchNoToUrl(docAddr)
    canPrintPdf = (canPrintPdf == true);
    printerArgs = printerArgs || {};

    if (callback) {
        var id = PJF.communication.generateEventId();
        PJF.event.onceSubscriber(id, callback);
        printerArgs.eventId = id;
    }
    printerArgs.readButtonText = printerArgs.readButtonText || "我已阅读";

    var params = {
        docFullAddr: docAddr,
        canPrintPdf: canPrintPdf,
        printerArgs: JSON.stringify(printerArgs)
    };

    return PJF.communication.CallClient("opendoconline", params);
};

// 退出客户端
PJF.communication.AppExit = function() {
    return PJF.communication.CallClient("exit", "");
};

// 重启客户端
PJF.communication.AppRestart = function(reserved) {
    var params = {
        jsonArgs: reserved || ""
    };
    return PJF.communication.CallClient("appRestart", params);
};

// 锁定计算机，登出当前账户
PJF.communication.LockComputer = function() {
    return PJF.communication.CallClient("lockcomputer", "");
};

// 解锁应用，应用须在解锁时调用此接口启动空闲监测
PJF.communication.UnlockApp = function() {
    return PJF.communication.CallClient("unlockapp", "");
};

// 播放声音
PJF.communication.PlaySound = function(ringType) {
    var ringSupported = ["Ding", "Error", "Exclamation",
        "Logoff", "Logon", "Notify", "Unlock"
    ];

    if (ringSupported.indexOf(ringType) == -1) {
        ringType = ringSupported[0];
    }

    var params = {
        'soundType': ringType
    };

    return PJF.communication.CallClient("playsound", params);
};

PJF.communication.Common = {
    QrCodeVerify: function(str){
        var param = {
            codeStr : str,
        };
        return PJF.communication.CallClientPro("QrCode", "Verify", param, null);
    }
}

PJF.communication.HtmlToJpg = function(html, imgWidth, imgHeight, callBack) {
    try {
        var id = PJF.communication.generateEventId();
        PJF.event.onceSubscriber(id, callBack);

        var params = {
            html: encodeURIComponent(html),
            imgWidth: imgWidth,
            imgHeight: imgHeight,
            eventId: id
        };

        return PJF.communication.CallClient("htmlToJpg", params);
    } catch (e) {
        return {
            success: false,
            error: 'call client exception' + e,
            errorCode: '1',
            result: ' '
        };
    }
};

PJF.communication.createClientLoading = function(timeout) {
    var params = {
        "timeout": timeout
    }
    
    return PJF.communication.CallClient("createClientLoading", params);
};
PJF.communication.destroyClientLoading = function() {    
    var params = {
    }
    
    return PJF.communication.CallClient("destroyClientLoading", params);
}

PJF.communication.changeMaintainMode = function(maintainMode) {
    return PJF.communication.CallClientPro(
        "MutliScreenManager",
        "ChangeMaintainMode", {
            "enable": maintainMode
        });
}

PJF.communication.isSecondScreen = function() {
    var ret = PJF.communication.CallClientPro("MutliScreenManager", "IsSecondScreen", {});
    return (ret.result.toLowerCase() === 'true');
}

// 调试窗口
PJF.communication.DebugExtension = function(show) {
    var params = {
        'show': show
    };
    return PJF.communication.CallClient("debugwindow", params);
};

// 屏幕键盘 - 若页面需要知道键盘弹出和关闭事件须注册keyboardShow, keyboardHide事件
PJF.communication.ShowKeyboard = function() {
    return PJF.communication.CallClient("keyboard", '');
};

// DNS解析
PJF.communication.DnsResolve = function(domainName, serverIp) {
    var params = {
        'domainName': domainName,
        'serverIp': serverIp
    };
    return PJF.communication.CallClient("dnsResolve", params);
};

//获取本地IP地址
PJF.communication.GetIp = function() {
    return PJF.communication.CallClient("getIpAddress", '');
};
//获取本地MAC地址
PJF.communication.GetMac = function() {
    return PJF.communication.CallClient("getMacAddress", '');
};
//获取本地IP及MAC地址
PJF.communication.GetMachine = function() {
    return PJF.communication.CallClient("getMachineInfo", '');
};
//获取CPU编号
PJF.communication.GetCpuNo = function() {
    return PJF.communication.CallClient("getCpuNo", '');
};

//获取GUID
PJF.communication.GetUniqueNo = function() {
    return PJF.communication.CallClient("getUniqueNo", '');
};

//获取客户端信息， 这个是真的， 返回壳的版本   {"success":true,"errorCode":" ","error":" ","result":"2.0.4.0"}  android 下，两个返回值一致
PJF.communication.GetClientInfo = function() {
    return PJF.communication.CallClient("getLocalVersion", "");
};

//secApi加密
PJF.communication.Encrypt = function(data, userName, key, secNodeId) {
    var params = {
        'data': data,
        'userName': userName,
        'key': key,
        'secNodeId': secNodeId
    };
    return PJF.communication.CallClient("encrypt", params);
};
//secApi 0x88加密
PJF.communication.Encrypt0x88 = function(count, userName, key, secNodeId) {
    var params = {
        'count': count,
        'userName': userName,
        'key': key,
        'secNodeId': secNodeId
    };
    return PJF.communication.CallClient("encrypt0x88", params);
};
//secApi解密
PJF.communication.Decrypt = function(data, userName, key, secNodeId) {
    var params = {
        'data': data,
        'userName': userName,
        'key': key,
        'secNodeId': secNodeId
    };
    return PJF.communication.CallClient("decrypt", params);
};

PJF.communication.SecAPI = {
    'E2EEncryptPin': function(secNodeId, userName, p2keyinfo, pan, pin) {
        var params = {
            'secNodeId': secNodeId, //安全节点号
            'userName': userName, //ClientID
            'key': p2keyinfo, //
            'pan': pan, //用户主账户
            'pin': pin //账户PIN码
        };
        return PJF.communication.CallClient("E2EEncryptPin", params);
    },
    E2EEncryptPwd: function(dataType, secNodeId, clientId, p2keyinfo, data){
        var params = {
            'type'     : dataType,  // 0: CVV端到端加密, 2: 二磁道端到端加密
            'secNodeId': secNodeId, //安全节点号
            'clientId' : clientId, //ClientID
            'key'      : p2keyinfo,
            'data'     : data
        };
        return PJF.communication.CallClient("E2EEncryptPwd", params);
    },
    generateMac: function(userName, key, secNodeId, data) {
        var params = {
            'data': data,
            'userName': userName,
            'key': key,
            'secNodeId': secNodeId
        };
        return PJF.communication.CallClient("generateMac", params);
    }
};

PJF.communication.player = {
    OpenVideo: function(url, position) {
        var params;
        if (position.length == 4) {
            params = {
                'url': url,
                'left': position[0],
                'top': position[1],
                'width': position[2],
                'height': position[3]
            }
        } else {
            params = {
                'url': url,
                'left': null,
                'top': null,
                'width': null,
                'height': null
            }
        }
        return PJF.communication.CallClient("openVideo", params);
    },
    PlayVideo: function() {
        return PJF.communication.CallClient("playVideo", '');
    },
    PauseVideo: function() {
        return PJF.communication.CallClient("pauseVideo", '');
    },
    ShowVideoPlayer: function(position) {
        var params;
        if (position.length == 4) {
            params = {
                'left': position[0],
                'top': position[1],
                'width': position[2],
                'height': position[3]
            }
        } else {
            params = {
                'left': null,
                'top': null,
                'width': null,
                'height': null
            }
        }
        return PJF.communication.CallClient("showVideoPlayer", params);
    },
    HideVideoPlayer: function() {
        return PJF.communication.CallClient("hideVideoPlayer", '');
    },
    RotateVideoPlayer: function(degree) {
        var params = {
            'degree': degree
        };
        return PJF.communication.CallClient("rotateVideoPlayer", params);
    },
    //在指定位置显示并旋转
    ShowAndRotate: function(left, top, width, height, rotataDegree) {
        var params = {
            'left': left,
            'top': top,
            'width': width,
            'height': height,
            'rotataDegree': rotataDegree
        };
        return PJF.communication.CallClient("showAndRotate", params);
    },
    GetCurrentVideoUrl: function() {
        return PJF.communication.CallClient("getCurrentVideoUrl", '');
    },
    OnVideoPlayComplete: function() {
        PJF.event.asyncPublish(PJF.PadClientEvents.player.videoPlayComplete);
    },

    // 根据path播放声音，path可以为http:开头的声音文件路径 或者相对于exe根目录的Resources目录下的文件名
    PlaySoundByUrl: function(path, playNow) {
        var params = {
            'url': path,
            'playNow': !(playNow === false)
        };
        return PJF.communication.CallClient("playsoundByUrl", params);
    },

    // 朗读text内的文本，音量为volume，volume必须为0~100的整数
    SpeekText: function(text, volume) {
        if (!volume) volume = -1;
        var params = {
            text: text,
            volume: volume
        };
        return PJF.communication.CallClient("speekText", params);
    }
};

/* 前端日志
 *
 */
PJF.communication.log = {
    WriteLog: function(log) {
        var params = {
            'logStr': encodeURIComponent(log)
        };

        return PJF.communication.CallClient("writelog", params);
    },
    /* WEB应用日志, 用于应用监控, 广开每天上传 */
    WriteAppMonLog: function(log) {
        var params = {
            'logStr': encodeURIComponent(log),
            'otherInfo': '' /* 保留参数, 用于可能的参数细化 */
        };

        return PJF.communication.CallClient("WriteAppMonLog", params);
    },

    /* logType: 'all', 'warning', 'info', 'error'.
     * logTime: '0': AllTime, '1': thisDay, '2': thisWeek, '3': thisMonth.
     */
    ReadLog: function(logType, logTime) {
        var params = {
            'logType': logType,
            'logTime': logTime
        };

        return PJF.communication.CallClient("readlog", params);
    },

    ClearLog: function() {
        var params = {};
        return PJF.communication.CallClient("clearlog", params);
    },
    /* 获取最近50条客户端和页面的日志 */
    GetLatestLogs: function() {
        var params = {};
        return PJF.communication.CallClient("getLatestLogs", params);
    },
    /* 截屏并返回base64字串 */
    GetScreenSnapshotStr: function(width, height) {
        var params = {
            'width': width || 1280,
            'height': height || 720
        };
        return PJF.communication.CallClient("getScreenSnapShot", params);
    }
};


/* 获取客户端的版本， 这个是假的，返回的是fwk的版本 {"success":true,"errorCode":" ","error":" ","result":"1.16.6.0"}
 *
 */
PJF.communication.GetApplicationVersion = function() {
    return PJF.communication.CallClient("getfwkversion", "");
};

/* 获取mdm uuid
 *
 */
PJF.communication.getMDMuuid = function() {
    return PJF.communication.CallClientPro("ClientInfo", "getMDMuuid", null, null);
}

/* 获取设备 uuid
 *
 */
PJF.communication.getDevicePhysicalId = function() {
    return PJF.communication.CallClientPro("ClientInfo", "getDevicePhysicalId", null, null);
}


PJF.communication.SocketServer = {
    OnEvent: function(eventId, type, data, syncPublish) {
        if (syncPublish) {
            return PJF.event.publish(eventId, type, data);
        } else {
            return PJF.event.asyncPublish(eventId, type, data);
        }
    },
    StartServer: function(port, eof, callback) {
        var params = {
            'port': port,
            'eof': eof,
            'async': !(callback == null)
        };
        return PJF.communication.CallClientPro("SocketServer", "StartServer", params, callback);
    },
    StopServer: function(serverId, callback) {
        var params = {
            'serverId': serverId,
            'async': !(callback == null)
        };
        return PJF.communication.CallClientPro("SocketServer", "StopServer", params, callback);
    },

    Send: function(socketId, message, callback) {
        var params = {
            'socketid': socketId,
            'message': message,
            'async': !(callback == null)
        };
        return PJF.communication.CallClientPro("SocketServer", "Send", params, callback);
    },
    CloseSocket: function(socketId, callback) {
        var params = {
            'socketid': socketId,
            'async': !(callback == null)
        };
        return PJF.communication.CallClientPro("SocketServer", "CloseSocket", params, callback);
    },
};

PJF.communication.SocketClient = {
    OnEvent: function(eventId, status, dataArray, syncPublish) {
        if (syncPublish) {
            return PJF.event.publish(eventId, status, dataArray);
        } else {
            return PJF.event.asyncPublish(eventId, status, dataArray);
        }
    },
    Connect: function(ip, port, eof, callback) {
        var params = {
            'ip': ip,
            'port': port,
            'eof': eof,
            'async': !(callback == null)
        };
        return PJF.communication.CallClientPro("SocketClient", "Connect", params, callback);
    },
    Close: function(socketId, callback) {
        var params = {
            'socketId': socketId,
            'async': !(callback == null)
        };
        return PJF.communication.CallClientPro("SocketClient", "Close", params, callback);
    },
    Send: function(socketId, msg, callback) {
        var params = {
            'socketId': socketId,
            'message': msg,
            'async': !(callback == null)
        };
        return PJF.communication.CallClientPro("SocketClient", "Send", params, callback);
    },
};

/**
 *
 * 捷通华声语音合成
 *
 */
PJF.communication.TTS = {
    /*
     * 识别语音并进行播放
     * service 语音合成服务地址 host:port 必填
     * voiceid 语音合成服务语音库信息 可以为空
     * content 需要进行合成并播放的内容 必填
     * timeout 超时时间（单位:秒) 可为空，默认为10秒
     */
    VoicePlay:function(service,voiceid,content,timeout,callBack){
        var params = {
            'service':service,
            'content':content,
        };
        if(voiceid){
            params.voice_id = voiceid;
        }
        if(timeout){
            params.timeout = timeout;
        }
        return PJF.communication.CallShellExt("VoiceMergeExt","VoicePlay",params,callBack);
    },

    /*
     * 若当前存在合成语音播放，则停步播放
     */
    VoiceStop:function(){
        return PJF.communication.CallShellExt("VoiceMergeExt","VoiceStop",{});
    }
};

/**
 * 语音唤醒与语音识别
 */
PJF.communication.IAT = {
    Starting : false,
    /**
     * 开启语音关键字唤醒
     *
     * word: 唤醒关键字
     * duration : 唤醒持时间(单位秒),不传或小于等于零时，则一直持续
     */
    VoiceWakeUpStart :function(word,duration,callback){
        var params = {
            word:word,
            duration:duration
        };
        return PJF.communication.CallShellExt("VoiceWakeUpExt","Start",params,callback);
    },
    /**
     * 主动停止语音关键字唤醒识别
     **/
    VoiceWakeUpStop : function(callback){
        return PJF.communication.CallShellExt("VoiceWakeUpExt","End",{},callback);
    },
    /**
     * 唤醒例程识别到关键字回调并发布VoiceWakeUp事件
     */
    OnVoiceWakeUpRecognized : function(eventid,text){
        //识别到唤醒关键字
        if(!PJF.communication.IAT.Starting){
            //发布异常事件，防止在唤醒事件执行耗时操作时界面卡顿
            PJF.event.asyncPublish("VoiceWakeUp");
        }
    },
    /**
     *    初始化语音识别组件
     *  conf:语音识别服务连接参数，不传则默认为“appid=1zh5Gy6J,svc=iatnlp,auf=audio/L16;rate=16000,aue=raw,type=1,uid=660Y5r,url=128.128.96.9:8002,extend_params={"params":"org=stm,token=D2572A0D2,ability=ab_atsnlp,eos=2000"}”
     */
    StartTransForm : function(conf,callback){
        var params = {};
        if(conf){
            params.param = conf;
        }
        params.file = ""; //兼容3.0.0.0版本语音识别插件
        return PJF.communication.CallShellExt("AudioTransFormExt","StartTransForm",params,callback);
    },
    /**
     * 开始进行语音识别，调用成功后可进行语音输入
     * file:语音记录文件路径
     * callback:function(val) 语音识别成功/结束回调,val为json字符串,可通过Json.parse()函数转变为Json对象
     * 识别成功时，Json.parse(val).result 为语音识别内容
     */
    StartRecording : function(file,callback,duration){
        PJF.communication.IAT.Starting = true;
        var params = {
            file:file,
            duration:duration
        };
        return PJF.communication.CallShellExt("AudioTransFormExt","StartRecording",params,callback);
    },
    /**
     * 停止语音识别组件，语音识别成功能后必须调用该函数释放相关资源
     */
    StopRecording : function(callback){
        PJF.communication.IAT.Starting = false;
        return PJF.communication.CallShellExt("AudioTransFormExt","StopRecording",{},callback);
    },
    /**
     * 语音合成接口，提供文字内容转语音并进行播放
     * 后端采用讯飞语音合成服务
     *
     * @param {*} service 语音合成服务地址，测试环境服务器地址是"appid=1zh5Gy6J,svc=tts,aue=raw,auf=4,vid=20027,type=1,uid=660Y5r,url=128.128.98.38:1027,extend_params={\"params\":\"org=stm,token=D2572A0D1,ability=ab_atsnlp\"}"
     * @param {*} content 待合成的文字内容
     * @param {*} callback 语音合成回调
     */
    VoicePlay:function(service,content,callback){
        var params = {
            'param':service,
            'txt':content,
        };
        return PJF.communication.CallShellExt('SpeechSynthesisExt','Play',params,callback);
    },

    /**
     * 停止语音播放，若语音合成音频正在播放，则停止当前播放内容
     */
    VoiceStop:function(){
        return PJF.communication.CallShellExt('SpeechSynthesisExt','Stop',{});
    },

    /**
     * 语音合成并将音频数据输入到指定文件
     * 音频文件格式仅支持wav
     *
     * @param {*} service 语音合成服务地址，测试环境服务器地址是"appid=1zh5Gy6J,svc=tts,aue=raw,auf=4,vid=20027,type=1,uid=660Y5r,url=128.128.98.38:1027,extend_params={\"params\":\"org=stm,token=D2572A0D1,ability=ab_atsnlp\"}"
     * @param {*} content 待合成的文字内容
     * @param {*} file 语音数据存放的文件路径
     * @param {*} callback
     */
    VoiceToFile:function(service,content,file,callback){
        var params = {
            'param':service,
            'txt':content,
            'file':file
        };
        return PJF.communication.CallShellExt('SpeechSynthesisExt','TransToFile',params,callback);
    }
};
/* 跨域请求
 * 参数：
 *       url: 跨域请求全地址
 *       data: 请求内容，须为string格式
 *       post: 支持POST和GET方法，false为GET
 *       timeOut: 超时时间
 *       callBack: AJAX请求回调，由PJF配置
 */
PJF.communication.Http = {
    OnCrossDomainResponse: function(eventId, status, dataArray, syncPublish) {
        if (syncPublish) {
            return PJF.event.publish(eventId, status, dataArray);
        } else {
            return PJF.event.asyncPublish(eventId, status, dataArray);
        }
    },
    OnPostUploaded: function(eventId, status, dataArray) {
        return PJF.event.asyncPublish(eventId, status, dataArray);
    },
    SendCrossDomainRequest: function(url, data, timeOut, callBack, headers) {
        var id = PJF.communication.generateEventId();
        if(callBack) {
            var callBack2 = callBack;
            callBack = function(status, rep) {
                if(typeof(status) === 'object') {
                    status = JSON.stringify(status);
                }
                if(typeof(rep) === 'object') {
                    rep = JSON.stringify(rep);
                }
                callBack2(status, rep);
            }
        }
        PJF.event.onceSubscriber(id, callBack);
        var params = {
            'url': url,
            'data': data,
            'post': true,
            'headers': headers,
            'timeOut': timeOut || 30000,
            'eventId': id
        };
        return PJF.communication.CallClient("sendhttp", params);
    },
    SendWebCrossDomainRequest: function(url, data, timeOut, callBack, headers) {
        var id = PJF.communication.generateEventId();
        if(callBack) {
            var callBack2 = callBack;
            callBack = function(status, rep) {
                if(typeof(status) === 'object') {
                    status = JSON.stringify(status);
                }
                if(typeof(rep) === 'object') {
                    rep = JSON.stringify(rep);
                }
                callBack2(status, rep);
            }
        }
        PJF.event.onceSubscriber(id, callBack);
        var params = {
            'url': url,
            'data': data,
            'post': true,
            'headers': headers,
            'timeOut': timeOut || 30000,
            'eventId': id
        };
        return PJF.communication.CallClient("sendhttpWebService", params);
    },
    SendCrossDomainAjax: function(url, data, timeOut, post, async, callBack) {
        var params = {
            'url': url,
            'data': data,
            'post': post,
            'async': async,
            'timeOut': timeOut || 30000
        };
        return PJF.communication.CallClientPro("CrossDomainRequest", "SendAjax", params, callBack);
    },
    //Http上传,附带Form提交
    PostUpload: function(url, filePath, formJsonData, timeout, callBack) {
        PJF.util.addAtchBtchNoToJsonData(formJsonData)
        // 加个老代码兼容的判断
        if($.isFunction(timeout)) {
            callBack = timeout;
            timeout = null;  // 单位毫秒
        }
        if(timeout == null) timeout = 30000;  // 单位毫秒

        var id = PJF.communication.generateEventId();
        var params = {
            'url': url,
            'filePath': filePath,
            'formData': formJsonData,
            'eventId': id
        };

        if (PJF.communication.getClientType() === "android") {
            params.timeout = timeout;
            PJF.event.onceSubscriber(id, callBack);
            return PJF.communication.CallClient("postUpload", params);
        }

        var clientVersion = PJF.communication.GetClientInfo();
        if (clientVersion.success && clientVersion.result > "2.0.8.0") {
            params.timeout = timeout;
            params.formData = JSON.stringify(formJsonData);
            return PJF.communication.CallClientPro("WebPageControl", "PostUploadEx", params, callBack);
        } else {
            //兼容老版本客户端接口声明，忽略timeout参数
            PJF.event.onceSubscriber(id, callBack);
            return PJF.communication.CallClient("postUpload", params);
        }
    },

    SimpleDownload: function(url, filePath, timeout, callBack){
        url = PJF.util.addAtchBtchNoToUrl(url)
        return PJF.communication.CallClientPro("FileDownload", "SimpleDownload", {'path':filePath, 'url':url}, callBack);
    },

    SendSocketMsg: function(ip, port, data, async, callBack) {
        var params = {
            'ip': ip,
            'port': port,
            'data': data,
            'async': async,
            'timeOut': 30000
        };
        return PJF.communication.CallClientPro("CrossDomainRequest", "SendSocketMsg", params, callBack);
    }
};

/* 高精度浮点数四则运算
 * 说明：只支持十进制, 不支持表达式
 * 参数：
 *     type : // +, -, *, /, 本参数错误时返回NaN;
 *     val1 : // 被x数
 *     val2 : // x数
 * 返回值：
 *     NaN
 *     Infinity
 * */
PJF.communication.Calculate = function(type, val1, val2) {
    var params = {
        'type': type,
        'val1': val1,
        'val2': val2
    };

    return PJF.communication.CallClient("calculate", params);
};

/*
 * Tab页管理, 当前客户端为应用提供了2个tab页.
 */
PJF.communication.SinglePoint = function(url) {
    var params = {
        'url': url
    };
    return PJF.communication.CallClient('singlepoint', params);
};

PJF.communication.Tabs = {
    //用户点击关闭按钮时,客户端询问当前tab页是否可以关闭,0-不允许/1-关闭并重置/2-隐藏不重置.
    CanCloseThisTab: function() {
        return PJF.event.publish(PJF.PadClientEvents.tab.canCloseThisTab);
    },
    BroadcastMessage: function(tabArray, jsToInvoke, callback) {
        var params = {};
        return PJF.communication.CallClientPro("IeTabControl", "broadcastTabMessage", params, null);
    },
    ActivateTabByIndex: function(tabIndex, jsToInvoke) {
        var params = {
            tabIndex: tabIndex,
            jsToInvoke: jsToInvoke
        };
        return PJF.communication.CallClient("activateTabByIndex", params);
    },
    ExecuteScript: function(tabIndex, jsToInvoke) {
        var params = {
            tabIndex: tabIndex,
            jsToInvoke: jsToInvoke
        };
        return PJF.communication.CallClientPro("IeTabControl", "ExecuteScript", params, null);
    },
    GetCurrentTabIndex: function() {
        var params = {};
        return PJF.communication.CallClientPro("IeTabControl", "GetCurrentTabIndex", params, null);
    },
    GetActivedTabIndex: function() {
        var params = {};
        return PJF.communication.CallClientPro("IeTabControl", "GetActivedTabIndex", params, null);
    },
    IsTabActived: function(tabindex) {
        if (tabindex == null) tabindex = -1;
        var params = {
            tabindex: tabindex // -1  表示js运行所在webview
        };
        return PJF.communication.CallClientPro("IeTabControl", "IsTabActived", params, null);
    },
    RefreshThisTab: function() {
        var params = {};
        return PJF.communication.CallClientPro("IeTabControl", "RefreshThisPage", params, null);
    },
    //开启并加载新Tab页：url-新页面地址, settings-设置参数预留JSON对象
    OpenNewTab: function(url, settings) {
        var params = {
            url: url,
            settings: settings
        };
        return PJF.communication.CallClientPro("IeTabControl", "OpenNewTab", params, null);
    },
    CloseThisTab: function(tabIndex, onlyHide) {
        if (tabIndex == null) tabIndex = -1;
        var params = {
            tabIndex: tabIndex, //Close this tab as default.
            onlyHide: onlyHide
        }; //增加接口设置关闭还是隐藏
        return PJF.communication.CallClientPro("IeTabControl", "CloseThisTab", params, null);
    },
    //获取隐藏的WebView列表
    GetWebBrowserListInUse: function() {
        var params = {}; //增加接口设置关闭还是隐藏
        return PJF.communication.CallClientPro("IeTabControl", "GetWebBrowserListInUse", params, null);
    },
    ShowLoadingMask: function(duration){
        var params = {
            showTime : duration
        };
        return PJF.communication.CallClientPro("IeTabControl", "ShowLoadingMask", params, null);
    },
    HideLoadingMask: function(){
        var params = {};
        return PJF.communication.CallClientPro("IeTabControl", "HideLoadingMask", params, null);
    }
};

/*
 * 文件下载管理。
 * 功能： Add： 添加新下载任务
 *       Pause：暂停文件下载
 *       Cancel： 取消文件下载
 *       Delete：从文件下载列表中删除，必须是已cancel的下载
 *       UpdateProgress：客户端通知文件下载进度，在Add时自动注册Notification
 *
 * */
PJF.communication.FileDownload = {
    Add: function(fileName, fullAddr) {
        // fullAddr = PJF.util.addAtchBtchNoToUrl(fullAddr)
        var params = {
            'fileName': fileName,
            'url': fullAddr
        };
        return PJF.communication.CallClient("downloadfile", params);
    },

    Pause: function(fileName) {
        var params = {
            'fileName': fileName
        };
        return PJF.communication.CallClient("downloadpause", params);
    },

    Cancel: function(fileName) {
        var params = {
            'fileName': fileName
        };
        return PJF.communication.CallClient("downloadcancel", params);
    },

    Delete: function(fileName) {
        var params = {
            'fileName': fileName
        };
        return PJF.communication.CallClient("downloaddelete", params);
    },

    GetDownloadList: function() {
        return PJF.communication.CallClient("getdownloadlist", "");
    },

    // Events notification from client.
    OnDownloadNew: function(fileName) {
        PJF.event.asyncPublish(PJF.PadClientEvents.download.addNew, fileName, 0, 0, 'newdownload');
        return "success";
    },

    OnProgressUpdate: function(fileName, progress, rate, status) {
        PJF.event.asyncPublish(PJF.PadClientEvents.download.progressUpdate,
            fileName, progress, rate, 'downloading');
        return "success";
    },

    OnDownloadFailed: function(fileName) {
        PJF.event.asyncPublish(PJF.PadClientEvents.download.failed, fileName, 0, 0, 'failed');
    },

    OnDownloadCompleted: function(fileName) {
        PJF.event.asyncPublish(PJF.PadClientEvents.download.completed, fileName, 0, 0, 'complete');
    }
};

PJF.communication.FileUpload = {
    Add: function(filePath, fullAddr, timeout) {
        var params = {
            'filePath': filePath,
            'url': fullAddr
        };

        if (PJF.communication.getClientType() === "android") {
            params.timeout = timeout;
            return PJF.communication.CallClient("uploadfile", params);
        }
        var clientVersion = PJF.communication.GetClientInfo();
        if (clientVersion.success && clientVersion.result > "2.0.8.0") {
            params.timeout = timeout;
            return PJF.communication.CallClientPro("FileUpload", "UploadEx", params);
        } else {
            //兼容老版本客户端接口声明，忽略timeout参数
            return PJF.communication.CallClient("uploadfile", params);
        }
    },

    Cancel: function(fileName) {
        var params = {
            'fileName': fileName
        };
        return PJF.communication.CallClient("uploadcancel", params);
    },

    Delete: function(fileName) {
        var params = {
            'fileName': fileName
        };
        return PJF.communication.CallClient("uploaddelete", params);
    },

    GetUploadList: function() {
        return PJF.communication.CallClient("uploadlist", "");
    },

    // Events notification from client.
    OnUploadNew: function(fileName) {
        PJF.event.asyncPublish(PJF.PadClientEvents.upload.addNew, fileName, 0, 0, 'newupload');
    },

    OnProgressUpdate: function(fileName, progress, rate, status) {
        PJF.event.asyncPublish(PJF.PadClientEvents.upload.progressUpdate,
            fileName, progress, rate, 'uploading');
    },

    OnUploadFailed: function(fileName) {
        PJF.event.asyncPublish(PJF.PadClientEvents.upload.failed, fileName, 0, 0, 'failed');
    },

    OnUploadCompleted: function(fileName) {
        PJF.event.asyncPublish(PJF.PadClientEvents.upload.completed, fileName, 0, 0, 'complete');
    }
};

/* 应用程序使用默认的存储目录
 */
PJF.communication.fileSystem = {
    readPdfPic: function(pdfName, pageId) {
        var params = {
            'pdfName': pdfName,
            'pageId': pageId
        };
        return PJF.communication.CallClient("readpdfpage", params);
    },

    getPdfPageCount: function(pdfName) {
        var params = {
            'pdfName': pdfName
        };
        return PJF.communication.CallClient("pdfpagecount", params);
    },

    getPdfFilePageCount: function(pdfPath){
        return PJF.communication.CallClientPro("ShellControl","GetPdfFilePageCount", {'pdfPath' : pdfPath}, null);
    },

    getAppStorageFolder: function() {
        var params = {};
        return PJF.communication.CallClient("getAppFolder", params);
    },

    getUserRootDir: function() {
        var params = {};
        return PJF.communication.CallClient("getUserRootDir", params);
    },

    getAppWorkingDir: function() {
        var params = {};
        return PJF.communication.CallClientPro("ClientInfo", "GetApplicationWorkingPath", params, null);
    },

    getAppResourceDir: function() {
        var path = (PJF.communication.getClientType() == 'Kylin') ? '/usr/KIOSK/stmClient/resources/' : 'D:/STMClient/Bin/Resources/'
        return {
            success: true,
            error: '',
            errorCode: '0',
            result: path
        };
    },

    readImage: function(path) {
        var params = {
            'imagePath': path
        };
        return PJF.communication.CallClient("readImage", params);
    },


    FO_MOVE: 'FO_MOVE',
    FO_COPY: 'FO_COPY',
    FO_DELETE: 'FO_DELETE',
    FO_RENAME: 'FO_RENAME',
    FO_MKDIR: 'FO_MKDIR',
    FO_DIR: 'FO_DIR',
    /*
     * op是如下几种：FO_MOVE,  FO_COPY,  FO_DELETE,  FO_RENAME,  FO_MKDIR,  FO_DIR
     * tasks : [{source : 'file1', dest : 'file2'},{source : 'file1', dest : 'file2'}]
     * 返回： [{result : ''}, {result : ''}, {result : ''},, {result : ''}]
     */
    fileOperation: function(op, tasks) {
        // var id = PJF.communication.generateEventId();
        // PJF.event.onceSubscriber(id, callback);
        var params = {
            eventId: "",
            jsonArgs: JSON.stringify({
                operation: op,
                tasks: tasks
            })
        };

        var ret = PJF.communication.CallClient("fileOperation", params);

        // 兼容老的代码 ╮(╯▽╰)╭ 默认，不带folder
        function dir_compatibility(op, tasks, ret) {
            if (ret.success && op === 'FO_DIR') {
                var task0 = tasks[0];
                if (task0 && !task0.showFolder) { // task有showFloder字段，才给目录
                    var r = JSON.parse(ret.result);
                    var task0Ret = r[0];
                    if (task0Ret.success) {
                        // 过滤
                        var target0 = [];
                        for (var i = 0, len = task0Ret.result.length; i < len; i++) {
                            if (!task0Ret.result[i].isFolder) {
                                target0.push(task0Ret.result[i]);
                            }
                        }

                        if (target0.length !== len) {
                            task0Ret.result = target0;
                            ret.result = JSON.stringify(r); // 修改数据
                        }
                    }
                }
            }
        }

        dir_compatibility(op, tasks, ret);
        if (ret.success && op === 'FO_DELETE') {
            PJF.communication.fileSystem.runWinCmd('"start /b rd /s /q c:\\$Recycle.bin"');
            PJF.communication.fileSystem.runWinCmd('"start /b rd /s /q d:\\$Recycle.bin"');
        }
        return ret;
    },
    /*
     * Another API same as fileOperation FO_DIR which supports searchPattern of 'a combination of valid literal path
     * and wildcard (* and ?) characters, but doesn't support regular expressions',
     * and AllDirectories(0)/TopDirectoryOnly(1) option.
     */
    EnumerateFiles: function(path, searchPattern, option) {
        var parms = {
            "path": path,
            "searchPattern": searchPattern,
            "option": option
        };
        return PJF.communication.CallClientPro("ShellControl", "EnumerateFiles", parms);
    },

    dirCompress: function(srcDir, ext, destDir, outFileName, callback) {
        var id = PJF.communication.generateEventId();
        PJF.event.onceSubscriber(id, callback);

        var params = {
            eventId: id,
            srcDir: srcDir,
            ext: ext,
            destDir: destDir,
            outFileName: outFileName
        };

        return PJF.communication.CallClient("dirCompress", params);
    },

    filesCompress: function(srcFiles, ext, destDir, outFileName, callback) {
        var id = PJF.communication.generateEventId();
        PJF.event.onceSubscriber(id, callback);

        var params = {
            eventId: id,
            filesArray: srcFiles,
            ext: ext,
            destDir: destDir,
            outFileName: outFileName
        };
        return PJF.communication.CallClientPro("ShellControl", "FilesCompress", params, callback);
    },

    writeFile: function(fullPath, content, bOverwrite, bAutoNewLine, charset) {
        var params = {
            fullPath: fullPath,
            content: encodeURIComponent(content),
            bOverwrite: bOverwrite,
            bAutoNewLine: bAutoNewLine,
            charset: charset == null ? "utf-8" : charset
        };
        return PJF.communication.CallClientPro("ShellControl", "WriteFile", params, null);
    },

    readFile: function(fullPath, startLine, lines, charset) {
        var params = {
            fullPath: fullPath,
            startLine: startLine,
            lines: lines
        };
        return PJF.communication.CallClientPro("ShellControl", "ReadFile", params, null);
    },

    getFileLineCount: function(fullPath) {
        var params = {};
        return PJF.communication.CallClientPro("ShellControl", "GetFileLineCount", params, null);
    },

    getFileSize: function(path) {
        var params = {
            fullPath: path
        };
        return PJF.communication.CallClient("getFileSize", params);
    },

    runWinCmd: function(cmd) {
        var params = {
            'winCmd': cmd
        };
        return PJF.communication.CallClient("runWinCmd", params);
    }
};


/*
 * 客户端上一次是否正常退出
 * 返回值：
 *     正常：  true
 *     不正常：false
 * */
PJF.communication.clientOkInLastSession = function() {
    return PJF.communication.CallClient("didclientclosednormally", "");
};

PJF.communication.counter = 0;
PJF.communication.generateEventId = function() {
    PJF.communication.counter++;
    return "_autoGenEventId_" + Date.now() + "_" + PJF.communication.counter;
};

PJF.communication.OnShellCallBack = function(eventId, result) {
    PJF.event.asyncPublish.apply(null, arguments);
};

PJF.communication.IME = {
    /* 系统输入法 */
    OpenWindowsKeyboard: function(callback) {
        PJF.communication.devices.CallDevice('AppIME', 'openWinKeyboard', {}, callback);
    },
    DisableWindowsKeyboard: function(callback) {
        PJF.communication.devices.CallDevice('AppIME', 'disableWinKeyboard', {}, callback);
    },
    EnableWindowsKeyboard: function(callback, autoTrack) {
        var params = {
            'autoTrack': (autoTrack == true)
        }
        PJF.communication.devices.CallDevice('AppIME', 'enableWinKeyboard', params, callback);
    },
    /* hmode 输入法模式
     HWMODE_WRITE = 0 //手写模式
     HWMODE_CH = 1    //键盘中文
     HWMODE_ENG = 2   //键盘英文
     HWMODE_CHAR = 3  //键盘符号
     HWMODE_NUM = 4   //数字键盘输入
     */
    OpenSoftKeyboard: function(hmode, callback) {
        var args = {
            hmode: hmode
        };
        PJF.communication.devices.CallDevice('AppIME', 'openSoftKeyboard', args, callback);
    },

    CloseSoftKeyboard: function(callback) {
        PJF.communication.devices.CallDevice('AppIME', 'closeSoftKeyboard', {}, callback);
    }
};

PJF.communication.devices = {
    OnDeviceCallCompleted: function(eventId, deviceName, funcName, ret) {
        PJF.event.asyncPublish(eventId, deviceName, funcName, ret);
    },

    /* 此通知需注册事件: PJF.PadClientEvents.device.genDeviceEvent */
    OnDeviceEvents: function(deviceType, eventName, eventTime, data) {
        PJF.event.asyncPublish(PJF.PadClientEvents.device.genDeviceEvent, deviceType, eventName, eventTime, data);
    },

    GetDeviceDllPath: function(deviceId, callback) {
        return PJF.communication.devices.CallDevice('__DeviceService__', 'GetDeviceDllPath', deviceId, callback);
    },

    SetDeviceDllPath: function(pathConfig, callback) {
        return PJF.communication.devices.CallDevice('__DeviceService__', 'SetDeviceDllPath', pathConfig, callback);
    },

    GetDeviceConfigs: function() {
        var params = {};
        return PJF.communication.CallClientPro("ShellControl", "GetDeviceConfigs", params, null);
    },

    /* 在启动后需要调用此接口确认外设是否注册, 如果未注册, 则需要调用 RegistDevice 接口注册外设. */
    IsDeviceRegistered: function(deviceType, OEMCode, HWSpecific, callBack) {
        var args = {
            deviceType: deviceType,
            OEMCode: OEMCode,
            HWSpecific: HWSpecific
        };
        return PJF.communication.devices.CallDevice('__OEMInfoManager__', 'IsDeviceRegistered', args, callBack);
    },

    /**
     * 向CraigMachine.ini写入指纹仪的类型
     *
     * params:
     *       FingerFlag 该标志为指纹仪对应的类型,该值有如下几个值:
     *                  3-中正      4-方立      5-维尔
     *
     * return:
     *       返回值为一个json对象.平台函数调用成功则该jsonObject.result的值为"success".
     * */
    SetTDFingerFlag: function(FingerFlag) {
        var args = {
            FingerFlag: FingerFlag
        }
        return PJF.communication.devices.CallDevice('__OEMInfoManager__', 'SetTDFingerFlag', args);
    },

    /**
     * 读取CraigMachine.ini中已写入指纹仪的类型
     *
     *  @return:
     *       由于调用该方法是通过调用外设服务来写入值，因此请使用异步调用的方式来获取TDFinger的值,例如:
     *       PJF.communication.devices.GetTDFingerFlag(function(e){
     *           var TDFinger = JSON.parse(JSON.parse(e).result).TDFinger;
     *           console.info("TDFinger's value:" + TDFinger);
     *       });
     * */
    GetTDFingerFlag: function(callback) {
        var args = {
            timeout: 60
        }
        return PJF.communication.devices.CallDevice('__OEMInfoManager__', 'GetTDFingerFlag', args, callback);
    },

    /* 注册设备型号， 注册完成需要调用ResetDevice('ALL')重启客户端及外设
     * deviceType: 硬件类型 - STM, YTD
     * OEMCode: 设备厂商代码, 此代码用于外设驱动.
     *          1. STM有: BCD(北辰德), GRG(广电运通), KXD(凯欣达), GWI(长城信息)
     *          2. YTD有: enlatt(安朗), geit(国光), inspur(浪潮), santai(三泰), huaxia(华夏)
     * HWSpecific : 设备的硬件信息：立式，桌面式，便携式等。
     */
    RegisterDevice: function(deviceType, OEMCode, HWSpecific, callBack) {
        var args = {
            deviceType: deviceType,
            OEMCode: OEMCode,
            HWSpecific: HWSpecific
        };
        return PJF.communication.devices.CallDevice('__OEMInfoManager__', 'RegisterDevice', args, callBack);
    },

    /* 重启客户端及外设(ALL)，或单个设备(无此需求，暂不支持)
     */
    ResetDevice: function(deviceType) {
        var args = {
            deviceType: deviceType
        };
        return PJF.communication.devices.CallDevice('__OEMInfoManager__', 'ResetDevice', args, function(e) {});
    },

    CallDevice: function(deviceId, funcName, args, callback) {
        args.timeout = (typeof args.timeout == "undefined") ? 30 : args.timeout; // timeout默认值
        if (PJF.communication.isInClient() && (PJF.communication.getClientType() != 'Kylin')) {
            var id = PJF.communication.generateEventId();
            PJF.event.onceSubscriber(id, callback);
            var result = PJF.communication.CallClient("deviceCall", {
                deviceName: deviceId,
                funcName: funcName,
                eventId: id,
                jsonArgs: JSON.stringify(args)
            });
            result.eventId = id;
            return result;
        } else {
            //UI线程的外设方法..
            var _uiDevs = ["LHA", "AppIME"];
            if(_uiDevs.includes(deviceId)){
                return PJF.communication.CallClientPro(deviceId+"DevHandler", funcName, args, callback);
            }
            else{
                var url = "http://localhost:12315/CallDevice";
                var data = {};
                if (Object.prototype.toString.call(args) === "[object String]") {
                    data["args"] = args;
                } else {
                    data["args"] = JSON.stringify(args);
                }
                data["deviceId"] = deviceId;
                data["funcName"] = funcName;
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify(data),
                    contentType: "application/json;charset=utf-8",
                    success: function(d) {
                        if (callback) callback(d);
                    },
                    dataType: 'text'
                });
                //本地测试立即返回true
                return {
                    success: true,
                    error: '',
                    errorCode: '0',
                    result: 0
                };
            } 
        }
    },

    CallDeviceSync: function(deviceId, funcName, args) {
        args.timeout = (typeof args.timeout == "undefined") ? 30 : args.timeout; //timeout默认值
        if (PJF.communication.isInClient()) {
            return PJF.communication.CallClientPro("ShellControl", "CallDeviceSync", {
                    deviceName: deviceId,
                    funcName: funcName,
                    jsonArgs: JSON.stringify(args)
                },
                null);
        } else {
            return {
                success: false,
                errorCode: 1,
                errorInfo: "不支持本调用",
                result: ""
            };
        }
    }
};

//调用工具栏，visible为bool类型，表示Toolbar是否显示
PJF.communication.ShowToolbar = function(visible) {
    var params = {
        'visible': visible
    };
    return PJF.communication.CallClient("showToolbar", params);
};


/* 客户端插件调用接口集合 */
/* 1-多媒体插件 */
PJF.communication.MediaCaptureExt = {
    RecordVideo: function(folder, width, height, bitRate, timeLimit, callback) {
        var args = {
            Folder: folder,
            Width: width,
            Height: height,
            BitRate: bitRate,
            TimeLimitSec: timeLimit
        };
        args.IsEncrypt = PJF.communication.MediaCaptureExt.checkEncryptOptions(0);
        return PJF.communication.CallShellExt("MediaCaptureExt", "RecordVideo", args, callback);
    },

    /*新版接口,返回值中包括视频文件路径、文件大小及视频时长
     * 例： {success:true,result:"[{file:'文件1',duration:5,size:10012},{file:'文件2',duration:3,size:999}]"}
     */
    RecordVideoEx: function(folder, width, height, bitRate, timeLimit, callback) {
        var args = {
            Folder: folder,
            Width: width,
            Height: height,
            BitRate: bitRate,
            TimeLimitSec: timeLimit
        };
        args.IsEncrypt = PJF.communication.MediaCaptureExt.checkEncryptOptions(0);
        return PJF.communication.CallShellExt("MediaCaptureExt", "RecordVideoEx", args, callback);
    },

    /* folder: 音频文件存储目录,
       fileNamePrefix: 存储文件名前缀,根据用户点击生成多张图片的数组.
    */
    RecordAudio: function(folder, fileNamePrefix, timeLimit, callback) {
        var args = {
            Folder: folder,
            FileNamePattern: fileNamePrefix,
            TimeLimitSec: timeLimit
        };
        args.IsEncrypt = PJF.communication.MediaCaptureExt.checkEncryptOptions(1);
        return PJF.communication.CallShellExt("MediaCaptureExt", "RecordAudio", args, callback);
    },

    /*新版接口,返回值中包括音频文件路径、文件大小及音频时长
     * 例： {success:true,result:"[{file:'文件1',duration:5,size:10012},{file:'文件2',duration:3,size:999}]"}
     */
    RecordAudioEx: function(folder, fileNamePrefix, timeLimit, callback) {
        var args = {
            Folder: folder,
            FileNamePattern: fileNamePrefix,
            TimeLimitSec: timeLimit
        };
        args.IsEncrypt = PJF.communication.MediaCaptureExt.checkEncryptOptions(1);
        return PJF.communication.CallShellExt("MediaCaptureExt", "RecordAudioEx", args, callback);
    },

    TakePicture: function(folder, width, height, callback) {
        var args = {
            Folder: folder,
            Width: width,
            Height: height
        };
        args.IsEncrypt = PJF.communication.MediaCaptureExt.checkEncryptOptions(2);
        return PJF.communication.CallShellExt("MediaCaptureExt", "TakePicture", args, callback);
    },
    /* srcPath : 原图片全路径
     destPath: 压缩后图片全路径
     targetFormat : jpg, bmp, png, gif. */
    GetThumbnailImage: function(srcPath, destPath, targetWidth, targetHeight, targetFormat) {
        var args = {
            imagePath: srcPath,
            targetPath: destPath,
            targetWidth: targetWidth,
            targetHeight: targetHeight,
            targetFormat: targetFormat
        };
        return PJF.communication.CallShellExt("MediaCaptureExt", "GetThumbnailImage", args);
    },
    /* 打开多媒体查看：支持声音,图片,视频 */
    OpenMediaViewer: function(imagePathArray, audioPathArray, videoPathArray) {
        var args = {};
        if (imagePathArray) args['imagePath'] = imagePathArray;
        if (audioPathArray) args['audioPath'] = audioPathArray;
        if (videoPathArray) args['videoPath'] = videoPathArray;
        return PJF.communication.CallShellExt("MediaViewerExt", "OpenMediaViewer", args);
    },

    checkEncryptOptions:function(optionsbit){
        //0000 拍照 录音 照片 文件保存 0不加密 1加密 ， 若无标识，则默认所有都为加密
        var encryptOptionsRet = PJF.communication.localStorage.getValue("sys_sec_encrypt_flag");
        //alert(json2str( encryptOptionsRet));
        if(encryptOptionsRet.success){
            return encryptOptionsRet.result == '' || (encryptOptionsRet.result[optionsbit] == '1');
        }
        return true;
    }
};

PJF.communication.DynamicShellExtMgr = {
    /* <summary>
     * 获取插件列表
     * </summary>
     * <returns>
     * 当前插件管理器中已加载插件列表，其Json格式如下(主用于在html页面中进行展示)
     *
     * {"Success": true, "ErrorCode": " ", "Error": " ","Result":
     *  "[
     *    {
     *      \"ShortName\": \"PlugInExe\"                                                        //插件DLL文件名字
     *      \"Path\": \"D:\\\\dome\\\\PlugInDome\\\\bin\\\\Debug\\\\PlugIn\\\\PlugInExe.exe\",  //插件DLL路径
     *      \"Version\": \"1.0.0.0\",                                                           //插件版本号
     *      \"IsForbid\": false,                                                                //是否被禁用
     *      \"Modules\":[                                                                       //插件中包含的模块列表
     *                   {
     *                      \"ModuleName\": \"ExeControllerShellEx\",\r\n                       //模块名称
     *                      \"Methods\": [                                                      //模块包含的功能函数列表
     *                                      {
     *                                           \"MethodName\": \"Start\",                     //函数名称
     *                                           \"Args\": {\"optionss\": \"System.String[]\"} //函数参数字典 参数名字：参数类型
     *                                       },
     *                                      {
     *                                           \"MethodName\": \"SendCommand\",\r\n          //函数名称
     *                                           \"Args\": {\"command\": \"System.String\"}\r\n //函数参数字典 参数名字：参数类型
     *                                       }
     *                                   ]
     *                   }
     *                  ]
     *     }
     *   ]"
     * }
     *
     * </returns>
     */
    GetShellExtList: function() {
        var args = {};
        return PJF.communication.CallShellExt("DynamicShellExtMgr", "GetShellExtList", args);
    },

    /*卸载指定插件*/
    UnloadShellExt: function(extId) {
        var args = {
            "extId": extId
        };
        return PJF.communication.CallShellExt("DynamicShellExtMgr", "UnloadShellExt", args);
    },

    /*加载指定插件*/
    LoadShellExt: function(extPath) {
        var args = {
            "extPath": extPath
        };

        return PJF.communication.CallShellExt("DynamicShellExtMgr", "LoadShellExt", args);
    },

    /*禁用插件*/
    ForbidShellExt: function(extId) {
        var args = {
            "extId": extId
        };
        return PJF.communication.CallShellExt("DynamicShellExtMgr", "ForbidShellExt", args);
    },

    /*启用插件*/
    UnForbidShellExt: function(extId) {
        var args = {
            "extId": extId
        };
        return PJF.communication.CallShellExt("DynamicShellExtMgr", "UnForbidShellExt", args);
    }
};

PJF.communication.WinPrinterExt = {
    /* 获取本地打印机列表及默认打印机
     * 返回结果样式（样例):
     * {
     *   "success": true,
     *   "errorCode": " ",
     *   "error": " ",
     *   "result": "{\r\n  \"defaultPrinter\": \"FinePrint\",\r\n  \"printers\": [\r\n    \"pdfFactory Pro\",\r\n    \"Microsoft XPS Document Writer\",\r\n    \"FinePrint\",\r\n    \"Fax\",\r\n    \"\\\\\\\\128.160.180.146\\\\FinePrint\"\r\n  ]\r\n}"
     *  }
     * 其中 defaultPrinter 为本机默认打印机
     *      printers 为本机打印列表(包括配置的网络打印机)
     */
    GetAllPrinters: function() {
        var args = {};
        return PJF.communication.CallShellExt("WinPrinterExt", "GetAllPrinters", args);
    },
    /* 获取指定打印机支持的纸张列表,参数 printerName：打印机名称
     * 返回结果样式（样例)：
     *
     *{
     *  "success": true,
     *  "errorCode": " ",
     *  "error": " ",
     *  "result": "{\r\n  \"defaultPaper\": \"A4\",\r\n  \"papers\": [\r\n    \"Letter\",\r\n    \"Letter Small\",\r\n    \"Tabloid\",\r\n    \"Ledger\",\r\n    \"Legal\",\r\n    \"Statement\",\r\n    \"Executive\",\r\n    \"A3\",\r\n    \"A4\",\r\n    \"A4 Small\",\r\n    \"A5\",\r\n    \"B4 (JIS)\",\r\n    \"B5 (JIS)\",\r\n    \"Folio\",\r\n     ]\r\n}"
     *  }
     * 其中defaultPaper 为打印默认纸张
     *     papers 为打印支持的纸张列表
     */
    GetPrinterSupportPaperName: function(printerName) {
        var args = {};
        args["printerName"] = printerName;
        return PJF.communication.CallShellExt("WinPrinterExt", "GetPrinterSupportPaperName", args);
    },
    //打印图片：
    //参数 imgFile：本地图文绝对路径或网络图片绝对路径
    //     printerName:打印机名称，未设置则使用默认打印机
    //     paperName:纸张大小 未设置则使用的默认纸张大小
    //     paperOrientation:纸张方向 未设置则使用默认纸张方向
    //     callback:打印完成回调 回调参数样式：{"success": true, "errorCode": " ","error": " ","result": "{}"}

    PrintImage: function(imgFile, printerName, paperName, paperOrientation, callback) {
        var args = {};
        args['imgFile'] = imgFile;
        args['printerName'] = printerName;
        args['paperName'] = paperName;
        args['paperOrientation'] = paperOrientation;

        return PJF.communication.CallShellExt("WinPrinterExt", "PrintImage", args, callback);
    },

    //打印当前页（即当前屏幕截图）：
    //参数 printerName:打印机名称，未设置则使用默认打印机
    //     paperName:纸张大小 未设置则使用的默认纸张大小
    //     paperOrientation:纸张方向 未设置则使用默认纸张方向
    //     callback:打印完成回调 回调参数样式：{"success": true, "errorCode": " ","error": " ","result": "{}"}
    PrintPage: function(printerName, paperName, paperOrientation, callback) {

        var args = {};
        args['printerName'] = printerName;
        args['paperName'] = paperName;
        args['paperOrientation'] = paperOrientation;
        return PJF.communication.CallShellExt("WinPrinterExt", "PrintPage", args, callback);

    }

};

/*摄像头面部检测图片抓取*/
PJF.communication.CameraFaceSnap = {

    //eventid -> Camera_NetFaceSnap
    SnapMsgCallback: function(eventId, data, syncPublish) {
        if (syncPublish) {
            return PJF.event.publish(eventId, data);
        } else {
            return PJF.event.asyncPublish(eventId, data);
        }
    },

    InitDevice: function(ip, port, userName, pwd, devNo, picFolder, cbInterval, callback) {
        var args = {
            "ip": ip,
            "port": port,
            "userName": userName,
            "pwd": pwd,
            "devNo": devNo,
            "picFolder": picFolder,
            "cbInterval": cbInterval
        };
        return PJF.communication.CallShellExt("FaceSnapDeviceExt", "InitDevice", args, callback);
    },

    StartSnap: function(callback) {
        var args = {};
        return PJF.communication.CallShellExt("FaceSnapDeviceExt", "StartSnap", args, callback);
    },

    StopSnap: function(callback) {
        var args = {};
        return PJF.communication.CallShellExt("FaceSnapDeviceExt", "StopSnap", args, callback);
    },

    DisposeDevice: function(callback) {
        var args = {};
        return PJF.communication.CallShellExt("FaceSnapDeviceExt", "DisposeDevice", args, callback);
    },
    ClearCacheFile: function(date, callback) {

        var args = {
            "date": date,
        };
        return PJF.communication.CallShellExt("FaceSnapDeviceExt", "ClearCacheFile", args, callback);
    }
}


/*****************************************************************************************************
 * P2客户端的遗留接口. !!!如下接口应在去除PJF库中P2客户端相关接口调用后删除!!!
 *****************************************************************************************************/

// 外设服务名称
PJF.communication.device = {
    // 得到卡信息服务名，返回：[操作成功标志(0表示成功，1表示失败，下同),卡号，二磁道]，如果是失败则结果为[1,错误信息]
    GET_CARDINFO_COMMAND: 'getCardInfo',

    // 得到用户密码服务名，参数格式为：times(输入次数);返回:[操作成功标志(0表示成功，1表示失败，下同),加密后的密码]
    GET_ACCOUNT_PASSWORD: 'getAccountPassword',

    // 得到用户的指纹信息，返回:[操作成功标志(0表示成功，1表示失败，下同),指纹特征串，厂商代码]
    GET_FINGER_INFO: 'getFingerInfo',

    // 得到用户的存折信息,返回:[操作成功标志(0表示成功，1表示失败，下同),账号，存折印刷号，存折册号]
    GET_BANK_BOOK_INFO: 'getBankBookInfo',

    // 注册用户的指纹信息，返回:[操作成功标志(0表示成功，1表示失败，下同)]
    WRITE_FINGER_INFO: 'writeFingerInfo',

    // 写存折信息，参数格式为:content(内容);返回:[操作成功标志(0表示成功，1表示失败，下同)]
    WRITE_BANK_BOOK: 'writeBankBook',

    // 得到p2用户信息
    GET_USERINFO_COMMAND: 'getUserInfo',

    // 打印，参数格式为:content(打印内容)；返回：[操作成功标志(0表示成功，1表示失败，下同)]
    PRINT_DOC: 'printDoc',

    // 打印,采用IE模式进行打印
    PRINT_SCREEN: 'printScreen',

    // 读取身份证信息
    GET_IDENTITY_CARD_INFO: 'getIdentityCardInfo',

    // 读取IC卡信息
    GET_IC_CARD_INFO: 'getIcCardInfo',

    // 以下为PBCS专用方法
    // PBCS专用方法，用来获取得到配置文件里面的信息,参数格式为:key；返回:[操作成功标志(0表示成功，1表示失败，下同),value]
    GET_CONF_VALUE: 'getConfValue',

    // PBCS专用方法，获取指纹仪端口；返回：:[操作成功标志(0表示成功，1表示失败，下同),端口号]
    GET_FINGER_PORT: 'getFingerPort',

    // PBCS专用方法，获取指纹仪类型；返回：:[操作成功标志(0表示成功，1表示失败，下同),类型]
    GET_FINGER_TYPE: 'getFingerType',

    // PBCS专用方法，获取身份证图片地址；返回：[操作成功标志(0表示成功，1表示失败，下同),地址]
    GET_PIC_PATH: 'getPicPath',

    // PBCS专用方法，写图片信息，参数格式为:图片str；返回：[操作成功标志(0表示成功，1表示失败，下同),操作结果字符串]
    WRITE_PIC: 'writePic',

    // PBCS专用方法，得到配置文件，参数格式为:文件名；返回：[操作成功标志(0表示成功，1表示失败，下同),文件信息值]
    GET_CONF_FILE: 'getConfFile',

    // PBCS专用方法，加密字符串，参数格式为:content(加密内容)；返回：[操作成功标志(0表示成功，1表示失败，下同),加密后得值]
    ENCODE: 'encode',

    // PBCS专用方法，解密字符串，参数格式为:content(解密内容)；返回：[操作成功标志(0表示成功，1表示失败，下同),解密后得值]
    DECODE: 'decode',

    // 得到对应的bpPort；返回：[操作成功标志(0表示成功，1表示失败，下同),bpPort的值]
    GET_BP_PORT: 'getBpPort',

    // 将图片转为byte；返回：[操作成功标志(0表示成功，1表示失败，下同),图片byte]
    GET_FILE_BYTES: 'getFileBytes',

    // 调用加密函数对参数加密：参数格式为:content(加密内容)；返回:[操作成功标志(0表示成功,1表示失败)]]
    ENCRYPT_PARAM: 'encryptParam',

    // 调用加密0x88函数：参数格式为:0x88位数；返回:[操作成功标志(0表示成功,1表示失败)]]
    ENCRYPT_0X88: 'encrypt0x88',

    // 日程管理调用的函数；返回：[操作成功标志(0表示成功，1表示失败，下同),日期值]
    CALENDER_CUR_DATE: 'calendarCurDate',

    // 前端js如果发生错误，调用client记录错误信息的服务
    LOG_ERROR: 'logError',

    // 设置p2 tab页的名称
    SET_TAB_TITLE: 'setTabTitle',

    // 得到用户信息
    GET_USERINFO: 'getUserInfo',

    // 得到ARQC
    GEN_ARQC: 'genARQC',

    // 得到txDetail
    GET_TX_DETAIL: 'getTxDetail',

    // 发送ARQC
    SEND_ARQC: 'sendARQC',

    // 柜外清-确认交易
    TRANSC_DISP_CONFIRM: 'transcDispConfirm',

    // 柜外清-单选
    SINGLE_QUESTION: 'singleQuestion',

    // 柜外清-多选
    MULTI_QUESTION: 'multiQuestion',

    // 得到日程管理
    GET_SCHEDULE: 'getSchedule',

    // 打开一个新的弹出窗口(不在tab内，和原窗口无关)
    OPEN_NATIVE_WINDOW: 'openNativeWindow',

    // //打开一个新的弹出窗口(在tab内)
    OPEN_INNER_WINDOW: 'openInnerWindow',

    // pbcs的道外设配置信息
    GETDEVCONF: 'getDevConfig',

    // 对报文进行hash
    MAC_CONTENT: 'macContent',

    /** *******集中授权专用命令****** */
    // 调用授权页面
    OPEN_AUTH_PAGE: 'openAuthPage',

    // 调用授权页面
    INVOKE_OTHER_SIDE: 'invokeOtherSide',

    // 打包上传
    AUTH_PACK_UPLOAD: 'authPackUpload',

    // 关闭当前窗口
    TAB_CLOSE: 'tabClose',

    // 打开要做的信息
    OPEN_TODOINFO: 'openTodoInfo',
    // 执行客户端命令
    DO_COMMAND: 'doCommonCommand',
    // 发送垮与请求
    SEND_HTTP: 'sendHttp',
    // 根据流水号取消息
    GET_MESSAGE_BYNO: 'getMessageByKey',
    // 得到clientEnv的属性
    GET_CLIENTENV_PROPERTY: 'getClientEnv',
    // 设置client cache的属性
    SET_APP_DATA: 'setAppData',
    // 设置client cache的属性
    GET_APP_DATA: 'getAppData',
    // 删除client cache的属性
    REMOVE_APP_DATA: 'removeAppData',
    // soft phone
    SOFT_PHONE: 'softPhone',
    // 鼠标点击
    CLICK_MOUSE: 'clickMouse',
    // 注册事件
    REGISTER_EVENT: 'registerEvent',
    // 发送事件
    SEND_EVENT: 'sendEvent',
    // 右侧面板暴露方法
    RIGHT_PANEL_METHOD: 'rightPanelCommand',
    // 检查文件大小
    CHECK_FILE_SIZE: 'checkFileSize',
    // 柜外清调用
    CONFIRM_TRANSC_DISP: 'confirmTranscDisp',
    // 外设配置读取
    LOAD_DEV_CONFIG: 'loadDevConfig',
    // 保存外设配置
    SAVE_DEV_CONFIG: 'saveDevConfig',
    // 测试外设配置
    TEST_DEV_CONFIG: 'testDevConfig',
    // 得到计算机信息
    GET_COMPUTER_INFO: 'getComputerInfo',
    // 得到前端配置
    OPEN_FRONT_CONFIG: 'openFrontConfig',
    // 键盘操作下拉框
    SET_SELECT: 'setSelect',
    // 高精度计算
    CALCULATE_DATA: 'calculateData',
    // 直接打印文本
    PRINT_TEXT: 'printUrlText',
    // JS执行java程序
    EXECUTE_JS: 'executeJS',
    // 外设写卡
    WRITE_TRACK: 'writeTrack',
    // 得到已打开页面数量
    GET_TAB_NUM: 'getTabNum',
    // JS调试日志
    LOG_JS: 'logJs',
    // 叫号
    LINE_UP_CALL: 'lineupCall',
    // 关闭客户端标签页(并删除交易码)
    CLOSE_WIN: 'closeWin',
    // 根据路由编号获取IP
    GET_IP_BY_ROUTEID: 'getIPByRouteId',
    // 发送带附件的Cps请求
    UPLOAD_HTTP_REQ: 'uploadHttpReq',
    // 客户端打包tar
    TAR_PACKAGE: 'tarPackage',
    // 调用java的encode url
    ENCODE_URL: 'encodeUrl',
    // 调用外设统一入口
    CALL_DEVICE: 'callDevice',
    // 从espace获取登陆账号
    GET_UC: 'getUC',
    PRINT_VOUCHER: 'printVoucher',
    PRINT_DOWNLOAD_BATCHFILE: 'printDownloadBatchFile',
    PJF_CACHE: 'pjfCache',
    CALL_DEVICE_ASYNC: 'callDeviceAsync',
    ENCRYPT_E2E: 'encryptE2E',
    CR_2_TAB: 'Cr2Tab',
    CAMERA_SHOOT: 'cameraShoot',
    FILE_UTILS: 'fileUtils'
};

/**
 * 兼容client中部分方法
 * @type {Object}
 */
PJF.communication.client = {

    isInP2: function() {
        return PJF.communication.isInClient();
    },
    encryptParam: function(value) {
        return [0, value];
    },
    macContent: function(content) {
        return [0, content];
    },
    getClientEnv: function() {
        return [1, ''];
    },
    getUniqueNo: function() {
        var result = PJF.communication.CallClient("getUniqueNo", '');
        if (result.success)
            return [0, result.result]
        else
            return [1, result.error]
    },
    init: function() {
        // 将上面几个函数添加到代理函数中
        for (var a in PJF.communication.device) {
            var fnName = PJF.communication.device[a];
            PJF.communication.client[fnName] = function() {
                try {
                    var hasParam = true;
                    var params = {};
                    for (var b = 0; b < arguments.length; b++) {
                        params['param' + b] = arguments[b];
                    }
                    for (var x in param) {
                        hasParam = false;
                        break;
                    }
                    if (!hasParam) {
                        params = "";
                    }
                    var ret = PJF.communication.CallClient(fnName, params);
                    return ret.retVal;
                } catch (e) {
                    return 1;
                }
            };
        };
    }
};

PJF.communication.client.init();

/*
 * 对用户输入验证码进行验证 成功返回[0]为"0",[1]为"true" 失败返回[0]为"1"[1]为错误代码及描述
 * verifyCode传入的验证码不能为空 ,strTimeout为传入的超时参数为空则使用系统默认超时时间。
 */
PJF.communication.client.checkVerifyCode = function(verifyCode, strTimeout) {
    alert("Not implemented: PJF.communication.client.checkVerifyCode");
    return 1;
};

/*
 * 客户评价 strOperData 操作提示信息 strDispData 操作后展示信息 strItem 评价选项
 * 形如“满意|一般|不满意”的字符串，选项之间用“|”符号分割 strTimeOut 超时时间
 * 返回：[0]为指示代码，0表示执行成功，其它为错误代码；若[0]为0，则[1]表示客户选择的选项的序号，从1开始依次增加；若[0]不为0，[1]为错误描述信息。
 */

PJF.communication.client.serviceEvaluate = function(strOperData, strDispData, strItem, strTimeOut) {
    alert("Not implemented: PJF.communication.client.serviceEvaluate");
    return 1;
};

/*
 * 数字输入 iStyle 显示效果 0-明文展示用户输入；1-以“*”展示用户输入 iLength 输入长度
 * 输入有效字符的长度，为0时不控制长度，但最长32位 iControlType 控制方式
 * 0-表示不控制，可输入任意的数字、小数点，可以用小数点、0开头；1-表示输入一个数字的串，不带小数点，可用0开头；2-表示输入为金额，非负数字，可带小数点
 * strVoiceNo 联动的语音文件编号 11请输入验证码,12请输入金额,13请输入账号,14请输入
 * 正确返回时：[0]为“0”，[1]为用户输入的数字、小数点串。错误返回时：[0]为错误代码，[1]为错误描述。
 */
PJF.communication.client.inputNumber = function(iStyle, iLength, iControlType, strVoiceNo) {
    alert("Not implemented: PJF.communication.client.inputNumber");
    return 1;
};

/*
 * 取得密码器编号 nStep 步号 0或1，统一填1
 * 返回：[0]为指示码，0为正确，其它为错误码；如果[0]为0，则[1]为密码器编号；如果[0]不为0，则[0]为错误代码，[1]为错误描述。
 *
 */
PJF.communication.client.readCISN = function(nStep) {
    alert("Not implemented: PJF.communication.client.readCISN");
    return 1;
};

/*
 * 产生密钥对 strAcc 帐号 nStep 步号
 * 返回：[0]为指示码，0为正确，其它为错误码；如果[0]为0，则[1]为芯片ID，则[2]为VK；如果[0]不为0，则[0]为错误代码，[1]为错误描述。
 */
PJF.communication.client.generateKeyPair = function(strAcc, nStep) {
    alert("Not implemented: PJF.communication.client.generateKeyPair");
    return 1;
};


/*
 * 下载AK值 strAcc 帐号 strACCKey 密钥号 strAK AK值 nStep 步号
 * 返回：[0]为指示码，0为正确，其它为错误码；如果[0]为0，则则下载AK支成功；如果[0]不为0，则[0]为错误代码，[1]为错误描述。
 */
PJF.communication.client.downLoadAK = function(strAcc, strACCKey, strAK, nStep) {
    alert("Not implemented: PJF.communication.client.downLoadAK");
    return 1;
};

/*
 * 删除密码器中帐号 strAcc 帐号 nStep 步号
 * 返回：[0]为指示码，0为正确，其它为错误码；如果[0]为0，则删除密码器中帐号成功；如果[0]不为0，则[0]为错误代码，[1]为错误描述。
 */
PJF.communication.client.delAcc = function(strAcc, nStep) {
    alert("Not implemented: PJF.communication.client.delAcc");
    return 1;
};

/*
 * 同帐号增发产生签名 strAcc 帐号 strNewChipID 芯片ID strNewVK 密码器产生的VK nStep 步号
 * 返回：[0]为指示码，0为正确，其它为错误码；如果[0]为0，则[1]为增发签名；如果[0]不为0，则[0]为错误代码，[1]为错误描述。
 */
PJF.communication.client.addMachineSign = function(strAcc, strNewChipID, strNewVK, nStep) {
    alert("Not implemented: PJF.communication.client.addMachineSign");
    return 1;
};

/*
 * 密码器解锁 strUnlockCode 核验机返回的解锁密码 nStep 步号
 * 返回：[0]为指示码，0为正确，其它为错误码；如果[0]为0，则密码器解锁成功；如果[0]不为0，则[0]为错误代码，[1]为错误描述。
 */
PJF.communication.client.unlockCI = function(strUnlockCode, nStep) {
    alert("Not implemented: PJF.communication.client.unlockCI");
    return 1;
};

/*
 * 密码器发行 strUnlockCode 核验机返回的解锁密码 nStep 步号
 * 返回：[0]为指示码，0为正确，其它为错误码；如果[0]为0，则密码器发行成功；如果[0]不为0，则[0]为错误代码，[1]为错误描述。
 */
PJF.communication.client.issueCI = function(strUnlockCode, nStep) {
    alert("Not implemented: PJF.communication.client.issueCI");
    return 1;
};

/*
 * 得到校验码 strContent 计算校验码的数据 iLen strContent的长度 返回：[0]为指示码，0为正确，其它为错误码；2)
 * 如果[0]为0，则[1]为4个字节的校验码；
 * 如果[0]不为0，则[0]为错误代码，对于该接口仅有一错误码，MMQSNS0998-接口参数错误，错误引起原因是送入的参数不正确。
 */
PJF.communication.client.getCheckCode = function(strContent, iLen) {
    alert("Not implemented: PJF.communication.client.getCheckCode");
    return 1;
};


/**
 * 调用扫描仪进行附件扫描
 *
 * @return arrRet[0] 扫描成功标志，0-成功,1-失败 arrRet[1]
 *         如果arrRet[0]为0,arrRet[1]为0,arrRet[2...n]为扫描得到的附件图片全路径和图片名称,比如"D:\FROM_SCANNER_000001N.bmp"
 *         如果arrRet[0]为1,arrRet[1]为错误描述
 */
PJF.communication.client.scan = function() {
    alert("Not implemented: PJF.communication.client.scan");
    return 1;

};

/**
 * 获取可用的扫描仪
 *
 * @return arrRet[0] 扫描成功标志，0-成功,1-失败 arrRet[1]
 *         如果arrRet[0]为0,arrRet[1]为0,arrRet[2...n]为扫可以使用的扫描名称
 *         如果arrRet[0]为1,arrRet[1]为错误描述
 */
PJF.communication.client.getscanners = function() {
    alert("Not implemented: PJF.communication.client.getscanners");
    return 1;
};

/**
 * 删除图片
 *
 * @param nFlag
 *            删除图片的标志位,1表示删除当前图片,目前只支持值1
 * @param strFileName
 *            需要删除的图片全路径
 * @return arrRet[0] 扫描成功标志，0-成功，1-失败 arrRet[1] 如果arrRet[0]为0,arrRet[1]为0
 *         如果arrRet[0]为1,arrRet[1]为错误描述
 */
PJF.communication.client.deleteFile = function(nFlag, strFileName) {
    alert("Not implemented: PJF.communication.client.deleteFile");
    return 1;

};


/**
 * 旋转图片
 *
 * @param strFileName
 *            需要旋转的图片全路径
 * @param dAngle
 *            图片进行旋转的度数,需要为以下值中的一个：90,180,270
 * @return arrRet[0] 扫描成功标志，0-成功，1-失败 arrRet[1] 如果arrRet[0]为0,arrRet[1]为0
 *         如果arrRet[0]为1,arrRet[1]为错误描述
 */
PJF.communication.client.rotate = function(strFileName, dAngle) {
    alert("Not implemented: PJF.communication.client.rotate");
    return 1;
};

/**
 * 缩放图片
 *
 * @param strFileName
 *            需要进行尺寸缩放的图片全路径
 * @param nWidth
 *            缩放后图片的宽度
 * @param nHeight
 *            缩放后图片的高度
 * @return arrRet[0] 扫描成功标志，0-成功，1-失败 arrRet[1] 如果arrRet[0]为0,arrRet[1]为0
 *         如果arrRet[0]为1,arrRet[1]为错误描述
 */
PJF.communication.client.zoom = function(strFileName, nWidth, nHeight) {
    alert("Not implemented: PJF.communication.client.zoom");
    return 1;
};

/**
 * 复制图片
 *
 * @param strSrcFileName
 *            拷贝的源图片的全路径
 * @param strDstFileName
 *            拷贝的目的图片的全路径
 * @return arrRet[0] 扫描成功标志，0-成功，1-失败 arrRet[1] 如果arrRet[0]为0,arrRet[1]为0
 *         如果arrRet[0]为1,arrRet[1]为错误描述
 */
PJF.communication.client.copyFile = function(strSrcFileName, strDstFileName) {
    alert("Not implemented: PJF.communication.client.copyFile");
    return 1;

};

/**
 * 重命名图片
 *
 * @param strSrcFileName
 *            拷贝的源图片的全路径
 * @param strDstFileName
 *            重命名的图片的全路径
 * @return arrRet[0] 扫描成功标志，0-成功，1-失败 arrRet[1]
 *         如果arrRet[0]为0,arrRet[1]为0,arrRet[2]为重命名后的图片全路径
 *         如果arrRet[0]为1,arrRet[1]为错误描述
 */
PJF.communication.client.renameFile = function(strSrcFileName, strDstFileName) {
    alert("Not implemented: PJF.communication.client.renameFile");
    return 1;

};

/**
 * 显示扫描仪设置界面
 *
 * @return arrRet[0] 扫描成功标志,0-成功,1-失败 arrRet[1] 如果arrRet[0]为0,arrRet[1]为0
 *         如果arrRet[0]为1,arrRet[1]为错误描述
 */
PJF.communication.client.showUI = function() {
    alert("Not implemented: PJF.communication.client.showUI");
    return 1;
};

/*
 * 客户评价，异步调用 strOperData 操作提示信息 strDispData 操作后展示信息 strItem 评价选项
 * 形如“满意|一般|不满意”的字符串，选项之间用“|”符号分割 strTimeOut 超时时间 initData 初始参数 callBack 回调JS方法
 * 返回：[0]为指示代码，0表示执行成功，其它为错误代码；若[0]为0，则[1]表示客户选择的选项的序号，从1开始依次增加；若[0]不为0，[1]为错误描述信息。
 */
PJF.communication.client.serviceEvaluateAsync = function(strOperData,
                                                         strDispData, strItem, strTimeOut, initData, callBack) {
    alert("Not implemented: PJF.communication.client.serviceEvaluateAsync");
    return 1;

};


/*
 * 得到存折，卡二磁信息 返回：[0]为指示码，0为正确，其它为错误码； 如果[0]0为[1]为0则读取正确，[2]为磁道数据；
 * 如果[0]不为0，则[0]为错误代码，[1]为错误描述
 */
PJF.communication.client.getSecTrackData = function() {
    alert("Not implemented: PJF.communication.client.getSecTrackData");
    return 1;

};

/*
 * 得到IC卡信息 返回：[0]为指示码，0为正确，其它为错误码； 如果[0]0为则[1]为json格式的IC卡数据 IC卡数据：
 * Ic卡类型:ICCardType ,1为接触，2为非接 账号:accountNo 客户姓名:userName 证件类型:cardType
 * 证件号:cardNo 二磁道信息:secDisInfo 一磁道信息:firDisInfo 余额:firDisInfo 余额上限:balanceLimit
 * 有限期:validTime ic卡序列号:ICcardNo 如果[0]不为0，则[0]为错误代码，[1]为错误描述
 */
PJF.communication.client.getICCardData = function() {
    alert("Not implemented: PJF.communication.client.getICCardData");
    return 1;

};

/*
 * 对用户输入验证码进行验证 成功返回[0]为"0",[1]为"true" 失败返回[0]为非"0"[1]为错误代码及描述 code传入的验证码不能为空
 * ,strTimeout为传入的超时参数为空则使用系统默认超时时间。
 */
PJF.communication.client.validateCode = function(code, strTimeout) {
    alert("Not implemented: PJF.communication.client.validateCode");
    return 1;

};

/*
 * 获取读写器能力信息
 * 返回：[0]为指示码，0为正确，其它为错误码；
 * 如果[0]0为[1]为0则读取正确，[2]为读写能力信息； 2-只能接触式读写磁条卡5-可接触式读写IC或者磁条卡 6-可接触也可非接触读写IC并可读写磁条卡
 *  如果[0]不为0，则[0]为错误代码，[1]为错误描述
 */
PJF.communication.client.getCardRdWrtCap = function() {
    alert("Not implemented: PJF.communication.client.getCardRdWrtCap");
    return 1;

};

/*
 * 凭证打印
 * 参数：jsonStr json格式的凭证数据
 * 返回：[0]为指示码，0为正确，其它为错误码； 如果[0]不为0，则[0]为错误代码，[1]为错误描述
 */
PJF.communication.client.printVoucher = function(jsonStr) {
    alert("Not implemented: PJF.communication.client.printVoucher");
    return 1;

};

/*
 * 二维码打印
 * 参数：
 *   strArryTxtInfo：打印文字信息数组 。数组的每一个元素表示要打印的一行文字信息，按数组顺序依次分行打印每一行文字。
 *       单行文字的前两个字符表示文字放大倍数，取值范围“01”-“08”，“01”是普通大小，“02”放大一倍，依次类推
 *   nTxtInfoCnt：文字信息行数 int 型的数字
 *   dimCodeInfo ：需生成二维码的文字信息
 * 返回：[0]为指示码，0为正确，其它为错误码； 如果[0]不为0，则[0]为错误代码，[1]为错误描述
 */
PJF.communication.client.printTxt2DimCode = function(strArryTxtInfo, nTxtInfoCnt, dimCodeInfo) {
    alert("Not implemented: PJF.communication.client.printTxt2DimCode");
    return 1;

};

(function () {
    var ws;
    var _init = function () {
        var lockReconnect = false;
		var publishroutes = {
			"shell_OnKeyboardHide"             : "PJF.communication.shell.OnKeyboardHide",
			"shell_OnKeyboardShow"             : "PJF.communication.shell.OnKeyboardShow",
			"shell_OnKeyboardClick"            : "PJF.communication.shell.OnKeyboardClick",
			"shell_OnKeyboardHeightChanged"    : "PJF.communication.shell.OnKeyboardHeightChanged",
			"shell_OnLockApp"                  : "PJF.communication.shell.OnLockApp",
			"shell_OnLogAppend"                : "PJF.communication.shell.OnLogAppend",
			"shell_OnDnsResolved"              : "PJF.communication.shell.OnDnsResolved",
			"shell_OnHtmlCaptured"             : "PJF.communication.shell.OnHtmlToPicDone",
			"shell_OnCallBack"                 : "PJF.communication.OnShellCallBack",
			"FileUpload_OnUploadNew"           : "PJF.communication.FileUpload.OnUploadNew",
			"FileUpload_OnProgressUpdate"      : "PJF.communication.FileUpload.OnProgressUpdate",
			"FileUpload_OnUploadFailed"        : "PJF.communication.FileUpload.OnUploadFailed",
			"FileUpload_OnUploadCompleted"     : "PJF.communication.FileUpload.OnUploadCompleted",
			"FileDownload_OnDownloadNew"       : "PJF.communication.FileDownload.OnDownloadNew",
			"FileDownload_OnProgressUpdate"    : "PJF.communication.FileDownload.OnProgressUpdate",
			"FileDownload_OnDownloadFailed"    : "PJF.communication.FileDownload.OnDownloadFailed",
			"FileDownload_OnDownloadCompleted" : "PJF.communication.FileDownload.OnDownloadCompleted",
			"Http_OnPostUploaded"              : "PJF.communication.Http.OnPostUploaded",
			"Http_OnCrossDomainResponse"       : "PJF.communication.Http.OnCrossDomainResponse",
			"SocketClient_OnEvent"             : "PJF.communication.SocketClient.OnEvent",
			"SocketServer_OnEvent"             : "PJF.communication.SocketServer.OnEvent",
			"device"                           : "PJF.communication.devices.OnDeviceEvents",
		};
        ws = new WebSocket("ws://127.0.0.1:12320/");
        //readyState属性返回实例对象的当前状态，共有四种。
        //CONNECTING：值为0，表示正在连接。
        //OPEN：值为1，表示连接成功，可以通信了。
        //CLOSING：值为2，表示连接正在关闭。
        //CLOSED：值为3，表示连接已经关闭，或者打开连接失败
        ws.onopen = function (event) {
            console.log("websocket opened.");
        };
        ws.onmessage = function (event) {
			try{
			    var jArgs = JSON.parse(event.data);
                console.log("websokcet received Message, from:" + jArgs.from + "; data:" + jArgs.data);
                console.log("client time:" + PJF.util.formatDate(new Date(), "yyyyMMddHHmmss"))
				var funcName = publishroutes[jArgs["from"]];
				eval(funcName).apply(window, jArgs["data"]);
			}
			catch (e){
				console.log("wsEvt.js dispatch message failed:" + e);
			}
        };
        ws.onclose = function (event) {
            console.log("websocket close observed:" + JSON.stringify(event));
            if (event.code != 1000) {
                if (!navigator.onLine) {
                    console.log("offline.");
                }
                _reconnect();
            }
        };
        ws.onerror = function (event) {
            console.log("websocket error observed:" + JSON.stringify(event));
            _reconnect();
        };

        var _reconnect = function () {
            console.log("retry websokcet init.")
            if (lockReconnect) return;
            lockReconnect = true;
            setTimeout(function () {
                _init();
                lockReconnect = false;
            }, 2000);
        };
    }

    if (PJF.util.isKylinSTM()) _init()
})()
/**
 * 跨android和window pad的外壳调用，通过复写padClient来搞起
 * Created by zhoukang on 2015/11/6.
 */
/*
  国产化麒麟：Linux aarch64，不执行
  安卓pad:Linux armv81
  windows:Win32
 */
if (navigator.platform != "Linux aarch64") {
    (function () {
        (function (exports) {
            var _clientType = null;
            var _is_windows_pad = false;
            var _is_android_pad = false;
            exports.isInClient = function () {
                if (_clientType === null) {
                    if (window.external && "InvokeFromJs" in external) {
                        _clientType = "windows";
                        _is_windows_pad = true;
                    } else if (window.client && "callShell" in window.client) {
                        _clientType = "android";
                        _is_android_pad = true;
                    } else _clientType = false;
                }
                return !!_clientType;
            };
            // exports.isInClient();
            exports.getClientType = function () {
                return _clientType;
            };

            exports.inClientInnerFlag = exports.isInClient();


            var reg = /^[a-z]+:\/\//i
            exports.createSubWebview = function (url) {
                if (!reg.test(url)) {
                    url = location.protocol + "//" + location.host + url
                }
                PJF.communication.SinglePoint(url)
            }

        })(PJF.communication);

        /// 为了做无依赖保证。。
        if (!PJF.util) PJF.util = {};
        if (!PJF.util.compareVersion) {
            // 比较版本号, 相等返回0 , ver1 > ver2 返回 1， 反之返回 -1
            PJF.util.compareVersion = function (ver1, ver2) {
                ver1 = ver1 || "";
                if (typeof ver1 !== 'string') ver1 = ver1 + "";
                ver2 = ver2 || "";
                if (ver1 === ver2) return 0;

                var localArr = ver1.split("."),
                    remoteArr = ver2.split("."),
                    lInt, rInt;
                for (var i = 0, len = localArr.length; i < len; i++) {
                    lInt = parseInt(localArr[i]);
                    rInt = parseInt(remoteArr[i]);
                    if (lInt < rInt) {
                        return -1;
                    } else if (lInt > rInt) {
                        return 1;
                    }
                }
                if (remoteArr.length > localArr.length) return -1;
                else return 1;
            }
        }

        /// 解决唯一编号的问题 ，stm windows也要用
        (function (communication, client) {
            if (!communication.isInClient()) return; // 浏览器里面就别瞎费劲了

            var isAndroid = communication.getClientType() === "android";
            if (PJF.constants && PJF.constants.termType === 'stm' && !isAndroid) {
                return;
            }

            // 保存原始的
            var getUniqueNo = client.getUniqueNo; // 返回的是 [0,result.result] ...
            // 唯一编号后面附加 员工编号
            function append(ret) {
                if (ret[0] === 0 && PJF.userInfo) {
                    ret[1] = ret[1] + "-" + PJF.userInfo.userCode;
                }
                return ret;
            }
            // windows, 在后面附加员工编号
            client.getUniqueNo = function () {
                return append(getUniqueNo())
            }

            if (!isAndroid) return;

            /// 走js生成唯一编号
            var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
            var RADIX = CHARS.length;

            function randomNo(len) {
                var uuid = [];
                for (i = 0; i < len; i++) uuid[i] = CHARS[0 | Math.random() * RADIX];
                return uuid.join("");
            }

            // android的
            client.getUniqueNo = function () {
                var ret = getUniqueNo();
                if (ret[0] === 0 && ret[1].length < 24) { // getUniqueNo，目前实际返回的是机器编号，16位的
                    ret[1] = ret[1] + randomNo(20);
                }
                return append(ret);
            }

        })(PJF.communication, PJF.communication.client);

        (function () {
            var ret = PJF.communication.GetClientInfo();
            if (typeof ret === "string") ret = JSON.parse(ret);
            var ver = ret.success ? ret.result : "1.0";
            var clientType = PJF.communication.getClientType();
            if (clientType === "windows" && PJF.util.compareVersion(ver, "2.0.5.0") >= 0 ||
                clientType === "android" && PJF.util.compareVersion(ver, "1.4.6") >= 0) {
                PJF.communication.SinglePoint = PJF.communication.Tabs.OpenNewTab;   // 接口兼容
            }
            // lowVerFlag = PJF.util.compareVersion("1.4.4", ver) > 0; // 1.4.4 以前的，均为老版本，不含1.4.4
        })();

        // 通用临时目录
        (function (commu) {
            function android_get_tmp_floder() {
                return commu.CallClient("getAppTempFolder", {});
            }
            function windows_get_tmp_floder() {
                var ret = commu.fileSystem.getAppStorageFolder();
                if (ret.success) ret.result = ret.result + "/Temp";
                return ret;
            }

            if (commu.getClientType() === "android") commu.GetAppTempFolder = android_get_tmp_floder;
            else commu.GetAppTempFolder = windows_get_tmp_floder;
        })(PJF.communication);

        // +++++
        if (PJF.constants && PJF.constants.termType === 'stm' && window.external && "InvokeFromJs" in external) {
            console.log("cross pad not load in windows stm");
            return; /// 不干扰windows下的stm
        }

        // 兼容client中部分方法
        (function (exports) {
            var _event_counter = 0;
            exports.generateEventId = function () {
                return "_autoGenEventId_" + (_event_counter++) + "_";
            };


            var _clientType = exports.getClientType();
            var _is_windows_pad = _clientType === "windows";
            var _is_android_pad = _clientType === "android";

            /**
             * 调用android外壳，做一次windows param的差异映射
             * @param methodName
             * @param inData
             * @private
             */
            function _call_android(methodName, inData) {
                var obj = _adroid_param_trans(methodName, inData);
                var ret = prompt(obj.methodName, obj.inData && JSON.stringify(obj.inData));
                if (typeof ret === 'string') {
                    ret = ret.replace(/##/g, "\\\"");
                    return JSON.parse(ret);
                } else {
                    return ret;
                }
            }

            function _call_windows(methodName, inData) {
                var remoteFunc = {
                    'methodName': methodName,
                    'inData': inData
                };
                return JSON.parse(external.InvokeFromJs(JSON.stringify(remoteFunc)));
            }

            /**
             *  调用客户端统一方法 ； 函数名和字段名以window的为准
             * 参数：
             *     methodName: 函数名称
             *     inData: 参数的JSON对象，属性必须与客户端中的函数参数名一致，否则会找不到函数入口
             * 返回值：
             *     为JSON对象，字段如下
             *         success:   True: 调用成功，False:调用失败
             *         errorCode: 函数调用返回值
             *         error:     对errorCode的说明
             *         result:    remoteFunc执行的返回值
             */
            exports.CallClient = function (methodName, inData) {
                try {
                    // if(_clientType){
                    switch (_clientType) {
                        // 差一个参数映射，来屏蔽两边壳的差异
                        case "windows":
                            return _call_windows(methodName, inData);
                        case "android":
                            return _call_android(methodName, inData);
                        default:
                            return {
                                success: false,
                                error: 'illegal: this method must be called in client',
                                errorCode: '1',
                                result: ""
                            };
                    }
                    // }else{
                    //     return { success: false, error: '须在客户端里调用此方法', errorCode: '1', result: "" };
                    // }
                } catch (e) {
                    return {
                        success: false,
                        error: 'call client exception' + e,
                        errorCode: '1',
                        result: ''
                    };
                }
            };

            // -------------------------------------------

            exports.HtmlToJpg = function (html, imgWidth, imgHeight, callBack) {
                var id = PJF.communication.generateEventId();
                PJF.event.onceSubscriber(id, callBack);
                var params = {
                    html: encodeURIComponent(html),
                    imgWidth: imgWidth,
                    imgHeight: imgHeight,
                    eventId: id
                };
                return this.CallClient("htmlToJpg", params);
            };

            /**
             * DNS解析
             */
            exports.DnsResolve = function (domainName, serverIp, cb) {
                var params = {
                    'domainName': domainName,
                    'serverIp': serverIp
                };
                if ($.isFunction(cb)) {
                    if (_is_windows_pad) {
                        PJF.event.onceSubscriber(PJF.padClientEvents.dns.dnsResolved, cb);
                    } else if (_is_android_pad) {
                        params.eventId = this.generateEventId();
                    }
                }
                return this.CallClient("dnsResolve", params);
            };

            /**
             * 读取文本文件
             * @param args
             * @param callback
             * @returns {{success, error, errorCode, result}}
             */
            exports.readTextFile = function (args, callback) {
                var id = this.generateEventId();
                if (_is_windows_pad) PJF.event.onceSubscriber(id, callback);
                return PJF.communication.CallClient("readTextFile", {
                    eventId: id,
                    jsonArgs: JSON.stringify(args)
                });
            };

            // android 重写WriteLog，去掉 encodeURIComponent
            if (_is_android_pad) {
                exports.log.WriteLog = function (log) {
                    var params = {
                        'logStr': log
                    };
                    return PJF.communication.CallClient("writelog", params);
                }
                /* WEB应用日志, 用于应用监控, 广开每天上传 */
                exports.log.WriteAppMonLog = function (log) {
                    var params = {
                        'logStr': log,
                        'otherInfo': '' /* 保留参数, 用于可能的参数细化 */
                    };
                    return PJF.communication.CallClient("WriteAppMonLog", params);
                }
            }

            /*
             * 客户端数据存储：会话存储, 客户端退出后自动销毁  ????
             * why？？？  不需要了
             * */
            // exports.sessionStorage = {
            //     setValue: function (key, value) {
            //         sessionStorage.setItem(key, value);
            //     },
            //     getValue: function (key) {
            //         var value = sessionStorage.getItem(key),
            //             ret;
            //         if (value == null) {
            //             ret = {
            //                 success: false,
            //                 error: 'Not Exist',
            //                 errorCode: '1',
            //                 result: ''
            //             };
            //         } else {
            //             ret = {
            //                 success: true,
            //                 error: '',
            //                 errorCode: '',
            //                 result: value
            //             };
            //         }
            //         return ret;
            //     },
            //     removeItem: function (key) {
            //         sessionStorage.removeItem(key);
            //     },
            //     clear: function () {
            //         sessionStorage.clear();
            //     }
            // };

            /// 读取gps信息
            exports.getLocation = function () {
                if (_is_windows_pad) return {
                    success: false,
                    errorMsg: "windows not support"
                };
                else return PJF.communication.CallClient("getLocation", {});
            }

            /**
             * 调用android，浏览指定图片和删除
             */
            exports.previewPhotosAndroid = function (paths, onClose, onDeleteImg) {
                var onCloseEventId = this.generateEventId();
                var onDeleteImgId = this.generateEventId();

                PJF.event.onceSubscriber(onCloseEventId, function () {
                    PJF.event.removeSubscriber(onDeleteImgId);
                    $.isFunction(onClose) && onClose();
                });
                if ($.isFunction(onDeleteImg)) {
                    PJF.event.addSubscriber(onDeleteImgId, function (imgs) {
                        // TODO
                        //onDeleteImg && onDeleteImg();
                    });
                }

                return PJF.communication.CallClient("previewPhotos", {
                    eventId: this.generateEventId(),
                    jsonArgs: JSON.stringify({
                        "path": paths,
                        "onCloseEventId": onCloseEventId,
                        "onDeleteImgId": onDeleteImgId
                    })
                });
            };

            /**
             * windows 的 params 转为 android param
             * @param methodName
             * @param inData
             * @private
             */
            function _adroid_param_trans(methodName, inData) {
                switch (methodName) {
                    case "setvalue":
                        methodName = "presidentDataStorage";
                        break;
                    case "getvalue":
                        methodName = "presidentDataGet";
                        break;
                    case "delvalue":
                        methodName = "presidentDataDel";
                        break;
                    case "writelog":
                        methodName = "jsLogWR";
                        inData.type = "w";
                        inData.msg = inData.logStr;
                        break;
                    case "readlog":
                        methodName = "jsLogWR";
                        inData.type = "r";
                        break;
                    case "fileOperation":
                        var _file_args = JSON.parse(inData.jsonArgs),
                            _op = _file_args.tasks[0];
                        // 地址转换兼容
                        if (_op.source) _op.source = _op.source.replace("/AppData/Local/Craig", "");
                        if (_op.dest) _op.dest = _op.dest.replace("/AppData/Local/Craig", "");

                        if (_file_args.operation == exports.fileSystem.FO_COPY) {
                            methodName = "copyFile";
                            inData = {
                                srcFile: _op.source,
                                targetFile: _op.dest
                            }
                        } else if (_file_args.operation == exports.fileSystem.FO_DELETE) {
                            methodName = "deleteFile"; /// 删除文件夹也是这个
                            inData = {
                                srcFile: _op.source
                            }
                        } else if (_file_args.operation == exports.fileSystem.FO_MOVE) {
                            methodName = "moveFile";
                            inData = {
                                srcFile: _op.source,
                                name: _op.dest
                            }
                        } else if (_file_args.operation == exports.fileSystem.FO_RENAME) {
                            methodName = "renameFile";
                            inData = {
                                srcFile: _op.source,
                                name: _op.dest
                            }
                        } else if (_file_args.operation == exports.fileSystem.FO_DIR) {
                            methodName = "listLocalFileByTime";
                            inData = {
                                dirName: _op.source
                            }
                        } else if (_file_args.operation == exports.fileSystem.FO_MKDIR) {
                            methodName = "mkdir";
                            inData = {
                                dir: _op.source
                            }
                        }
                        break;
                    case "readImage":
                        methodName = "getLocalImage";
                        inData.localPath = inData.imagePath;
                        break;
                    case "ExecSql":
                        methodName = "execSql";
                        break;
                    case "playsound":
                        methodName = "playSound";
                        break;
                    case "opendoconline":
                        if ((/\.pdf$/i).test(inData.docFullAddr)) {
                            methodName = "openPDF";
                        } else {
                            methodName = "openWord";
                        }
                        inData.url = inData.docFullAddr;
                        break;
                    case "getIpAddress":
                        methodName = "getDeviceIp";
                        break;
                    case "getMacAddress":
                        methodName = "getDeviceMac";
                        break;
                    case "singlepoint":
                        methodName = "openNewWebView";
                        break;
                    case "sendhttp":
                        var _da_ta_ = inData.data;
                        if (typeof _da_ta_ === "string")
                            inData.data = encodeURI(_da_ta_);
                        else if (typeof _da_ta_ === "object") { // 转码。。。
                            inData.data = PJF.util.toAjaxParam(_da_ta_);
                        }
                        break;
                    case "deviceCall": // 调用外设
                        if (inData.funcName !== "cameraPreview") {
                            methodName = "deviceCall" + inData.deviceName + inData.funcName;
                            if (typeof inData.jsonArgs === "string") inData.jsonArgs = JSON.parse(inData.jsonArgs);
                            inData = $.extend(inData.jsonArgs, {
                                eventId: inData.eventId
                            });
                        }
                        break;
                }
                return {
                    methodName: methodName,
                    inData: inData
                }
            }


            // ++++++++++++++++ 外设部分

            var _HOU_CallShellExt = exports.CallShellExt.bind(exports); // 保存侯大师的函数
            // 复写
            exports.CallShellExt = function (extId, method, jsonArgs, callback) {
                switch (this.getClientType()) {
                    case "android":
                        return _callShellExt_android(extId, method, jsonArgs, callback)
                    default: // 空的情况，侯大师那边已经处理了
                        return _HOU_CallShellExt(extId, method, jsonArgs, callback);
                }
            }

            // 调用android的扩展外设
            function _callShellExt_android(extId, method, jsonArgs, callback) {
                var androidRet = null;
                var eventId = exports.generateEventId();

                if (extId === "MediaCaptureExt") {
                    if (method === "TakePicture") { // 拍照拦截
                        // jsonArgs::Object {Folder: "xx", Width: 699, Height: 699}
                        // androidRet = exports.devices.CallDevice(
                        //     "PAD_SXT",
                        //     "cameraPreview",
                        //     { path: jsonArgs.Folder + "/" + (new Date().getTime()) + ".jpeg" },
                        //     callback
                        // );
                        androidRet = exports.CallClient("takePics", {
                            path: jsonArgs.Folder,
                            eventId: eventId
                        });
                    } else if (method === "RecordVideo") {
                        jsonArgs.eventId = eventId;
                        androidRet = exports.CallClient("MediaCaptureExtRecordVideo", jsonArgs)
                    } else if (method === "RecordAudio") {
                        jsonArgs.eventId = eventId;
                        androidRet = exports.CallClient("MediaCaptureExtRecordAudio", jsonArgs)
                    } else if (method === 'GetThumbnailImage') {
                        jsonArgs.eventId = eventId;
                        androidRet = exports.CallClient("GetThumbnailImage", jsonArgs)
                    }
                } else if (extId === "MediaViewerExt") {
                    jsonArgs.eventId = eventId;
                    androidRet = exports.CallClient("CaptureExtOpenMediaViewer", jsonArgs)
                }

                if (!androidRet) {
                    console.log("no shell ext transfomr, use default: ", extId, method, jsonArgs);
                    jsonArgs.eventId = eventId;
                    androidRet = exports.CallClient(extId + method, jsonArgs)
                }

                if (androidRet) {
                    $.isFunction(callback) && PJF.event.onceSubscriber(eventId, callback);
                    return androidRet;
                } else {
                    return _HOU_CallShellExt(extId, method, jsonArgs, callback); // ????
                }
            }


            // CallClientPro
            if (exports.getClientType() === "android") {
                exports.CallClientPro = function (moduleId, method, jsonArgs, callback) {
                    var eventId = exports.generateEventId(),
                        jsonArgs = jsonArgs || {};
                    jsonArgs.eventId = eventId;
                    var androidRet = exports.CallClient(method, jsonArgs);
                    if (androidRet && $.isFunction(callback)) PJF.event.onceSubscriber(eventId, callback);
                    return androidRet;
                }
            }

            exports.Android2Mdm = function(ticket, versionName) {
                var params = {
                    "ticket": ticket,
                    "versionName": versionName
                }
                return PJF.communication.CallClient("android2mdm", params);
            }

            exports.noticeClientUserStatusChanged = function (args) {
                return this.CallClient("noticeClientUserStatusChanged", args);
            };

        })(PJF.communication);


        /// ++++++++++++++++
        (function (event) {
            // 复写侯大师的event publish接口，用来对 android返回字符串的result进行处理
            var _originPub = event.publish.bind(event);
            var _slice = Array.prototype.slice;
            event.publish = function (eventName, resStr, e3) {
                if (eventName !== "onCompCreated") console.log(">>>publish -- ", eventName, resStr, e3); // 调试信息
                if (typeof resStr === 'string') {
                    resStr = resStr.replace(/##/g, "\\\"");
                }
                var params = _slice.call(arguments, 2);
                _originPub.apply(null, [eventName, resStr].concat(params));
            };
        })(PJF.event);

        /// +++++++++++++++++ 封装一个通用的android和pad  //行为一致的拍照接口（同时生成） || 文件夹删除
        (function (cmu) {

            var isAndroid = cmu.getClientType() === "android";

            var lowVerFlag = true;
            if (isAndroid) {
                var ret = PJF.communication.GetClientInfo();
                if (typeof ret === "string") ret = JSON.parse(ret);
                var ver = ret.success ? ret.result : "1.0";
                lowVerFlag = PJF.util.compareVersion("1.4.4", ver) > 0; // 1.4.4 以前的，均为老版本，不含1.4.4
            }

            // 拍一张  // 返回的数据格式是啥。。。
            function androidTakePhoto(folder, width, height, callback) {
                return cmu.devices.CallDevice(
                    "PAD_SXT",
                    "cameraPreview", {
                        path: folder + "/" + (new Date().getTime()) + ".jpg",
                        width: width,
                        height: height
                    },
                    callback
                );
            }

            // 连续拍照
            function androidTakePhotos(folder, width, height, callback, dataType) {
                var id = PJF.communication.generateEventId();
                PJF.event.onceSubscriber(id, multiBack.bind(null, dataType, width, height, callback));
                // $.isFunction(callback) && PJF.event.onceSubscriber(id, callback);
                // android 多张拍照接口，也没有处理过缩略图
                return cmu.CallClient("takePics", {
                    path: folder,
                    eventId: id,
                    width: width,
                    height: height
                });
            }

            // android 拍照接口。。。
            function doAndroid(folder, width, height, callback, dataType) {
                return lowVerFlag ? androidTakePhoto(folder, width, height, callback, dataType) :
                    androidTakePhotos(folder, width, height, callback, dataType);
            }

            function windowsTakePhoto(folder, width, height, callback, dataType) {
                return cmu.MediaCaptureExt.TakePicture(folder, width, height, multiBack.bind(null, dataType, width, height, callback));
            }

            function multiBack(dataType, width, height, callback, res) {
                res = JSON.parse(res);
                if (res.success) {
                    res = multiThumbnail(width, height, res);
                    res = dataType === 2 ? resCombine(res) : resConcat(res);
                }
                $.isFunction(callback) && callback(res);
            }

            // 拍的照片生成缩略图，缩放到宽度为200
            function multiThumbnail(width, height, res) {
                var tblWidth = 200; // 略缩图宽度
                var thumbnailArr = [];
                if (typeof res.result === 'string') res.result = JSON.parse(res.result) || [];
                var pathArr = res.result;
                if (res.success && width >= tblWidth) {
                    var ratio = width / tblWidth;
                    pathArr.forEach(function (path) {
                        var _tmp = path.split("."),
                            suffix = _tmp[_tmp.length - 1],
                            thumbnailPath = path.replace(new RegExp("\." + suffix + "$"), "_thumbnail." + suffix);
                        var r = cmu.MediaCaptureExt.GetThumbnailImage(
                            path,
                            thumbnailPath,
                            tblWidth,
                            200,
                            // Math.round(height / ratio),
                            suffix);

                        var ro = r;
                        if (typeof r === 'string') ro = JSON.parse(r);
                        if (ro.success) {
                            thumbnailArr.push(thumbnailPath); // 路径
                            thumbnailArr.push(ro.result); // base 64
                            // pathArr = pathArr.concat([thumbnailPath, ro.result]);   // 路径和base64
                            // res.result = pathArr;
                        } else {
                            thumbnailArr.push("");
                            thumbnailArr.push("");
                            console.error("Error happed when make thumbnail", r);
                        }
                    });
                }

                return {
                    pathArr: pathArr,
                    thumbnailArr: thumbnailArr
                }
            }

            function resConcat(res) {
                return {
                    success: true,
                    result: res.pathArr.concat(res.thumbnailArr)
                };
            }

            function resCombine(res) {
                var result = [],
                    pathArr = res.pathArr,
                    thumbnailArr = res.thumbnailArr;
                for (var i = 0; i < pathArr.length; i++) {
                    result.push({
                        path: pathArr[i],
                        thumbnail: thumbnailArr[2 * i],
                        base64: thumbnailArr[2 * i + 1]
                    });
                }
                return {
                    success: true,
                    result: result
                };
            }

            function takePhoto(folder, width, height, callback, dataType) {
                var type = cmu.getClientType();
                if (type === "android") {
                    doAndroid(folder, width, height, callback, dataType);
                } else if (type === "windows") {
                    windowsTakePhoto(folder, width, height, callback, dataType);
                } else {
                    return {
                        success: false,
                        error: "take photo must be called in shell"
                    };
                }
            }

            // 返回旧的数据格式
            // { success: true, result: ["pic1 Path", "pic2 Path", "pic1 thumbnail", "pic1 thumbnail base64", "pic2 thumbnail", "pic2 thumbnail base64"] }
            cmu.TakePhoto = function (folder, width, height, callback) {
                return takePhoto(folder, width, height, callback, 1);
            }

            // 返回新的数据格式
            // { success: true, result: [{path:"pic1 path", thumbnail: "pic1 thumbnail path", base64: "pic1 thumbnail base64"}]}
            cmu.TakePhoto2 = function (folder, width, height, callback) {
                return takePhoto(folder, width, height, callback, 2);
            }


            if (isAndroid) cmu.MediaCaptureExt.TakePicture = cmu.TakePhoto;
            if (isAndroid) cmu.androidTakePhoto = androidTakePhoto


            /// ++++++++++++ 文件夹删除
            function androidDeleteDir(dirPath) { /// 删除文件夹也是这个
                return PJF.communication.fileSystem.fileOperation(
                    PJF.communication.fileSystem.FO_DELETE, [{
                        source: dirPath
                    }]
                );
            }

            function windowsDeleteDir(dirPath) {
                var cmd = 'RD /S /Q "{path}"'.replace('{path}', dirPath);
                return PJF.communication.fileSystem.runWinCmd(cmd);
            }

            cmu.DeleteDir = isAndroid ? androidDeleteDir : windowsDeleteDir;

        })(PJF.communication);


        /// +++++++++++++/

        (function (html) {
            if (!html || !html.resize2keyboard) return; // 为了保持这个文件仅仅依赖 event.js 和 padClient.js
            $(function () {
                // 开启window的resize转换为keyboard show和hide事件
                // android下键盘导致webview大小变化
                setTimeout(function () { // 放到timeout里面，避免异常中断正常执行流
                    html.resize2keyboard(); /// 这里依赖PJF.html 了
                }, 10);
            });
        })(PJF.html);


        /// ++++++++ android only
        (function () {
            var comu = PJF.communication;
            // var type = comu.getClientType();
            // if (type !== "android") return;

            comu.anyofficeLogin = function (hostIp, hostPort, userName, userPass, cb) {
                var id = comu.generateEventId();
                PJF.event.onceSubscriber(id, cb);
                return comu.CallClient("anyOfficeLogin", {
                    hostIp: hostIp,
                    hostPort: hostPort,
                    userName: userName,
                    userPass: userPass,
                    eventId: id
                });
            }

            // PJF.communication.anyOfficeAddList("test.cdkfzx.com;ccb.com", true);
            comu.anyofficeAddList = function(addList, useWhitelist) {
                return comu.CallClient("anyOfficeAddList", {
                    useWhitelist: !!useWhitelist,
                    addList: addList
                });
            }

            comu.setCanDeviceBack = function(back) {
                return comu.CallClient("setCanDeviceBack", {
                    back: !!back
                });
            }

            comu.getLocation =  function(oncomplete) {
                var id = comu.generateEventId();
                PJF.event.onceSubscriber(id, oncomplete);
                return comu.CallClient("getLocation", {eventId: id});
            }

            comu.barcodeScan = function(cb) {
                var id = comu.generateEventId();
                PJF.event.onceSubscriber(id, cb);
                return comu.CallClient("barcodeScan", {eventId: id});
            }


// 汽车银行接口
// 接口名称 navigation ,调用系统安装的导航软件进行导航
// lat,目的地纬度，lon，目的地纬度，address,目的地地址
            comu.navigation = function(lat, lon, address) {
                return comu.CallClient("navigation", {
                    'address': address, // eg. '四川省成都市'
                    'lat': lat,
                    'lon': lon
                });
            }
        })();


    })();
};

// pad & mobile 公用的 两地三中心相关内容

PJF.multiCenter = (function () {
    var exports = {};
    var key = "_sys_domain_setting_";
    var isMobile = PJF.constants.termType === "mobile";

    // 默认中心 0 南中心 1北中心洋桥 2北中心稻香湖
    function queryDNS(orgCode, succ, err, async) {  // 使用登陆成功时的岗位机构号
        var defaultData = {
            "BK_STATUS": "00",
            "RESULT_DATA": {
                dns: "mgt.nemc.jh",   // stm 审核的业务群域名
                scp: "1"
            }
        };

        return PJF.communication.cpsJsonReq({  // 多个中心，多个集群数据一致
            fwServiceId: 'stm.DNSLocator',
            async:async,
            // noErrorBox: true,
            fwTranId: "DNSLocator",  // 骗过检查
            jsonData: JSON.stringify({ "insid": orgCode , "devChlTp": "003"}),
            success: function (data) {
                exports._save(data);
                succ && succ(data);
            },
            failure: function (data) {
                // {"BK_CODE":"YBLP2ECP0001","BK_DESC":"[ERRORCODE=YBLP2ECP0001] [交易失败，失败原因=未查找到匹配的集群信息]","BK_DESC_DETAIL":"[ERRORCODE=YBLP2ECP0001] 
                // [交易失败，失败原因=未查找到匹配的集群信息]","BK_STATUS":"01","FLLW_GUIDE":"请与系统管理员联系","_COMMON":{"SYS_EVT_TRACE_ID":"1020010701473841536007310"}}
                // if (data && data.BK_STATUS && data.BK_STATUS != "00") {
                //     // 获取失败，就用PAD当前IP来打开STM页面
                //     succ && succ(defaultData);
                // } else {
                err && err(data);
                // }
            }
        });
    }


    // app启动的时候，应该打开的集群
    function getStartupCluster() {
        switch (PJF.constants.termType) {
            case "mobile":
                return "mob";
            case "pad":
                return "pub";
            case "stm":
                return "mgt";
        }
    }

    // 保存给壳启动时候读取的
    function save(data) {
        var fn;
        if (isMobile) {
            fn = PJF.client.storage.localSet
        } else {
            fn = PJF.util.localSet;
        }
        var centerID = data.RESULT_DATA.scp;
        var prefix = getStartupCluster();
        var o = {
            centerID: centerID,
            domain: exports._getIPByCluster(prefix, centerID),
            port: exports.getPortByCluster(prefix, centerID),
            cnt: data.RESULT_DATA.dns
        }
        exports._centerMap[centerID].cnt = data.RESULT_DATA.dns;

        center_cache = o;
        fn(key, o);
    }

    function getHost(cluster, centerID) {
        centerID = centerID || exports.getCenterID() || "1";   // default 1
        var cm = exports._centerMap[centerID];
        if (!cm) {
            console.error("no centerId found: " + centerID);
            return "";
        }
        return cm[cluster] || "";
    }

    function getHostArr(cluster, centerID) {
        var host = getHost(cluster, centerID)
        if (host) {
            host = host.split(":")
        }
        return host
    }

    // return host
    function getDomainByCenter(cluster, centerID) {
        return getHost(cluster, centerID);
    }

    function getIPByCluster(cluster, centerID) {
        var hostarr = getHostArr(cluster, centerID);
        return hostarr ? hostarr[0] : "";
    }

    function getPortByCluster(cluster, centerID) {
        var host = getHostArr(cluster, centerID);
        if (host && host.length > 1) {
            return host[1];
        } else {
            return 80;
        }
    }

    var center_cache = "xxx";  // not init flag
    function getCenterCfg() {
        if (center_cache == "xxx") {
            var fn;
            if (isMobile) {
                fn = PJF.client.storage.localGet
            } else {
                fn = PJF.util.localGet;
            }
            center_cache = fn(key);
            if (!center_cache) {
                console.log(">>>>> no center cfg found <<<<<");
            } else {
                // var centerID = center_cache.centerID;
                // exports._centerMap[centerID].cnt = center_cache.cnt;
                console.log(">>>> read center cfg ok");
            }
        }
        return center_cache;
    }

    function getCenterID() {
        var o = exports.getCenterCfg() || {};  // 调用getCenterID这个API的时候，会自动去壳里面取一次，不需要显示初始化
        return o.centerID;
    }

    return $.extend(exports, {
        _save: save,
        _queryCenter: queryDNS,
        _getIPByCluster: getIPByCluster,
        getCenterCfg: getCenterCfg,
        getCenterID: getCenterID,
        getDomainByCenter: getDomainByCenter,  // 这个名字取得有问题，但是用了，懒得改了。。。
        getPortByCluster: getPortByCluster
    });

})();

PJF.multiCenter._centerMap = {
    "1": {  // 洋桥
        "pub": "pub.nemc.jh",
        "mgt": "mgt.nemc.jh",
        "cnt": "cnt01.nemc.jh",   // 业务
        "stm": "stm.nemc.jh",
        "lt": "lt.ecip.jh",
        "im": "im.nemc.jh",
        "mob": "mb.by.nemc.jh"
    },
    "0": {  // 南湖
        "pub": "pub.wn.nemc.jh",
        "mgt": "mgt.wn.nemc.jh",
        "cnt": "cnt01.wn.nemc.jh",
        "stm": "stm.wn.nemc.jh",
        "lt": "lt.ecip.jh",   // 分行特色集群也只有一个
        "im": "im.nemc.jh",   // 现在只有北中心有im集群， im.wn.nemc.jh
        "mob": "mb.wn.nemc.jh"
    },
    "2": {
        "mgt": "mgt.nemc.jh"
    }
}
;

/**
 * PAD 专用
 * Created by zhoukang.zh on 2016/3/23.
 */
; PJF.namespace('PJF.util');

$.extend(PJF.util, (function (commun) {

    function getSaveFn(scope) {
        return function (key, val) {
            scope.setValue(key, JSON.stringify({ _s_warp_: val }));  // 保证传过去的是字符串
        }
    }

    function getGetFn(scope) {
        return function (key) {
            var ret = scope.getValue(key);
            if (ret.success) {
                ret.result = JSON.safeParse(ret.result, ret.result);
            } else {
                return null;
            }
            if($.isPlainObject(ret.result) && ret.result.hasOwnProperty("_s_warp_")) {
                ret = ret.result._s_warp_;
            }
            return ret;
        }
    }

    var macEncryptFlag = 0
    function canMacEncrypt() {
        if (macEncryptFlag === 0) {
            macEncryptFlag = false
            if (PJF.communication.isInClient()) {
                var ret = PJF.communication.GetClientInfo();
                if (typeof ret === "string") ret = JSON.parse(ret);
                var ver = ret.success ? ret.result : "1.0";
                var clientType = PJF.communication.getClientType();
                if (clientType === "windows" && PJF.util.compareVersion(ver, "2.0.8.0") >= 0 ||
                    clientType === "android" && PJF.util.compareVersion(ver, "1.4.8") >= 0) {
                    macEncryptFlag = true
                }
            }
        }
        if(!macEncryptFlag) {
            console.warn("can not Mac Encrypt Json data")
            PJF.constants.NO_AJAX_PREFILTER = true
        }
        return macEncryptFlag
    }

    var encryptInfo;
    function encryptData(str) {
        if (!PJF.util._canMacEncrypt()) return null

        if (!encryptInfo) {
            encryptInfo = PJF.util.sessionGet("_sys_pjf_encrypt_info_") //
            if (!encryptInfo) return null
        } else {
            var ret = PJF.communication.SecAPI.generateMac(encryptInfo.userId, encryptInfo.secretKey, encryptInfo.secNodeId, str)  // api 支持
            if (ret.success) {
                return ret.result
            } else {
                console.log("error in Encrypt jsonData ", ret)
                return null
            }
        }
    }

    function contains(str, sub) {
        str = str || ""
        return str.indexOf(sub) !== -1
    }

    var _jsonReg = /jsonData=([^&]+)/
    // 只需要在最外层加，不用动jsonData的内容
    function padCrossReqMacEncrypt(obj) {  // obj 直接改数据吧 。。。
        if (!PJF.userInfo || !PJF.userInfo.userCode) return
        if (!PJF.util._canMacEncrypt()) return null

        if (contains(obj.url, "macData=")) return

        if (contains(obj.url, "/bosWeb/") && contains(obj.url, ".action")) {
            var done = false;
            if (obj.data) {
                if (typeof obj.data === 'string' && !contains(obj.url, "macData=")) {
                    obj.data = addEncrypt2Str(obj.data)
                    done = true
                } else if (typeof obj.data.jsonData === 'string') {
                    var o = getEncryptObj(obj.data.jsonData)
                    if (o) $.extend(obj.data, o)
                    done = true
                }
            } else if (!done) {
                obj.url = addEncrypt2Str(obj.url)
            }
        }
    }

    function addEncrypt2Str(str) {
        var ms = _jsonReg.exec(str)
        if (ms && ms[1]) {
            o = getEncryptObj(ms[1])
            if (o) str += "&" + $.param(o)
        }
        return str
    }

    function getEncryptObj(jsonStr) {
        var d = PJF.util.encryptData(jsonStr)
        return d ? {
            _terminal_type: PJF.constants.termType, //设备平台
            OPER_CODE: PJF.userInfo.userCode, //解密用的
            macData: d
        } : null
    }

    return {
        // 存对象，取对象
        "localSet": getSaveFn(commun.localStorage),
        "localGet": getGetFn(commun.localStorage),
        "sessionSet": getSaveFn(commun.sessionStorage),
        "sessionGet": getGetFn(commun.sessionStorage),
        encryptData: encryptData,
        padCrossReqMacEncrypt: padCrossReqMacEncrypt,
        _canMacEncrypt: canMacEncrypt
    };
})(PJF.communication));


; PJF.namespace('PJF.html');
(function(html) {
    html.getUrlParam = function(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg);
        if (r != null)
            return decodeURIComponent(r[2]);
        return null;
    };
})(PJF.html);


(function () {
    var parse = JSON.parse.bind(JSON);
    JSON.parse = function (str) {
        if(typeof str === 'object') {
            return str;
        } else {
            return parse(str);
        }
    }


    // var parseJSON = $.parseJSON.bind($);
    // $.parseJSON = function(str) {
    //     if(typeof str === 'object') {
    //         return str;
    //     } else {
    //         return parseJSON(str);
    //     }
    // }
})();




// pad上 多个tab间通信的 独立js文件，无外部依赖;;也与pjf pad兼容
// 弄成独立的，因为外部页面可能不会引入pjf，只引入这一个js即可
window.PJF = window.PJF || {};
PJF.communication = PJF.communication || {};
PJF.communication.shellTab = (function (params) {
    var tabMsgCenter = $({});
    var eventPrefix = "tabCommu.";
    var clientType = (function () { // string
        if (window.external && "InvokeFromJs" in external) return "windows";
        else if (window.client && "callShell" in window.client) return "android";
        else return "browser";
    })();

    function _tabActiveWindows(methodName, inData) {
        return JSON.parse(external.InvokeFromJs(
            JSON.stringify({
                "methodName": methodName,
                "inData": inData
            })
        ));
    }


    function _tabActiveAndroid(methodName, inData) {
        var ret = prompt(methodName, JSON.stringify(inData)).replace(/##/g, "\\\"");
        return JSON.parse(ret);
    }

    var _o_ = {
        success: false,
        error: 'illegal: this method must be called in client',
        errorCode: '1',
        result: ""
    };

    function _callDispatch(methodName, inData) {
        switch (clientType) {
            case "windows":
                return _tabActiveWindows(methodName, inData);
            case "android":
                return _tabActiveAndroid(methodName, inData);
            default:
                return _o_;
        }
    }

    function _close_webview(currentIndex) {
        var params = JSON.stringify({
            tabIndex: currentIndex,
            onlyHide: false
        });
        switch (clientType) {
            case "windows":
                return _windows_close(params);
            case "android":
                return _android_close(params);
            default:
                return _o_;
        }
    }

    function _windows_close(params) {
        try {
            external.InvokeFromJsPro("IeTabControl", "CloseThisTab", params, "");
        } catch (e) {
            console.log('须在客户端里调用此方法');
        }
    }

    function _android_close(params) {
        prompt("CloseThisTab", params);
    }

    function _receiveMsg(eventName, cb, type) {
        if (!eventName || !$.isFunction(cb)) return console.log("invalid args");
        tabMsgCenter[type](eventPrefix + eventName, function (e, data) {
            cb(data);
        });
    }

    return {
        //tabMsgCenter: tabMsgCenter,
        getCurrentTabIndex: function () {
            return _callDispatch("getCurrentTabIndex", {});
        },
        // 只支持在active指定tab的时候，才能发送消息，而且关闭当前的webview
        tabActiveWithMsg: function (tabIndex, eventName, data) { // data 可以是string ， object
            var ret = PJF.communication.Tabs.GetCurrentTabIndex();  // 在切换前就获取index，避免有的壳获取到了top的。。。
            var currentIndex = ret.success ? ret.result : -1;

            var jsToInvoke = "PJF.communication.shellTab._tabMsgDispatch('" + encodeURIComponent(JSON.stringify({
                eventName: eventName,
                data: data
            })) + "')";
            var r = _callDispatch("activateTabByIndex", {
                tabIndex: tabIndex,
                jsToInvoke: jsToInvoke
            });

            var fnc = this._close_webview || _close_webview;
            fnc(currentIndex);
            return r;
        },
        _close_webview: _close_webview,
        // 接受消息的页面 的消息分发函数
        _tabMsgDispatch: function (encodedStr) {
            var args;
            try {
                args = JSON.parse(decodeURIComponent(encodedStr));
            } catch (e) {
                return console.error(e);
            }
            if (!args || !args.eventName) {
                return console.warn("invalid tabMsg!!!");
            }
            tabMsgCenter.trigger(eventPrefix + args.eventName, args.data);
        },
        onMsg: function (eventName, cb) {
            _receiveMsg(eventName, cb, "on");
        },
        // 自动销毁
        onceMsg: function (eventName, cb) {
            _receiveMsg(eventName, cb, "one");
        },
        offMsg: function (eventName) {
            tabMsgCenter.off(eventPrefix + eventName)
        }
    };
})();
PJF.namespace("PJF.stm.client");

//调用callClient
PJF.apply(PJF.stm.client, {
  callbackList: {},
  mustDoneBeforeHashChange: {},
  //发卡发盾流程的菜单
  speMenu: ['ACC10001', 'SPB30001', 'SPB20001', 'SPB30002', 'SPB30003'],
  isNoPageJump: function (deviceid) {
    return PJF.constants.NO_PAGE_JUMP_LIST_DEVICE.indexOf('ALL') != -1 || PJF.constants.NO_PAGE_JUMP_LIST_DEVICE.indexOf(deviceid) != -1;
  },
  //不调用loading的命令
  noLoadingList: ["PIN_getPinLength", "WaitForTaken", "CDB_ReadCard", "IDC_readCard", "callThreeDevice", "getIDCardInfo"],
  callClient: function (deviceid, funcName, args, callback, fnSuccess, fnFail) {
    if (args.loadingConf !== false && (PJF.stm.client.noLoadingList.indexOf(funcName) == -1)) {
      var loadingConf = $.extend({
        msg: "",
        opacity: 0.1,
        noIcon: true,
        timeout: args.timeout || args.iTimeout
      }, args.loadingConf);
      var loading = new PJF.ui.loading(loadingConf);

    }
    args.deviceStartSound && PJF.communication.player.PlaySoundByUrl(args.deviceStartSound, true);
    //可能存在物联网调用
    if (!$.isEmptyObject(PJF.otherInfo.moduleParams)) {
        var pos = deviceid.indexOf("App_");
        var _module = (pos > -1) ? deviceid.substr(4) : deviceid;
        //cdb模块只有部分方法可能迁移到iot上
        if (PJF.otherInfo.moduleParams[_module] && (PJF.otherInfo.moduleParams[_module]['Apl_Tp_ID'] == 'remote') && args.iotFunc)
          args._iotCall = true;
    }
    console.log(deviceid + "-" + funcName + '调用外设参数:', JSON.stringify(args));
    var result = PJF.communication.devices.CallDevice(deviceid, funcName, args, function (data) {
      PJF.event.publish(PJF.stmEvent.PJF_STM_CALL_DEVICE_BACK, result.eventId)
      result.eventId && (delete PJF.stm.client.callbackList[result.eventId])
      if (args.loadingConf !== false && (PJF.stm.client.noLoadingList.indexOf(funcName) == -1)) {
        loading.destroy();
      }
      console.log(deviceid + "-" + funcName + '外设返回结果:', data);
      var res = PJF.stm.client.initCallback(data, fnSuccess, fnFail, args);
      if (!res.status) { //外设出错
        var msg = ['外设模块:', deviceid, ',命令:', funcName, ',调用出错，错误码为:', res.errorCode, ',错误信息为:', res.errorMsg];
        PJF.event.publish(PJF.stmEvent.DEVICE_ERR, msg.join(''));
      }
      callback && callback(res);
    });
    PJF.event.publish(PJF.stmEvent.PJF_STM_CALL_DEVICE, result.eventId);
    result.eventId && PJF.stm.client.isNoPageJump(deviceid) && (PJF.stm.client.callbackList[result.eventId] = deviceid);
    if (!result.success) {
      PJF.event.publish(PJF.stmEvent.PJF_STM_CALL_DEVICE_BACK, result.eventId); //按候大师的说法，如果这里err了，外设就没发出去，也不会有回调了
      if (PJF.stm.client.noLoadingList.indexOf(funcName) == -1) {
        loading.destroy();
      }
      PJF.event.removeSubscriber(result.eventId);
      result.eventId && (delete PJF.stm.client.callbackList[result.eventId]);
      console.log('外设调用直接出错:', JSON.stringify(result));
      //之所以要setTimeout,就是为了像真外设那样异步
      callback && setTimeout(function () {
        callback({
          status: 0,
          errorCode: result.errorCode,
          errorMsg: result.error
        })
      }, 0)
    }
    return result;
  },
  callClientSync: function (deviceid, funcName, args, fnSuccess) {
    console.log(deviceid + "-" + funcName + '调用外设参数:', JSON.stringify(args))
    var rst = PJF.communication.devices.CallDeviceSync(deviceid, funcName, args)
    console.log(deviceid + "-" + funcName + '外设返回结果:', JSON.stringify(rst))
    if (rst.success) {
      var result = {}
      var jsonResult = JSON.parse(rst.result)
      if (jsonResult.pchErrCode === "DRV0000000") {
        result.status = 1
        fnSuccess ? (result.info = fnSuccess(jsonResult)) : (result.info = jsonResult)
      } else {
        result.status = 0
      }
      result.errorCode = jsonResult.pchErrCode
      result.errorMsg = jsonResult.pchError
      return result
    } else {
      return {
        status: 0,
        errorCode: rst.errorCode,
        errorMsg: rst.error
      }
    }
  },
  initCallback: function (data, fnSuccess, fnFail, args) {
    var result = {};
    var dataJson = JSON.parse(data);
    if (dataJson.success) {
      var resultJson = JSON.parse(dataJson.result);

      if (resultJson.pchErrCode in PJF.stm.client.pchErrEscape) {
        resultJson.pchError = PJF.stm.client.pchErrEscape[resultJson.pchErrCode];
      }

      if (resultJson.pchErrCode == "DRV0000000" || resultJson.pchErrCode == (args.pchType + '0000001')) {
        result.status = 1;
        result.errorCode = resultJson.pchErrCode;
        result.errorMsg = resultJson.pchError;
        //执行成功的数据封装
        if (fnSuccess) {
          //避免获取的数据解析出错
          try {
            result.info = fnSuccess(resultJson);
          } catch (e) {
            result.status = 0;
            console.log('外设命令解析返回数据出错:' + e.message + ',数据为:' + data);
          }
        } else {
          result.info = resultJson;
        }
        //虽然外设成功了，可能数据有问题等情况，如磁条卡二磁道信息解析有问题
        if (result.info && result.info.pjfstatus == "0") {
          result.status = 0;
          result.errorCode = result.info.pchErrCode;
          result.errorMsg = result.info.pchError;
        }
      } else {
        result.status = 0;
        result.errorCode = resultJson.pchErrCode;
        result.errorMsg = resultJson.pchError;

        if (fnFail) {
          result.info = fnFail(resultJson);
        }
      }
    } else {
      result.status = 0;
      result.errorCode = dataJson.errorCode;
      result.errorMsg = dataJson.error;
    }
    return result;
  },
  eventHandler: function (deviceType, eventName, eventTime, data) {
      if (deviceType == 'PIN' && eventName == 'pinLengthChange') {
          PJF.event.publish(PJF.stm.client.events.PIN_LENGTH, data);
      }
      if (deviceType == 'CDB') {
          if (eventName == 'cdbInhaled') {
              PJF.event.publish(PJF.stm.client.events.CDB_INHALED);
          } else if (eventName == 'cdbTaken') {
              PJF.event.publish(PJF.stm.client.events.CDB_TAKEN);
          }
      }
      if (deviceType == 'KDB' && eventName == 'kdbTaken') {
          PJF.event.publish(PJF.stm.client.events.KDB_TAKEN);
      }
      if (deviceType == 'IDC') {
          if (eventName == 'idcInhaled') {
              PJF.event.publish(PJF.stm.client.events.IDC_INHALED);
          } else if (eventName == 'idcTaken') {
              PJF.event.publish(PJF.stm.client.events.IDC_TAKEN);
          }
      }
      if (deviceType == 'HDP') {
          if (eventName == 'printProgress') {
              PJF.event.publish(PJF.stm.client.events.HDP_PRINT_PROGRESS, data);
          } else if (eventName == 'printSuccess') {
              PJF.event.publish(PJF.stm.client.events.HDP_PRINT_SUCCESS, data);
          } else if (eventName == 'printFail') {
              PJF.event.publish(PJF.stm.client.events.HDP_PRINT_FAIL, data);
          }
      }
      if (deviceType == 'PRT' && eventName == 'bookTaken') {
          PJF.event.publish(PJF.stm.client.events.BOOK_TAKEN);
      }
      if (deviceType == 'CHK') {
          if (eventName == 'printProgress') {
              PJF.event.publish(PJF.stm.client.events.CHK_PRINT_PROGRESS, data);
          } else if (eventName == 'printSuccess') {
              PJF.event.publish(PJF.stm.client.events.CHK_PRINT_SUCCESS, data);
          } else if (eventName == 'printFail') {
              PJF.event.publish(PJF.stm.client.events.CHK_PRINT_FAIL, data);
          }
      }
      if (deviceType == 'TCR') {
          switch (eventName) {
              case 'cashInSuccess':
                  PJF.event.publish(PJF.stm.client.events.TCR_CASH_IN_SUCCESS, data);
                  break;
              case 'cashInserted':
                  PJF.event.publish(PJF.stm.client.events.TCR_CASH_INSERTED);
                  break;
              case 'hasRefusedCash':
                  PJF.event.publish(PJF.stm.client.events.TCR_CASH_HAS_REFUSED);
                  break;
              case 'refusedCashTakenTimeout':
                  PJF.event.publish(PJF.stm.client.events.TCR_CASH_REFUSED_TMOUT);
                  break;
              case 'ejectCashComplete':
                  PJF.event.publish(PJF.stm.client.events.TCR_CASH_EJECT_COMPLETE);
                  break;
              case 'ejectCashFail':
                  PJF.event.publish(PJF.stm.client.events.TCR_CASH_EJECT_FAIL, data);
                  break;
              case 'pushCashSucess':
                  PJF.event.publish(PJF.stm.client.events.TCR_PUSH_CASH_SUCCESS);
                  break;
              case 'pushCashFail':
                  PJF.event.publish(PJF.stm.client.events.TCR_PUSH_CASH_FAIL, data);
                  break;
              case 'cashInFail':
                  PJF.event.publish(PJF.stm.client.events.TCR_CASH_IN_FAIL, data);
                  break;
              case 'dispenseAndPresentComplete':
                  PJF.event.publish(PJF.stm.client.events.TCR_CASH_DISPENSE_COMPLETE);
                  break;
              case 'presentBoxPresent':
                  PJF.event.publish(PJF.stm.client.events.TCR_CASH_BOX_PRE);
                  break;
              case 'presentBoxCashTaken':
                  PJF.event.publish(PJF.stm.client.events.TCR_CASH_BOX_CASH_TAKEN);
                  break;
              case 'cashOutFail':
                  PJF.event.publish(PJF.stm.client.events.TCR_CASH_OUT_FAIL, data);
                  break;
              case 'resetSuccess':
                  PJF.event.publish(PJF.stm.client.events.TCR_RESET_SUCCESS);
                  break;
              case 'resetFail':
                  PJF.event.publish(PJF.stm.client.events.TCR_RESET_FAIL, data);
                  break;
              default:
                  break;
          }
      }
      if (deviceType == 'LHT') {
          switch (eventName) {
              case 'DetectTimeout':
                  PJF.event.publish(PJF.stm.client.events.LHT_TMOUT);
                  break;
              case 'DetectLoss':
                  PJF.event.publish(PJF.stm.client.events.LHT_LOSS);
                  break;
              case 'DetectFinish':
                  PJF.event.publish(PJF.stm.client.events.LHT_FINISH);
                  break;
              case 'DetectSuccess':
                  PJF.event.publish(PJF.stm.client.events.LHT_SUCCESS);
                  break;
              case 'CameraFailed':
                  PJF.event.publish(PJF.stm.client.events.LHT_CAM_FAILED);
                  break;
              case 'SdkFailed':
                  PJF.event.publish(PJF.stm.client.events.LHT_SDK_FAILED);
                  break;
              default:
                  break;
          }
      }
      if (deviceType == 'HMI' && eventName == 'hmiChange') {
          PJF.event.publish(PJF.stm.client.events.HMI_CHANGE, data);
      }
      if (deviceType == 'LHA') {
          if (eventName == 'detectFail') {
              PJF.event.publish(PJF.stm.client.events.LHA_FAIL);
          } else if (eventName == 'detectSuccess') {
              PJF.event.publish(PJF.stm.client.events.LHA_SUCCESS);
          }
      }
      if (deviceType == 'PSR' && eventName == 'psrOneSideCompleted') {
          PJF.event.publish(PJF.stm.client.events.PSR_COMPLETE);
      }
      if (deviceType == 'RTS') {
          switch (eventName) {
              case 'close':
                  PJF.event.publish(PJF.stm.client.events.RTS_CLOSE, data);
                  break;
              case 'audit':
                  PJF.event.publish(PJF.stm.client.events.RTS_AUDIT, data);
                  break;
              case 'call':
                  PJF.event.publish(PJF.stm.client.events.RTS_CALL, data);
                  break;
              case 'queue':
                  PJF.event.publish(PJF.stm.client.events.RTS_QUEUE);
                  break;
              case 'abnormal':
                  PJF.event.publish(PJF.stm.client.events.RTS_ABNORMAL);
                  break;
              case 'resign':
                  PJF.event.publish(PJF.stm.client.events.RTS_RESIGN);
                  break;
              default:
                  break;
          }
      }
      if (deviceType == 'HVT' && eventName == 'hvtChange') {
          PJF.event.publish(PJF.stm.client.events.HVT_CHANGE, data);
      }
      if (deviceType == 'COMMON' && eventName == 'reserveResult') {
          PJF.event.publish(PJF.stm.client.events.RSV_RESULT, data);
      }
      if (deviceType == 'FTC' && eventName == 'doorOpenNotice') {
          PJF.event.publish(PJF.stm.client.events.DOOR_OPEN, data);
      }
  },
  // 针对ytd上，某些外设命令直接返回成功
  ytdHandler: function (callback, cbData) {
    //若不是STM，则该功能无效
    if (!PJF.util.deviceType.stm) {
      callback && callback(cbData);
      return true;
    }
    return false;
  }
});

//针对特定错误码，进行错误信息转义处理
PJF.stm.client.pchErrEscape = {
  DRVCDB0007: '读取卡片芯片或磁条信息失败，请检查银行卡插卡方向'
};

PJF.stm.client.events = {
  CDB_TAKEN: 'CDB_TAKEN',
  CDB_INHALED: 'CDB_INHALED',
  KDB_TAKEN: 'KDB_TAKEN',
  IDC_TAKEN: 'IDC_TAKEN',
  IDC_INHALED: 'IDC_INHALED',
  PIN_LENGTH: 'PIN_LENGTH',
  CDB_STOP: 'CDB_STOP',
  IDC_STOP: 'IDC_STOP',
  HDP_PRINT_PROGRESS: 'HDP_PRINT_PROGRESS',
  HDP_PRINT_SUCCESS: 'HDP_PRINT_SUCCESS',
  HDP_PRINT_FAIL: 'HDP_PRINT_FAIL',
  CHK_PRINT_PROGRESS: 'CHK_PRINT_PROGRESS',
  CHK_PRINT_SUCCESS: 'CHK_PRINT_SUCCESS',
  CHK_PRINT_FAIL: 'CHK_PRINT_FAIL',
  BOOK_TAKEN: 'BOOK_TAKEN',
  TCR_CASH_IN_SUCCESS: 'TCR_CASH_IN_SUCCESS',
  TCR_CASH_INSERTED: 'TCR_CASH_INSERTED',
  TCR_CASH_HAS_REFUSED: 'TCR_CASH_HAS_REFUSED',
  TCR_CASH_REFUSED_TMOUT: 'TCR_CASH_REFUSED_TMOUT',
  TCR_CASH_EJECT_COMPLETE: 'TCR_CASH_EJECT_COMPLETE',
  TCR_CASH_EJECT_FAIL: 'TCR_CASH_EJECT_FAIL',
  TCR_PUSH_CASH_SUCCESS: 'TCR_PUSH_CASH_SUCCESS',
  TCR_PUSH_CASH_FAIL: 'TCR_PUSH_CASH_FAIL',
  TCR_CASH_IN_FAIL: 'TCR_CASH_IN_FAIL',
  TCR_CASH_DISPENSE_COMPLETE: 'TCR_CASH_DISPENSE_COMPLETE',
  TCR_CASH_BOX_PRE: 'TCR_CASH_BOX_PRE',
  TCR_CASH_BOX_CASH_TAKEN: 'TCR_CASH_BOX_CASH_TAKEN',
  TCR_CASH_OUT_FAIL: 'TCR_CASH_OUT_FAIL',
  TCR_RESET_SUCCESS: 'TCR_RESET_SUCCESS',
  TCR_RESET_FAIL: 'TCR_RESET_FAIL',
  PASSBOOK_STOP: 'PASSBOOK_STOP',
  LHT_TMOUT: 'LHT_TMOUT',
  LHT_LOSS: 'LHT_LOSS',
  LHT_FINISH: 'LHT_FINISH',
  LHT_SUCCESS: 'LHT_SUCCESS',
	LHT_CAM_FAILED: 'LHT_CAM_FAILED',
	LHT_SDK_FAILED: 'LHT_SDK_FAILED',
	HMI_CHANGE: 'HMI_CHANGE',
	LHA_FAIL: 'LHA_FAIL',
	LHA_SUCCESS: 'LHA_SUCCESS',
    PSR_COMPLETE: 'PSR_COMPLETE',
    RTS_CLOSE: 'RTS_CLOSE',
    RTS_AUDIT: 'RTS_AUDIT',
    RTS_CALL: 'RTS_CALL',
    RTS_QUEUE: 'RTS_QUEUE',
    RTS_ABNORMAL: 'RTS_ABNORMAL',
    RTS_RESIGN: 'RTS_RESIGN',
    HVT_CHANGE: 'HVT_CHANGE',
    RSV_RESULT: 'RSV_RESULT',
    DOOR_OPEN: 'DOOR_OPEN'
}

//密码键盘--PIN
PJF.stm.Pin = {
  //录入密码-DES
  /**
   * @param iTimes[int]:输入密码次数,1-第一次；2-第二次。分别不同的语音提示
   * @param iEncodeType[int]:加密方式,2 - DES加密
   * @param iLength[int]: 0-不限长度；其它正整数-其指定长度
   * @param iTimeout[int]:输入密码超时间隔,默认30秒
   * @param callback[function]:回调函数
   *
   * 备注：回调函数里返回的数据信息info里的字段注解
   * @param pchSecPassword[string]:加密后的密码
   * @param pchSecPasswordLen[int]:加密密码长度
   */
  readPin: function (args1, callback) {
    args1.encryptType = args1.encryptType || 'P2';
    var funcName = args1.encryptType == 'e2e' ? 'PIN_readPinE2E' : 'PIN_readPin';
    PJF.stm.log('录入密码', 'PJF_LOG_HARDWARE');
    var args = {
      iTimes: args1.iTimes,
      iEncodeType: 2,
      iLength: 6,
      timeout: args1.timeout || 30,
      //deviceStartSound:args.pinSound || (args.iTimes == 1 ? "PIN_inputPwd.wav" : "PIN_inputPwd2.wav")
    };

    $.extend(args, args1);

    args.pUserID = (PJF.otherInfo && PJF.otherInfo.devId) ? PJF.otherInfo.devId : "";
    if (args1.encryptType == 'P2' || args1.encryptType == 'base64') {
      args.keyInfoLen = (PJF.otherInfo && PJF.otherInfo.token) ? PJF.otherInfo.token.length : 0;
      args.pSecNodeID = (PJF.otherInfo && PJF.otherInfo.secNode) ? PJF.otherInfo.secNode : "";
      args.p2KeyInfo = (PJF.otherInfo && PJF.otherInfo.token) ? PJF.otherInfo.token : "";
      //base64编码加密时， iEncodeType传12
      if (args1.encryptType == 'base64')
        args.iEncodeType = 12;
    } else if (args1.encryptType == 'e2e') {
      //下面是端到端的密钥		
      args.pEntity = (PJF.otherInfo && PJF.otherInfo.secNode) ? PJF.otherInfo.secNode : "";
      args.E2EkeyInfoLen = (PJF.otherInfo && PJF.otherInfo.e2etoken) ? PJF.otherInfo.e2etoken.length : 0;
      args.pE2EKeyInfo = (PJF.otherInfo && PJF.otherInfo.e2etoken) ? PJF.otherInfo.e2etoken : "";
    }

    function fnSuccess(resultJson) {
      var info = {};
      info.pchSecPassword = resultJson.pchSecPassword;
      info.pchSecPasswordLen = resultJson.pchSecPasswordLen;

      return info;
    }

    PJF.stm.client.callClient("App_PIN", funcName, args, callback, fnSuccess);
  },
  //获取当前输入密码长度
  /**
   * @param callback[function]:回调函数
   *
   * 备注：回调函数里返回的数据信息info里的字段注解
   * @param retvalue[int]:当前输入密码长度
   */
  getPinLength: function (callback) {
    PJF.stm.log('获取当前输入密码长度', 'PJF_LOG_HARDWARE');
    var args = {};

    function fnSuccess(resultJson) {
      var info = {};
      info.retvalue = resultJson.__retvalue;

      return info;
    }

    PJF.stm.client.callClient("App_PIN", "PIN_getPinLength", args, callback, fnSuccess);
  },
  /**
   * 灌注sm4主密钥
   */
  setSM4PrimaryKey: function (args, cb) {
    args = $.extend({
      pUserID: PJF.otherInfo.devId,
      pSecNodeID: PJF.otherInfo.secNode,
      p2KeyInfo: PJF.otherInfo.token,
      keyInfoLen: PJF.otherInfo.token.length,
      pchPassword: '', // 短信口令
      iAlgorithm: '2',
      iMainKeyId: '1',
      pchKey: '' // 加密的密钥
    }, args)
    PJF.stm.client.callClient("App_PIN", "PIN_primKeyInject", args, cb)
  },
  /**
   * 灌注工作密钥
   */
  setSM4WorkKey: function (args, cb) {
    args = $.extend({
      pUserID: PJF.otherInfo.devId,
      pSecNodeID: PJF.otherInfo.secNode,
      p2KeyInfo: PJF.otherInfo.token,
      keyInfoLen: PJF.otherInfo.token.length,
      iAlgorithm: '2',
      iMainKeyId: '1',
      iKeyType: '0',
      iWorkKeyId: '2',
      pchKey: '' // 加密的工作密钥
    }, args)
    PJF.stm.client.callClient("App_PIN", "PIN_workKeyInject", args, cb)
  },
  /**
   * 获取加密数据
   */
  getEncryptedData: function (args) {
    // 生成3字节随机数, 再加上13位时间戳
    var pchData = ""
    for (var i = 0; i < 3; i++) {
      pchData += Math.floor(Math.random() * 10) + '' // 侯大爷那里各种问题，直接传数字没问题
    }
    var timeStamp, dateStr = PJF.communication.getServerTime('yyyyMMddHHmmss') || PJF.util.formatDate(new Date(), 'yyyyMMddhhmmss')
    if (dateStr) {
      timeStamp = new Date(dateStr.substr(0, 4), +dateStr.substr(4, 2) - 1, dateStr.substr(6, 2), dateStr.substr(8, 2), dateStr.substr(10, 2), dateStr.substr(12, 2)).getTime()
    } else {
      timeStamp = Date.now() + ''
    }
    pchData += timeStamp
    var newArgs = {}
    $.extend(newArgs, {
      pchData: pchData,
      iDataLen: pchData.length,
      iWorkKeyId: '2'
    }, args)
    var fnSuccess = function (resultJson) {
      resultJson.pchData = newArgs.pchData
      return resultJson
    }
    return PJF.stm.client.callClientSync("PIN", "getEncryptedData", newArgs, fnSuccess)
    // return PJF.stm.client.callClientSync("App_PIN", "PIN_encryptData", newArgs, fnSuccess)
  }
};

//刷卡器--RDC
PJF.stm.CardReader = {
  //读卡磁道
  /**
   * @param trackNum[int]:磁道号
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  getCardNum: function (args, callback) {
    PJF.stm.log('读卡磁道', 'PJF_LOG_HARDWARE');
    var args = {
      trackNum: args.trackNum || 23,
      timeout: args.timeout || 20,
      deviceStartSound: (typeof args.rdcSound == "undefined") ? "devprompt/RDC_read.wav" : args.rdcSound,
      readPassbook: args.readPassbook,
      loadingConf: args.loadingConf
    };

    PJF.stm.client.callClient("RDC", "getCardNum", args, callback, PJF.stm.CardReader.fnSuccess);

  },

  fnSuccess: function (resultJson) {
    //去除首位可能存在的：号
    if (resultJson.pchTrackData2.indexOf(':') == 0) {
      resultJson.pchTrackData2 = resultJson.pchTrackData2.substr(1);
    }
    var info = {};
    info.pchTrackData2 = resultJson.pchTrackData2;
    info.pchTrackData3 = resultJson.pchTrackData3;
    //info.accountNo = resultJson.pchTrackData2.split('=')[0];
    if (info.pchTrackData2.indexOf('=') != -1) {
      info.accountNo = info.pchTrackData2.split('=')[0];
    } else if (info.pchTrackData2.indexOf("'") != -1) {
      info.accountNo = info.pchTrackData2.split("'")[0];
      info.pchTrackData2 = info.pchTrackData2.replace("\'", "=");
    } else if (info.pchTrackData2.indexOf(">") != -1) {
      info.accountNo = info.pchTrackData2.split(">")[0];
      info.pchTrackData2 = info.pchTrackData2.replace(">", "=");
    } else {
      console.log("未能正确匹配磁道分隔符");
      info.pjfstatus = '0';
      info.pchErrCode = "PJF_TRACK2_PARSE_ERR01"
      info.pchError = "未能正确匹配磁道分隔符";
    }
    var encryptSecDisk = PJF.util.encrypt(info.pchTrackData2);
    if (encryptSecDisk) {
      info.pchTrackData2 = encryptSecDisk;
    } else {
      console.log("二磁数据加密失败");
      info.pjfstatus = '0';
      info.pchErrCode = "PJF_TRACK2_PARSE_ERR02";
      info.pchError = "二磁数据加密失败";
    }

    //由于全局变量没有resInfo，构造一个
    info.resInfo = {};
    info.resInfo.accountNo = info.accountNo;
    info.resInfo.secDisInfo = info.pchTrackData2;
    info.resType = '0';

    //如果是存折逻辑，可按存折格式解析的
    if ((PJF.util.array.indexOf(["'", "=", ">"], resultJson.pchTrackData2.substr(19, 1)) != -1) && (resultJson.pchTrackData2.length == 35)) {
      //19位账号+分隔符+4位印刷号+3位dvv+2位册号+2位支取方式+0000
      var printNo = resultJson.pchTrackData2.substr(20, 4); //印刷号
      var dvvNo = resultJson.pchTrackData2.substr(24, 3); //DVV
      var bkNumber = "0" + resultJson.pchTrackData2.substr(27, 2); //册号
      var tempWithDrawMode = resultJson.pchTrackData2.substr(29, 2); //支取方式
      /*
       支取方式，主机一般下送4位，由前端转化为2位，写入存折，读折时再转化为4位
       4转2：
       （第一位*2+第二位）*10+第三位*2+第四位
       若以上输出为个位数前补0
       2转4
       第1位除以2取整+第1位除以2取余+第2位除以2取整+第2位除以2取余

       */
      var tmp1 = parseInt(tempWithDrawMode.charAt(0), 10);
      var tmp2 = parseInt(tempWithDrawMode.charAt(1), 10);
      var withdrawMode = [Math.floor(tmp1 / 2), tmp1 % 2, Math.floor(tmp2 / 2), tmp2 % 2].join('');
      info.resInfo.printNo = printNo; //印刷号
      info.resInfo.dvvNo = dvvNo; //dvv
      info.resInfo.bkNumber = bkNumber; //册号
      info.resInfo.withdrawMode = withdrawMode; //支取方式
    }
    return info;
  }
};

//金融IC卡非接读卡--IC2
PJF.stm.IcCard = {
  //读IC卡客户信息
  /**
   * @param iIcFlag[int]:IC卡类型,2：非接触式IC卡
   * @param aryTagList[string]:标签编码数组,x41,x42
   * @param aryAIDList[string]:应用列表数组
   * @param iCInfoLen[int]:IC卡信息长度
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  getICCardInfo: function (args, callback) {
    PJF.stm.log('读IC卡客户信息', 'PJF_LOG_HARDWARE');
    var args = $.extend({
      iIcFlag: 2,
      pchTagList: args.aryTagList || "x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A",
      pchAIDList: args.aryAIDList || 'A000000333010101|A000000333010102|A000000333010103|A000000333010106',
      piCInfoLen: args.iCInfoLen,
      timeout: args.timeout || 20,
      ICC: args.ICC
    }, args);

      function fnSuccess(resultJson) {
          var result = {};
          var info;
          result.resType = '1';
          result.resInfo = resultJson.pcICInfo;
          info = PJF.stm.ICMaker.fnSuccess(result);
          info.resType = resultJson.pICType; //2-非接触式IC卡
          return info;
      }

    PJF.stm.client.callClient(args.ICC ? "ICC" : "IC2", "getICCardInfo", args, callback, fnSuccess);
  },
  //获取卡片信息，qPBOC
  getICDataByQPBOC: function (args, callback) {
    PJF.stm.log('获取卡片信息qPBOC', 'PJF_LOG_HARDWARE');
    var cmdArgs = $.extend({
      aryAIDList: args.aryAIDList || 'A000000333010101|A000000333010102|A000000333010103|A000000333010106',
      timeout: 30
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchD55 = resultJson.pchD55;
      info.pchICInfo = resultJson.pchICInfo;

      return info;
    }

    PJF.stm.client.callClient("IC2", "getICDataByQPBOC", cmdArgs, callback, fnSuccess);
  },
  //从IC卡获取ARQC
  /**
   * @param iIcFlag[int]:IC卡类型,2：非接触式IC卡
   * @param pchInput[string]:产生ARQC的数据的值
   * @param pchAIDList[string]:应用列表数组
   * @param lengthD55[int]:55域数据长度
   * @param lengthD60[int]:60域数据长度
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  genARQC: function (args, callback) {
    PJF.stm.log('获取ARQC', 'PJF_LOG_HARDWARE');
      var args1 = {
          iIcFlag: 2,
          pchInput: args.pchInput,
          pchAIDList: args.pchAIDList || 'A000000333010101|A000000333010102|A000000333010103|A000000333010106',
          piLengthD55: args.piLengthD55 || 2048,
          piLengthD60: args.piLengthD60 || 2048,
          timeout: args.timeout || 20
      };
      args1.loadingConf = {
          msg: "设备正在处理中",
          opacity: 0.1,
          noIcon: true,
          timeout: args1.timeout
      };
      $.extend(true, args1, args);

      if (args.ARQC) {
          var currTime = PJF.util.formatDate(new Date(), 'yyyyMMddhhmmss');
          //这是用来生成产生ARQC数据的值
          args.ARQC = $.extend(args.ARQC, {
              transDate: currTime.substr(0, 8), //交易日期
              transTime: currTime.substr(8, 16), //交易时间
              transOper: PJF.userInfo.userCode //商户，默认传操作员号
          });
          //应用列表数据
          if (args.ARQC.appType == 'default') {
              args1.pchAIDList = 'A000000333010101|A000000333010102|A000000333010103|A000000333010106';
          } else if (args.ARQC.appType == '1') {
              args1.pchAIDList = 'A000000333010101';
          } else if (args.ARQC.appType == '2') {
              args1.pchAIDList = 'A000000333010102';
          }
          args1.pchInput = PJF.stm.ICMaker.genARQCpchInput(PJF.stm.ICMaker.decimal2Ans(args.ARQC.authAmt),
              PJF.stm.ICMaker.decimal2Ans(args.ARQC.otherAmt),
              args.ARQC.cType, args.ARQC.transDate, args.ARQC.transType,
              args.ARQC.transTime, args.ARQC.transOper);
      }

      function fnSuccess(resultJson) {
          var info = {};
          info.pICType = resultJson.pICType;
          info.pchD55 = resultJson.pchD55;
          info.pchD60 = resultJson.pchD60;
          info.pchD55Len = resultJson.pchD55.length / 2;
          return info;
      }

    PJF.stm.client.callClient("IC2", "genARQC", args1, callback, fnSuccess);
  },
  //向IC卡发送ARPC，发送写卡脚本
  /**
   * @param pchInput[string]:验证ARPC需要的数据
   * @param pchARPC[string]:授权相应密文
   * @param iStatus[int]:返回状态
   * @param pchARQC[int]:ARQC
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  ARPC_ExeICScript: function (args, callback) {
    PJF.stm.log('发送写卡脚本', 'PJF_LOG_HARDWARE');
    var args = {
      iIcFlag: 2,
      pchInput: args.pchInput,
      pchARPC: args.pchARPC,
      iStatus: args.iStatus,
      pchARQC: args.pchARQC,
      piLenGAC2: args.piLenGAC2,
      timeout: args.timeout || 20
    };

    function fnSuccess(resultJson) {
      var info = {};
      info.pIcType = resultJson.pIcType;
      info.pScriptResult = resultJson.pScriptResult;
      info.pchGAC2 = resultJson.pchGAC2;

      return info;
    }

    PJF.stm.client.callClient("IC2", "ARPC_ExeICScript", args, callback, fnSuccess);
  },
  //读IC卡交易明细
  /**
   * @param pchAIDList[string]:应用列表串
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  getTxDetail: function (args, callback) {
    PJF.stm.log('读IC卡交易明细', 'PJF_LOG_HARDWARE');
    var cmdArgs = $.extend({
      iIcFlag: 2,
      timeout: 30
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pICType = resultJson.pICType;
      info.pchGAC2 = resultJson.pchGAC2;
      info.lenGAC2 = resultJson.lenGAC2;

      return info;
    }

    PJF.stm.client.callClient("IC2", "getTxDetail", cmdArgs, callback, fnSuccess);
  },
  //非接触式IC卡 上电复位
  /**
   * @param timeout[int]:超时间隔,默认20秒
   */
  initHYICCard: function (args, callback) {
    PJF.stm.log('上电复位', 'PJF_LOG_HARDWARE');
    var cmdArgs = $.extend({
      timeout: 20,
      CDB: false,
      useIC1: false
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchInitData = resultJson.pchInitData;
      info.iDataLen = resultJson.iDataLen;

      return info;
    }

    PJF.stm.client.callClient(cmdArgs.CDB ? (cmdArgs.useIC1 ? "IC1" : "CDB") : (PJF.util.deviceType.pad ? "ICC" : "IC2"), "initHYICCard", cmdArgs, callback, fnSuccess);
  },
  //非接触式IC卡 下电
  /**
   * @param timeout[int]:超时间隔,默认20秒
   */
  closeHYICCard: function (args, callback) {
    PJF.stm.log('下电', 'PJF_LOG_HARDWARE');
    var cmdArgs = $.extend({
      timeout: 20,
      CDB: false,
      useIC1: false
    }, args);

    PJF.stm.client.callClient(cmdArgs.CDB ? (cmdArgs.useIC1 ? "IC1" : "CDB") : (PJF.util.deviceType.pad ? "ICC" : "IC2"), "closeHYICCard", cmdArgs, callback);
  },
  //非接触式IC卡 执行命令
  /**
   * @param timeout[int]:超时间隔,默认20秒
   */
  readWriteHYICCard: function (args, callback) {
    PJF.stm.log('执行命令', 'PJF_LOG_HARDWARE');
    var cmdArgs = $.extend({
      timeout: 20,
      iCmdLength: 1024,
      CDB: false,
      useIC1: false
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchExcuteResult = resultJson.pchExcuteResult;

      return info;
    }

    PJF.stm.client.callClient(cmdArgs.CDB ? (cmdArgs.useIC1 ? "IC1" : "CDB") : (PJF.util.deviceType.pad ? "ICC" : "IC2"), "readWriteHYICCard", cmdArgs, callback, fnSuccess);
  },
  //读卡
  /**
   * @param pchTagList[string]:标签编码数组，默认全部标签x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A
   * @param pchAIDList[string]:应用列表数组，默认值A000000333010101|A000000333010102|A000000333010103|A000000333010106
   * @param pchInput[int]:产生ARQC的数据的值, TLV格式的字符串
   * @param timeout[int]:设备调用的超时时间(s)，默认30
   * @param callback[function]:回调函数
   *
   * 备注：回调函数里返回的数据信息info里的字段注解
   */
  readCard: function (args, callback) {
    PJF.stm.log('读IC卡', 'PJF_LOG_HARDWARE');
    var args = {
      pchTagList: args.pchTagList || "x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A",
      pchAIDList: args.pchAIDList || "A000000333010101|A000000333010102|A000000333010103|A000000333010106",
      pchInput: args.pchInput,
      timeout: (typeof args.timeout == "undefined") ? 30 : args.timeout
    };

    function fnSuccess(resultJson) {
      var info = {};
      info.pICType = resultJson.pICType;
      info.pcICInfo = resultJson.pcICInfo;
      info.pchD55 = resultJson.pchD55;
      info.pchD60 = resultJson.pchD60;
      info.pchGAC2 = resultJson.pchGAC2;
    }

    PJF.stm.client.callClient("App_IC2", "IC2_ReadCard", args, callback, fnSuccess);
  },

  /**
   *  读取Mifare卡ID
   */
  m1_readCardID: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchCardType = resultJson.pchCardType;
      info.pchCardID = resultJson.pchCardID;
      info.pchATR = resultJson.pchATR;
      return info;
    }

    PJF.stm.client.callClient("IC2", "m1_readCardID", cmdArgs, callback, fnSuccess);
  },

  /**
   *  对M1卡下电
   */
  m1_close: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient("IC2", "m1_close", cmdArgs, callback);
  },

  /**
   *  读块数据
   */
  m1_readData: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchData = resultJson.pchData;
      return info;
    }

    PJF.stm.client.callClient("IC2", "m1_readData", cmdArgs, callback, fnSuccess);
  },

  /**
   *  写块数据
   */
  m1_writeData: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient("IC2", "m1_writeData", cmdArgs, callback);
  },

  /**
   *  修改块密钥
   */
  m1_modifyPassword: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient("IC2", "m1_modifyPassword", cmdArgs, callback);
  },

  /**
   *  取消当前读卡操作
   */
  cancelCurOperation: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient("IC2", "cancelCurOperation", cmdArgs, callback);
  },

    /**
     *  读取ETC卡信息
     */
    ETC_getCardInfo: function (args, callback) {
        var cmdArgs = $.extend({}, args);
        var moduleName = PJF.util.deviceType.pad ? 'ICC' : 'IC2'
        var execCmd = PJF.util.deviceType.pad ? 'getETCCardInfo' : 'ETC_getCardInfo'
        PJF.stm.client.callClient(moduleName, execCmd, cmdArgs, callback, PJF.stm.IcCard.fnSuccess);
    },

    fnSuccess: function (resultJson) {
        var info = {};
        info.pchCardNo = resultJson.pchCardNo;//ETC卡号
        info.pchBanlance = resultJson.pchBanlance;//卡内余额
        //持卡人信息
        //格式：持卡人姓名|持卡人证件号码|持卡人证件类型|0016文件的全量返回数据（16进制）
        //持卡人证件类型取值含义：0-身份证；1-军官证；2-护照；3-入境证（限港台居民）；4-临时身份证；5-驾驶证6-营业执照；7-组织机构代码证；其他-保留
        //etc返回值格式很乱，暂时不解析了
        info.pchData16 = resultJson.pchData16;
        //卡发行数据信息
        //格式：发卡方标识|卡片类型|卡片版本号|卡片网络编号|用户卡内部编号|启用时间|到期时间|车牌号码|用户类型|车牌颜色|车型|0015文件的全量返回数据（16进制）
        //注意：车牌颜色和车型是新标准才含有的数据，因此旧标准的卡没有这两项数据，对应的返回值填“无”。
        //卡片类型：22：储值卡；23：记账卡
        //启用和到期时间格式：YYYYMMDD
        //用户类型：0-普通车；6-公务车；8-军警车；10-紧急车；12-免费；14-车队；0~20内其他为自定义；21~255为未来保留使用。
        //车牌颜色转为对应颜色，如蓝色。
        //车型取值含义：1-一型车；2-二型车；3-三型车；4-四型车；5-五型车；6-六型车；7~10为自定义；11~20用于计重收费货车车型，其中11-一型车；12-二型车；13-三型车；14-四型车；15-五型车；16-六型车；17~20为自定义计重货车车型；21~25为自定义；50~255为未来保留使用。
        info.pchData15 = resultJson.pchData15;

        return info;
    }
};

//指纹仪--FIG
PJF.stm.Finger = {
  //指纹模板登记
  /**
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  registerFinger: function (args, callback) {
    PJF.stm.log('指纹模板登记', 'PJF_LOG_HARDWARE');
    var args = {
      timeout: args.timeout || 20
    };
    var isSecScr = PJF.util.deviceType.tcr && PJF.communication.isSecondScreen(); //TCR后屏时，使用后屏指纹仪
    function fnSuccess(resultJson) {
      var info = {};
      info.pCompanyCode = resultJson.pCompanyCode;
      info.pchTemlate = resultJson.pchTemlate;

      return info;
    }

    PJF.stm.client.callClient(isSecScr ? "FIN" : "FIG", isSecScr ? "FIN_registerFinger" : "registerFinger", args, callback, fnSuccess);
  },
  //读取指纹特征
  /**
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  readFinger: function (args, callback) {
    PJF.stm.log('读取指纹特征', 'PJF_LOG_HARDWARE');
    var args = {
      timeout: args.timeout || 20
    };
    var isSecScr = PJF.util.deviceType.tcr && PJF.communication.isSecondScreen(); //TCR后屏时，使用后屏指纹仪
    function fnSuccess(resultJson) {
      var info = {};
      info.pCompanyCode = resultJson.pCompanyCode;
      info.pchFeature = resultJson.pchFeature;

      return info;
    }

    return PJF.stm.client.callClient(isSecScr ? "FIN" : "FIG", isSecScr ? "FIN_readFinger" : "readFinger", args, callback, fnSuccess);
  }
};

//二代证扫描阅读模块--IDC
PJF.stm.IdCard = {
  /**
   * 检查卡是否被取走
   */
  waitForTaken: function (args1, callback) {
    var args = {
      timeout: args1.timeout || 30
    };
    var fnSuccess = function (result) {

    };
    PJF.stm.client.callClient('IDC', 'WaitForTaken', args, callback, fnSuccess);
  },
  //读取信息
  /**
   * @param pchPhotoPath[string]:头像照片文件路径
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  getIDCardInfo: function (args1, callback) {
    PJF.stm.log('读取信息', 'PJF_LOG_HARDWARE');
    var args = {
      timeout: args1.timeout || 20
    };
    $.extend(args, args1);

    PJF.stm.client.callClient("IDC", "getIDCardInfo", args, callback, PJF.stm.IdCard.fnSuccess);
  },
  //扫描身份证
  /**
   * @param frontPhotoPath[string]:身份证扫描件正面保存路径
   * @param backPhotoPath[string]:身份证扫描件反面保存路径
   * @param dpi[int]:图像的DPI
   * @param imageType[int]:扫描图像保存格式
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  scanIDCard: function (args1, callback) {
    PJF.stm.log('扫描身份证', 'PJF_LOG_HARDWARE');
    var args = {
      iDpi: args1.dpi || 150,
      dpi: args1.dpi || 150,
      imageType: args1.imageType || 2,
      timeout: args1.timeout || 20
    };
    $.extend(args, args1);
    PJF.stm.client.callClient("IDC", "scanIDCard", args, callback);
  },
  eject: function (args1, callback) {
    if (PJF.stm.client.ytdHandler(callback, PJF.constants.DEVICE_SUCC_INFO))
      return;
    var args = {
      timeout: args1.timeout || 60
    };
    $.extend(args, args1);
    function fnSuccess(resultJson) {
      var info = {};

      return info;
    }
    PJF.stm.util.clearAuthInfo();
    PJF.stm.client.callClient("IDC", "ejectDev", args, callback, fnSuccess);
  },
  //吐出二代证
  /**
   * @param callback[function]:回调函数
   * 0 代表吐二代证失败
   * 1 代表吐二代证成功
   * 2 代表取二代证成功
   * 3 代表取二代证失败
   */
  ejectDev: function (callback, args) {
    PJF.stm.log('退证', 'PJF_LOG_SELECT');
    if (PJF.stm.client.ytdHandler(callback, PJF.constants.DEVICE_SUCC_INFO))
      return;
    PJF.stm.IdCard.eject({}, function (result) {
      if (result.status == 1) {
        var timeout = 30;
        if (args && args.idcSound) PJF.communication.player.PlaySoundByUrl(args.idcSound);
        else PJF.communication.player.PlaySoundByUrl("devprompt/IDC_taken.wav");
        //PJF.communication.player.SpeekText('请取走您的身份证', 100);
        var loading = new PJF.ui.loading({
          msg: (args && args.ejectMsg) || '请取走您的身份证',
          timeout: timeout
        });
        var tmpCb;
        var timeoutHandler = setTimeout(function () {
          loading.destroy();
          PJF.event.removeSubscriber(PJF.stm.client.events.IDC_TAKEN, tmpCb);
          callback && (callback(result));
        }, timeout * 1000)

        PJF.event.onceSubscriber(PJF.stm.client.events.IDC_TAKEN, tmpCb = function () {
          loading.destroy();
          clearTimeout(timeoutHandler);
          callback && (callback(result));
        });
      } else {
        callback && (callback(result));
        console.log("吐出二代证失败，错误信息为:" + JSON.stringify(result));
      }
    })
  },
  //吸入二代证
  /**
   * @param callback[function]:回调函数
   */
  inhaleIDCard: function (callback) {
    var args = {
      tmimeout: 60
    };

    PJF.stm.client.callClient("IDC", "inhaleIDCard", args, callback);
  },
  /**接口合并后*/
  //身份证读卡
  /**
   * @param pchPhotoPath[string]:头像照片文件路径
   * @param frontPhotoPath[string]:身份证扫描件正面保存路径
   * @param backPhotoPath[string]:身份证扫描件反面保存路径
   * @param dpi[int]:图像的DPI
   * @param imageType[int]:扫描图像保存格式
   * @param timeout[int]:超时间隔,默认30秒
   * @param callback[function]:回调函数
   */
  readCard: function (args, callback) {
    PJF.stm.log('读证', 'PJF_LOG_HARDWARE');
    var args = {
      pchPhotoPath: args.pchPhotoPath,
      frontPhotoPath: args.frontPhotoPath,
      backPhotoPath: args.backPhotoPath,
      dpi: args.dpi || 150,
      imageType: args.imageType || 2,
      timeout: args.timeout || 60,
      deviceStartSound: (typeof args.idcSound == "undefined") ? "devprompt/IDC_insert.wav" : args.idcSound
    };
    //PJF.communication.player.SpeekText('请插入您的身份证', 100);
    PJF.stm.client.callClient("App_IDC", "IDC_readCard", args, callback, PJF.stm.IdCard.fnSuccess);
  },
  fnSuccess: function (resultJson) {
      var info = {};
      var pchInfo = {};
      //身份证：姓名|性别|民族|出生年月日|住址|身份证号|签发机关|有效期限
      //永久居留证：I|英文姓名|性别|永久居留证号码|国籍或所在地区代码|中文姓名|证件有效期限|出生年月日|证件版本号|当次申请受理机关代码
      var pchInfoArr = resultJson.pchInfo.split('|');
      // 港澳台居民居住证拦截
      // 未升级：姓名|性别|民族|出生年月日|住址|公民身份号码|签发机关|有效期限
      // 已升级：J|姓名|性别|出生年月日|住址|公民身份号码|签发机关|有效期限|通行证号码|签发次数
      if ((['81', '82', '83'].indexOf(pchInfoArr[5].substr(0, 2)) > -1) || (pchInfoArr[0] === 'J')) {
          info.pjfstatus = '0';
          info.pchErrCode = "PJF_IdCard_PARSE_ERR02";
          info.pchError = "港澳台居民居住证，移步至柜面办理";
          return info;
      }

      var isForeign;
      if (pchInfoArr[0] == 'I') {
          isForeign = true;
      }
      if (isForeign) {
          pchInfo.isForeign = true;
          pchInfo.engName = pchInfoArr[1];
          pchInfo.sex = pchInfoArr[2];
          pchInfo.identity = pchInfoArr[3];
          pchInfo.areaCode = pchInfoArr[4];
          pchInfo.name = pchInfoArr[5];
          pchInfo.validDate = pchInfoArr[6].replace(/\s/g, '');
          pchInfo.birth = pchInfoArr[7];
          pchInfo.version = pchInfoArr[8];
          pchInfo.issueOfficeCode = pchInfoArr[9];
      } else {
          pchInfo.name = pchInfoArr[0];
          pchInfo.sex = pchInfoArr[1];
          pchInfo.nation = pchInfoArr[2];
          pchInfo.birth = pchInfoArr[3];
          pchInfo.address = pchInfoArr[4];
          pchInfo.identity = pchInfoArr[5].toUpperCase();//转大写最后一位
          pchInfo.issueOffice = pchInfoArr[6];
          pchInfo.validDate = pchInfoArr[7].replace(/\s/g, '');
      }
      PJF.stm.log('读身份证成功', 'PJF_LOG_HARDWARE');
      info.pchInfo = pchInfo;

      //判断是否为纯数字
      function checkNum(str) {
          if (str) {
              return str.match(/\D/) == null;
          }
          return false;
      }

      //去除读取出可能存在的族
      if (!isForeign && (pchInfoArr[2].indexOf('族') > -1)) {
          pchInfo.nation = pchInfoArr[2].substring(0, pchInfoArr[2].indexOf('族'));
      }

      var endDate = isForeign ? pchInfoArr[6].replace(/\s/g, '').split('-')[1] : pchInfoArr[7].replace(/\s/g, '').split('-')[1];
      if (endDate == '99991231') {
          endDate = '长期';
          pchInfo.validDate = pchInfo.validDate.split('-')[0] + '-' + endDate;
      }
      var serverTime = PJF.communication.getServerTime('yyyyMMdd');
      if (checkNum(endDate)) { //结束日期为纯数字
          var nowDate = serverTime ? serverTime : PJF.util.formatDate(new Date()); //当前时间
          //二代证结束日期去除空格后不为8位
          if (endDate.length != 8) {
              info.pjfstatus = '0';
              info.pchErrCode = "PJF_IdCard_PARSE_ERR00";
              info.pchError = "身份证有效日期结束时间格式错误,结束时间即为" + endDate;
          } else if (parseInt(nowDate) > parseInt(endDate)) { //身份证过期
              info.pjfstatus = '0';
              info.pchErrCode = "PJF_IdCard_PARSE_ERR01";
              info.pchError = "身份证已过期，请更换身份证后再办理";
          }

      } else {
          //二代证结束日期去除空格后不为'长期'
          if (endDate != '长期') {
              info.pjfstatus = '0';
              info.pchErrCode = "PJF_IdCard_PARSE_ERR00";
              info.pchError = "身份证有效日期结束时间格式错误,结束时间即为" + endDate;
          }
      }

      return info;
  },
  //获取通道状态
  /**
	 * @param callback[function]:回调函数
	 * 0-通道无证
	   1-在通道中
       2-在通道口
       3-夹证
 
	 */
  getChannelStatus: function (callback) {
    if (PJF.stm.client.ytdHandler(callback, PJF.constants.DEVICE_SUCC_INFO))
      return;
    var args = {
      timeout: 20
    };

    function fnSuccess(resultJson) {
      var info = {};
      info.status = resultJson.status;
      return info;
    }

    PJF.stm.client.callClient("IDC", "getChannelStatus", args, callback, fnSuccess);
  },

  stopInhale: function (args, callback) {
    PJF.stm.log('停止进证', 'PJF_LOG_HARDWARE');
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient('IDC', 'stopInhale', cmdArgs, callback);
  },

  //获取DN码读卡控件版本
  getDNCtrlVersion: function (callback) {
    var cmdArgs = {};

    function fnSuccess(resultJson) {
      var info = {};
      info.pchCtrlVersion = resultJson.pchCtrlVersion;
      return info;
    }

    PJF.stm.client.callClient('IDC', 'getDNCtrlVersion', cmdArgs, callback, fnSuccess);
  },

  //获取ID验证数据
  getIDVerifyData: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchIDVerifyData = resultJson.pchIDVerifyData;
      info.pchRservedData = resultJson.pchRservedData;
      return info;
    }

    PJF.stm.client.callClient('IDC', 'getIDVerifyData', cmdArgs, callback, fnSuccess);
  },

  //获取认证码数据
  getCertificateData: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchIDVerifyData = resultJson.pchIDVerifyData;
      info.pchRservedData = resultJson.pchRservedData;
      return info;
    }

    PJF.stm.client.callClient('IDC', 'getCertificateData', cmdArgs, callback, fnSuccess);
  }
};

//电子签名模块--YGB
PJF.stm.eSign = {
  //启动签名
  /**
   * @param hWnd[HWND]:可以签名的窗口区域
   * @param x[int]:相对窗口原点，签名区域的横坐标
   * @param y[int]:相对窗口原点，签名区域的纵坐标
   * @param w[int]:签名区域的宽度
   * @param h[int]:签名区域的高度
   * @param callback[function]:回调函数
   */
  startSignature: function (args, callback) {
    PJF.stm.log('启动签名', 'PJF_LOG_HARDWARE');
    var args = {
      x: args.x,
      y: args.y,
      w: args.w,
      h: args.h,
      pUserID: PJF.otherInfo.devId,
      pSecNodeID: PJF.otherInfo.secNode,
      p2KeyInfo: PJF.otherInfo.token,
      keyInfoLen: PJF.otherInfo.token.length

    };
    if (PJF.util.isKylinSTM()) {
        //linux下chrome打开被拉宽了
        var _rate = screen.width/document.body.clientWidth;
        args.x *= _rate;
        args.y *= _rate;
        args.w *= _rate;
        args.h *= _rate;
    }
    PJF.fsm.get(PJF.fsm.fmIds.STM_SIGNATURE).openSignature();
    PJF.stm.client.callClient("YGB", "startSignature", args, callback);
  },
  //清除签名
  /**
   * @param hWnd[HWND]:可以签名的窗口区域
   * @param callback[function]:回调函数
   */
  clearSignature: function (args, callback) {
    PJF.stm.log('清除签名', 'PJF_LOG_HARDWARE');
    PJF.stm.client.callClient("YGB", "clearSignature", {}, callback);
  },
  //结束签名
  /**
   * @param callback[function]:回调函数
   */
  endSign: function (callback) {
    PJF.stm.log('结束签名', 'PJF_LOG_HARDWARE');
    PJF.stm.client.callClient("YGB", "endSign", {}, callback);
  },
  //获取电子签名
  /**
   * @param psignData[string]:加密签名轨迹数据
   * @param photoPath[string]:签名保存路径
   * @param callback[function]:回调函数
   */
  getSignature: function (callback) {
    PJF.stm.log('获取电子签名', 'PJF_LOG_HARDWARE');
    var args = {
      pUserID: PJF.otherInfo.devId,
      pSecNodeID: PJF.otherInfo.secNode,
      p2KeyInfo: PJF.otherInfo.token,
      keyInfoLen: PJF.otherInfo.token.length,
      photoPath: PJF.stm.baseDir + '/sign/' + PJF.otherInfo.SVC_ID + '.jpg'
    };

    function fnSuccess(resultJson) {
      var info = {};
      info.code = resultJson.code;
      info.photoContent = resultJson.photoContent;
      info.pchSignData = resultJson.pchSignData;
      return info;
    }
    PJF.fsm.get(PJF.fsm.fmIds.STM_SIGNATURE).closeSignature();
    var errclient = (PJF.communication.getClientType() == 'android' && PJF.communication.GetApplicationVersion().result == '1.4.6');
    PJF.stm.client.callClient(PJF.util.deviceType.pad && !errclient ? "App_YGB" : "YGB", "getSignature", args, callback, fnSuccess);
  }
};

//发卡箱--CDB
PJF.stm.ICMaker = {
  /**
   * 检查卡是否被取走
   */
  waitForTaken: function (args1, callback) {
    var args = {
      timeout: args1.timeout || 30
    };
    var fnSuccess = function (result) {

    };
    PJF.stm.client.callClient('CDB', 'WaitForTaken', args, callback, fnSuccess);
  },

  //前端进卡
  /**
   * @param time[int]:超时时间
   * @param callback[function]:回调函数
   */
  inhaleCard: function (args, callback) {
    var args = {
      time: args.time,
      timeout: args.time //显示遮罩时间
    };

    function fnSuccess(resultJson) {
      var info = {};
      // 这个事件是客户端封装的readcard接口发送的。。。所以框架在这里模拟下
      PJF.event.publish(PJF.stm.client.events.CDB_INHALED, PJF.util.formatDate(new Date(), 'yyyyMMddHHmmss'), 1)
      return info;
    }

    PJF.stm.client.callClient("CDB", "inhaleCard", args, callback, fnSuccess);
  },
  //选取卡片
  /**
   * @param boxNo[int]:卡的箱号
   * @param callback[function]:回调函数
   */
  chooseCard: function (args, callback) {
    var args = {
      boxNo: args.boxNo
    };

    var showErr = function (con) {
      new PJF.ui.errorMessageBox({
        content: con,
        buttonConfs: [{
          name: '确定',
          style: 'main',
          btnBgColor: 'rgb(65,159,245)',
          onClick: function () {
            template.loadPage('homepage');
          }
        }]
      });
    };

    PJF.stm.ICMaker.getChannelStatus(function (result) {
      if (result.status == 1) {
        if (result.info.status == 1) {
          showErr('卡槽已经有卡')
        } else {
          PJF.stm.client.callClient("CDB", "chooseCard", args, callback);
        }
      } else {
        showErr('获取卡通道状态失败<br>错误码:' + result.errorCode + '<br>错误信息:' + result.errorMsg)
      }
    });
  },
  //读IC卡客户信息
  /**
   * @param aryTagList[string]:标签编码数组
   * @param aryAIDList[string]:应用列表数组
   * @param iCInfoLen[int]:IC卡信息长度
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  getICCardInfo: function (args, callback) {
    PJF.stm.log('读IC卡客户信息', 'PJF_LOG_HARDWARE');
    var args = $.extend({
      iIcFlag: args.iIcFlag || 1,
      aryTagList: args.aryTagList || "x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A",
      aryAIDList: args.aryAIDList || "A000000333010101|A000000333010102|A000000333010103|A000000333010106",
      piCInfoLen: args.piCInfoLen || 4096,
      loadingConf: {
        msg: PJF.i18n.getI18nResource('pjfCommon.genARQCTip')
      }
    }, args);
      //建亚生产ARQC时也要换下aid
      if (PJF.orgInfo.instSvrlLgPsnID === 'DA003') {
          args.aryAIDList = 'A00000047400000001|A0000000031010|A000000241010102|A0000000041010|A000000333010101|A000000333010102|A000000333010103|A000000333010106'
      }
    PJF.stm.client.callClient("CDB", "getICCardInfo", args, callback, PJF.stm.ICMaker.fnSuccess);
  },
  //从IC卡获取ARQC
  /**
   * @param pchInput[string]:产生ARQC的数据的值
   * @param pchAIDList[string]:应用列表数组
   * @param lengthD55[int]:55域数据长度
   * @param lengthD60[int]:60域数据长度
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  genARQC: function (args, callback) {
    args = args || {};
    PJF.stm.log('从IC卡获取ARQC', 'PJF_LOG_HARDWARE');
    if (PJF.util.deviceType.ytd && !args.CDB) {
      PJF.ytd.ICC.genARQC(args, callback);
      return;
    }
    var args1 = {
      iIcFlag: 1,
      pchInput: args.pchInput,
      pchAIDList: args.pchAIDList,
      piLengthD55: args.piLengthD55 || 2048,
      piLengthD60: args.piLengthD55 || 2048,
      timeout: args.timeout || 20
    };
    args1.loadingConf = {
      msg: PJF.util.deviceType.ytd ? "请放置您的银行卡" : PJF.i18n.getI18nResource('pjfI18n.arqcMsg'),
      opacity: 0.1,
      noIcon: true,
      timeout: args1.timeout
    };
    $.extend(true, args1, args);

    if (args.ARQC) {
      var currTime = PJF.util.formatDate(new Date(), 'yyyyMMddhhmmss');
      //这是用来生成产生ARQC数据的值
      args.ARQC = $.extend(args.ARQC, {
        transDate: currTime.substr(0, 8), //交易日期
        transTime: currTime.substr(8, 16), //交易时间
        transOper: PJF.userInfo.userCode //商户，默认传操作员号
      })
      //应用列表数据
      if (args.ARQC.appType == 'default') {
        args1.pchAIDList = 'A000000333010101|A000000333010102|A000000333010103|A000000333010106';
      } else if (args.ARQC.appType == '1') {
        args1.pchAIDList = 'A000000333010101';
      } else if (args.ARQC.appType == '2') {
        args1.pchAIDList = 'A000000333010102';
      }
      args1.pchInput = PJF.stm.ICMaker.genARQCpchInput(PJF.stm.ICMaker.decimal2Ans(args.ARQC.authAmt),
        PJF.stm.ICMaker.decimal2Ans(args.ARQC.otherAmt),
        args.ARQC.cType, args.ARQC.transDate, args.ARQC.transType,
        args.ARQC.transTime, args.ARQC.transOper);
    }

    function fnSuccess(resultJson) {
      var info = {};
      info.pICType = resultJson.pIcType;
      info.pchD55 = resultJson.pchD55;
      info.pchD60 = resultJson.pchD60;
      info.pchInput = args1.pchInput;
      info.pchD55Len = resultJson.pchD55.length / 2;
      return info;
    }
    //发卡机说自己必须要先读卡才能获取ARQC
    if (PJF.util.deviceType.stm) {
      PJF.stm.ICMaker.getICCardInfo({}, function () {
        PJF.stm.client.callClient("CDB", "genARQC", args1, callback, fnSuccess);
      });
    } else {
      PJF.stm.client.callClient("CDB", "genARQC", args1, callback, fnSuccess);
    }

  },
  //向IC卡发送ARPC，发送写卡脚本
  /**
   * @param pchInput[string]:验证ARPC需要的数据
   * @param pchARPC[string]:授权相应密文
   * @param iStatus[int]:返回状态
   * @param pchARQC[int]:ARQC
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  ARPC_ExeICScript: function (args, callback) {
    PJF.stm.log('发送写卡脚本', 'PJF_LOG_HARDWARE');
    var args1 = {
      iIcFlag: args.iIcFlag || 1,
      pchInput: args.pchInput,
      pchARPC: args.pchARPC,
      iStatus: args.iStatus,
      pchARQC: args.pchARQC,
      timeout: args.timeout || 20,
      piLenGAC2: args.piLenGAC2 || 2048
    };
    args1.loadingConf = {
      msg: "设备正在处理中",
      opacity: 0.1,
      noIcon: true,
      timeout: args1.timeout
    };
    $.extend(true, args1, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pIcType = resultJson.pIcType;
      info.pScriptResult = resultJson.pScriptResult;
      info.pchGAC2 = resultJson.pchGAC2;
      //info.iLenGAC2 = resultJson.iLenGAC2;

      return info;
    }

    PJF.stm.client.callClient("CDB", "ARPC_ExeICScript", args1, callback, fnSuccess);
  },
  //读IC卡交易明细
  /**
   * @param pchAIDList[string]:应用列表串
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  getTxDetail: function (args, callback) {
    PJF.stm.log('读IC卡交易明细', 'PJF_LOG_HARDWARE');
    var args = {
      iIcFlag: 1,
      pchAIDList: args.pchAIDList,
      timeout: args.timeout || 20
    };

    function fnSuccess(resultJson) {
      var info = {};
      info.pICType = resultJson.pICType;
      info.pchGAC2 = resultJson.pchGAC2;
      info.lenGAC2 = resultJson.lenGAC2;

      return info;
    }

    PJF.stm.client.callClient("CDB", "getTxDetail", args, callback, fnSuccess);
  },
  //读卡磁道
  /**
   * @param trackNum[int]:磁道号
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  getCardNum: function (args, callback) {
    PJF.stm.log('读卡磁道', 'PJF_LOG_HARDWARE');
    var args = {
      trackNum: args.trackNum || 23,
      timeout: args.timeout || 20
    };

    function fnSuccess(resultJson) {
      var info = {};
      info.pchTrackData2 = resultJson.pchTrackData2;
      info.pchTrackData3 = resultJson.pchTrackData3;

      return info;
    }

    PJF.stm.client.callClient("CDB", "getCardNum", args, callback, fnSuccess);
  },
  //吐卡--判断卡通道状态--吸卡读取卡信息--没收卡
  /**
   * 0 代表吐卡失败
   * 1 代表吐卡成功
   * 2 代表取卡成功
   * 3 代表吞卡成功
   * 4 代表吞卡失败
   */
  ejectCard: function (callback, args) {
    PJF.stm.log('退卡', 'PJF_LOG_SELECT');
    var args = $.extend({}, args);
    //若是ytd，则返回常量值，实际退卡操作无效
    if (!args.CDB && PJF.stm.client.ytdHandler(callback, PJF.constants.DEVICE_SUCC_INFO))
      return;

      //分行社保卡复用吐卡
      if (args.socialCard == "ZNK") {
          args = $.extend({pchIp: "127.0.0.1",
              iPort: "11041",
              timeout: 30,
              iIsValidCard: '0'}, args);
          PJF.stm.ZNK.putCardOut(args, callback);
          return;
      }

    function showMessageBox(conf) {
      var messageBox = new PJF.ui.messageBox({
        title: "提示信息",
        content: conf.content || '设备故障,请联系工作人员！',
        buttonConfs: [{
          bgColor: 'rgb(121,198,30)',
          name: '确定',
          style: 'main',
          width: 200,
          height: 80,
          onClick: conf.fn || function () {}
        }]
      });
    }
    PJF.stm.ICMaker.getChannelStatus(function (cSta) {
      if (cSta.status == 1) {
        if (cSta.info.status == 0) {
          showMessageBox({
            content: "卡槽没有卡",
            fn: function () {
              callback && callback({
                status: 0,
                errorMsg: '卡槽没有卡'
              })
            }
          })
        } else {
          PJF.stm.ICMaker.ejectDev(function (result) {
            if (result.status) {
              var timeout = 30;
              var tempFun;
              args.cdbEjectSound ? PJF.communication.player.PlaySoundByUrl(args.cdbEjectSound) : PJF.communication.player.PlaySoundByUrl("devprompt/CDB_taken.wav", true);
              //PJF.communication.player.SpeekText('请取走您的银行卡', 100);        	
              var loading = new PJF.ui.loading({
                msg: PJF.i18n.getI18nResource('pjfI18n.takeIcCardTip'),
                timeout: timeout
              });
              //PJF.stm.ICMaker.waitForTaken({},function(waitResult){
              var timeoutHandler = setTimeout(function () {
                PJF.event.removeSubscriber(PJF.stm.client.events.CDB_TAKEN, tempFun);
                loading.destroy();
                if (args.stmManage) {
                  args.stmManage.recycle_type = 'Popout';
                  args.stmManage.recycle_msg = '客户发卡未取';
                }
                PJF.stm.ICMaker.confiscateDev(function (confiscateResult) {
                  if (result.status) {
                    confiscateResult.status = 3;
                  } else {
                    confiscateResult.status = 4;
                    showMessageBox();
                    console.log("没收卡失败，错误代码为:" + result.errorCode);
                  }
                  callback && (callback(confiscateResult));
                }, {
                  stmManage: args.stmManage,
                  conReason: '吐卡超时未取',
                  recycleType: '8'
                });
              }, timeout * 1000)
              PJF.event.onceSubscriber(PJF.stm.client.events.CDB_TAKEN, tempFun = function () {
                clearTimeout(timeoutHandler);
                loading.destroy();
                //发卡页面取卡成功
                /*if(PJF.stm.client.speMenu.indexOf(PJF.otherInfo.MENU_ID) != -1){
                	PJF.communication.returnCardTrade({result:'0'})
                }*/
                callback && (callback({
                  status: 1
                }));
              })
            } else {
              if (callback) {
                callback(result)
              } else {
                showMessageBox({
                  content: "退卡失败"
                })
              }
              console.log("吐卡失败，错误代码为:" + result.errorCode);
            }
          }, {
            keepAuthInfo: true
          });
        }
      } else {
        showMessageBox({
          content: cSta.errorMsg,
          fn: function () {
            callback && callback(cSta);
          }
        })
      }
    }, args);

    //清除缓存之前保留一份IC卡信息和客户信息，因为退卡时可能会吞卡，这样就没有卡片信息
    PJF.stm.IC_CARD_INFO_BAK = {};
    PJF.stm.CUSTOM_INFO_BAK = {};
    $.extend(true, PJF.stm.IC_CARD_INFO_BAK, PJF.stm.IC_CARD_INFO);
    $.extend(true, PJF.stm.CUSTOM_INFO_BAK, PJF.stm.CUSTOM_INFO);
    PJF.stm.IC_CARD_INFO_COR_BAK = {};
    PJF.stm.CUSTOM_INFO_COR_BAK = {};
    $.extend(true, PJF.stm.IC_CARD_INFO_COR_BAK, PJF.stm.IC_CARD_INFO_COR);
    $.extend(true, PJF.stm.CUSTOM_INFO_COR_BAK, PJF.stm.CUSTOM_INFO_COR);

    PJF.stm.util.clearAuthInfo(true);
    PJF.stm.util.clearCardInfo();
    PJF.event.publish("STM_EJECTCARD");
  },
  //吐卡片给客户
  /**
   * @param callback[function]:回调函数
   */
  ejectDev: function (callback, args) {
    var args = $.extend({
      timeout: 20,
      iotFunc: false,
      uniqueNo: '',
      coordinateX: PJF.otherInfo.globalParams.coordinateX,
      coordinateY: PJF.otherInfo.globalParams.coordinateY,
      angle: PJF.otherInfo.globalParams.angle
    }, args);
    args.iotFunc && (args.timeout = 120);
    PJF.stm.client.callClient("CDB", "ejectDev", args, callback);

    //清除缓存
    PJF.stm.util.clearAuthInfo(true);
    PJF.stm.util.clearCardInfo();
  },
  //没收IC卡
  /**
   * @param callback[function]:回调函数
   */
  confiscateDev: function (callback, args) {
      PJF.stm.log('吞卡', 'PJF_LOG_HARDWARE');
      //分行社保卡复用吞卡
      if (args.socialCard == "ZNK") {
          args = $.extend({
              pchIp: "127.0.0.1",
              iPort: "11041",
              timeout: 30,
              iIsValidCard: '1'
          }, args);
          PJF.stm.ZNK.putCardOut(args, callback);
          return;
      }
      args = args || {};
      var args1 = $.extend({
          timeout: 20,
          iotFunc: false,
          uniqueNo: ''
      }, args);

      function fnSuccess(resultJson) {
          var info = {};

          return info;
      }

    //吞卡失败特殊菜单处理，指纹验证
    var isSpecialMenu1 = (['ACC10001', 'SPB30001', 'SPB30002', 'SPB30003', 'SPB30005'].indexOf(PJF.otherInfo.MENU_ID) != -1); //返回首页
    var isSpecialMenu2 = (['CPB30008', 'CPB30026', 'CPB20005', 'CPB20013', 'CPB20006', 'CPB20009', 'CPB20014'].indexOf(PJF.otherInfo.MENU_ID) != -1); //继续流程

    var callback1 = function (res) {
      if (res.status) {
        PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).takeCard();
        //发卡页面吞卡
        /*if(PJF.stm.client.speMenu.indexOf(PJF.otherInfo.MENU_ID) != -1){
        	var result = args.result != undefined ? args.result : '1';
        	PJF.communication.returnCardTrade({result:result})
        }
        //非发卡页面吞卡
        else{
        	PJF.communication.returnCard();
        }*/
        //发卡页面吞卡
        if (args.stmManage) {
          $.extend(args.stmManage, {
            cardkey_type: 'Card',
            device_id: PJF.otherInfo.devId,
            ins_id: PJF.roleInfo.orgCode
          });
          PJF.communication.stmManageAjax({
            fwServiceId: 'stm.doLogCardKeyFailure',
            jsonData: args.stmManage
          })
          PJF.communication.addSwallowCardRecord(args.stmManage)
        }
        //非发卡页面吞卡
        else {
          PJF.communication.returnCard(args);
        }

        //tcr 吞没卡新增交易
        if (PJF.util.deviceType.tcr) {
          var jsonData = {
            FRZ_STCD: 0, //吞卡状态
            PRMT_MOD_IND: 0, //允许修改标志
            RTCRD_CARDNO: PJF.stm.IC_CARD_INFO && PJF.stm.IC_CARD_INFO.resInfo.accountNo, //卡号
            RTCRD_DT: PJF.util.formatDate(new Date(), 'yyyyMMdd'), //吞卡日期
            SSEQ_ID: PJF.otherInfo.devId, //吞卡设备编号
            BLNG_INSID: PJF.roleInfo.orgCode, //机构编号
            BLNG_INST_NM: PJF.roleInfo.orgName, //机构名称
            DTSRC: 1 //数据来源
          };
          var saveData = {
            _fw_service_id: 'saveAtmRtcrdInfo',
            jsonData: JSON.stringify(jsonData)
          };
          var loading = new PJF.ui.loading({
            msg: '',
            noIcon: true
          });
          console.log('tcr吞没卡新增交易请求参数为:' + JSON.stringify(jsonData));
          PJF.communication.ajax({
            data: saveData,
            url: 'ecpJson.action',
            async: false,
            //默认为post
            type: 'post',
            success: function (data, ts, jq) {
              loading.destroy();
              if (data.BK_STATUS == '00') {
                console.log('吞没卡新增成功');
              } else {
                console.log('吞没卡新增失败:' + data.BK_DESC);
              }
            },
            //通信失败回调函数
            failure: function (jq, ts, error) {
              loading.destroy();
              console.log('吞没卡新增通信失败:' + ts);
            }
          });
        }

        callback && callback(res);
      } else if (!res.status && PJF.otherInfo.MENU_ID && (isSpecialMenu1 || isSpecialMenu2)) {
        //发卡失败，吞卡失败时，弹工作人员框，发送PAD消息
        var menuName = PJF.stm.enterMenu ? PJF.stm.enterMenu.NAME : '首页';
        var padMsg = PJF.userInfo.userCode + '设备' + menuName + '吞卡失败';
        PJF.communication.callPad({
          busiName: padMsg
        });
        var randomId = PJF.util.generateUUid();
        $('body').append('<div id="' + randomId + '"></div>');
        new PJF.ui.fingerReader({
          dom: randomId,
          authTip: '吞卡失败，请工作人员授权通过后返回首页点击“退卡/证”取卡，取卡后请检查该卡是否正常。',
          success: function (res) {
            console.log("吞卡失败场景，指纹验证通过");
            if (isSpecialMenu1) {
              template.loadPage('homepage');
            } else if (isSpecialMenu2) {
              callback && callback(res);
            }
          },
          failure: function (res) {
            console.log("吞卡失败场景，指纹验证失败，返回数据：" + JSON.stringify(res));
          }
        });
      } else {
        callback && callback(res);
      }
    }

    //吞卡时，向pad发消息
    var menuName = PJF.stm.enterMenu ? PJF.stm.enterMenu.NAME : '首页';
    var padReason = args.stmManage ? (args.stmManage.recycle_msg ? args.stmManage.recycle_msg : args.conReason) : args.conReason;
    var padMsg = menuName + '有卡被吞，吞卡原因为' + padReason;
    PJF.communication.callPad({
      busiName: padMsg
    });

    //若此时有身份证，发送消息至pad
    if ((PJF.fsm.get([PJF.fsm.fmIds.STM_IDCARD]).is('hasId'))) {
      PJF.communication.callPad({
        busiName: menuName + '有卡被吞，卡槽中还有身份证'
      });
    }

    PJF.stm.client.callClient("CDB", "confiscateDev", args1, callback1, fnSuccess);
    /*if(PJF.stm.client.speMenu.indexOf(PJF.otherInfo.MENU_ID) == -1 && !args.keepAuthInfo){
    	PJF.stm.util.clearAuthInfo();
    }*/

    //因为现在有可能是在首页太久没拿就被吞卡，前置不会有eject动作，所以这里也在清除卡信息前保留卡信息，然后作为回收记录
    if (!args.stmManage && PJF.stm.IC_CARD_INFO) { //有这个代表就是没有吐卡的情况下在首页被吞了
      PJF.stm.IC_CARD_INFO_BAK = {};
      PJF.stm.CUSTOM_INFO_BAK = {};
      $.extend(true, PJF.stm.IC_CARD_INFO_BAK, PJF.stm.IC_CARD_INFO);
      if (PJF.stm.CUSTOM_INFO) {
        $.extend(true, PJF.stm.CUSTOM_INFO_BAK, PJF.stm.CUSTOM_INFO);
      }
    } else if (!args.stmManage && PJF.stm.IC_CARD_INFO_COR) {
      PJF.stm.IC_CARD_INFO_COR_BAK = {};
      PJF.stm.CUSTOM_INFO_COR_BAK = {};
      $.extend(true, PJF.stm.IC_CARD_INFO_COR_BAK, PJF.stm.IC_CARD_INFO_COR);
      if (PJF.stm.CUSTOM_INFO_COR) {
        $.extend(true, PJF.stm.CUSTOM_INFO_COR_BAK, PJF.stm.CUSTOM_INFO_COR);
      }
    }

    PJF.stm.util.clearAuthInfo();
    PJF.stm.util.clearAuthInfo(true);
    PJF.stm.util.clearCardInfo();
  },
  //获取通道状态
  /**
   * @param callback[function]:回调函数
   */
  getChannelStatus: function (callback, args) {
    args = args || {};
    if (!args.CDB && PJF.stm.client.ytdHandler(callback, PJF.constants.DEVICE_SUCC_INFO))
      return;

    var args = {
      timeout: 20
    };

    function fnSuccess(resultJson) {
      var info = {};
      info.status = resultJson.status;

      return info;
    }

        PJF.stm.client.callClient("CDB", "getChannelStatus", args, callback, fnSuccess);
    },
    /**接口合并后*/
    //读卡
    /**
     * @param iIcFlag[int]: IC卡类型：1 - 接触式IC卡，默认值1
     * @param aryTagList[string]:标签编码数组，默认全部标签x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A
     * @param aryAIDList[string]:应用列表数组，默认值A000000333010101|A000000333010102|A000000333010103|A000000333010106
     * @param piCInfoLen[int]:IC卡信息长度，默认值4096
     * @param trackNum[int]:磁条卡磁道号：2 - 2磁道，3 - 3磁道，23 - 2磁道和3磁道，默认值2
     * @param timeout[int]:设备调用的超时时间(s)，默认30
     * @param callback[function]:回调函数
     */
    readCard: function (args, callback) {
        //        PJF.stm.log('', 'PJF_LOG_INSERT_CARD');
        //        PJF.stm.log('读卡', 'PJF_LOG_HARDWARE');
        //PJF.stm.util.clearAuthInfo();
        PJF.stm.util.clearCardInfo();
        var timeout = (typeof args.timeout == "undefined") ? 30 : args.timeout;
        var args = {
            iIcFlag: args.iIcFlag || 1,
            aryTagList: args.aryTagList || "x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A",
            aryAIDList: args.aryAIDList || "A000000333010101|A000000333010102|A000000333010103|A000000333010106|A0000000031010|A000000241010102|A0000000041010|A0000000651010",
            piCInfoLen: args.piCInfoLen || 4096,
            trackNum: args.trackNum || 2,
            cardSource: 0,
            timeout: timeout,
            otherBnkCard: args.otherBnkCard,
            loadingConf: {
                noLayer: true,
                opacity: 0.1,
                noIcon: true,
                msg: '',
                timeout: timeout
            },
            deviceStartSound: (typeof args.cdbSound == "undefined") ? "devprompt/CDB_insert.wav" : args.cdbSound
        };
        //建亚
        if (PJF.orgInfo.instSvrlLgPsnID === 'DA003') {
          args.aryAIDList = 'A00000047400000001|A0000000031010|A000000241010102|A0000000041010|A000000333010101|A000000333010102|A000000333010103|A000000333010106'
        }
        var callback1 = function (result) {
            if (result.status == 1 && (result.info.resType == 2 || result.info.resType == 0)) {
                var pchTrackData2 = result.info.stmPchTrackData2.split("=")[1];
                if ((pchTrackData2.charAt(4) == 2) || (pchTrackData2.charAt(4) == 6)) {
                    result.status = 0;
                    result.errorCode = 'PJF_TRACK2_PARSE_ERR04';
                    result.errorMsg = '不允许IC复合卡通过磁条交易，' + (PJF.otherInfo.isSelfBank ? '请联系工作人员' :  '详情请咨询网点工作人员。');
                } else {
                    result.info.resType = '0'; //正常的场景，resType都恢复0吧
                }
                callback && (callback(result));
            } else {
                callback && (callback(result));
            }
        };

    PJF.stm.client.callClient("App_CDB", "CDB_ReadCard", args, callback1, PJF.stm.ICMaker.fnSuccess);
  },
  //发卡箱发卡
  /**
   * @param cardSource[int]:卡来源：1 - 发卡箱一，2 - 发卡箱二...
   * @param iIcFlag[int]: IC卡类型：1 - 接触式IC卡，默认值1
   * @param aryTagList[string]:标签编码数组，默认全部标签x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A
   * @param aryAIDList[string]:应用列表数组，默认值A000000333010101|A000000333010102|A000000333010103|A000000333010106
   * @param piCInfoLen[int]:IC卡信息长度，默认值4096
   * @param trackNum[int]:磁条卡磁道号：2 - 2磁道，3 - 3磁道，23 - 2磁道和3磁道，默认值2
   * @param timeout[int]:设备调用的超时时间(s)，默认20
   * @param callback[function]:回调函数
   *
   * 0 从卡箱到通道失败
   * 1 从卡箱到通道成功
   * 2 获取arqc成功
   * 3 获取arqc失败
   * 4 吞卡成功
   * 5 吞卡失败
   */
  cardIssue: function (args, callback) {
    PJF.stm.log('发卡', 'PJF_LOG_HARDWARE');
    var args1 = {
      cardSource: args.cardSource,
      iIcFlag: args.iIcFlag || 1,
      aryTagList: args.aryTagList || "x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A",
      aryAIDList: args.aryAIDList || "A000000333010101|A000000333010102|A000000333010103|A000000333010106",
      piCInfoLen: args.piCInfoLen || 4096,
      trackNum: args.trackNum || 2,
      timeout: args.timeout || 20
    };
    args1.loadingConf = {
      msg: "设备正在处理中",
      opacity: 0.1,
      noIcon: true,
      timeout: args1.timeout
    };
    $.extend(true, args1, args);

      var succRes = {};

      PJF.stm.client.newCard = $.extend(args.stmManage, {
          cardkey_type: 'Card',
          device_id: PJF.otherInfo.devId
      });

      if (args1.socialCard == "ZNK") {
          args1 = $.extend({
              pchIp: "127.0.0.1",
              iPort: "11041",
              pchOperDate: args1.timeout,
              ARQC: {
                  "appType": "default", //default 或者1 或者2
                  "authAmt": "0.00", //交易金额，精确到2位小数
                  "otherAmt": "0.00", //其他金额，两位小数
                  "transType": "31", //交易类型
                  "cType": "156" //货币代码
              }}, args1);

          //失败的情况
          var failCallBackFn = function (failResult) {
              PJF.stm.ZNK.putCardOut({
                  pchIp: args1.pchIp,
                  iPort: args1.iPort,
                  timeout: args1.timeout,
                  iIsValidCard: '1',
                  stmManage: PJF.stm.client.newCard,
                  conReason: PJF.stm.client.newCard.recycle_msg
              }, function(result_putOut){
                  if (result_putOut.status) {
                      callback && callback(failResult);
                  }
              });
          };

          function isCardIssued(errCode) {
              if (errCode == 'DRV0000000') {
                  return true;
              } else if (errCode != 'DRVSCS0033' && errCode.indexOf('DRVSCS') != -1) {
                  return true;
              } else {
                  return false;
              }
          }

          var doModifyFn = function(result){
              // 原子服务，卡箱数量减1，暂时忽略从卡箱不出卡的情况
              if (isCardIssued(result.errorCode)) {
                  PJF.communication.stmManageAjax({
                      fwServiceId: 'stm.doModifyCardKeySurplus',
                      jsonData: PJF.stm.client.newCard
                  });
                  console.log("发卡返回错误码为:" + result.errorCode + ",卡箱数量将减一。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newCard));
              } else {
                  console.log("发卡返回错误码为:" + result.errorCode + ",卡箱数量将不变。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newCard));
              }
          };

          //选卡-->读卡-->IC卡生成ARQC
          //无吞卡
          PJF.stm.ZNK.putCardIn(args1, function (result_put) {
              if (result_put.status) {
                  PJF.stm.ZNK.getICCardInfo(args1, function (res_info) {
                      if (res_info.status) {
                          $.extend(true, succRes, res_info);
                          //将读出的卡号赋值
                          $.extend(PJF.stm.client.newCard, {
                              cardkey_no: res_info.info.resInfo.accountNo
                          });
                          PJF.communication.stmManageAjax({
                              fwServiceId: 'stm.doReadCardKey',
                              jsonData: PJF.stm.client.newCard,
                              maskBody: true,
                              success: function (data) {
                                  callback && callback(succRes);
                              },
                              failure: function (data) {
                                  PJF.stm.client.newCard.recycle_type = 'Read';
                                  PJF.stm.client.newCard.recycle_msg = data.BK_DESC;
                                  failCallBackFn({
                                      status: 0,
                                      errorMsg: data.BK_DESC,
                                      conReason: data.BK_DESC
                                  });
                              }
                          });
                      } else {
                          if (isCardIssued(res_info.errorCode)) {
                              PJF.stm.client.newCard.recycle_type = 'Read';
                              PJF.stm.client.newCard.recycle_msg = '发卡出错,出卡或读卡出错:' + res_info.errorMsg;
                              result_put.info = result_put.info || {};
                              result_put.info.conReason = PJF.stm.client.newCard.recycle_msg;
                              failCallBackFn(res_info);
                          } else {
                              callback && callback(res_info);
                          }
                      }

                      doModifyFn(res_info);
                  });
              } else {
                  if (isCardIssued(result_put.errorCode)) {
                      PJF.stm.client.newCard.recycle_type = 'Read';
                      PJF.stm.client.newCard.recycle_msg = '发卡出错,出卡或读卡出错:' + result_put.errorMsg;
                      result_put.info.conReason = PJF.stm.client.newCard.recycle_msg;
                      failCallBackFn(result_put);
                  } else {
                      callback && callback(result_put);
                  }

                  doModifyFn(result_put);
              }
          });
      } else {
          PJF.stm.client.callClient("App_CDB", "CDB_CardIssue", args1, function (issRes) {

              //失败的情况
              var failCallBack = function (r) {
                  //PJF.communication.sendCardTrade(sendCardTrade);
                  PJF.stm.ICMaker.confiscateDev(function (res) {
                      r = r || {};
                      r.confiscateResult = res;
                      callback && callback(r);
                  }, {
                      stmManage: PJF.stm.client.newCard,
                      conReason: r.conReason
                  });
              }

              function isCardIssued(errCode) {
                  if (errCode == 'DRV0000000') {
                      return true;
                  } else if (errCode != 'DRVCDB0012' && errCode != 'DRVCDB0001' && errCode != 'DRVCDB0011' && errCode.indexOf('DRVCDB') != -1) {
                      return true;
                  } else {
                      return false;
                  }
              }

              if (issRes.status) {
                  $.extend(true, succRes, issRes);
                  //将读出的卡号赋值
                  $.extend(PJF.stm.client.newCard, {
                      cardkey_no: issRes.info.resInfo.accountNo
                  });
                  //发IC卡需要获取ARQC
                  if (issRes.info.resType == '1') {
                      PJF.stm.ICMaker.genARQC({
                          CDB: true,
                          ARQC: args.ARQC
                      }, function (arqcRes) {
                          //成功
                          if (arqcRes.status) {
                              PJF.communication.stmManageAjax({
                                  fwServiceId: 'stm.doReadCardKey',
                                  jsonData: PJF.stm.client.newCard,
                                  maskBody: true,
                                  success: function (data) {
                                      $.extend(true, succRes, arqcRes);
                                      callback && callback(succRes);
                                  },
                                  failure: function (data) {
                                      PJF.stm.client.newCard.recycle_type = 'Read';
                                      PJF.stm.client.newCard.recycle_msg = data.BK_DESC;
                                      failCallBack({
                                          status: 0,
                                          errorMsg: data.BK_DESC,
                                          conReason: data.BK_DESC
                                      });
                                  }
                              })
                          } else {
                              PJF.stm.client.newCard.recycle_type = 'Read';
                              PJF.stm.client.newCard.recycle_msg = '发卡出错,生成arqc出错:' + arqcRes.errorMsg;
                              $.extend(arqcRes, {
                                  conReason: '发卡出错，生成arqc出错'
                              });
                              failCallBack(arqcRes);
                              console.log('cardIssue获取arqc失败:' + JSON.stringify(arqcRes));
                          }
                      });
                  } else {
                      PJF.communication.stmManageAjax({
                          fwServiceId: 'stm.doReadCardKey',
                          jsonData: PJF.stm.client.newCard,
                          maskBody: true,
                          success: function (data) {
                              callback && callback(succRes);
                          },
                          failure: function (data) {
                              PJF.stm.client.newCard.recycle_type = 'Read';
                              PJF.stm.client.newCard.recycle_msg = data.BK_DESC;
                              failCallBack({
                                  status: 0,
                                  errorMsg: data.BK_DESC,
                                  conReason: data.BK_DESC
                              });
                          }
                      })
                  }
              } else {
                  if (isCardIssued(issRes.errorCode)) {
                      PJF.stm.client.newCard.recycle_type = 'Read';
                      PJF.stm.client.newCard.recycle_msg = '发卡出错,出卡或读卡出错:' + issRes.errorMsg;
                      $.extend(issRes, {
                          conReason: '发卡出错,出卡或读卡出错'
                      });
                      failCallBack(issRes)
                  } else {
                      callback && callback(issRes);
                  }
                  console.log('cardIssue从卡箱发卡失败:' + JSON.stringify(issRes));
              }

              // 原子服务，卡箱数量减1，暂时忽略从卡箱不出卡的情况
              if (isCardIssued(issRes.errorCode)) {
                  PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).inhaleCard();
                  //PJF.communication.setSendCardSate(sendCardSateParams);
                  PJF.communication.stmManageAjax({
                      fwServiceId: 'stm.doModifyCardKeySurplus',
                      jsonData: PJF.stm.client.newCard
                  })
                  console.log("发卡返回错误码为:" + issRes.errorCode + ",卡箱数量将减一。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newCard));
              } else {
                  console.log("发卡返回错误码为:" + issRes.errorCode + ",卡箱数量将不变。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newCard));
              }
          }, PJF.stm.ICMaker.fnSuccess);
      }
  },
    //etc发卡
    etcIssue: function(args, callback){
        PJF.stm.log('ETC发卡', 'PJF_LOG_HARDWARE');
        var args1 = {
            cardSource: args.cardSource,
            iIcFlag: args.iIcFlag || 1,
            aryTagList: args.aryTagList || "x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A",
            aryAIDList: args.aryAIDList || "A000000333010101|A000000333010102|A000000333010103|A000000333010106",
            piCInfoLen: args.piCInfoLen || 4096,
            trackNum: args.trackNum || 2,
            timeout: args.timeout || 20
        };
        args1.loadingConf = {
            msg: "设备正在处理中",
            opacity: 0.1,
            noIcon: true,
            timeout: args1.timeout
        };
        $.extend(true, args1, args);

        var succRes = {};
        PJF.stm.client.newCard = $.extend(args.stmManage, {
            cardkey_type: 'Card',
            device_id: PJF.otherInfo.devId
        });

        function isCardIssued(errCode) {
            if (errCode == 'DRV0000000') {
                return true;
            } else if (errCode != 'DRVCDB0012' && errCode != 'DRVCDB0001' && errCode != 'DRVCDB0011' && errCode.indexOf('DRVCDB') != -1) {
                return true;
            } else {
                return false;
            }
        }

        //失败的情况
        var failCallBack = function (r) {
            PJF.stm.ICMaker.confiscateDev(function (res) {
                r = r || {};
                r.confiscateResult = res;
                callback && callback(r);
            }, {
                stmManage: PJF.stm.client.newCard,
                conReason: r.conReason
            });
        };

        //卡已经到通道里了的
        var doModifyFn = function(issRes){
            // 原子服务，卡箱数量减1，暂时忽略从卡箱不出卡的情况
            if (isCardIssued(issRes.errorCode)) {
                PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).inhaleCard();
                //PJF.communication.setSendCardSate(sendCardSateParams);
                PJF.communication.stmManageAjax({
                    fwServiceId: 'stm.doModifyCardKeySurplus',
                    jsonData: PJF.stm.client.newCard
                });
                console.log("发卡返回错误码为:" + issRes.errorCode + ",卡箱数量将减一。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newCard));
            } else {
                console.log("发卡返回错误码为:" + issRes.errorCode + ",卡箱数量将不变。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newCard));
            }
        };


        //通道状态-->选卡-->读卡
        PJF.stm.ICMaker.getChannelStatus(function (result) {
            if (result.status == 1) {
                if (result.info.status != 0) {
                    result.status = 0;//通道有卡、通道口等状况
                    callback(result);
                    doModifyFn(result);
                }
                else {
                    PJF.stm.client.callClient("CDB", "chooseCard", args1, function (result_choose) {
                        if (result_choose.status) {
                            PJF.stm.ICMaker.ETC_getCardInfo(args1, function (result_etc) {
                                if (result_etc.status) {
                                    $.extend(true, succRes, result_etc);
                                    //将读出的卡号赋值
                                    $.extend(PJF.stm.client.newCard, {
                                        cardkey_no: result_etc.info.pchCardNo
                                    });
                                    PJF.communication.stmManageAjax({
                                        fwServiceId: 'stm.doReadCardKey',
                                        jsonData: PJF.stm.client.newCard,
                                        maskBody: true,
                                        success: function (data) {
                                            callback && callback(succRes);
                                        },
                                        failure: function (data) {
                                            PJF.stm.client.newCard.recycle_type = 'Read';
                                            PJF.stm.client.newCard.recycle_msg = data.BK_DESC;
                                            failCallBack({
                                                status: 0,
                                                errorMsg: data.BK_DESC,
                                                conReason: data.BK_DESC
                                            });
                                        }
                                    })
                                } else {
                                    if (isCardIssued(result_etc.errorCode)) {
                                        PJF.stm.client.newCard.recycle_type = 'Read';
                                        PJF.stm.client.newCard.recycle_msg = '发卡出错,出卡或读卡出错:' + result_etc.errorMsg;
                                        $.extend(result_etc, {
                                            conReason: '发卡出错,出卡或读卡出错'
                                        });
                                        failCallBack(result_etc);
                                    } else {
                                        callback && callback(result_etc);
                                    }
                                }
                                doModifyFn(result_etc);
                            });
                        } else {
                            if (isCardIssued(result_choose.errorCode)) {
                                PJF.stm.client.newCard.recycle_type = 'Read';
                                PJF.stm.client.newCard.recycle_msg = '发卡出错,出卡或读卡出错:' + result_choose.errorMsg;
                                $.extend(result_choose, {
                                    conReason: '发卡出错,出卡或读卡出错'
                                });
                                failCallBack(result_choose);
                            } else {
                                callback && callback(result_choose);
                            }
                            doModifyFn(result_choose);
                        }
                    });
                }
            }
            else {
                callback(result);
                doModifyFn(result);
            }
        });
    },
  //发卡箱吞卡
  /**
   * @param iIcFlag[int]: IC卡类型：1 - 接触式IC卡，默认值1
   * @param aryTagList[string]:标签编码数组，默认全部标签x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A
   * @param aryAIDList[string]:应用列表数组，默认值A000000333010101|A000000333010102|A000000333010103|A000000333010106
   * @param piCInfoLen[int]:IC卡信息长度，默认值4096
   * @param trackNum[int]:磁条卡磁道号：2 - 2磁道，3 - 3磁道，23 - 2磁道和3磁道，默认值2
   * @param timeout[int]:设备调用的超时时间(s)，默认20
   * @param callback[function]:回调函数
   */
  cardSwl: function (args, callback) {
    var args = {
      iIcFlag: args.iIcFlag || 1,
      aryTagList: args.aryTagList || "x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A",
      aryAIDList: args.aryAIDList || "A000000333010101|A000000333010102|A000000333010103|A000000333010106",
      piCInfoLen: args.piCInfoLen || 4096,
      trackNum: args.trackNum || 2,
      timeout: args.timeout || 20
    };

    PJF.stm.client.callClient("App_CDB", "CDB_CardSwl", args, callback, PJF.stm.ICMaker.fnSuccess);
  },
  fnSuccess: function (resultJson) {
    var info = {};
    info.resType = resultJson.resType;

    var pcICInfoStr = resultJson.resInfo;
    if (info.resType == 1) PJF.stm.log('读卡成功，卡号为' + pcICInfoStr.split('B')[0].substr(4), 'PJF_LOG_HARDWARE');
    else PJF.stm.log('读卡成功，卡号为' + pcICInfoStr.split('=')[0], 'PJF_LOG_HARDWARE');
    var pcICInfoObj = {};
    var mappingObj = {
      'A': 'accountNo',
      'B': 'userName',
      'C': 'identityCardType',
      'D': 'identityCardNo',
      'E': 'secDisInfo',
      'F': 'firDisInfo',
      'G': 'balance',
      'H': 'balanceLimit',
      'I': 'invalidDate',
      'J': 'ICCardNo'
    }
    if (info.resType == 1) {
      //规范永远是X+3位长度+对应数据
      var time = 10;
      while (pcICInfoStr.length > 4 && time >= -1) {
        time--;
        var tempStr = pcICInfoStr.substr(0, 4);
        var tempLength = parseInt(pcICInfoStr.substr(1, 3), 10);
        pcICInfoObj[mappingObj[tempStr[0]]] = pcICInfoStr.substr(4, tempLength);
        pcICInfoStr = pcICInfoStr.slice(4 + tempLength);
      }
      if (time == -1 || time != 0 || pcICInfoStr != '') {
        info.resInfo = "IC卡数据格式错误,数据为:" + resultJson.resInfo;
        info.pjfstatus = '0';
        info.pchErrCode = "PJF_TRACK2_PARSE_ERR02"
        info.pchError = info.resInfo;
      }
    } else {
      //这时候直接只取二磁道
      pcICInfoStr = resultJson.pchTrackData2;
      //二磁道可能有=,',>三种符号的分隔
      if (pcICInfoStr.indexOf('=') != -1) {
        pcICInfoObj.accountNo = pcICInfoStr.split('=')[0];
        info.stmPchTrackData2 = pcICInfoStr; //存一份读取的二磁数据
      } else if (pcICInfoStr.indexOf("'") != -1) {
        pcICInfoObj.accountNo = pcICInfoStr.split("'")[0];
        pcICInfoStr = pcICInfoStr.replace("\'", "=");
        info.stmPchTrackData2 = pcICInfoStr;
      } else if (pcICInfoStr.indexOf(">") != -1) {
        pcICInfoObj.accountNo = pcICInfoStr.split(">")[0];
        pcICInfoStr = pcICInfoStr.replace(">", "=");
        info.stmPchTrackData2 = pcICInfoStr;
      } else {
        console.log("未能正确匹配磁道分隔符");
        info.pjfstatus = '0';
        info.pchErrCode = "PJF_TRACK2_PARSE_ERR01"
        info.pchError = "未能正确匹配磁道分隔符";
      }
      pcICInfoObj.secDisInfo = pcICInfoStr;
    }
    if (pcICInfoObj.balance) {
      pcICInfoObj.balance = (parseFloat(pcICInfoObj.balance) / 100).toFixed(2)
    }
    var encryptSecDisk;
    var equalSecDisk;
    if (info.resType != 1) {
      encryptSecDisk = PJF.util.encrypt(pcICInfoObj.secDisInfo);
    } else {
      encryptSecDisk = PJF.util.Encrypt0x88(40);
      equalSecDisk = PJF.util.encrypt(pcICInfoObj.secDisInfo);
      if (equalSecDisk) {
        pcICInfoObj.equalSecDisInfo = equalSecDisk;
      } else {
        console.log("等效二磁数据加密失败");
        info.pjfstatus = '0';
        info.pchErrCode = "PJF_TRACK2_PARSE_ERR03";
        info.pchError = "等效二磁数据加密失败";
      }
    }
    if (encryptSecDisk)
      pcICInfoObj.secDisInfo = encryptSecDisk;
    else {
      console.log("二磁数据加密失败");
      info.pjfstatus = '0';
      info.pchErrCode = "PJF_TRACK2_PARSE_ERR02";
      info.pchError = "二磁数据加密失败";
    }
    info.resInfo = pcICInfoObj;
    /*iot调用会多一些*/
    info.robotId = resultJson.robotId;
    info.pchD55 = resultJson.pchD55 || "";
    info.pchD55Len = info.pchD55.length / 2;
    return info;
  },
  /**
   * 带两位小数点转换为Ans格式
   */
  decimal2Ans: function (strNum) {
    var length = strNum.length;
    if (strNum.indexOf(".") != length - 3)
      alert("金额表示非法！")
    var num = new Array(2);
    num = strNum.split(".");
    return num[0] + num[1];
  },
  /**
   * 停止进卡
   */
  stopInhale: function (args, callback) {
    PJF.stm.log('停止进卡', 'PJF_LOG_HARDWARE');
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient('CDB', 'stopInhale', cmdArgs, callback);
  },
  /**
   * 生成ARQC pchInput
   */
  genARQCpchInput: function (authAmt, otherAmt, cType, transDate, transType, transTime, transOper) {
    //生成str.length+str格式的字符串
    function formatStr(str, flag) {
      if (flag) {
        //P、Q、R 长度默认为12位，不够的填充0
        if (str) {
          var len = 12 - str.length;
          var temp = '';
          while (len > 0) {
            temp += '0';
            len--;
          }
          return '012' + temp + str;
        } else {
          return '012' + '000000000000';
        }
      } else {
        if (str) {
          if (str.length < 10) {
            return '00' + str.length + str;
          } else {
            return '0' + str.length + str;
          }
        } else {
          return '000';
        }
      }
    }

    return "P" + formatStr(authAmt, true) + "Q" + formatStr(otherAmt, true) + "R" + formatStr(cType) + "S" + formatStr(transDate) + "T" +
      formatStr(transType) + "U" + formatStr(transTime) + "W" + formatStr(transOper, true);
  },

  /**
   *  获取卡箱状态
   */
  getBoxStatus: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    var fnSuccess = function (resultJson) {
      var info = {};
      info.iStatus = resultJson.iStatus;
      return info;
    };

    PJF.stm.client.callClient("CDB", "getBoxStatus", cmdArgs, callback, fnSuccess);
  },

  /**
   *  获取卡回收箱状态
   */
  getRecBoxStatus: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    var fnSuccess = function (resultJson) {
      var info = {};
      info.iStatus = resultJson.iStatus;
      return info;
    };

    PJF.stm.client.callClient("CDB", "getRecBoxStatus", cmdArgs, callback, fnSuccess);
  },

  /**
   *  识别卡种类
   */
  mem_verifyType: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    var fnSuccess = function (resultJson) {
      var info = {};
      info.iCardType = resultJson.iCardType;
      return info;
    };

    PJF.stm.client.callClient("CDB", "mem_verifyType", cmdArgs, callback, fnSuccess);
  },

  /**
   *  读卡数据
   */
  mem_readData: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    var fnSuccess = function (resultJson) {
      var info = {};
      info.pchData = resultJson.pchData;
      return info;
    };

    PJF.stm.client.callClient("CDB", "mem_readData", cmdArgs, callback, fnSuccess);
  },

  /**
   *  校验卡密匙
   */
  mem_verifyPwd: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient("CDB", "mem_verifyPwd", cmdArgs, callback);
  },

  /**
   *  写卡数据
   */
  mem_writeData: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient("CDB", "mem_writeData", cmdArgs, callback);
  },

  /**
   *  修改密钥
   */
  mem_modifyPwd: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient("CDB", "mem_modifyPwd", cmdArgs, callback);
  },

  /**
   *  读取密码错误计数器和密码
   */
  mem_readErrCntAndPwd: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    var fnSuccess = function (resultJson) {
      var info = {};
      info.iErrCnt = resultJson.iErrCnt;
      info.pchPwd = resultJson.pchPwd;
      return info;
    };

    PJF.stm.client.callClient("CDB", "mem_readErrCntAndPwd", cmdArgs, callback, fnSuccess);
  },

    /**
     *  读取ETC卡信息
     */
    ETC_getCardInfo: function (args, callback) {
        var cmdArgs = $.extend({}, args);

        PJF.stm.client.callClient("CDB", "ETC_getCardInfo", cmdArgs, callback, PJF.stm.IcCard.fnSuccess);
    }
};

//盾--KDB
PJF.stm.KDB = {
  /**
   * 检查盾是否被取走
   */
  waitForTaken: function (args1, callback) {
    var args = {
      timeout: args1.timeout || 30
    };
    var fnSuccess = function (result) {

    };
    PJF.stm.client.callClient('KDB', 'WaitForTaken', args, callback, fnSuccess);
  },
  //发盾
  publish: function (args, callback) {
    PJF.stm.log('发盾', 'PJF_LOG_HARDWARE');
    var args1 = {};

    function fnSuccess(resultJson) {
      var info = {};
      info.status = resultJson.status;
      info.keyData = resultJson.keyData;

      return info;
    }

    PJF.stm.client.callClient("App_KDB", "KDB_Publish", args1, function (pubRes) {
      //失败的情况
      var failCallBack = function (r) {
        //PJF.communication.sendKeyTrade(sendKeyTrade);
        PJF.stm.KDB.confiscateDev({
          stmManage: PJF.stm.client.newKey,
          conReason: r.conReason
        }, function (res) {
          callback && callback(r);
        })
      }

      PJF.stm.client.newKey = $.extend(args.stmManage, {
        cardkey_type: 'Key',
        device_id: PJF.otherInfo.devId
      });

      function isPublished(errcode) {
        if (errcode == 'DRV0000000') {
          return true;
        } else if (errcode != 'DRVKDB0007' && errcode != 'DRVKDB0001' && errcode != 'DRVKDB0003' && errcode.indexOf('DRVKDB') != -1) {
          return true;
        } else {
          return false;
        }
      }

      // 若成功出盾
      if (isPublished(pubRes.errorCode)) {
        PJF.communication.stmManageAjax({
          fwServiceId: 'stm.doModifyCardKeySurplus',
          jsonData: PJF.stm.client.newKey
        })
        console.log("发盾返回错误码为:" + pubRes.errorCode + ",盾箱数量将减一。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newKey));

        function afterDoReadCardKey(pubRes, data) {
          if (pubRes.status) {
            callback && callback(pubRes)
          } else {
            PJF.stm.client.newKey.recycle_type = 'Read';
            PJF.stm.client.newKey.recycle_msg = '外设出盾失败，错误信息为:' + pubRes.errorMsg;
            $.extend(pubRes, {
              conReason: '外设出盾失败'
            });
            failCallBack(pubRes);
          }
        }

        //现在需要去后端管理核实盾号再做后面的操作
        PJF.communication.stmManageAjax({
          fwServiceId: 'stm.doReadCardKey',
          jsonData: PJF.stm.client.newKey,
          maskBody: true,
          success: function (data) {
            afterDoReadCardKey(pubRes, data);
          },
          failure: function (data) {
            //afterDoReadCardKey(pubRes,data);
            pubRes.status = 0;
            pubRes.errorMsg = data.BK_DESC;
            PJF.stm.client.newKey.recycle_type = 'Read';
            PJF.stm.client.newKey.recycle_msg = data.BK_DESC;
            $.extend(pubRes, {
              conReason: data.BK_DESC
            });
            failCallBack(pubRes);

          }
        })
      } else {
        console.log("发盾返回错误码为:" + pubRes.errorCode + ",盾箱数量将不变。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newKey));
        callback && callback(pubRes);
      }
    }, fnSuccess);
  },
  //吐盾
  /**
   * * @param timeout[int]:设备调用的超时时间(s)，默认20
   * 0 代表吐盾失败
   * 1 代表吐盾成功
   * 2 代表取盾成功
   * 3 代表吞盾成功
   * 4 代表吞盾失败
   */
  eject: function (callback, takenFnCb, args) {
    PJF.stm.log('吐盾', 'PJF_LOG_HARDWARE');

    function showMessageBox(content) {
      var messageBox = new PJF.ui.messageBox({
        title: "提示信息",
        content: content || '设备故障,请联系工作人员！',
        buttonConfs: [{
          bgColor: 'rgb(121,198,30)',
          name: '确定',
          style: 'main',
          width: 200,
          height: 80,
          onClick: function () {}
        }]
      });
    }

    PJF.stm.KDB.ejectDev({
        iotFunc: args.iotFunc,
        uniqueNo: args.uniqueNo
    }, function (result) {
      if (result.status == 1) {
        callback && (callback(result));
        var timeout = 20;
        var loading = new PJF.ui.loading({
          msg: '请取走您的网银盾',
          timeout: timeout
        });
        PJF.communication.player.PlaySoundByUrl("devprompt/KDB_taken.wav");
        var tempFunc;
        //PJF.stm.KDB.waitForTaken({},function(waitResult){
        var timeoutHandler = setTimeout(function () {
          PJF.event.removeSubscriber(PJF.stm.client.events.KDB_TAKEN, tempFunc);
          loading.destroy();
          if (args.stmManage) {
            args.stmManage.recycle_type = 'Popout'
          }
          PJF.stm.KDB.confiscateDev({
            stmManage: args.stmManage,
            conReason: '吐盾超时未取',
            iotFunc: args.iotFunc,
            uniqueNo: args.uniqueNo
          }, function (confiscateResult) {
            if (confiscateResult.status) {
              confiscateResult.status = 3;
              //发交易...
            } else {
              confiscateResult.status = 4;
              showMessageBox(confiscateResult.errorMsg);
              console.log("没收网银盾失败，错误代码为:" + confiscateResult.errorCode);
            }
            takenFnCb && takenFnCb({
              success: false
            });
            //callback && (callback(confiscateResult));
          });
        }, timeout * 1000)
        PJF.event.onceSubscriber(PJF.stm.client.events.KDB_TAKEN, tempFunc = function () {
          clearTimeout(timeoutHandler);
          loading.destroy();
          //卡口无盾了
          //PJF.communication.returnKeyTrade({result:"0"});
          takenFnCb && takenFnCb({
            success: true
          });
          //callback && (callback(waitResult));					
        })
      } else {
        callback ? (callback(result)) : showMessageBox(result.errorMsg);
        console.log("吐盾失败,错误信息为:" + JSON.stringify(result));
      }
    })

  },
  ejectDev: function (args, callback) {
    var args = {
      timeout: args.timeout || 20,
      iotFunc: args.iotFunc,
      uniqueNo: args.uniqueNo,
      coordinateX: PJF.otherInfo.globalParams.coordinateX,
      coordinateY: PJF.otherInfo.globalParams.coordinateY,
      angle: PJF.otherInfo.globalParams.angle
    };
    args.iotFunc && (args.timeout = 120);
    function fnSuccess(resultJson) {
      var info = {};
      info.status = resultJson.status;

      return info;
    }
    PJF.stm.client.callClient("App_KDB", "KDB_Eject", args, callback, fnSuccess);
  },
  /**
   * 吞盾
   */
  confiscateDev: function (args, callback) {
    PJF.stm.log('吞盾', 'PJF_LOG_HARDWARE');
    var me = this;
    var args = $.extend({
      timeout: 20,
      iotFunc: false,
      uniqueNo: ""
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      return info;
    }
    var callback1 = function (res) {
      //不是盾箱满了的错误之类
      if (res.status) {
        //PJF.communication.returnKeyTrade({result:"1"});
        if (args.stmManage) {
          $.extend(args.stmManage, {
            cardkey_type: 'Key',
            device_id: PJF.otherInfo.devId,
            ins_id: PJF.roleInfo.orgCode
          });
          PJF.communication.stmManageAjax({
            fwServiceId: 'stm.doLogCardKeyFailure',
            jsonData: args.stmManage
          })
        }
      }
      if (callback)
        callback(res);
    };
    //吞盾时，向pad发消息
    var menuName = PJF.stm.enterMenu ? PJF.stm.enterMenu.NAME : '首页';
    var padReason = args.stmManage ? (args.stmManage.recycle_msg ? args.stmManage.recycle_msg : args.conReason) : args.conReason;
    var padMsg = menuName + '有盾被吞，吞盾原因为' + padReason;
    PJF.communication.callPad({
      busiName: padMsg
    });
    PJF.stm.client.callClient("App_KDB", "KDB_Confiscate", args, callback1, fnSuccess);
  },

  //获取通道状态
  /**
   * @param callback[function]:回调函数
   */
  getChannelStatus: function (callback) {
    var args = {
      timeout: 20
    };

    function fnSuccess(resultJson) {
      return resultJson;
    }

    PJF.stm.client.callClient("KDB", "getChannelStatus", args, callback, fnSuccess);
  }
};


//打印机--SRP
PJF.stm.ReceiptPrinter = {
  //凭条打印机
  /**
   * @param pchContent[string]:打印字符串
   * @param timeout[int]:超时间隔,默认20秒
   * @param callback[function]:回调函数
   */
  doPrint: function (args, callback) {
    /*
     * 由于驱动限制，大概凭证一次只能打印100行。。。所以这里默认100行以后重新调用驱动，对应用透明
     */
    var pchContentNow = args.pchContent.split('&', 100); //一次最多打印100行数据
    var pchContentTotal = args.pchContent.split('&'); //所有的行数据
    var hasMore; // 是否还有要打印的
    //说明超过了100行撒
    if (pchContentNow.length != pchContentTotal.length) {
      hasMore = true;
      pchContentTotal.splice(0, 100); //删掉这次打印的100行
    }
    var args = {
      pchContent: pchContentNow.join('&'),
      timeout: args.timeout || 20
    };
    var fnSuccess = function (result) {
      var info = {};
      return info;
    }
    PJF.communication.player.PlaySoundByUrl("devprompt/TPT_taken.wav", true);
    //每次打印后查询机器状态，若纸不够则通知平板
    var callback1 = function (res) {
      //成功并且还有要打印的,继续打印
      if (res.status == '1' && hasMore) {
        PJF.stm.ReceiptPrinter.doPrint({
          timeout: args.timeout,
          pchContent: pchContentTotal.join('&')
        }, callback);
      }
      //没有要打印的了, 或者是驱动报错了
      else {
        PJF.stm.client.callClient("COMMON", "getDevStatus", {
          'pchType': 'TPT'
        }, function (e) {
          //代表缺纸
          if (e.errorCode == "TPT0000006") {
            PJF.communication.callPad({
              busiName: 'STM终端凭条打印纸张即将用完，请及时添加'
            });
          } else if (e.errorCode == "TPT0000004") {
            PJF.communication.callPad({
              busiName: 'STM终端凭条打印纸张已经用完，请立即添加'
            });
          } else if (e.errorCode == "TPT0000005") {
            PJF.communication.callPad({
              busiName: PJF.otherInfo.devId + '设备办理' + (PJF.otherInfo.MENU_ID && PJF.stm.menuTree && PJF.stm.menuTree[PJF.otherInfo.MENU_ID] && PJF.stm.menuTree[PJF.otherInfo.MENU_ID].NAME)
                       + '业务打印回执卡纸'
            });
          }
        }, function (e) {
          return e;
        })
        callback && callback(res);
      }
    }

    PJF.stm.client.callClient("TPT", "doPrint", args, callback1, fnSuccess);

  }
};

PJF.stm.SXT = {

  /**
   * 打开摄像头
   */

  openCamera: function (args, callback) {
    PJF.stm.log('打开摄像头', 'PJF_LOG_HARDWARE');
    var he = $('#' + args.domId)[0];
    if (he) {
      var br = he.getBoundingClientRect(); // 摄像头窗口的定位
      var cmdArg = $.extend({

      }, {
        x: br.left + window.screenLeft,
        y: br.top + window.screenTop,
        w: br.width,
        h: br.height,
        iWidth: args.iWidth || 640, //照片分辨率
        iHeight: args.iHeight || 480,
        timeout: args.timeout || 30,
        iIndex: args.iIndex || 1, //摄像头序号
        showWaterMark: (typeof (args.showWaterMark) != 'undefined' ? args.showWaterMark : true) //水印
      });
      if (args.loadingConf === false) cmdArg.loadingConf = false;

      function fnSuccess(result) {
        return result;
      }
      PJF.fsm.get(PJF.fsm.fmIds.STM_CAMERA).openCamera();
      return PJF.stm.client.callClient("SXT", "cameraPreview", cmdArg, callback, fnSuccess);
    } else {
      console.log('openCamera找不到摄像头开启的DOM元素');
    }
  },
  /**
   * 拍照
   */
  takePhoto: function (args, callback) {
    PJF.stm.log('拍照', 'PJF_LOG_HARDWARE');
    args = $.extend({
      iIndex: 1, // 摄像头序号	int		1-人脸摄像头
      imageType: 2, //图片保存类型	int		1-BMP格式 2-JPEG格式
      iExpRate: 70, // 图片压缩比	int		该参数只在图片保存类型为2时有效，取值为0~100的整数，表示压缩的百分比
      timeout: 30,
      iWidth: args.iWidth || 640, //照片分辨率
      iHeight: args.iHeight || 480
    }, args)

    function fnSuccess(result) {
      var info = {};
      info.pbContent = result.imgBase64;
      return info;
    }

    return PJF.stm.client.callClient("SXT", "takePhoto", args, callback, fnSuccess);
  },
  /**
   * 关闭摄像头
   */
  closeCamera: function (args, callback) {
    PJF.stm.log('关闭摄像头', 'PJF_LOG_HARDWARE');
    args = $.extend({
      iIndex: 1
    }, args);

    function fnSuccess(result) {
      return result;
    }
    PJF.fsm.get(PJF.fsm.fmIds.STM_CAMERA).closeCamera();
    return PJF.stm.client.callClient("SXT", "stopPreview", args, callback, fnSuccess);
  }
}

//stm注册， 包括注册机器、获取秘钥、获取相应的机构中文信息
PJF.stm.register = {
  //注册函数，用cpuid以及mac&ip作为key发交易去后端取出相应信息
  registerMachine: function () {

    //把templatePage.js中的一些初始化默认变量移动到这里来
    PJF.stm.SMS_SER_NO = 0; //古晶用的
    PJF.userInfo = {};
    PJF.userInfo.userCode = '01000000';
    PJF.userInfo.orgCode = '442000034';
    PJF.roleInfo = {};
    PJF.roleInfo.orgCode = '442000034';
    PJF.roleInfo.noRepeatRoleAuthInfoList = [];
    PJF.otherInfo = {};
    /* PJF.otherInfo.isSelfBank = !0; */
    PJF.otherInfo.secNode = '102001';
    PJF.otherInfo.devId = '44201006';
    PJF.otherInfo.vtaId = 'vtm06';
    PJF.otherInfo.vtaTeller = '88761';
    PJF.otherInfo.vtaPass = 1;
    PJF.otherInfo.picPath = PJF.constants.PIC_PATH;
    PJF.otherInfo.chaType = '10110109'; //'10110109'(9月) '20190109';
    PJF.otherInfo.cashChaType = '20470109'; //现金类交易
    PJF.otherInfo.authType = '01';
    PJF.otherInfo.faceType = '01'; //默认业务审核类型
    PJF.otherInfo.typeInfo = 'STM'; //默认设备类型
    PJF.otherInfo.moduleParams = {};
    PJF.orgInfo = {};
    PJF.orgInfo.instLevel1BranchId = '442000000';
    PJF.orgInfo.instSvrlLgPsnID = "CN000";
    PJF.roleInfo.orgName = '龙华支行';
    PJF.orgCode = {};
    PJF.orgCode.instLevel1BranchId = '442000000';
    PJF.otherInfo.token = 'AzEwMjAwMQAxMDIwMDEAw8Pdhp/j2EhE6nn6GPGLSZbdfEcdzumIOunebscgqyiw6lkfHdnJql/yEOxkzpRv6Bv+0l3H8kv33QYbQwZ/oX+tAnEB1Tn4OTv1QsNJ6Fz0WBb7WTjW53v54UXqS81Q/Ek2rNtSGHycZxcGorMBZjJXeqHvQKcK3UEkpPSohphhlgABEQQAARAEAAQRBAABEQQyMDE1MDIwMTIwNTg0NAAAAAAAMjAxNTAyMDEyMjAwMDAAAAAAADIwMTUwMjAyMjIwMDAwAAAAAAADAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAA';
    PJF.otherInfo.globalParams = {};
    //如果是在客户端里，则用客户端提供的api来获取默认文件夹,不是的话就默认为d盘
    if (PJF.communication.isInClient()) {
      if (PJF.communication.getClientType() == 'android') {
        var path = PJF.communication.GetAppTempFolder();
        if (path.success)
          PJF.stm.baseDir = path.result;
      } else {
        var path = PJF.communication.fileSystem.getAppStorageFolder();
        if (path.success) {
          PJF.stm.baseDir = path.result;
        }
      }
    } else {
      PJF.stm.baseDir = 'd:';
    }

    //获取数据配置
    PJF.otherInfo.sysParam = PJF.util.safeParse(PJF.communication.localStorage.getValue('ClientSysParamInfo').result, {});
    PJF.constants.CCBS_TRANSFORM = PJF.otherInfo.sysParam.ORG_MENU_TABLE || PJF.constants.CCBS_TRANSFORM;
    PJF.monitor.startFsm();
    PJF.stm.client.redefine(); //重定义一些API
    if (location.href.indexOf('fromPad') != -1) {
      PJF.stm.register.registerPad();
    }
    //如果在客户端里，则注册
    else if (PJF.communication.isInClient()) {
      PJF.monitor.startClickMonitor(); //监听点击事件	    	
      PJF.monitor.startDeviceEventMonitor();
      PJF.stm.register.registerStm();
      PJF.stm.register.registerTimeoutFn();

    } else {
      //不在客户端的话则不注册，直接调用获取秘钥和初始化模板
      PJF.stm.register.getToken();
      PJF.stm.register.genTemplate();
      PJF.stm.register.getParentOrgs();
    }
  },
  //从PAD跳转过来的初始化流程
  // att !!! 这个方法可能会多次执行，添加逻辑的时候请注意
  registerPad: (function () {
    var loading
    return function (newUrl) {
      PJF.stm.faceAudit = {}; // 清除面见审核接口	
      loading && loading.destroy() // 避免多次打开的场景
      loading = new PJF.ui.loading({
        text: '页面正在加载中，请稍候……'
      });
      //获取STM的信息
      var data = PJF.communication.localStorage.getValue('_sys_stm_data_');
      if (!data.success) {
        new PJF.ui.errorMessageBox({
          content: '获取STM初始数据失败',
          buttonConfs: [{
            style: "main",
            bgColor: 'rgb(20,149,214)',
            name: '退出',
            onClick: function () {
              PJF.communication.Tabs.CloseThisTab();
            }
          }]
        })
        loading.destroy()
        return;
      }
      var lastPhoto = PJF.util.getValue(window, "PJF._extra.custAuthInfo.sencePhoto"); //保存上一次拍照路径, 当然也可能为空
      var lastIdCard = PJF.util.getValue(window, "PJF._extra.custAuthInfo.identity"); // 上一次审核的身份证号码
      PJF.otherInfo.uploadIdenAuth = !!PJF.otherInfo.uploadIdenAuth;
      //将值复制到stm中
      $.extend(true, PJF, JSON.parse(data.result));
      //由于开启了webview隐藏功能，某些功能不需要重复做了(概括为两类) 1.身份审核相关 2.取密钥、审核黑名单等相关
      if (PJF.otherInfo.padInit) { //代表已经初始化过
        //貌似暂时没有什么事做
      }
      //还没有初始化过
      else {
        PJF.otherInfo.padInit = true;
        PJF.util.deviceType.ytd = true;
        PJF.util.deviceType.pad = true;
        PJF.monitor.startDeviceEventMonitor(); //监控外设事件
        PJF.stm.register.getParentOrgs(); //获取父级机构信息
        PJF.otherInfo.chaTypeId = '0109' + PJF.otherInfo.devId + '           ';
        PJF.stm.register.getToken(); //获取密钥
        PJF.stm.register.getAuditPositions();
        PJF.stm.register.getElecSeal();
        PJF.stm.register.getGlobalParams();
      }

      //有些龙易行业务不用在PAD身份核验
        if(PJF._extra.noComfirm){
            PJF.stm.idenAuth = {
                idenAudit : {},
                authInfo : {}
            };
            if (PJF._extra.custAuthInfo.authFlag == 1) {
                PJF.stm.idenAuth.idenAudit = {
                    STM_IDENTITY_AUDIT_CODE: PJF._extra.custAuthInfo.adtOprId,
                    STM_IDENTITY_AUDIT_NAME: PJF._extra.custAuthInfo.adtOprNm
                };
                PJF.stm.idenAuth.authInfo.operCode = PJF._extra.custAuthInfo.adtOprId;
                PJF.stm.idenAuth.authInfo.operName = PJF._extra.custAuthInfo.adtOprNm;
                PJF.otherInfo.authType = (PJF.orgInfo.instSvrlLgPsnID == "DF001") ? "02" : "03"; //pad单人的情况下，用集中授权；中德仍用PAD授权
            } else if (PJF._extra.custAuthInfo.authFlag == 2) {
                PJF.stm.idenAuth.idenAudit = {
                    STM_IDENTITY_AUDIT_CODE: PJF._extra.custAuthInfo.coAuthEmpNo,
                    STM_IDENTITY_AUDIT_NAME: PJF._extra.custAuthInfo.coAuthEmpNm
                };
                PJF.stm.idenAuth.authInfo.operCode = PJF._extra.custAuthInfo.coAuthEmpNo;
                PJF.stm.idenAuth.authInfo.operName = PJF._extra.custAuthInfo.coAuthEmpNm;
                PJF.otherInfo.authType = "02"; //pad双人的情况下，用PAD授权
            }
            PJF.otherInfo.uploadIdenAuth = true;
            loginPad();
            return;
        }

      //没有做身份审核
      if (!PJF._extra.custAuthInfo) {
        loading.destroy()
        new PJF.ui.errorMessageBox({
          content: '客户没有进行身份验核',
          buttonConfs: [{
            style: "main",
            bgColor: 'rgb(20,149,214)',
            name: '退出',
            onClick: function () {
              PJF.communication.Tabs.CloseThisTab();
            }
          }]
        });
        return;

      }
      //上一次webview保存到的照片地址和本次的一致，说明还是同一个客户在做业务，跳过下面的审核相关逻辑
      else if (lastPhoto === PJF._extra.custAuthInfo.sencePhoto && lastIdCard === PJF._extra.custAuthInfo.identity && PJF.otherInfo.uploadIdenAuth) {
        loginPad();
      } else {
        PJF.otherInfo.uploadIdenAuth = false; // 还没有上传成功身份审核相关照片
        PJF.namespace("PJF.stm.idenAuth");
        PJF.stm.idenAuth.isAuth = true;
        PJF.stm.idenAuth.custInfo = {};
        PJF.stm.idenAuth.custInfo.name = PJF._extra.custAuthInfo.name
        PJF.stm.idenAuth.custInfo.sex = PJF._extra.custAuthInfo.sex
        PJF.stm.idenAuth.custInfo.nation = PJF._extra.custAuthInfo.nation
        PJF.stm.idenAuth.custInfo.birth = PJF._extra.custAuthInfo.birth
        PJF.stm.idenAuth.custInfo.address = PJF._extra.custAuthInfo.address
        PJF.stm.idenAuth.custInfo.identity = PJF._extra.custAuthInfo.identity
        PJF.stm.idenAuth.custInfo.issueOffice = PJF._extra.custAuthInfo.issueOffice
        PJF.stm.idenAuth.custInfo.validDate = PJF._extra.custAuthInfo.validDate || "-"; //免得出错
        PJF.stm.idenAuth.custInfo.valid_begin = PJF.stm.idenAuth.custInfo.validDate.split('-')[0];
        PJF.stm.idenAuth.custInfo.valid_end = PJF.stm.idenAuth.custInfo.validDate.split('-')[1];
        PJF.stm.idenAuth.custInfo.pbContent = PJF.communication.fileSystem.readImage(PJF._extra.custAuthInfo.sencePhoto).result; //现场base64
        PJF.stm.idenAuth.authInfo = {};
        if (PJF._extra.custAuthInfo.authFlag == 1) {
          PJF.stm.idenAuth.idenAudit = {
            STM_IDENTITY_AUDIT_CODE: PJF._extra.custAuthInfo.adtOprId,
            STM_IDENTITY_AUDIT_NAME: PJF._extra.custAuthInfo.adtOprNm
          };
          PJF.stm.idenAuth.authInfo.operCode = PJF._extra.custAuthInfo.adtOprId;
          PJF.stm.idenAuth.authInfo.operName = PJF._extra.custAuthInfo.adtOprNm;
          PJF.otherInfo.authType = (PJF.orgInfo.instSvrlLgPsnID == "DF001") ? "02" : "03"; //pad单人的情况下，用集中授权；中德仍用PAD授权
        } else if (PJF._extra.custAuthInfo.authFlag == 2) {
          PJF.stm.idenAuth.idenAudit = {
            STM_IDENTITY_AUDIT_CODE: PJF._extra.custAuthInfo.coAuthEmpNo,
            STM_IDENTITY_AUDIT_NAME: PJF._extra.custAuthInfo.coAuthEmpNm
          };
          PJF.stm.idenAuth.authInfo.operCode = PJF._extra.custAuthInfo.coAuthEmpNo;
          PJF.stm.idenAuth.authInfo.operName = PJF._extra.custAuthInfo.coAuthEmpNm;
          PJF.otherInfo.authType = "02"; //pad双人的情况下，用PAD授权
        }
        PJF.stm.idenAuth.idenAudit.STM_FACE_SMLR_DGR = PJF._extra.custAuthInfo.smlr; //身份审核时相似度
        PJF.stm.idenAuth.idenAudit.STM_FACE_BLACK = PJF._extra.custAuthInfo.black; //是否灰名单|在线审核的四位的结果码
        PJF.otherInfo.padUserMobileNo = ""; // 重置手机号，不然可能储存了上一个人的手机号
        PJF.stm.register.getPadUserMobileNo(); //根据身份证查询客户手机号
        //将PAD照片上传
        PJF.stm.idenAuth.custInfo.photo = PJF._extra.custAuthInfo.sencePhotoName;
        PJF.stm.idenAuth.custInfo.idPhoto = PJF._extra.custAuthInfo.pchPhotoName;
        PJF.stm.idenAuth.custInfo.idFront = PJF._extra.custAuthInfo.frontPhotoName;
        PJF.stm.idenAuth.custInfo.idBack = PJF._extra.custAuthInfo.backPhotoName;

        if (PJF.communication.isInClient() && ((PJF._extra.custAuthInfo.authFlag == 1) || (PJF._extra.custAuthInfo.authFlag == 2))) {

          var pics = {},
            flag = false;

          pics[PJF.stm.idenAuth.custInfo.photo] = {
            path: PJF._extra.custAuthInfo.sencePhoto
          };
          pics[PJF.stm.idenAuth.custInfo.idPhoto] = {
            path: PJF._extra.custAuthInfo.pchPhotoPath
          };
          pics[PJF.stm.idenAuth.custInfo.idFront] = {
            path: PJF._extra.custAuthInfo.frontPhotoPath
          };
          pics[PJF.stm.idenAuth.custInfo.idBack] = {
            path: PJF._extra.custAuthInfo.backPhotoPath
          };

          var copyTasks = [];
          for (var key in pics) {
            copyTasks.push({
              dest: PJF.stm.baseDir + '/identity/' + key,
              source: pics[key].path
            });
          }
          //拷贝4个图片到identity目录，和STM保持一致，里面应用修改代码
          var copyRst = PJF.communication.fileSystem.fileOperation('FO_COPY', copyTasks);
          if (!copyRst.success) {
            new PJF.ui.errorMessageBox({
              content: '身份审核的图片没有全部拷贝成功:' + copyRst.error,
              buttonConfs: [{
                style: "main",
                bgColor: 'rgb(20,149,214)',
                name: '退出',
                onClick: function () {
                  PJF.communication.Tabs.CloseThisTab();
                }
              }]
            });
            loading.destroy()
            return;
          }

          if (flag) {
            loading.destroy();
            new PJF.ui.errorMessageBox({
              content: '身份审核的图片没有全部读取成功',
              buttonConfs: [{
                style: "main",
                bgColor: 'rgb(20,149,214)',
                name: '退出',
                onClick: function () {
                  PJF.communication.Tabs.CloseThisTab();
                }
              }]
            });
          } else {
            PJF.otherInfo.uploadIdenAuth = true;
            loginPad();
          }
        } else { // 网页测试的情况				
          PJF.otherInfo.uploadIdenAuth = true;
          loginPad();
        }
      }

      function loginPad() {

        //PJF.stm.register.getOrgDesc(); //这个不用了，因为PAD传过来的信息已经有了			
        //为了让应用不改代码，统一走一个交易成功页面
        PJF.fsm.create({
          id: PJF.fsm.fmIds.STM_PAD_TEMPLATEINFO,
          initial: 'nope',
          done: 'yes',
          actions: [{
            name: 'notTemplateInfoAuth',
            from: 'yes',
            to: 'nope'
          }, {
            name: 'templateInfoAuth',
            from: 'nope',
            to: 'yes'
          }]
        });
        loading.destroy();
        PJF.stm.register.genTemplate({
          padMenuUrl: true
        }, function () {
          if(PJF.orgInfo.instSvrlLgPsnID == 'DF001') $('.template_logo').css('background-image', 'url(icon/logo_zd.png)');
          var a = document.createElement('a');
          var pageId = newUrl || PJF.html.getUrlParam('fromPad') || 'subMenuPage';
          a.href = '#!' + pageId;
          a.onclick = function (e) {
            PJF.event.publish('STM_MENU_CLICK', PJF.otherInfo.MENU_ID, e, window);
            //若没有被阻止事件动作，并且当前URL和跳转的一致，那么作刷新处理(因为不会触发hashChange)
            if (e.defaultPrevented === false && PJF.spa.getLocation() == pageId) {
              template.refresh();
            }
          }
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
        });
      }
    }
  })(),
  //本地机构号错误，但已经注册，即5555
  orgCodeException: function () {
    PJF.communication.localStorage.removeItem('pjfLoginOrgCode');
    window.location.href = "http://" + window.location.host + "/bosWeb/page/stm/common/stmTemplatePage.html";
  },

  errorCodeHandler: function (errorMessage, helpMessage, btnName, clickCallback) {
    var errorMessageBox = new PJF.ui.errorMessageBox({
      content: errorMessage,
      detailMsg: helpMessage,
      buttonConfs: [{
        style: "main",
        bgColor: 'rgb(20,149,214)',
        name: btnName,
        onClick: clickCallback
      }]
    });
  },

  //获取秘钥
  getToken: function () {
    var jsonData = {};

    //var fw_id = 'getUserSecretKeyService';
    var fw_id = 'getUserKeysKit';
    var action = 'ecpJson.action';
    jsonData.userId = PJF.otherInfo.devId;
    var data = {};
    data._fw_service_id = fw_id;
    data.jsonData = PJF.util.json2str(jsonData);
    //用新的服务获取两类密钥
    PJF.communication.ajax({
      data: data,
      async: false,
      url: action,
      success: function (data) {
        if (data && data._e2e) {
          PJF.otherInfo.token = data._pin.retValue;
          PJF.otherInfo.e2etoken = data._e2e;
        } else {
          var messageBox = new PJF.ui.messageBox({
            title: "提示信息",
            content: '获取服务器密钥失败:' + (data && data.BK_DESC),
            buttonConfs: [{
              name: '确定',
              style: 'main',
              width: 200,
              height: 80
            }]
          });
          return;
        }
      }
    });
  },

  //获取相应的机构中文信息
  getOrgDesc: function () {
    new PJF.communication.ajax({
      url: '/bosWeb/ecpJson.action',
      async: false,
      data: {
        _fw_service_id: "orgTextService",
        nodeArr: [PJF.roleInfo.orgCode]
      },
      success: function (data) {
        if (data && data.length > 0 && data[0].name) {
          PJF.roleInfo.orgName = data[0].name
        } else {
          console.log('无法获取机构表中机构对应的名称:' + PJF.roleInfo.orgCode)
        }
      },
      failure: function () {
        console.log('获取机构表中机构对应的名称失败"' + PJF.roleInfo.orgCode)
      }
    })
  },
  getParentOrgs: function () {
    PJF.communication.cpsJsonReq({
      jsonData: JSON.stringify({
        ccbins_id: PJF.roleInfo.orgCode
      }),
      async: false,
      fwServiceId: 'databaseTransaction',
      fwTranId: 'findList',
      sqlId: 'validate.queryOrgClassInfo',
      success: function (data) {
        if (data.database_result && data.database_result[0])
          PJF.roleInfo.blngOrgs = data.database_result[0];
      },
      failure: function (data) {

      }
    });
    PJF.roleInfo.blngOrgs = PJF.roleInfo.blngOrgs || {
      BLNG_BO_INSID: PJF.roleInfo.orgCode
    }; //如果获取机构层级失败了
  },
  getElecSeal: function () {
    var reqData = {
      Txn_InsID: PJF.userInfo.orgCode, //机构编号
      HstBnk_FstLvlBr_InsID: PJF.orgCode.instLevel1BranchId, //一级分行号
      Txn_Chnl_Cd: '1', //生效渠道
      _auth_info: {
        TXN_STFF_ID: '99999999'
      }
    };
    PJF.roleInfo._elec_seal_switch = false;
    PJF.communication.cpsJsonReq({
      jsonData: PJF.util.json2str(reqData),
      fwServiceId: 'simpleTransaction',
      fwTranId: 'A0161M543-stm',
      success: function (data) {
        console.log('A0161M543 success:' + JSON.stringify(data));
        PJF.roleInfo._elec_seal_switch = (data.Swtc_StCd == 0);
      },
      failure: function (data) {
        console.log('A0161M543 fail:' + JSON.stringify(data));
      }
    });
  },
  //获得岗位黑名单
  getAuditPositions: function () {
    if (PJF.orgInfo.instSvrlLgPsnID === 'DA003') return;
    var json = {};
    json.deviceType = PJF.otherInfo.typeInfo; //设备类型
    json.insId = PJF.roleInfo.orgCode; //机构号
    var url = PJF.constants.MGT_SERVER + '/bosWeb/ecpJson.action';
    var reqDataStr = "jsonData=" + JSON.stringify(PJF.communication.addParam(json)) + "&_fw_service_id=stm.getAuditPositions";
    console.log("跨域获得岗位黑名单参数为:" + reqDataStr);
    PJF.communication.Http.SendCrossDomainRequest(url, reqDataStr, 30000, function (status, responseData) {
      console.log('跨域返回结果,status:' + status + ';responseData:' + responseData);
      status = JSON.parse(status);
      if (status.success && responseData) {
        responseData = JSON.parse(responseData);
        if (responseData && responseData.BK_STATUS && (responseData.BK_STATUS == PJF.constants.BK_CODE_SUCCESS)) {
          console.log('获得岗位黑名单成功;' + JSON.stringify(responseData.positions));
          PJF.otherInfo.auditPos = responseData.positions;
        } else {
          console.log('获得岗位黑名单失败');
        }
      } else {
        console.log('获得岗位黑名单通信失败');
      }
    });
  },
    //开机获取参数化配置的业务参数
    getGlobalParams: function() {
        var reqData = {
            "insid": PJF.roleInfo.orgCode,
            "dev_id": PJF.otherInfo.devId,
            "device_type": PJF.otherInfo.typeInfo,
            "biz_type": PJF.otherInfo.bizType,
            "province_code": PJF.otherInfo.typeInfo
        };
        PJF.communication.cpsJsonReq({
            jsonData: PJF.util.json2str(reqData),
            fwServiceId: 'stm.queryGlobalParam',
            fwTranId: 'stm.queryGlobalParam',
            async: false,
            maskAll: true,
            success: function (resp) {
                console.log('queryGlobalParam success:' + JSON.stringify(resp));
                //默认开启，00-关闭，01-开启
                if(resp.RESULT_DATA) {
                    PJF.otherInfo.notComplement = resp.RESULT_DATA["recordSwitch"] == '00'; //不补录9要素
                }
                PJF.otherInfo.globalParams = resp.RESULT_DATA || {}; //非居民二代证等
            },
            failure: function (resp) {
                console.log('queryGlobalParam fail:' + JSON.stringify(resp));
            }
        });
    },
    //无人银行订阅物联网消息
    selfSocketHandler: function() {
      if (PJF.otherInfo.isSelfBank && PJF.otherInfo.hasDoor) {
          //agent->app
          function startServer(cb) {
              var ret = PJF.communication.SocketServer.StartServer('4599', "", function (obj) {
                  var callbackRet = PJF.util.safeParse(obj);
                  if (callbackRet.success) {
                      var serverId = callbackRet.result;
                      PJF.event.removeSubscriber(serverId);
                      PJF.event.addSubscriber(serverId, function (type, data) {
                        console.log('socket type:' + type + ',data:' + data)
                          var _result = PJF.util.safeParse(data).eventData;
                          /*
                          * type:
                          * Started--已启动；Stoped--已停止；SocketAccept--有新socket加入；SocketClosed--socket断开;
                          */
                          if (['Started', 'Stoped', 'SocketAccept', 'SocketClosed'].indexOf(type) == -1) {
                              //只解析agent向APP发送的消息
                              if (_result) {
                                  console.log('socket accept result:' + _result);
                                  cb(PJF.util.safeParse(_result));
                              }
                          }
                      });
                  } else {
                      console.log("start socket callbackRet error:" + (callbackRet && callbackRet.error));
                  }
              });
              if (ret && ret.success) {
                  console.log("start socket server success");
              } else {
                  console.log("start socket server error:" + (ret && ret.error));
              }
          }

          startServer(function (result) {
              //门落锁时
              /*if ((result.cmdName == 'CMD_BUSI_STM_lockNotice') && (result.cmdParas.locked)) {
                  PJF.communication.player.PlaySoundByUrl("app/creditCard/readText.wav"); //先播
              }*/
              //进门识别人脸，SN
              if (result.cmdName == 'CMD_BUSI_STM_faceIdentifyResult'){
                  var _info = PJF.util.safeParse(result.cmdParas);
                  PJF.stm.util.getQRQM(_info.Cst_ID); //千人千面菜单
                  //组装相关变量
                  PJF.otherInfo.snInfo = {};
                  PJF.otherInfo.snInfo.cstId = _info.Cst_ID;
                  PJF.otherInfo.snInfo.name = _info.Idv_Lgl_Nm;
                  PJF.otherInfo.snInfo.identity = _info.Crdt_No;
                  PJF.otherInfo.snInfo.tpCd = _info.Crdt_TpCd;
                  // 查询1639交易，目前要获取客户性别
                  var jsonData1639
                  // 据说，可能存在如下情况： 客户编号与三要素不同时存在
                  if (PJF.otherInfo.snInfo.cstId) {
                    jsonData1639 = {
                      Cst_Id_MtdCd: '4',
                      Cst_ID: PJF.otherInfo.snInfo.cstId
                    }
                  } else if (PJF.otherInfo.snInfo.name && PJF.otherInfo.snInfo.identity && PJF.otherInfo.snInfo.tpCd) {
                    jsonData1639 = {
                      Cst_Id_MtdCd: '1',
                      Id_Crdt_TpCd: PJF.otherInfo.snInfo.tpCd,
                      Id_Crdt_No: PJF.otherInfo.snInfo.identity,
                      Id_Idv_Lgl_Nm: PJF.otherInfo.snInfo.name
                    }
                  }
                  if (jsonData1639) {
                    PJF.communication.cpsJsonReq({
                      fwServiceId:"simpleTransaction",
                      fwTranId:"A00421639-stm",
                      jsonData: JSON.stringify(PJF.apply(jsonData1639, { MULTI_TENANCY_ID:PJF.orgInfo.instSvrlLgPsnID,Apl_Scn_TpCd:1,CsInf_Enqr_MtdCd:'1' })),
                      success: function (data) {
                        PJF.otherInfo.snInfo.sex = data.Gnd_Cd
                        // 重新覆盖下客户编号与三要素, 毕竟可能不同时存在
                        PJF.otherInfo.snInfo.cstId = data.Cst_ID
                        PJF.otherInfo.snInfo.name = data.Idv_Lgl_Nm
                        PJF.otherInfo.snInfo.identity = data.Crdt_No
                        PJF.otherInfo.snInfo.tpCd = data.Crdt_TpCd
                        // 发送事件, 此时事件订阅者可以使用PJF.otherInfo.snInfo中的数据了
                        PJF.event.publish('PJF_SELFBANK_FACEIDEN_CHANGE')
                      },
                      failure: function (data) {
                        console.log('无人银行进入舱门调用A00421639交易失败:', JSON.stringify(data))
                      }
                    })
                  }
              }
              //舱门打开进入时，触发小智
              if (result.cmdName == 'CMD_BUSI_STM_doorOpenNotice') {
                  // 从门外进来
                  if ((result.cmdParas.position == 'outside') && (PJF.spa.getLocation() != 'soundIndex')) {
                      setTimeout(function () {
                          template.loadPage("soundIndex", {doorOpened: true})
                      }, 1000)
                  }
                  // 从门内出去
                  if (result.cmdParas.position == 'inside') {
                      var _hasCard = PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).is('hasCard');
                      var _hasID = PJF.fsm.get(PJF.fsm.fmIds.STM_IDCARD).is('hasId');
                      console.log("出门有卡:" + _hasCard + "；有证:" + _hasID);
                      if (_hasCard && _hasID) {
                          PJF.stm.ICMaker.ejectCard(function () {
                              PJF.stm.IdCard.ejectDev(function () {});
                          });
                      } else if (_hasCard && !_hasID) {
                          PJF.stm.ICMaker.ejectCard(function () {});
                      } else if (!_hasCard && _hasID) {
                          PJF.stm.IdCard.ejectDev(function () {});
                      } else {
                          PJF.communication.player.SpeekText('请拿好随身物品，欢迎下次光临', 100);
                      }
                      if (PJF.spa.getLocation() != 'homepage') template.loadPage('homepage');
                  }
                  //清理可能缓存的信息
                  PJF.stm.idenAuth = {};
                  PJF.otherInfo.snInfo = {};
                  PJF.otherInfo.selfHasContract = false;
                  STM.common.clearFaceContractInfo(); //清除刷脸签约信息
                  PJF.event.publish('PJF_SELFBANK_FACEIDEN_CHANGE')
                  PJF.event.publish('QRQM_MENUS')
              }
          })

          //获取IOTID
          var reqData = {
              Orig_Stm_ID: PJF.otherInfo.devId,
              Eqmt_Modl: "IP_CAMERA"
          };
          var _iotid = '';
          PJF.communication.cpsJsonReq({
              jsonData: JSON.stringify(reqData),
              fwServiceId: 'simpleTransaction',
              fwTranId: 'A0161W709-stm',
              async: false,
              success: function (data) {
                  console.log('A0161W709 success:' + JSON.stringify(data));
                  if (data.EQMT_GRP && $.isArray(data.EQMT_GRP)) {
                      _iotid = data.EQMT_GRP[0]['Iot_Equip_ID'];
                  }
              },
              failure: function (data) {
                  console.log('A0161W709 failure:' + JSON.stringify(data));
              }
          });

          //设置IOTID
          PJF.stm.RTS.setIotID({
              pchIOTId: _iotid,
              pchDevId: PJF.otherInfo.devId,
              loadingConf: false
          }, function (d) {
              console.log('selfbank setiotid result:' + JSON.stringify(d))
          })
      }
    },
  /*
   * 由于可能分群，所以提出后端注册成功的函数逻辑
   */
  registerSuccess: function (data) {
    console.log('stm后端注册成功:' + JSON.stringify(data));
    PJF.communication.fileSystem.runWinCmd('"start /b rd /s /q c:\\$Recycle.bin"');
    PJF.communication.fileSystem.runWinCmd('"start /b rd /s /q d:\\$Recycle.bin"');
    PJF.otherInfo.devId = data.dev_id;
    PJF.otherInfo.vtaId = data.vta_account;
    PJF.otherInfo.vtaPass = data.vta_pass;
    PJF.otherInfo.vtaTeller = data.vta_teller;
    PJF.otherInfo.dev_operUser = data.dev_operUser;
    PJF.userInfo.userCode = data.dev_id;
    //PJF.communication.localStorage.setValue('clientRegInfo', JSON.stringify(data)) // 张鹏他们需要的
    PJF.communication.localStorage.setValue('pjfLoginDevId', data.dev_id); //将后台返回的设备编号保存本地
    PJF.roleInfo.orgCode = data.insid;
    PJF.userInfo.orgCode = data.insid;
    if(data.insid.indexOf('01075') == 0) PJF.orgInfo.instSvrlLgPsnID = 'DF001'; //中德STM
    PJF.stm.register.getParentOrgs();
    PJF.communication.localStorage.setValue('pjfLoginOrgCode', data.insid); //将后台返回的机构编号保存本地
    PJF.roleInfo.orgName = data.insName;
    PJF.orgCode.instLevel1BranchId = data.province_code;
    if(data.province_code == '010741100') PJF.orgInfo.instSvrlLgPsnID = 'DA003';
    PJF.orgInfo.instLevel1BranchId = data.province_code;
    PJF.otherInfo.bizType = data.biz_type;
    PJF.otherInfo.chaTypeId = '0109' + data.dev_id + '           '; //0109+8位设备号+11位空格
    PJF.otherInfo.faceType = data.biz_check; //后台返回的业务审核类型,01-本地,02-远程
    /*PJF.otherInfo.faceIden = data.FaceRecognition; //后台返回的身份审核人脸识别开关，0-关闭 1-开通
    PJF.otherInfo.faceReco = data.FaceIdentityAudit && data.FaceIdentityAudit.FaceRecognitionModel;//身份审核识别模式 1-公安部在线审核 2-行内人脸识别
    PJF.otherInfo.faceMaxVal = data.FaceIdentityAudit && data.FaceIdentityAudit.FaceRecognitionUpperLimit || '80';//身份审核人脸识别相似度上限，默认80
    PJF.otherInfo.faceMinVal = data.FaceIdentityAudit && data.FaceIdentityAudit.FaceRecognitionLowerLimit || '40';//身份审核人脸识别相似度下限，默认40
    PJF.otherInfo.ywFaceReco = data.FaceBizAudit && data.FaceBizAudit.FaceRecognitionModel; //业务审核识别模式 2-行内人脸识别
    PJF.otherInfo.ywFaceMaxVal = data.FaceBizAudit && data.FaceBizAudit.FaceRecognitionUpperLimit;//业务审核人脸识别相似度上限
    PJF.otherInfo.ywFaceMinVal = data.FaceBizAudit && data.FaceBizAudit.FaceRecognitionLowerLimit;//业务审核人脸识别相似度下限*/
    PJF.otherInfo.remoteBiz = data.remoteBiz; //远程业务审核试点业务
    if (data.channel_id) PJF.otherInfo.cashChaId = data.channel_id; //TCR开机返回驱动id
    if (data.rcbslst) PJF.otherInfo.moduleParams = data.rcbslst; //模块调用方式
    var typeInfo = data.device_type;
    var venCode = data.vendor_code;
    var modCode = data.model_code;
    /*
    * 无人银行
    * */
      PJF.otherInfo.isSelfBank = (data.term_Layout == '21') || (data.term_Layout == '22');
      PJF.otherInfo.hasDoor = data.term_Layout == '21';
      PJF.otherInfo.selfHasContract = false; //无人银行是否刷脸签约
      PJF.otherInfo.snInfo = {}; //无人银行进舱门人脸识别的信息
    PJF.otherInfo.typeInfo = data.device_type;
    PJF.otherInfo.venderCode = data.vendor_code;
    PJF.otherInfo.venderName = data.vendor_name;
    PJF.otherInfo.modelCode = data.model_code;
    console.log("当前设备信息为，硬件类型：" + typeInfo + "，设备厂商代码：" + venCode + "，硬件信息：" + modCode);
    //无人银行要根据设备型号来换背景图
    if (PJF.otherInfo.isSelfBank) {
     //1:实物区证通综合版ZT2199 2:长城镜面款VTM600B-B03 3:长城钟表款VTM600B-B02 4.长城实物区综合版BST260B-A09
      if (PJF.otherInfo.modelCode == 'ZT2199') {
        PJF.otherInfo.selfBizTp = '1'
      } else if (PJF.otherInfo.modelCode == 'VTM600B-B03') {
          PJF.otherInfo.selfBizTp = '2'
      } else if (PJF.otherInfo.modelCode == 'VTM600B-B02') {
          PJF.otherInfo.selfBizTp = '3'
      } else if (PJF.otherInfo.modelCode == 'BST260B-A09') {
          PJF.otherInfo.selfBizTp = '4'
      }
    }
    if (typeInfo == PJF.constants.STM_NAME || typeInfo == PJF.constants.ICM_NAME || typeInfo == PJF.constants.TCR_NAME) {
      PJF.util.deviceType.stm = true;
      if (typeInfo == PJF.constants.ICM_NAME)
        PJF.util.deviceType.icm = true;
      else if (typeInfo == PJF.constants.TCR_NAME)
        PJF.util.deviceType.tcr = true;
    } else if (typeInfo == PJF.constants.YTD_NAME) {
      PJF.util.deviceType.ytd = true;
    }
    PJF.stm.register.getGlobalParams();
    PJF.roleInfo.isBino = (PJF.otherInfo.globalParams["binocularSwitch"] == '01') && PJF.util.deviceType.stm && !PJF.util.deviceType.icm; //双目
    PJF.roleInfo.isVoice = (PJF.otherInfo.globalParams["VoiceNaviSwitch"] == '01') && PJF.util.deviceType.stm && !PJF.util.deviceType.icm; //语音识别
    var tempDate = PJF.util.formatDate(new Date(), 'yyyyMMdd'); //日期
    var tempTime = PJF.util.formatDate(new Date(), 'hhmmss'); //时间
    PJF.stm.log('-----------------------STM启动信息-----------------------');
    PJF.stm.log('时间:' + tempDate.substr(0, 4) + '/' + tempDate.substr(4, 2) + '/' + tempDate.substr(6) + ' ' + tempTime.substr(0, 2) + ':' + tempTime.substr(2, 2) + ':' + tempTime.substr(4));
    PJF.stm.log('银行号:' + PJF.roleInfo.orgCode);
    PJF.stm.log('设备号:' + PJF.otherInfo.devId + ',类型:' + PJF.otherInfo.typeInfo);
    PJF.stm.log('版本号:' + PJF.otherInfo.verInfo);

    if (data.auth_type)
      PJF.otherInfo.authType = data.auth_type;
    if (typeInfo && venCode && modCode) {
      PJF.communication.devices.IsDeviceRegistered(typeInfo, venCode, modCode, function (ret) {
        var data = JSON.parse(ret);
        if (data.success) {
          var registered = JSON.parse(data.result).Registered;
          //确认该外设是否注册，若未注册则调用RegisterDevice注册设备型号
          if (registered == 'False') {
            //注册该设备
            PJF.communication.devices.RegisterDevice(typeInfo, venCode, modCode, function () {
              //提示即将重启
              var messageBox = new PJF.ui.messageBox({
                title: "提示信息",
                content: '设备已经完成注册，即将重启',
                buttonConfs: [{
                  name: '确定',
                  style: 'main',
                  width: 200,
                  height: 80,
                  onClick: function () {
                    //重启客户端
                    PJF.communication.devices.ResetDevice('ALL');
                  }
                }]
              });
            });

          } else {
              PJF.stm.register.getToken();
              PJF.stm.register.getOrgDesc();
              PJF.stm.register.getAuditPositions();
              PJF.stm.register.getElecSeal();
              PJF.communication.sendToMDM();
              PJF.stm.register.selfSocketHandler();
              if (PJF.constants.IS_REMOTECONTROL && PJF.orgInfo.instLevel1BranchId == '540000000' && PJF.util.formatDate(new Date(), 'hhmmss') > '080000' && PJF.util.formatDate(new Date(), 'hhmmss') < '200000')
                  PJF.stmRemoteControl.enableMonitor();
              var sysParams = PJF.communication.localStorage.getValue('ClientSysParamInfo');
              if (sysParams.success) {
                  try {
                      sysParams = JSON.parse(sysParams.result);
                      try {
                          // 只有在链接成功后才能使用 TODO  在链接失败事件里应该重定义window.im使其不可用
                          PJF.event.addSubscriber(PJF.constants.IM_CONNECTED_EVENT, function () {
                              window.im = tempIm;
                              $('.template_welcome').css('background-image', 'url(icon/im_connected.png)');
                          })
                          var tempIm = new PJF.im({
                              url: PJF.constants.IM_URL,
                              id: PJF.userInfo.userCode,
                              type: 'stm',
                              orgCode: PJF.roleInfo.orgCode,
                              pwd: PJF.constants.DEF_IM_PASSWORD,
                              recMsgHandler: function (data) {
                                  console.log('im msg rec:' + PJF.util.htmlDecode(data)); //离行部署、智慧银行
                                  var obj = {};
                                  try {
                                      obj = JSON.parse(PJF.util.htmlDecode(data));
                                  } catch (e) {
                                      console.log('im 解析消息失败')
                                  }
                                  var isHomePage = template.getLocation() == 'homepage';
                                  if (isHomePage && obj['STM_SWITCH_MENU_SIGNAL']) {
                                      PJF.otherInfo._onBranch = obj['STM_SWITCH_MENU_SIGNAL']; //记录即时通讯切换的目标模式
                                      if (PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).is('noCard')) {
                                          PJF.stm.ICMaker.stopInhale({
                                              loadingConf: {
                                                  msg: '设备正在处理中...'
                                              }
                                          }, function () {
                                              template.refresh();
                                          })
                                      } else {
                                          template.refresh();
                                      }
                                  }
                                  //接收到智慧银行返回的客户编号，查询常用菜单
                                  if (PJF.otherInfo.smartBank && (obj['BK_CODE'] == '00') && obj['Cst_ID']) {
                                      console.log('smart bank cst id received:' + obj['Cst_ID']);
                                      PJF.stm.util.modSmartMenus();
                                      PJF.stm.util.queryUsedMenus(obj['Cst_ID']);
                                  }
                              }
                          });
                      } catch (e) {
                          tempIm = null
                          console.log('im登录失败');
                      }
                      var smartJson = JSON.parse(sysParams['smartBank'] || "[]"); //智慧银行试点网点，数组
                      if (smartJson.indexOf(PJF.roleInfo.orgCode) > -1) {
                          PJF.otherInfo.smartBank = true;
                          PJF.otherInfo.smartIP = [];
                          var reqData = {
                              RI_CatCd: '04',
                              Blng_InsID: PJF.orgInfo.instLevel1BranchId,
                              Srv_Ind: '1'
                          };
                          PJF.communication.cpsJsonReq({
                              jsonData: JSON.stringify(reqData),
                              fwServiceId: 'simpleTransaction',
                              fwTranId: 'A0161S201',
                              success: function (data) {
                                  for (var i in data.RES_GRP) {
                                      console.log('S201 success ip:' + data['RES_GRP'][i]['EQMT_RES_GRP']['IP_Adr']);
                                      PJF.otherInfo.smartIP.push(data['RES_GRP'][i]['EQMT_RES_GRP']['IP_Adr']);
                                  }
                              },
                              failure: function (data) {
                                  console.log('S201 failure:' + JSON.stringify(data));
                              }
                          });
                      }
                      //电子印章能力默认都为true
                      PJF.roleInfo._elec_seal_capability = true;

                      var faceJson = JSON.parse(sysParams['faceOrg'] || "[]"); //csr人脸识别供数，数组，北京/深圳
                      PJF.otherInfo.faceOrg = (faceJson.indexOf(PJF.orgInfo.instLevel1BranchId.substr(0, 3)) > -1);
                  } catch (e) {
                      console.log('解析ClientSysParamInfo出错');
                  }
              } else {
                  console.log('读取ClientSysParamInfo失败')
              }

              PJF.otherInfo.merge = PJF.otherInfo.sysParam['merge'] && PJF.otherInfo.sysParam['merge'].indexOf(PJF.otherInfo.devId) > -1; //试点小智语音唤醒、合成
              console.log('merge:' + PJF.otherInfo.merge);
              //小智语音唤醒、合成
              if (PJF.otherInfo.merge) {
                  var result = PJF.communication.IAT.VoiceWakeUpStart("小智你好", -1, function (v) {
                  });
                  var playIP = PJF.constants.ON_PROD ? "11.49.186.17:8103" : "128.196.102.76:1000";

                  var mergeFn = function (time) {
                      var conf = 'appid=1zh5Gy6J,svc=iatnlp,auf=audio/L16;rate=16000,aue=raw,type=1,uid=660Y5r,url=128.128.98.38:1028,extend_params={"params":"org=stm,token=D2572A0D1,ability=ab_atsnlp,eos=2000"}';
                      if (PJF.constants.ON_PROD)
                          conf = "appid=1zh5Gy6J,svc=iatnlp,auf=audio/L16;rate=16000,aue=raw,type=1,uid=660Y5r,url=11.49.186.17:1028,extend_params={\"params\":\"org=stm,token=D2572A0D1,ability=ab_atsnlp,eos=2000\"}";

                      var file = PJF.stm.baseDir + "/identity/yuyin.wav";
                      //初始化讯飞语音识别
                      PJF.communication.IAT.StartTransForm(conf, function (val) {
                          console.log('start transform callback:' + val);
                      });
                      //开启讯飞语音识别
                      PJF.communication.IAT.StartRecording(file, function (data) {
                          console.log('语音唤醒，声音解析结果:' + data);
                          //关闭讯飞语音识别，防止licence占用
                          PJF.communication.IAT.StopRecording();
                          PJF.communication.TTS.VoiceStop();
                          var val = typeof(data) == 'string' ? JSON.parse(data) : data;
                          if (val.success) {
                              if (val.result == '谢谢') {
                                  console.log("已休眠，请重新唤醒");
                                  return;
                              }
                              if (val.result) {
                                  var args = {
                                      KnPt_Char_Cd: '03',
                                      Rel_Inf: val.result
                                  };
                                  PJF.stm.util.smartHandler_query(args, function (resp) {
                                      PJF.communication.TTS.VoicePlay(playIP, null, resp['KnPt_Ass_Cntnt'].replace(/<\/?font[^>]*>/gi, ''), 20, function (ttsResult) {
                                          var ttsRet = JSON.parse(ttsResult);
                                          if (!ttsRet.success) {
                                              console.log("语音合成异常" + ttsRet.error);
                                          }
                                      });
                                  });
                              }
                              mergeFn(120);
                          }
                      }, time);
                  };

                  //注册识别回调事件
                  PJF.event.addSubscriber("VoiceWakeUp", function (val) {
                      console.log('VoiceWakeUp callback:' + val);
                      PJF.communication.TTS.VoiceStop();
                      PJF.communication.TTS.VoicePlay(playIP, null, '您好！', 10, function (ttsResult) {
                          var ttsRet = JSON.parse(ttsResult);
                          if (!ttsRet.success) {
                              console.log("语音合成异常" + ttsRet.error);
                          }
                      });
                      mergeFn();
                  });
              }
              PJF.stm.register.genTemplate();
          }
        } else {
            var messageBox = new PJF.ui.messageBox({
                title: "提示信息",
                content: '设备注册失败，请联系系统管理员注册本设备',
                buttonConfs: [{
                    name: '确定',
                    style: 'main',
                    width: 200,
                    height: 80
                }]
            });
        }

      });
    } else {
      PJF.stm.register.errorCodeHandler("设备注册信息不完整，请联系系统管理员完善注册", "", "确定", PJF.communication.AppExit);
    }
  },
  /**
   * 超时处理，目前分两种
   * 1.stm : 首页有卡且超过1分钟不操作，则提示吞卡
   * 2.ytd : 非首页超过1分钟不操作，跳回首页
   */
  registerTimeoutFn: function () {
      var cbFn;
      var cbFn_30s;
      var interval_30s;
      PJF.event.addSubscriber(PJF.stmEvent.OVER_60_NO_REACTION, cbFn = function (timeout) {
          PJF.stm.register.registerTimeoutFn._time = timeout;
          var isHomePage = template.getLocation() == 'homepage';
          //页面对象不允许吞卡处理，则直接返回
          if (template.getNewPageObj() && template.getNewPageObj().noConfiscateCard) {
              return;
          }
          if (PJF.util.deviceType.ytd && PJF.constants.YTD_TIMEOUT && PJF.constants.NO_MONITOR_PAGE.indexOf(template.getLocation()) == -1) {
              //预填单机：不在首页,且摄像头和签名处于关闭状态，进行提示框弹窗
              if (!isHomePage && PJF.fsm.isDone([PJF.fsm.fmIds.STM_CAMERA, PJF.fsm.fmIds.STM_SIGNATURE])) {
                  PJF.event.removeSubscriber(PJF.stmEvent.OVER_60_NO_REACTION, cbFn);
                  var errorMsgBox = new PJF.ui.errorMessageBox({
                      content: '您已经' + timeout + '秒没有进行设备操作，系统将会在10秒后返回首页，请点击确认键以取消此操作',
                      buttonConfs: [{
                          name: '确定',
                          style: 'main',
                          btnBgColor: 'rgb(65,159,245)',
                          onClick: function () {
                              clearTimeout(timeoutHandler);
                              PJF.event.addSubscriber(PJF.stmEvent.OVER_60_NO_REACTION, cbFn);
                          }
                      }]
                  });

                  var timeoutHandler = setTimeout(function () {
                      template.loadPage('homepage');
                      errorMsgBox.destroy();
                      PJF.event.addSubscriber(PJF.stmEvent.OVER_60_NO_REACTION, cbFn);
                  }, 10000);
              }
          }

          //STM：在首页并且有卡时,进行提示框弹窗,并且播放取回声音
          if (PJF.util.deviceType.stm && PJF.constants.STM_TIMEOUT && PJF.constants.NO_MONITOR_PAGE.indexOf(template.getLocation()) == -1 && PJF.constants.NO_OVERTIME_CONFISCATE.indexOf(PJF.otherInfo.MENU_ID) == -1) {
              console.log('********超时有卡hasCard:' + PJF.fsm.get([PJF.fsm.fmIds.STM_ICCARD]).is('hasCard') + '*********');
              if (PJF.fsm.get([PJF.fsm.fmIds.STM_ICCARD]).is('hasCard')) {
                  //先销毁30s的广告播放
                  clearInterval(interval_30s);
                  $('.pjf_hp_timeoutDiv').remove();
                  PJF.event.addSubscriber("OVER_30_NO_REACTION", cbFn_30s);
                  //可能存在的提示框之类..
                  if ($('.errorMsgbox_container').length > 0) {
                    return;
                  }
                  PJF.event.removeSubscriber(PJF.stmEvent.OVER_60_NO_REACTION, cbFn);
                  PJF.communication.player.PlaySoundByUrl("app/common/confiscateTip.mp3", true);
                  var randomId = PJF.util.generateUUid();
                  var timeoutBg = "../../../css/stmimg/stm_timeout_tip.gif";
                  if (PJF.orgInfo.instSvrlLgPsnID === 'DA003') {
                      timeoutBg = "../../../css/stmimg/stm_timeout_tip_" + PJF.i18n.getLanguage() + ".gif"
                  }
                  $('body').append('<div id="' + randomId + '"><div class="pjf_timeout_loading"></div><img class="pjf_timeout_img" src=' + timeoutBg + '></div>');
                  var loading = new PJF.ui.loading({
                      opacity: 0.7,
                      msg: '',
                      noIcon: true
                  });
                  $('#' + randomId).off('click.random').on('click.random', function (evt) {
                      loading && loading.destroy();
                      $('#' + randomId).children('img').attr('src', '');
                      $('#' + randomId).remove();
                      clearTimeout(stmTimeoutHandler);
                      PJF.event.addSubscriber(PJF.stmEvent.OVER_60_NO_REACTION, cbFn);
                  });

                  var stmTimeoutHandler = setTimeout(function () {
                      if (!homepage.confiscateCard) { //怕状态机有问题，就一直重复执行吞卡操作
                          homepage.confiscateCard = true; //最多吞一次卡
                          if (PJF.orgInfo.instSvrlLgPsnID === 'DA003') {
                              PJF.stm.ICMaker.confiscateDev(function (res) {
                                  console.log('建亚STM进行未操作超时吞卡操作');
                                  template.loadPage('homepage');
                              }, {
                                  conReason: timeout + '秒没有进行设备操作',
                                  recycleType: '8'
                              });
                          } else {
                              var ran = PJF.util.generateUUid();
                              $('body').append('<div id=' + ran + '></div>');
                              PJF.stm.register.registerTimeoutFn.window = new PJF.ui.window({
                                  dom: ran,
                                  width: 1200,
                                  height: 830,
                                  href: '/bosWeb/page/stm/common/timeoutPage.html'
                              });
                          }
                      }
                      loading && loading.destroy();
                      $('#' + randomId).children('img').attr('src', '');
                      $('#' + randomId).remove();
                      PJF.event.addSubscriber(PJF.stmEvent.OVER_60_NO_REACTION, cbFn);
                  }, 10000);
              }
              //0907建亚网银登录后超时登出
              if ((PJF.orgInfo.instSvrlLgPsnID === 'DA003') && PJF.util.isExist('PJF.stm.CUSTOM_INFO') && (PJF.stm.CUSTOM_INFO.authType == '3')) {
                  var randomId = PJF.util.generateUUid();
                  $('body').append('<div id="' + randomId + '" class="pjf_hw_noCardTmoutDiv"><p class="pjf_hw_noCardTmoutBg">'+PJF.i18n.getI18nResource('pjfI18n.obTimoutTip')+'</p></div>');
                  var loading = new PJF.ui.loading({
                      opacity: 0.5,
                      msg: "",
                      noIcon: true,
                      timeout: 10
                  });
                  $('#' + randomId).off('click.random').on('click.random', function (evt) {
                      loading && loading.destroy();
                      $('#' + randomId).remove();
                      clearTimeout(stmTimeoutHandler);
                      PJF.event.addSubscriber(PJF.stmEvent.OVER_60_NO_REACTION, cbFn);
                  });
                  var stmTimeoutHandler = setTimeout(function () {
                      loading && loading.destroy();
                      $('#' + randomId).remove();
                      PJF.event.addSubscriber(PJF.stmEvent.OVER_60_NO_REACTION, cbFn);
                      template.loadPage("homepage");
                  }, 10000);
              }
          }

          //智慧银行：记录设备空闲状态
          if (PJF.otherInfo.smartBank && PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).is('noCard') && PJF.fsm.get(PJF.fsm.fmIds.STM_IDCARD).is('noId')) {
              PJF.stm.util.devIdleLog(true);
          }
      })

      var imgSrcs = [];
      var _queryOnce = false;
      //首页有卡，30s无广告，90s提示吞卡；首页无卡，30s展示广告
      PJF.event.addSubscriber("OVER_30_NO_REACTION", cbFn_30s = function (timeout) {
          if (PJF.orgInfo.instSvrlLgPsnID !== 'CN000') return;
          if ($('.pjf_hp_timeoutDiv').length > 0) return;
          var isHomePage = template.getLocation() == 'homepage';
          if (PJF.util.deviceType.stm && isHomePage && !PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).is('hasCard')) {
              PJF.event.removeSubscriber("OVER_30_NO_REACTION", cbFn_30s);
              var imgHandler = function () {
                  if (imgSrcs.length > 0) {
                      var randomId = PJF.util.generateUUid();
                      $('body').append('<div class="pjf_hp_timeoutDiv" id="' + randomId + '"><img id="viewer"><span>关闭广告</span></div>');
                      var intervalTime = 5 * 1000;
                      var viewer = document.getElementById('viewer');
                      var current = 0;
                      var len = imgSrcs.length;
                      var setImage = function () {
                          viewer.src = imgSrcs[current];
                          current = ++current > len - 1 ? 0 : current;
                      };
                      setImage();
                      interval_30s = setInterval(setImage, intervalTime);

                      $('#' + randomId).off('click.random').on('click.random', function (evt) {
                          clearInterval(interval_30s);
                          $('#' + randomId).remove();
                          PJF.event.addSubscriber("OVER_30_NO_REACTION", cbFn_30s);
                      });
                      $('#' + randomId + '> img').off('click.viewer').on('click.viewer', function (evt) {
                          evt.stopPropagation();
                      });
                  }
              }
              if (_queryOnce) {
                  imgHandler();
                  return;
              }
              var req = {
                  CCB_InsID: PJF.roleInfo.orgCode,
                  Query_Dt: PJF.communication.getServerTime(),
                  Query_TyCd: "1",
                  Adv_Grp: [
                      {
                          Blng_Step: "00"
                      }
                  ],
                  OPER_CODE: PJF.otherInfo.devId
              };
              console.log("queryAdvFilePathZhyh req:" + JSON.stringify(req));
              PJF.communication.cpsJsonReq({
                  jsonData: JSON.stringify(req),
                  url: "ecpJson.action",
                  fwServiceId: "queryAdvFilePathZhyh",
                  fwTranId: "queryAdvFilePathZhyh",
                  success: function (data) {
                      console.log("queryAdvFilePathZhyh success:" + JSON.stringify(data));
                      _queryOnce = true;
                      data.Adv_Grp && data.Adv_Grp.forEach(function (e) {
                          //本地图片就不展示了
                          if (e.Path_Type != '2') {
                              imgSrcs.push(e.Res_Path)
                          }
                      });
                      imgHandler();
                  },
                  failure: function (data) {
                      console.log("queryAdvFilePathZhyh failure:" + JSON.stringify(data));
                      _queryOnce = true;
                  }
              })
          }
      })

      PJF.event.addSubscriber("RESTART_30_MONITOR", function () {
          var isHomePage = template.getLocation() == 'homepage';
          if (PJF.util.deviceType.stm && isHomePage && !PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).is('hasCard')) {
              PJF.event.removeSubscriber("OVER_30_NO_REACTION", cbFn_30s);
              PJF.event.addSubscriber("OVER_30_NO_REACTION", cbFn_30s);
          }
      })
  },
  /*
   * 注册STM、YTD的逻辑
   */
  registerStm: function () {
    var cpuId = PJF.communication.GetCpuNo().result;
    var ipMacs = PJF.communication.GetMachine().result;
    var verInfo = PJF.communication.GetClientInfo().result;
    var insId = ''; //初始化为空
    var devId = ''; //初始化为空

    /*var ipMacs = [{IP:'128.1.0.237', MAC:'78:F2:9E:F1:9E:03'}]
    PJF.constants.ON_PROD=false;*/
    // 开启登录模式时，再进行本地机构号读取，本地设备编号读取
    if (PJF.constants.NEED_LOGIN) {
      var insIdRes = PJF.communication.localStorage.getValue('pjfLoginOrgCode');
      if (insIdRes.success) {
        insId = insIdRes.result;
        console.log("本地insId为" + insId);
      } else {
        console.log("本地不存在机构编号");
      }

    }

    var devIdRes = PJF.communication.localStorage.getValue('pjfLoginDevId');
    if (devIdRes.success) {
      devId = devIdRes.result;
      console.log("本地devId为" + devId);
    } else {
      console.log("本地不存在设备编号");
    }

    var ips = [];
    var macs = [];
    if (ipMacs) {
      ipMacs = eval(ipMacs);
      for (var a = 0; a < ipMacs.length; a++) {
        var result = ipMacs[a];
        if (PJF.constants.NOT_REG_IP.indexOf(result.IP) != -1) {
          continue
        }
        ips.push(result.IP);
        macs.push(result.MAC);
      }

    }
    PJF.otherInfo.IPS = ips;
    PJF.otherInfo.MACS = macs;
    PJF.otherInfo.verInfo = verInfo;

    //开启分群策略
    var routeAddress = PJF.communication.localStorage.getValue('stmRouteUrl');
    console.log('获取路由地址结果为:' + routeAddress.result);
    if (PJF.constants.GROUP && PJF.html.getUrlParam('isRoute') == 'true') {
      console.log('已跳转到对应地址');
      var registerInfo = PJF.communication.localStorage.getValue('clientRegInfo');
      console.log('获取本地注册信息结果为:' + registerInfo.result);
      if (registerInfo.success) {
        PJF.communication.localStorage.removeItem('stmRouteUrl'); //删除掉, 因为永远在管理群注册，所以在管理群拿到注册信息之后，再跳转到路由集群
        var tempObj = PJF.communication.localStorage.getValue('pjfRouteConstants');
        if (tempObj.success) {
          var tempObjResult = JSON.parse(tempObj.result);
          PJF.constants.AUTH_SERVER = tempObjResult.auth;
          PJF.constants.MGT_SERVER = tempObjResult.mgt;
          PJF.constants.PUB_SERVER = tempObjResult.pub;
          PJF.constants.FHTS_GROUP = tempObjResult.fhts;
          PJF.constants.IM_URL = tempObjResult.im_url;
          PJF.constants.IM_HTTP_URL = tempObjResult.im_http_url;
        } else {
          console.log('设备无法从本地获取集群信息');
          PJF.stm.register.errorCodeHandler('设备无法从本地获取集群信息', '请联系管理员', "确定", PJF.communication.AppExit);
          return;
        }
        var info = JSON.parse(registerInfo.result);
        PJF.stm.register.registerSuccess(info);
        return;
      } else {
        console.log('设备无法从本地获取注册信息');
        PJF.stm.register.errorCodeHandler('设备无法从本地获取注册信息', '请联系管理员', "确定", PJF.communication.AppExit);
        return;
      }
    }

    var action = 'ecpJson.action';
    var fw_id = 'registerTermService';
    var jsonData = {};
    jsonData = {
      "msg_type": "register",
      "msg_ver": "v1.0",
      "execute_time": PJF.util.formatDate(new Date(), 'yyyyMMddhhmm'),
      "msg_info": {
        "cpu_id": cpuId,
        "ips": ips,
        "macs": macs,
        "ins_id": insId,
        "dev_id": devId,
        "client_version": PJF.otherInfo.verInfo
      }
    };
    var data = {};
    data._fw_service_id = fw_id;
    data.jsonData = PJF.util.json2str(jsonData);
    console.log('即将查询设备注册信息，data:' + JSON.stringify(jsonData))
    PJF.communication.ajax({
      data: data,
      async: false,
      url: action,
      success: function (data) {
        console.log('查询设备注册信息返回结果为:' + JSON.stringify(data));
        //如果没有获得设备标号则表示没有配置相应信息
        if (data.dev_id) {
          PJF.communication.localStorage.setValue('clientRegInfo', JSON.stringify(data)) //给张鹏用的
            //中德的就不分群了
            if(data.insid.indexOf('01075') == 0){
                var domain = PJF.constants.ZD_DOMAIN;
                var o = {
                    centerID: "1",
                    domain: domain,
                    port: '80',
                    cnt: domain
                };
                PJF.communication.localStorage.setValue('_sys_domain_setting_', JSON.stringify({'_s_warp_': o}));
                var routeUrl = "http://" + domain + "/bosWeb/page/stm/common/stmTemplatePage.html?isRoute=true";
                PJF.communication.localStorage.setValue('stmRouteUrl', routeUrl); // 设置路由地址
                PJF.communication.localStorage.setValue('pjfRouteConstants', JSON.stringify({
                    auth: 'http://' + domain,
                    mgt: 'http://' + domain,
                    pub: 'http://' + domain,
                    fhts: 'http://' + domain + '/bosWeb/ecpJson.action',
                    im_url: PJF.constants.ON_PROD ? 'ws://' + PJF.multiCenter.getDomainByCenter('im') + ':7070/ws/server' : PJF.constants.IM_URL,
                    im_http_url: PJF.constants.ON_PROD ? 'http://' + PJF.multiCenter.getDomainByCenter('im') + ':9090' : PJF.constants.IM_HTTP_URL
                })); // 存储各个集群域名
                console.log('中德地址全路径为为:' + routeUrl);
                location.href = routeUrl; //跳转到路由地址
                return;
            }

            if(data.province_code === '010741100'){
                var domain = PJF.constants.ON_PROD ? "oy.oecip.jh" : location.host;
                var o = {
                    centerID: "1",
                    domain: domain,
                    port: '80',
                    cnt: domain
                };
                PJF.communication.localStorage.setValue('_sys_domain_setting_', JSON.stringify({'_s_warp_': o}));
                PJF.stm.register.registerSuccess(data);
                return;
            }

          var locatorFun = function (domain) {
            if (PJF.constants.ON_DEV) domain = location.host;
            var routeUrl = "http://" + domain + "/bosWeb/page/stm/common/stmTemplatePage.html?isRoute=true";
            //TCR当中，还会配置第二个地址，而且要到具体的某个pageId，所以分群去的地址也要去到那个地址
            var upos = window.location.href.search('#!');
            if (upos > 0) {
              routeUrl += window.location.href.slice(upos);
            }
            //var routeUrl = PJF.html.addUrlParam(location.href.replace(/(http:\/\/)?([^\/]*)/,"$1" + res.RESULT_DATA),{isRoute:'true'})
            //储存后端注册信息
            PJF.communication.localStorage.setValue('stmRouteUrl', routeUrl); // 设置路由地址
            PJF.communication.localStorage.setValue('pjfRouteConstants', JSON.stringify({
              auth: 'http://' + (PJF.constants.ON_DEV ? domain : PJF.multiCenter.getDomainByCenter('stm')),
              mgt: 'http://' + (PJF.constants.ON_DEV ? domain : PJF.multiCenter.getDomainByCenter('mgt')),
              pub: 'http://' + (PJF.constants.ON_DEV ? domain : PJF.multiCenter.getDomainByCenter('pub')),
              fhts: 'http://' + ((PJF.constants.ON_DEV ? domain : PJF.multiCenter.getDomainByCenter('lt')) + '/bosWeb/ecpJson.action'),
              im_url: PJF.constants.ON_DEV ? PJF.constants.IM_URL : 'ws://' + PJF.multiCenter.getDomainByCenter('im') + ':7070/ws/server',
              im_http_url: PJF.constants.ON_DEV ? PJF.constants.IM_HTTP_URL : 'http://' + PJF.multiCenter.getDomainByCenter('im') + ':9090'
            })); // 存储各个集群域名
            console.log('获取路由信息成功，将跳转到:' + domain);
            console.log('将要跳转的地址全路径为为:' + routeUrl);
            location.href = routeUrl; //跳转到路由地址
          };
          var succFun = function (data) {
            locatorFun(PJF.multiCenter.getDomainByCenter('cnt'));
          };
          var failFun = function (resp) {
            console.log('获取路由信息失败:' + JSON.stringify(resp));
            PJF.stm.register.registerSuccess(data);
          };
          console.log('====当前客户端地址====' + location.href);
          PJF.multiCenter._queryCenter(data.insid, succFun, failFun, false);
        } else {
          var errorCode = data.error_code;
          var errorMessage = data.errorMessage;
          var helpMessage = data.helpMessage;

          console.log("错误码为: " + errorCode);

          switch (errorCode) {
            //IP地址发生变化，不能使用
            case '1111':
              PJF.stm.register.errorCodeHandler(errorMessage, helpMessage, "确定", PJF.communication.AppExit);
              break;

              //参数错误，后端未收到IP或者MAC
            case '2222':
              PJF.stm.register.errorCodeHandler(errorMessage, helpMessage, "确定", PJF.communication.AppExit);
              break;

              //该设备已停用
            case '3333':
              PJF.stm.register.errorCodeHandler(errorMessage, helpMessage, "确定", PJF.communication.AppExit);
              break;

              //该设备已经报废，不能使用，同时将本地设备编号清空
            case '4444':
              PJF.communication.localStorage.removeItem('pjfLoginDevId');
              PJF.stm.register.errorCodeHandler(errorMessage, helpMessage, "确定", PJF.communication.AppExit);
              break;

              //设备未注册，IP合法，同时将本地设备编号清空
            case '0000':
              PJF.communication.localStorage.removeItem('pjfLoginDevId');
              PJF.stm.register.errorCodeHandler(errorMessage, helpMessage, "确定", PJF.communication.AppExit);
              break;

              //设备未注册，IP不合法
            case '9999':
              PJF.stm.register.errorCodeHandler(errorMessage, helpMessage, "确定", PJF.communication.AppExit);
              break;

              // 开机发生异常
            case '6666':
              PJF.stm.register.errorCodeHandler(errorMessage, helpMessage, "确定", PJF.communication.AppExit);
              break;

              // 该设备未设置审核方式，请去员工渠道设置
            case '5555':
              PJF.stm.register.errorCodeHandler(errorMessage, helpMessage, "确定", PJF.communication.AppExit);
              break;

              // 该设备厂商或设备型号不正确
            case '8888':
              PJF.stm.register.errorCodeHandler(errorMessage, helpMessage, "确定", PJF.communication.AppExit);
              break;

              //真正的未有相应配置信息情况
            default:
              var messageBox = new PJF.ui.messageBox({
                title: "提示信息",
                content: '本设备没有注册，请联系系统管理员注册本设备',
                buttonConfs: [{
                  name: '确定',
                  style: 'main',
                  width: 200,
                  height: 80,
                  onClick: PJF.communication.AppExit
                }]
              });
              break;
          }
        }
      }
    })
  },
  genTemplate: function (templateConf, cb) {
    var loading = new PJF.ui.loading({
      text: '页面正在加载中，请稍候……'
    });

    function load() {
      if (PJF.constants.jsLoadingCount == 0) {
        loading.destroy();
        //pad可能会执行多次这段代码
        if (!(window.template instanceof PJF.ui.component)) {
          /*window.template = new PJF.ui.template($.extend({
          	dom: 'template',
          	pageRouting: stmRouting,
          	process: process,
          	tips: stmTips,
          	postfixHandler: [function() {
          		if (PJF.util.isCCBSTransform()) {
          			return '_ccbstransform'
          		}
          	}]
          }, templateConf)); */
          PJF.sm4Auth.register(function () {
            window.template = new PJF.ui.template($.extend({
              dom: 'template',
              pageRouting: stmRouting,
              process: process,
              tips: stmTips,
              postfixHandler: [function () {
                  if (PJF.util.isCCBSTransform()) {
                      return '_ccbstransform'
                  }
              }, function () {
                  if (PJF.otherInfo.isSelfBank) {
                      return '_self'
                  }
                  if (PJF.otherInfo.globalParams.useNewViewStatus === '01') {
                      return "_ext"
                  }
              }
              ]
            }, templateConf));
          })
        } else {
          //每一次打开，应该清除卡信息
          PJF.stm.util.clearCardInfo();
          //pad跳转清除他们自定义的右上角按钮
          template.clearTopBar();
        }
        clearInterval(interval);
        cb && cb();
      }
    }
    var interval = setInterval(load, 500);
  },
  //获取PAD上用户的手机号
  getPadUserMobileNo: function () {
    if (!PJF.util.isExist("PJF._extra.custAuthInfo.identity")) {
      PJF.otherInfo.padUserMobileNo = "";
      return;
    }
    var jsonData1515 = {};
    jsonData1515.Cst_Id_MtdCd = "1";
    jsonData1515.MULTI_TENANCY_ID = PJF.orgInfo.instSvrlLgPsnID;
    jsonData1515.Id_Crdt_TpCd = "1010";
    jsonData1515.Id_Crdt_No = PJF._extra.custAuthInfo.identity; //'510921198712034813';//
    jsonData1515.Id_Idv_Lgl_Nm = PJF._extra.custAuthInfo.name; //'张艺钟';//

    var phoneNo = "";

    PJF.communication.cpsJsonReq({
      fwServiceId: "simpleTransaction",
      //async: false,  //就异步发吧，反正后面才用到，这个只是在初始化的时候去取一下
      maskAll: true,
      jsonData: JSON.stringify(jsonData1515),
      fwTranId: 'A0042Q028-stm',
      success: function (data) {
        if (data.TEL_INFO && data.TEL_INFO.Vld_Rcrd_Cnt > 0) {
          for (var i in data.TEL_INFO.TEL_GROUP) {
            if (data.TEL_INFO.TEL_GROUP[i].Ctc_Inf_TpCd == '104') {
              phoneNo = data.TEL_INFO.TEL_GROUP[i].TelCtcMod_No;
            }
          }
          PJF.otherInfo.padUserMobileNo = phoneNo; //取最后一个手机号
        }
      },
      failure: function (data) {
        console.log('查询客户手机失败:' + JSON.stringify(data))
      }
    })
  }
};

//支票打印机--CHK
PJF.stm.CHK = {
  //支票打印
  /**
   * @param iSlotNum[int]:纸槽编号
   */
  printCheck: function (args, callback) {
    var supportNew = true;
    if (PJF.constants.NOT_SUPPORT_CHECK.indexOf(PJF.otherInfo.devId) != -1) {
      supportNew = false;
    }
    if (supportNew) {
      var cbresult = {}; //打印命令先返回的结果
      var loading; //等待打印事件时的遮罩
      //获取客户端db文件设置的X,Y偏移量
      var _iAdj = PJF.util.safeParse(PJF.communication.localStorage.getValue('checkPrintOffset').result, {});
      var _args = {
        iSlotNum: 1,
        iAdjX: _iAdj.X || 0,
        iAdjY: _iAdj.Y || 0
      };
      $.extend(_args, args);
      var tmpfunc1, tmpfunc2;
      //目前只关心打印成功和打印失败的事件，progress事件如果需要进度条才关心
      PJF.event.onceSubscriber(PJF.stm.client.events.CHK_PRINT_SUCCESS, tmpfunc1 = function (res) {
        loading && loading.destroy();
        var printBatchNo = res.split('|')[1];
        var amount = res.split('|')[0];
        eventCb(amount, null, null, printBatchNo);
      });
      PJF.event.onceSubscriber(PJF.stm.client.events.CHK_PRINT_FAIL, tmpfunc2 = function (res) { // 格式为:错误码|已打印张数			
        loading && loading.destroy();
        var errorCode = res.split('|')[0];
        var errorMsg = res.split('|')[1];
        eventCb(res.split('|')[2], errorCode, errorMsg);
      });

      var eventCb = function (amount, errorCode, errorMsg, printBatchNo) {
        PJF.event.removeSubscriber(PJF.stm.client.events.CHK_PRINT_SUCCESS, tmpfunc1);
        PJF.event.removeSubscriber(PJF.stm.client.events.CHK_PRINT_FAIL, tmpfunc2);
        $.extend(cbresult.info, {
          iPrintedCount: amount,
          printBatchNo: printBatchNo
        });
        console.log('支票callback:' + JSON.stringify(cbresult))
        if (errorCode) { //失败的也算出错好了,这样应用去做相应处理
          cbresult.status = 0;
          cbresult.errorCode = errorCode;
          cbresult.errorMsg = errorMsg;
        }
        callback && callback(cbresult); //这是才真正的执行应用的回调
      }

      var cb = function (res) {
        cbresult = res;
        if (res.status == 1) {
          //等待打印回调
          loading = new PJF.ui.loading({
            msg: "票据正在打印中,请稍候...",
            opacity: 0.1,
            noIcon: true
          });
        }
        //任务直接失败了
        else {
          PJF.event.removeSubscriber(PJF.stm.client.events.HDP_PRINT_SUCCESS, tmpfunc1);
          PJF.event.removeSubscriber(PJF.stm.client.events.HDP_PRINT_FAIL, tmpfunc2);
          callback && callback(res)
        }
      }

      PJF.stm.client.callClient("CHK", "printCheck", _args, cb);
    } else {
      var _args = {
        iSlotNum: 1
      };
      $.extend(_args, args);

      function fnSuccess(resultJson) {
        var info = {};
        info.iPrintedCount = resultJson.iPrintedCount;
        info.printBatchNo = resultJson.printBatchNo;

        return info;
      }
      PJF.stm.client.callClient("CHK", "printCheck", _args, callback, fnSuccess, fnSuccess);
    }
  },
  //获取支票票号
  /**
   * @param iTimeout[int]:超时间隔
   */
  getCheckNo: function (args, callback) {
    var _args = {
      iTimeout: 20
    };
    $.extend(_args, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchCheckNo = resultJson.pchCheckNo;

      return info;
    }

    PJF.stm.client.callClient("CHK", "getCheckNo", _args, callback, fnSuccess);
  },
  //取走支票
  /**
   */
  takeCheck: function (args, callback) {
    var _args = {};
    $.extend(_args, args);

    PJF.stm.client.callClient("CHK", "takeCheck", _args, callback);
  },
  //设置支票磁码打印偏移量
  setMagCodeOffset: function (args, callback) {
    var _args = {};
    $.extend(_args, args);

    PJF.stm.client.callClient("CHK", "setMagCodeOffset", _args, callback);
  },
  //获取支票磁码打印偏移量
  getMagCodeOffset: function (args, callback) {
    var _args = {};
    $.extend(_args, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.iXOffset = resultJson.iXOffset;
      info.iYOffset = resultJson.iYOffset;
      return info;
    }

    PJF.stm.client.callClient("CHK", "getMagCodeOffset", _args, callback, fnSuccess);
  }
};

//支票扫描仪--CKS
PJF.stm.CKS = {
  //支票扫描鉴别
  /**
   * @param iScanTimes[int]:扫描次数
   * @param iCheckType[int]:票据类别
   * @param iTimeout[int]:超时间隔
   */
  scanVerifyCheck: function (args, callback) {
    var _args = {
      iScanTimes: 2,
      iCheckType: 0,
      iTimeout: 60
    };
    $.extend(_args, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.iVerifyResult = resultJson.iVerifyResult;

      return info;
    }

    PJF.stm.client.callClient("CKS", "scanVerifyCheck", _args, callback, fnSuccess);
  },
  //支票纸张控制
  /**
   * @param iCmd[int]:控制命令
   */
  checkControl: function (args, callback) {
    var _args = {
      iCmd: 1
    };
    $.extend(_args, args);

    PJF.stm.client.callClient("CKS", "checkControl", _args, callback);
  }
};

//回单打印机--HDP
PJF.stm.HDP = {
  //预热打印机
  /**
   */
  preparePrinter: function (args, callback) {
    var _args = {};
    $.extend(_args, args);

    PJF.stm.client.callClient("HDP", "preparePrinter", _args, callback);
  },
  //开始打印回单
  /**
   * @param iSlotType[int]:纸槽类别
   * @param iChapterType[int]:盖章模式
   */
  startPrintReceipt: function (args, callback) {
    var supportNew = true;
    if (PJF.constants.NOT_SUPPORT_RECEIPT.indexOf(PJF.otherInfo.devId) != -1) {
      supportNew = false;
    }
    if (supportNew) {
      var cbresult = {}; //打印命令先返回的结果
      var loading; //等待打印事件时的遮罩
      var _args = {
        iSlotType: 1,
        iChapterType: 0,
        loadingConf: {
          msg: '文件正在打印中,请稍候...'
        }
      };
      $.extend(_args, args);
      var tmpfunc1, tmpfunc2;
      //目前只关心打印成功和打印失败的事件，progress事件如果需要进度条才关心
      PJF.event.onceSubscriber(PJF.stm.client.events.HDP_PRINT_SUCCESS, tmpfunc1 = function (amount) {
        loading && loading.destroy();
        eventCb(amount)
      });
      PJF.event.onceSubscriber(PJF.stm.client.events.HDP_PRINT_FAIL, tmpfunc2 = function (res) { // 格式为:错误码|已打印张数			
        loading && loading.destroy();
        var errorCode = res.split('|')[0];
        var errorMsg = res.split('|')[1];
        eventCb(res.split('|')[2], errorCode, errorMsg);
      });

      var eventCb = function (amount, errorCode, errorMsg) {
        PJF.event.removeSubscriber(PJF.stm.client.events.HDP_PRINT_SUCCESS, tmpfunc1);
        PJF.event.removeSubscriber(PJF.stm.client.events.HDP_PRINT_FAIL, tmpfunc2);
        $.extend(cbresult.info, {
          printProgressData: amount
        });
        console.log('回单callback:' + JSON.stringify(cbresult))
        if (errorCode) { //失败的也算出错好了,这样应用去做相应处理
          cbresult.status = 0;
          cbresult.errorCode = errorCode;
          cbresult.errorMsg = errorMsg;
                    if (errorCode == '1')
                        PJF.communication.callPad({
                            busiName: PJF.otherInfo.devId + '设备办理' + (PJF.otherInfo.MENU_ID && PJF.stm.menuTree && PJF.stm.menuTree[PJF.otherInfo.MENU_ID] && PJF.stm.menuTree[PJF.otherInfo.MENU_ID].NAME)
                                + '业务打印机卡纸'
                        });
                    else if (errorCode == '3')
                        PJF.communication.callPad({
                            busiName: PJF.otherInfo.devId + '设备办理' + (PJF.otherInfo.MENU_ID && PJF.stm.menuTree && PJF.stm.menuTree[PJF.otherInfo.MENU_ID] && PJF.stm.menuTree[PJF.otherInfo.MENU_ID].NAME)
                                + '业务打印机缺纸'
                        });
        }
        callback && callback(cbresult); //这是才真正的执行应用的回调
      }

      var cb = function (res) {
        cbresult = res;
        if (res.status == 1) {
          //等待打印回调
          loading = new PJF.ui.loading({
            msg: "文件正在打印中,请稍候...",
            opacity: 0.1,
            noIcon: true
          });
        }
        //任务直接失败了
        else {
          PJF.event.removeSubscriber(PJF.stm.client.events.HDP_PRINT_SUCCESS, tmpfunc1);
          PJF.event.removeSubscriber(PJF.stm.client.events.HDP_PRINT_FAIL, tmpfunc2);
          callback && callback(res)
        }
      }
      PJF.stm.client.callClient("HDP", "startPrintReceipt", _args, cb);
    } else {
      var tempData = 0;
      var _args = {
        iSlotType: 1,
        iChapterType: 0,
        loadingConf: {
          msg: '文件正在打印中,请稍候...'
        }
      };
      $.extend(_args, args);
      PJF.event.addSubscriber(PJF.stm.client.events.HDP_PRINT_PROGRESS, function (data) {
        tempData = data;
      });

      function fnSuccess(resultJson) {
        var info = {};
        PJF.event.removeSubscriber(PJF.stm.client.events.HDP_PRINT_PROGRESS);
        info.printProgressData = tempData;
        return info;
      }

      function fnFail(resultJson) {
        var info = {};
        PJF.event.removeSubscriber(PJF.stm.client.events.HDP_PRINT_PROGRESS);
        info.printProgressData = tempData;
        return info;
      }
      PJF.stm.client.callClient("HDP", "startPrintReceipt", _args, callback, fnSuccess, fnFail);
    }
  },
  //打印PDF文档
  /**
   */
  printPDFFile: function (args, callback) {
    var _args = {};
    $.extend(_args, args);

    PJF.stm.client.callClient("HDP", "printPDFFile", _args, callback);
  },
  //统一凭证打印
  printUniVoucher: function (args, callback) {
      var _args = {
          iSlotType: 1
      };
      $.extend(_args, args);
      _args.pchPrintStr = encodeURIComponent(args.pchPrintStr);
      if (_args.response) {
          var eachResult = {};
          var voucherKeys = Object.keys(_args.response);
          var voucherNum = voucherKeys.length;
          var cb = function (res) {
              res = res || {status: 1} // 若没有需要打印的，则对外输出成功, 否则res为最后一次打印的结果(有待商榷)
              res.info = res.info || {};
              res.info.eachResult = eachResult; //保存历次打印外设返回信息
              callback && callback(res);
          };
          var fnPrint = function (i, result) {
              var printContent, elecSealInfo;
              if (i == voucherNum) {
                  cb(result);
                  return;
              }
              // 只打印paperPrintFlag=true的数据
              var paperPrintFlag = _args.response[voucherKeys[i]].paperPrintFlag
              console.log(voucherKeys[i] + ' paperPrintFlag: ' + paperPrintFlag)
              if (!paperPrintFlag) {
                  PJF.stm.client.callClient("HDP", "printUniVoucher", _args, function (result) {
                      console.log('false paperPrintFlag printUniVoucher结果为:' + JSON.stringify(result));
                      eachResult['printFlagFalse_' + i] = result;
                      fnPrint(++i, result);
                  })
                  return
              }
              printContent = _args.response[voucherKeys[i]].printContent;
              elecSealInfo = _args.response[voucherKeys[i]].elecSealInfo;
              _args.pchPrintStr = encodeURIComponent(printContent);
              if (elecSealInfo) {
                  elecSealInfo = JSON.parse(elecSealInfo);
                  _args.iChapterType = '0';
                  var elecSealId = elecSealInfo.sealId;
                  PJF.stm.util.elecSealHandler(elecSealInfo, function (data) {
                      if (data.status) {
                          if (!data.localExist) {
                              var tempLocal = {};
                              tempLocal[elecSealId] = {
                                  sealLocalPath: data.localUrl,
                                  sealRemotePath: elecSealInfo.sealRemotePath,
                                  sealFileMd5: elecSealInfo.sealFileMd5
                              };
                              PJF.communication.localStorage.setValue('pjfElecSealInfo', JSON.stringify(tempLocal));
                          }
                          elecSealInfo.sealLocalPath = data.localUrl;
                          _args.pchElecSealInfo = encodeURIComponent(JSON.stringify(elecSealInfo));
                          PJF.stm.client.callClient("HDP", "printUniVoucher", _args, function (result) {
                              console.log('printUniVoucher结果为:' + JSON.stringify(result))
                              eachResult[elecSealId] = result;
                              fnPrint(++i, result);
                          })
                      } else {
                          PJF.stm.client.callClient("HDP", "printUniVoucher", _args, function (result) {
                              console.log('download failure printUniVoucher结果为:' + JSON.stringify(result))
                              eachResult[elecSealId] = {
                                  status: 0,
                                  info: {},
                                  errorCode: 'PJF_HDP_DOWNLOAD_ERR01',
                                  errorMsg: '下载电子印章失败'
                              };
                              fnPrint(++i, result);
                          })
                      }
                  });
              } else {
                  PJF.stm.client.callClient("HDP", "printUniVoucher", _args, function (result) {
                      console.log('noelec seal printUniVoucher结果为:' + JSON.stringify(result))
                      eachResult['noElecSeal_' + i] = result;
                      fnPrint(++i, result);
                  });
              }
          };

          fnPrint(0);
      } else {
          PJF.stm.client.callClient("HDP", "printUniVoucher", _args, callback);
      }
  },
  //STM统一凭证导出JPG图片
  GenUniVoucherPreview: function (args, callback) {
    var _args = {};
    $.extend(_args, args);

    PJF.stm.client.callClient("App_DEV", "GenUniVoucherPreview", _args, callback);
  },
  //获取纸槽状态
  getPaperSlotStatus: function (args, callback) {
    var _args = {};
    $.extend(_args, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.iStatus = resultJson.iStatus;
      return info;
    }

    PJF.stm.client.callClient("HDP", "getPaperSlotStatus", _args, callback, fnSuccess);
  }
};

//存折打印机--PRT
PJF.stm.PRT = {
  //吸入存折
  inhalePassbook: function (args, callback) {
    var _args = {
      timeout: 30
    };
    $.extend(_args, args);
    PJF.fsm.get(PJF.fsm.fmIds.STM_PRT).inhalePassbook();
    PJF.stm.client.callClient('PRT', 'inhalePassbook', args, callback);
  },
  //吐出存折
  ejectPassbook: function (args, callback) {
    var _args = {
      timeout: 30
    };
    $.extend(_args, args);
    PJF.fsm.get(PJF.fsm.fmIds.STM_PRT).ejectPassbook();
    PJF.stm.client.callClient('PRT', 'ejectPassbook', args, callback);
  },
  //读取存折信息
  getCardNum: function (args, callback) {
      var _args = {
          timeout: 30
      };
      $.extend(_args, args);

      function fnSuccess(resultJson) {
          var info = {};
          info.pchTrackData2 = resultJson.pchTrackData2;
          info.pchTrackData3 = resultJson.pchTrackData3;
          //19位账号+分隔符+4位印刷号+3位dvv+2位册号+2位支取方式+0000
          if (PJF.util.array.indexOf(["'", "=", ">"], info.pchTrackData2[19]) == -1) {
              console.log("未能正确匹配磁道分隔符");
              info.pjfstatus = '0';
              info.pchErrCode = "PJF_PRT_PARSE_ERR01";
              info.pchError = "存折打印机未能正确匹配磁道分隔符";
          }
          info.accountNo = info.pchTrackData2.substr(0, 19); //账号
          info.printNo = info.pchTrackData2.substr(20, 4); //印刷号
          info.dvvNo = info.pchTrackData2.substr(24, 3); //DVV
          info.bkNumber = "0" + info.pchTrackData2.substr(27, 2); //册号
          var withDrawMode = info.pchTrackData2.substr(29, 2); //支取方式
          /*
           支取方式，主机一般下送4位，由前端转化为2位，写入存折，读折时再转化为4位
           4转2：
           （第一位*2+第二位）*10+第三位*2+第四位
           若以上输出为个位数前补0
           2转4
           第1位除以2取整+第1位除以2取余+第2位除以2取整+第2位除以2取余

           */
          var tmp1 = parseInt(withDrawMode.charAt(0), 10);
          var tmp2 = parseInt(withDrawMode.charAt(1), 10);
          info.withdrawMode = [Math.floor(tmp1 / 2), tmp1 % 2, Math.floor(tmp2 / 2), tmp2 % 2].join('');
          return info;
      }

      function hw_fnSuccess(resultJson) {
          var info = {};
          info.pchTrackData2 = resultJson.pchTrackData2;
          info.pchTrackData3 = resultJson.pchTrackData3;
          //12位账号+分隔符+4位印刷号+3位dvv+2位册号+2位支取方式+0000
          if (PJF.util.array.indexOf(["'", "=", ">"], info.pchTrackData2[12]) == -1) {
              console.log("建亚未能正确匹配磁道分隔符");
              info.pjfstatus = '0';
              info.pchErrCode = "PJF_PRT_PARSE_ERR01";
              info.pchError = "存折打印机未能正确匹配磁道分隔符";
          }
          info.accountNo = info.pchTrackData2.substr(0, 12); //账号
          info.printNo = info.pchTrackData2.substr(13, 4); //印刷号
          info.dvvNo = info.pchTrackData2.substr(17, 3); //DVV
          info.bkNumber = "0" + info.pchTrackData2.substr(20, 2); //册号
          var withDrawMode = info.pchTrackData2.substr(22, 2); //支取方式
          /*
           支取方式，主机一般下送4位，由前端转化为2位，写入存折，读折时再转化为4位
           4转2：
           （第一位*2+第二位）*10+第三位*2+第四位
           若以上输出为个位数前补0
           2转4
           第1位除以2取整+第1位除以2取余+第2位除以2取整+第2位除以2取余

           */
          var tmp1 = parseInt(withDrawMode.charAt(0), 10);
          var tmp2 = parseInt(withDrawMode.charAt(1), 10);
          info.withdrawMode = [Math.floor(tmp1 / 2), tmp1 % 2, Math.floor(tmp2 / 2), tmp2 % 2].join('');
          return info;
      }

      PJF.stm.client.callClient('PRT', 'getCardNum', args, callback, (PJF.orgInfo.instSvrlLgPsnID === 'DA003') ? hw_fnSuccess : fnSuccess);
  },
  //打印凭证
  doVoucherPrint: function (args, callback) {
    var _args = {
      timeout: 30
    };
    $.extend(_args, args);

    PJF.stm.client.callClient('PRT', 'doVoucherPrint', args, callback);
  },
  //统一凭证打印
  doPrintUniVoucher: function (args, callback) {
    var _args = {
      iSlotType: 1
    };
    $.extend(_args, args);
    _args.pchPrintStr = encodeURIComponent(args.pchPrintStr);
    _args.pchElecSealInfo = encodeURIComponent(args.pchElecSealInfo);

    PJF.stm.client.callClient("PRT", "doPrintUniVoucher", _args, callback);
  },
  //停止进折
  stopInhalePassbook: function (args, callback) {
    var _args = {};
    $.extend(_args, args);

    PJF.stm.client.callClient('PRT', 'stopInhalePassbook', args, callback);
  }
};

/*
 * 二维码扫描仪（获取二维码数据）
 */
PJF.stm.TDC = {

  /***
   * 获取二维码数据
   * @param args
   * @param callback
   * @returns {*}
   */
  getTDCode: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchData = resultJson.pchData;
      return info;
    }

    PJF.stm.client.callClient("TDC", "getTDCode", cmdArgs, callback, fnSuccess);
  }
};

//二维码编码或者解码、打印--App_DEV
PJF.stm.App_DEV = {
  //二维码解码
  /**
   */
  BarcodePathDecode: function (args, callback) {
    var _args = {};
    $.extend(_args, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.szbadcodebuff = resultJson.szbadcodebuff;
      info.szbadcodelen = resultJson.szbadcodelen;

      return info;
    }

    PJF.stm.client.callClient("App_DEV", "BarcodePathDecode", _args, callback, fnSuccess);
  },
  //二维码编码
  /**
   */
  BarcodeMem2FileEncode: function (args, callback) {
    var _args = {};
    $.extend(_args, args);

    PJF.stm.client.callClient("App_DEV", "BarcodeMem2FileEncode", _args, callback);
  }
};

/*
 * EMID读卡器
 */
PJF.stm.EMD = {

  /***
   * 读取EMID卡中的卡号
   * @param args
   * @param callback
   * @returns {*}
   */
  getCardNum: function (args, callback) {
    var cmdArgs = $.extend({
      iTimeout: 30
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchCardNum = resultJson.pchCardNum;

      return info;
    }

    PJF.stm.client.callClient('EMD', 'getCardNum', cmdArgs, callback, fnSuccess);
  }
};

/*
 * 普通扫描仪
 */
PJF.stm.SCA = {
  /*
   * 单张开始扫描
   */
  scanOnePaper: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchImageFileName = resultJson.pchImageFileName;
      info.pchCodeValue = resultJson.pchCodeValue;
      return info;
    }

    PJF.stm.client.callClient('SCA', 'scanOnePaper', cmdArgs, callback, fnSuccess);
  },

  /*
   * 回收/回退原件
   */
  scanNextStep: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30
    }, args);

    PJF.stm.client.callClient('SCA', 'scanNextStep', cmdArgs, callback);
  },

  /*
   * 结束扫描
   */
  terminateScan: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30
    }, args);

    PJF.stm.client.callClient('SCA', 'terminateScan', cmdArgs, callback);
  }
};

/*
 * 支付密码器
 */
PJF.stm.ZFM = {
  /*
   * 读取密码器编号
   */
  readCISN: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchCIID = resultJson.pchCIID;
      return info;
    }

    PJF.stm.client.callClient('ZFM', 'readCISN', cmdArgs, callback, fnSuccess);
  },

  /*
   * 产生密匙对
   */
  generateKeyPair: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchChipID = resultJson.pchChipID;
      info.pchVK = resultJson.pchVK;
      return info;
    }

    PJF.stm.client.callClient('ZFM', 'generateKeyPair', cmdArgs, callback, fnSuccess);
  },

  /*
   * 下载AK值（增加账号）
   */
  downLoadAK: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    PJF.stm.client.callClient('ZFM', 'downLoadAK', cmdArgs, callback);
  },

  /*
   * 删除账号
   */
  delAcc: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    PJF.stm.client.callClient('ZFM', 'delAcc', cmdArgs, callback);
  },

  /*
   * 同账号增发签名
   */
  addMachineSign: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchNewSign = resultJson.pchNewSign;
      return info;
    }

    PJF.stm.client.callClient('ZFM', 'addMachineSign', cmdArgs, callback, fnSuccess);
  },

  /*
   * 解锁密码器
   */
  unlockCI: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    PJF.stm.client.callClient('ZFM', 'unlockCI', cmdArgs, callback);
  },

  /*
   * 发行密码器
   */
  issueCI: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    PJF.stm.client.callClient('ZFM', 'issueCI', cmdArgs, callback);
  },

  /*
   * 得到验证码
   */
  getCheckCode: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchCheckCode = resultJson.pchCheckCode;
      return info;
    }

    PJF.stm.client.callClient('ZFM', 'getCheckCode', cmdArgs, callback, fnSuccess);
  }
};

PJF.stm.TCR = {
  /*
   * 存款初始化
   */
  initCashIn: function (callback, args) {
    //创建用户目录下tempCrown文件夹
    PJF.communication.fileSystem.fileOperation("FO_MKDIR", [{
      source: 'crownFsn/' + args.fsnDir,
      dest: ''
    }], function (resultInfo) {});
    var cmdArgs = {
      pchFSNFilesDir: PJF.stm.baseDir + "/crownFsn/" + args.fsnDir,
      pchFSNNumberTxtPath: PJF.stm.baseDir + "/Temp/" + args.txtFile,
      pchInstNo: PJF.roleInfo.orgCode
    };

    PJF.stm.client.callClient('TCR', 'initCashIn', cmdArgs, callback);
  },

  /*
   * 存入现金
   */
  insertCash: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient('TCR', 'insertCash', cmdArgs, callback);
  },

  /*
   * 退出暂存区钞票
   */
  ejectStackerCash: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20
    }, args);

    var cbresult = {}; //外设命令先返回的结果
    var loading; //遮罩
    var tmpfunc1, tmpfunc2, tmpfunc3, tmpfunc4;

    var ejectLoading; //取钞超时的遮罩

    //出钞口存在钞票，重新打个提示遮罩
    PJF.event.addSubscriber(PJF.stm.client.events.TCR_CASH_BOX_PRE, tmpfunc3 = function () {
      loading && loading.destroy();
      PJF.stm.log('取退钞-出钞，打开闸口', 'PJF_LOG_HARDWARE');
      ejectLoading = new PJF.ui.loading({
        msg: "请取走钞票",
        opacity: 0.0,
        timeout: (cmdArgs.iCashTakenTimeout || 120),
        noIcon: false
      });
    });

    //            //取款最后发taken事件，此时记录个TCR取走日志
    //            PJF.event.addSubscriber(PJF.stm.client.events.TCR_CASH_BOX_CASH_TAKEN, tmpfunc4 = function(){
    //                loading && loading.destroy();
    //                ejectLoading && ejectLoading.destroy();
    //            });

    PJF.event.onceSubscriber(PJF.stm.client.events.TCR_CASH_EJECT_COMPLETE, tmpfunc1 = function () {
      PJF.stm.log('取退钞-取缓存区钞票成功', 'PJF_LOG_HARDWARE');
      console.log('退出暂存区过程中成功');
      loading && loading.destroy();
      ejectLoading && ejectLoading.destroy();
      eventCb();
    });

    PJF.event.onceSubscriber(PJF.stm.client.events.TCR_CASH_EJECT_FAIL, tmpfunc2 = function () {
      PJF.stm.log('取退钞-取缓存区钞票失败', 'PJF_LOG_HARDWARE');
      console.log('退出暂存区过程中失败');
      loading && loading.destroy();
      ejectLoading && ejectLoading.destroy();
      eventCb(true);
    });

    var eventCb = function (flag) {
      PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_EJECT_COMPLETE, tmpfunc1);
      PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_EJECT_FAIL, tmpfunc2);
      PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_BOX_PRE, tmpfunc3);
      //                PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_BOX_CASH_TAKEN, tmpfunc4);
      if (flag) {
        cbresult.status = 0;
        cbresult.errorCode = 'PJF_TCR_EJECT_ERR00';
        cbresult.errorMsg = '退出缓存区钞票失败';
      }
      //这是才真正的执行应用的回调
      callback && callback(cbresult);
    };

    var cb = function (res) {
      cbresult = res;
      PJF.stm.log('取退钞-取缓存区钞票开始', 'PJF_LOG_HARDWARE');
      if (res.status == 1) {
        //等待退出暂存区回调
        loading = new PJF.ui.loading({
          msg: "",
          opacity: 0.5
        });
      }
      //任务直接失败了
      else {
        PJF.stm.log('取退钞-取缓存区钞票失败', 'PJF_LOG_HARDWARE');
        PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_EJECT_COMPLETE, tmpfunc1);
        PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_EJECT_FAIL, tmpfunc2);
        PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_BOX_PRE, tmpfunc3);
        //                    PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_BOX_CASH_TAKEN, tmpfunc4);
        callback && callback(res);
      }
    };

    PJF.stm.client.callClient('TCR', 'ejectStackerCash', cmdArgs, cb);
  },

  /*
   * 结束存款
   */
  finishCashIn: function (callback, args) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient('TCR', 'finishCashIn', cmdArgs, callback);
  },

  /*
   * 预配钞
   */
  mixAmount: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    function fnSuccess(resultJson) {
      var info = {};
      if (resultJson.pchMixResult == '') {
        console.log("预配钞函数调用失败，返回为空字符串");
        info.pjfstatus = '0';
        info.pchErrCode = "PJF_TCR_MIX_ERR00";
        info.pchError = "预配钞函数调用失败，返回为空字符串";
      }
      var tempMixResult = resultJson.pchMixResult.split('|');
      //返回张数格式：100元数量|50元数量|20元数量|10元数量|5元数量|1元数量
      info.hundredYuan = tempMixResult[0]; //100元张数
      info.fiftyYuan = tempMixResult[1]; //50元张数
      info.twentyYuan = tempMixResult[2]; //20元张数
      info.tenYuan = tempMixResult[3]; //10元张数
      info.fiveYuan = tempMixResult[4]; //5元张数
      info.oneYuan = tempMixResult[5]; //1元张数
      info.totalNum = parseInt(tempMixResult[0]) + parseInt(tempMixResult[1]) + parseInt(tempMixResult[2]) + parseInt(tempMixResult[3]) + parseInt(tempMixResult[4]) + parseInt(tempMixResult[5]); //总张数
      return info;
    }

    PJF.stm.client.callClient('TCR', 'mixAmount', cmdArgs, callback, fnSuccess);
  },

  /*
   * 取出钞票
   */
  dispenseAndPresent: function (args, callback) {
    //创建用户目录下crownFsn文件夹
    PJF.communication.fileSystem.fileOperation("FO_MKDIR", [{
      source: 'crownFsn/' + args.fsnDir,
      dest: ''
    }], function (resultInfo) {});
    var cmdArgs = $.extend({
      pchFSNFilesDir: PJF.stm.baseDir + "/crownFsn/" + args.fsnDir,
      pchFSNNumberTxtPath: PJF.stm.baseDir + "/Temp/" + args.txtFile,
      pchInstNo: PJF.roleInfo.orgCode,
      timeout: 120
    }, args);

    var cbresult = {}; //外设命令先返回的结果
    var loading, disloading; //遮罩
    var tmpfunc1, tmpfunc2, tmpfunc3, tmpfunc4;
    var totalPre = 100 * parseInt(args.pchMixFmt.split('|')[0]) + 50 * parseInt(args.pchMixFmt.split('|')[1]) +
      20 * parseInt(args.pchMixFmt.split('|')[2]) + 10 * parseInt(args.pchMixFmt.split('|')[3]) + 5 * parseInt(args.pchMixFmt.split('|')[4]) + parseInt(args.pchMixFmt.split('|')[5]); //取款总额

    //出钞口有钞票时，再打个遮罩
    PJF.event.addSubscriber(PJF.stm.client.events.TCR_CASH_BOX_PRE, tmpfunc3 = function () {
      loading && loading.destroy();
      disloading = new PJF.ui.loading({
        msg: "请取走钞票",
        opacity: 0.5,
        timeout: cmdArgs.timeout
      });
    });

    //取款最后发taken事件，此时记录个TCR取走日志
    PJF.event.addSubscriber(PJF.stm.client.events.TCR_CASH_BOX_CASH_TAKEN, tmpfunc4 = function () {
      loading && loading.destroy();
      disloading && disloading.destroy();
      eventCb('3');
    });

    //complete不是结束事件，记录个TCR取款日志
    PJF.event.addSubscriber(PJF.stm.client.events.TCR_CASH_DISPENSE_COMPLETE, tmpfunc1 = function () {
      console.log('取款过程中成功');
      tcrLog('2');
    });

    // 格式为:错误码|错误原因
    PJF.event.addSubscriber(PJF.stm.client.events.TCR_CASH_OUT_FAIL, tmpfunc2 = function (res) {
      loading && loading.destroy();
      disloading && disloading.destroy();
      var errorCode = res.split('|')[0];
      var errorMsg = res.split('|')[1];
      eventCb('2', errorCode, errorMsg);
    });

    function tcrLog(flag) {
      var ic_accountNo = PJF.stm.IC_CARD_INFO && PJF.stm.IC_CARD_INFO.resInfo.accountNo;
      var pb_accountNo = (PJF.stm.IC_CARD_INFO && PJF.stm.IC_CARD_INFO.isPassbook && PJF.stm.IC_CARD_INFO.resInfo.accountNo) || (PJF.stm.PASSBOOK_INFO && PJF.stm.PASSBOOK_INFO.resInfo.accountNo);
      //记录TCR日志
      var args = {
        TCR_INOUT_FLAG: flag,
        TCR_RET_STATUS: cbresult.errorCode,
        TCR_RET_DES: cbresult.errorMsg,
        TCR_AMT: totalPre + '',
        TCR_DNMN_INFO: cmdArgs.pchMixFmt,
        TCR_ACCOUNT_NO: ic_accountNo || pb_accountNo, //账号
        TCR_ACCOUNT_TYPE: ic_accountNo ? '1' : '2' //类别，1-IC卡，2-存折，3-手机，4-无卡无折
      };
      PJF.stm.TCR.tcrLogHandler(args);
    }

    var eventCb = function (flag, errorCode, errorMsg) {
      PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_DISPENSE_COMPLETE, tmpfunc1);
      PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_OUT_FAIL, tmpfunc2);
      PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_BOX_PRE, tmpfunc3);
      PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_BOX_CASH_TAKEN, tmpfunc4);
      console.log('dispense cash callback:' + JSON.stringify(cbresult));
      if (errorCode) { //失败的也算出错好了,这样应用去做相应处理
        cbresult.status = 0;
        cbresult.errorCode = errorCode;
        cbresult.errorMsg = errorMsg;
      }
      tcrLog(flag);
      //这是才真正的执行应用的回调
      callback && callback(cbresult);
    };

    var cb = function (res) {
      cbresult = res;
      if (res.status == 1) {
        //等待存款回调
        loading = new PJF.ui.loading({
          msg: "正在出钞",
          opacity: 0.5,
          timeout: cmdArgs.timeout
        });
      }
      //任务直接失败了
      else {
        PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_DISPENSE_COMPLETE, tmpfunc1);
        PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_OUT_FAIL, tmpfunc2);
        PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_BOX_PRE, tmpfunc3);
        PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_BOX_CASH_TAKEN, tmpfunc4);
        //出钞外设失败时，也记录TCR日志
        tcrLog('2');
        callback && callback(res)
      }
    };

    PJF.stm.client.callClient('TCR', 'dispenseAndPresent', cmdArgs, cb);
  },

  /*
   * 打开出钞口闸门
   */
  openShutter: function (callback, args) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient('TCR', 'openShutter', cmdArgs, callback);
  },

  /*
   * 关闭出钞口闸门
   */
  closeShutter: function (callback, args) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient('TCR', 'closeShutter', cmdArgs, callback);
  },

  /*
   * 获取物理钞箱信息
   */
  getCashBoxInfo: function (callback, args) {
    var cmdArgs = $.extend({}, args);

    function fnSuccess(resultJson) {
      var info = {};
      var boxInfo = resultJson.boxInfo || '';
      var cycleInfo = []; //循环箱信息，可能有多个
      var recycleInfo = {}; //回收箱信息，只有一个
      var tempArr = boxInfo.split('#'); //区分钞箱类型异常
      /*var hasError = false; //是否有钞箱类型获取异常
      for(var i in tempArr){
          if(tempArr[i].indexOf('E') == 2){
              hasError = true;
              break;
          }
      }
      //各种异常值是-1，F、E、和I
      if ((boxInfo.indexOf('-1') != -1) || (boxInfo.indexOf('F') != -1) || (boxInfo.indexOf('I') != -1) || hasError) {
          //异常
          console.log("获取物理钞箱信息异常");
          info.pjfstatus = '0';
          info.pchErrCode = "PJF_TCR_BOXINFO_ERR00";
          info.pchError = "获取物理钞箱信息异常";
      }*/
      var boxInfoArr = boxInfo.split('#');
      for (var i in boxInfoArr) {
        var tempBoxInfoArr = boxInfoArr[i].split('|');
        if (tempBoxInfoArr[1] == 'R') {
          //循环箱
          var tempCycleInfo = {};
          tempCycleInfo['sequence'] = tempBoxInfoArr[0]; //编号
          tempCycleInfo['amount'] = tempBoxInfoArr[2]; //面额
          tempCycleInfo['count'] = tempBoxInfoArr[3]; //张数
          tempCycleInfo['total'] = parseInt(tempBoxInfoArr[2]) * parseInt(tempBoxInfoArr[3]); //汇总金额
          tempCycleInfo['maxCount'] = tempBoxInfoArr[4]; //最大张数
          tempCycleInfo['state'] = tempBoxInfoArr[5]; //状态
          cycleInfo.push(tempCycleInfo);
        } else if (tempBoxInfoArr[1] == 'C') {
          //回收箱
          recycleInfo['sequence'] = tempBoxInfoArr[0]; //编号
          recycleInfo['amount'] = tempBoxInfoArr[2]; //面额
          var tempRecycleCountArr = tempBoxInfoArr[3].split('$');
          recycleInfo['recycleCount'] = {
            hundredYuan: tempRecycleCountArr[0], //100元张数
            fiftyYuan: tempRecycleCountArr[1], //50元张数
            twentyYuan: tempRecycleCountArr[2], //20元张数
            tenYuan: tempRecycleCountArr[3], //10元张数
            fiveYuan: tempRecycleCountArr[4], //5元张数
            oneYuan: tempRecycleCountArr[5], //1元张数
            totalNum: parseInt(tempRecycleCountArr[0]) + parseInt(tempRecycleCountArr[1]) + parseInt(tempRecycleCountArr[2]) +
              parseInt(tempRecycleCountArr[3]) + parseInt(tempRecycleCountArr[4]) + parseInt(tempRecycleCountArr[5]) //总张数
          };
          recycleInfo['totalSum'] = 100 * parseInt(tempRecycleCountArr[0]) + 50 * parseInt(tempRecycleCountArr[1]) + 20 * parseInt(tempRecycleCountArr[2]) +
            10 * parseInt(tempRecycleCountArr[3]) + 5 * parseInt(tempRecycleCountArr[4]) + parseInt(tempRecycleCountArr[5]); //总额
          recycleInfo['maxCount'] = tempBoxInfoArr[4]; //最大张数
          recycleInfo['state'] = tempBoxInfoArr[5]; //状态
        }
      }

      info.cycleInfo = cycleInfo;
      info.recycleInfo = recycleInfo;
      info.boxInfo = boxInfo;
      return info;
    }

    function fnFail(resultJson) {
      var info = {};
      info.boxInfo = resultJson.boxInfo;
      return info;
    }

    PJF.stm.client.callClient('TCR', 'getCashBoxInfo', cmdArgs, callback, fnSuccess, fnFail);
  },

  /*
   * 设置物理钞箱信息
   */
  setCashBoxInfo: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient('TCR', 'setCashBoxInfo', cmdArgs, callback);
  },

  /*
   * 记录TCR日志
   */
  tcrLogHandler: function (args) {
    var jsonData = {
      BRANCH_ID: PJF.roleInfo.orgCode, //机构号
      STM_DEV_ID: PJF.otherInfo.devId, //TCR设备编号
      STM_SVC_ID: PJF.otherInfo.SVC_ID, //交易序列号
      TCR_SUB_SEQID: PJF.util.formatDate(new Date(), 'yyyyMMddhhmmss') + Math.random().toString().substr(2, 6), //子序列号
      STM_MNU_ID: PJF.otherInfo.MENU_ID, //菜单ID
      TXN_ITT_CHNL_ID: PJF.otherInfo.cashChaId //渠道id
    };
    $.extend(jsonData, args);
    var loading = new PJF.ui.loading({
      msg: '',
      noIcon: true
    });
    var url = PJF.constants.MGT_SERVER + '/bosWeb/ecpJson.action';
    var reqDataStr = "jsonData=" + JSON.stringify(jsonData) + "&_fw_service_id=tcrLogRecord";
    console.log("记录TCR日志请求参数为:" + reqDataStr);
    PJF.communication.Http.SendCrossDomainRequest(url, reqDataStr, 30000, function (status, responseData) {
      console.log('跨域返回结果,status:' + status + ';responseData:' + responseData);
      loading.destroy();
      status = JSON.parse(status);
      if (status.success && responseData) {
        responseData = JSON.parse(responseData);
        if (responseData && responseData.BK_STATUS && (responseData.BK_STATUS == PJF.constants.BK_CODE_SUCCESS)) {
          console.log('记录TCR日志成功');
        } else {
          console.log('记录TCR日志失败');
        }
      } else {
        console.log('记录TCR日志通信失败');
      }
    });
  },

  /*
   * 获取TCR设备状态
   */
  getTCRDeviceStatus: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchStatus = JSON.parse(resultJson.pchStatus); //设备状态，JSON字符串
      return info;
    }

    PJF.stm.client.callClient('TCR', 'getTCRDeviceStatus', cmdArgs, callback, fnSuccess);
  },

  /*
   * 冠字号黑名单设置
   */
  setSNBlackList: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient('TCR', 'setSNBlackList', cmdArgs, callback);
  },

  /*
   * 设置各钞箱预留钞票张数
   */
  setReservedCashNum: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient('TCR', 'setReservedCashNum', cmdArgs, callback);
  },

  /*
   * TCR复位
   */
  resetTCRDev: function (args, callback) {
    var cbresult = {}; //外设结果
    var loading; //默认遮罩
    var _args = {};
    $.extend(_args, args);
    var tmpfunc1, tmpfunc2, tmpfunc3;
    PJF.event.onceSubscriber(PJF.stm.client.events.TCR_RESET_SUCCESS, tmpfunc1 = function () {
      loading && loading.destroy();
      eventCb(null, null);
    });
    // 格式为:错误码|错误原因
    PJF.event.onceSubscriber(PJF.stm.client.events.TCR_RESET_FAIL, tmpfunc2 = function (res) {
      loading && loading.destroy();
      var errorCode = res.split('|')[0];
      var errorMsg = res.split('|')[1];
      eventCb(errorCode, errorMsg);
    });
    //出钞口可能有钞票
    PJF.event.addSubscriber(PJF.stm.client.events.TCR_CASH_BOX_PRE, tmpfunc3 = function () {
      console.log('reset present cash');
    });

    var eventCb = function (errorCode, errorMsg) {
      PJF.event.removeSubscriber(PJF.stm.client.events.TCR_RESET_SUCCESS, tmpfunc1);
      PJF.event.removeSubscriber(PJF.stm.client.events.TCR_RESET_FAIL, tmpfunc2);
      PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_BOX_PRE, tmpfunc3);
      console.log('reset callback:' + JSON.stringify(cbresult));
      if (errorCode) {
        cbresult.status = 0;
        cbresult.errorCode = errorCode;
        cbresult.errorMsg = errorMsg;
      }
      callback && callback(cbresult);
    };

    var cb = function (res) {
      cbresult = res;
      if (res.status == 1) {
        //等待回调
        loading = new PJF.ui.loading({
          msg: "",
          opacity: 0.1,
          noIcon: true
        });
      }
      //任务直接失败了
      else {
        PJF.event.removeSubscriber(PJF.stm.client.events.TCR_RESET_SUCCESS, tmpfunc1);
        PJF.event.removeSubscriber(PJF.stm.client.events.TCR_RESET_FAIL, tmpfunc2);
        PJF.event.removeSubscriber(PJF.stm.client.events.TCR_CASH_BOX_PRE, tmpfunc3);
        callback && callback(res)
      }
    };

    PJF.stm.client.callClient("TCR", "resetTCRDev", _args, cb);
  }
};

/*
 * PSAM卡座
 */
PJF.stm.SAM = {
  /*
   * 上电复位
   */
  psamPowerOn: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchData = resultJson.pchData;
      info.iDataLen = resultJson.iDataLen;
      return info;
    }

    PJF.stm.client.callClient('SAM', 'psamPowerOn', cmdArgs, callback, fnSuccess);
  },

  /*
   * 下电
   */
  psamPowerOff: function (args, callback) {
    var cmdArgs = $.extend({}, args);

    PJF.stm.client.callClient('SAM', 'psamPowerOff', cmdArgs, callback);
  },

  /*
   * 指令执行
   */
  execCmd: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchOutData = resultJson.pchOutData;
      info.iOutDataLen = resultJson.iOutDataLen;
      return info;
    }

    PJF.stm.client.callClient('SAM', 'execCmd', cmdArgs, callback, fnSuccess);
  },

  /*
   * 删除账号
   */
  delAcc: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    PJF.stm.client.callClient('ZFM', 'delAcc', cmdArgs, callback);
  },

  /*
   * 同账号增发签名
   */
  addMachineSign: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchNewSign = resultJson.pchNewSign;
      return info;
    }

    PJF.stm.client.callClient('ZFM', 'addMachineSign', cmdArgs, callback, fnSuccess);
  },

  /*
   * 解锁密码器
   */
  unlockCI: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    PJF.stm.client.callClient('ZFM', 'unlockCI', cmdArgs, callback);
  },

  /*
   * 发行密码器
   */
  issueCI: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    PJF.stm.client.callClient('ZFM', 'issueCI', cmdArgs, callback);
  },

  /*
   * 得到验证码
   */
  getCheckCode: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20,
      cStep: 1
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchCheckCode = resultJson.pchCheckCode;
      return info;
    }

    PJF.stm.client.callClient('ZFM', 'getCheckCode', cmdArgs, callback, fnSuccess);
  }
};

/*
 * 人脸识别
 */
PJF.stm.LHT = {
  //打开摄像头
  openCamera: function (args, callback) {
    PJF.stm.log('人脸识别打开摄像头', 'PJF_LOG_HARDWARE');
    var he = $('#' + args.domId)[0];
    if (he) {
      var br = he.getBoundingClientRect(); // 摄像头窗口的定位
      var cnturl = location.host;
      if (cnturl.indexOf('.wn.') != -1) {
        cnturl = 'cnt01.nemc.jh';
      }
      var cmdArg = $.extend({
        iIndex: 1, //摄像头序号，主摄像头：1
        frameRate: 30 //帧率
      }, {
        left: args.left || br.left + window.screenLeft,
        top: args.top || br.top + window.screenTop,
        height: args.height || br.height,
        width: args.width || br.width,
        pchUrl: 'http://' + (PJF.constants.ON_PROD ? cnturl : PJF.constants.LHT_URL) + '/bosWeb/page/stm/common/web_small/index.html',
        showWaterMark: (typeof (args.showWaterMark) != 'undefined' ? args.showWaterMark : true), //是否显示人像框
        showFaceRect: (typeof (args.showFaceRect) != 'undefined' ? args.showFaceRect : true) //是否显示人脸跟踪框
      });

      PJF.stm.client.callClient('LHT', 'openCamera', cmdArg, callback);
    } else {
      console.log('openCamera找不到摄像头开启的DOM元素');
    }
  },
  //开始检测
  startDetect: function (args, callback) {
    PJF.stm.log('人脸识别开始检测', 'PJF_LOG_HARDWARE');
    var cmdArgs = $.extend({
      motion: 0, // 检测动作 0:眨眼 1.张嘴 2.摇头 3.点头
      detectMode: 1, // 0:EASY模式，1:NORMAL模式，2:HARD模式，3:HELL模式
      picMode: 0, // 0:单图模式，1:多图模式
      photoHeight: 480, // 拍摄照片尺寸
      photoWidth: 640, // 拍摄图片尺寸
      expressRate: 70, // 取值为0~100的整数，表示压缩的百分比
      timeout: 10, // 动作检测超时
      photoPath: '' //保存照片路径，文件名
    }, args);

    var cbresult = {}; //外设命令先返回的结果
    var loading; //等待外设事件时的遮罩
    var tmpfunc1, tmpfunc2, tmpfunc3, tmpfunc4, tmpfunc5;
    PJF.event.addSubscriber(PJF.stm.client.events.LHT_LOSS, tmpfunc1 = function () {
      loading && loading.destroy();
      if (!cmdArgs.noSound) PJF.communication.player.PlaySoundByUrl("app/common/faceLoss.mp3", true);
      eventCb(false, {
        errorCode: 'LHT_LOSS_ERR',
        errorMsg: '人像采集失败'
      });
    });

    PJF.event.addSubscriber(PJF.stm.client.events.LHT_TMOUT, tmpfunc2 = function () {
      loading && loading.destroy();
      if (!cmdArgs.noSound) PJF.communication.player.PlaySoundByUrl("app/common/faceTimeout.mp3", true);
      eventCb(false, {
        errorCode: 'LHT_TMOUT_ERR',
        errorMsg: '检测超时'
      });
    });

    PJF.event.addSubscriber(PJF.stm.client.events.LHT_CAM_FAILED, tmpfunc4 = function () {
      loading && loading.destroy();
      eventCb(false, {
        errorCode: 'LHT_CAM_FAILED_ERR',
        errorMsg: '检测中摄像头读取异常'
      });
    });

    PJF.event.addSubscriber(PJF.stm.client.events.LHT_SDK_FAILED, tmpfunc5 = function () {
      loading && loading.destroy();
      eventCb(false, {
        errorCode: 'LHT_SDK_FAILED_ERR',
        errorMsg: '检测中SDK内部调用错误'
      });
    });

    PJF.event.addSubscriber(PJF.stm.client.events.LHT_FINISH, tmpfunc3 = function () {
      loading && loading.destroy();
      eventCb(true);
    });

    var eventCb = function (flag, data) {
      PJF.event.removeSubscriber(PJF.stm.client.events.LHT_LOSS, tmpfunc1);
      PJF.event.removeSubscriber(PJF.stm.client.events.LHT_TMOUT, tmpfunc2);
      PJF.event.removeSubscriber(PJF.stm.client.events.LHT_FINISH, tmpfunc3);
      PJF.event.removeSubscriber(PJF.stm.client.events.LHT_CAM_FAILED, tmpfunc4);
      PJF.event.removeSubscriber(PJF.stm.client.events.LHT_SDK_FAILED, tmpfunc5);
      //失败事件，应用执行失败逻辑
      if (!flag) {
        cbresult.status = 0;
        cbresult.errorCode = data.errorCode;
        cbresult.errorMsg = data.errorMsg;
      }
      console.log('start detect:' + JSON.stringify(cbresult));
      callback && callback(cbresult);
    };

    var cb = function (res) {
      cbresult = res;
      if (res.status == 1) {
        if (cmdArgs.loadingConf !== false) loading = new PJF.ui.loading({
          msg: "",
          opacity: 0.1,
          noIcon: true,
          timeout: cmdArgs.timeout
        });
      }
      //任务直接失败了
      else {
        PJF.event.removeSubscriber(PJF.stm.client.events.LHT_LOSS, tmpfunc1);
        PJF.event.removeSubscriber(PJF.stm.client.events.LHT_TMOUT, tmpfunc2);
        PJF.event.removeSubscriber(PJF.stm.client.events.LHT_FINISH, tmpfunc3);
        PJF.event.removeSubscriber(PJF.stm.client.events.LHT_CAM_FAILED, tmpfunc4);
        PJF.event.removeSubscriber(PJF.stm.client.events.LHT_SDK_FAILED, tmpfunc5);
        callback && callback(res);
      }
    };

    PJF.stm.client.callClient('LHT', 'startDetect', cmdArgs, cb);
  },
  //停止检测
  endDetect: function (callback, args) {
    PJF.stm.log('人脸识别停止检测', 'PJF_LOG_HARDWARE');
    var cmdArgs = $.extend({}, args);
    var cbresult = {}; //外设命令先返回的结果
    var loading; //等待外设事件时的遮罩
    var tmpfunc;
    PJF.event.addSubscriber(PJF.stm.client.events.LHT_SUCCESS, tmpfunc = function () {
      loading && loading.destroy();
      PJF.event.removeSubscriber(PJF.stm.client.events.LHT_SUCCESS, tmpfunc);
      console.log('end detect:' + JSON.stringify(cbresult));
      callback && callback(cbresult);
    });

    var cb = function (res) {
      cbresult = res;
      if (res.status == 1) {
        if (cmdArgs.loadingConf !== false) loading = new PJF.ui.loading({
          msg: "",
          opacity: 0.1,
          noIcon: true
        });
      }
      //任务直接失败了
      else {
        PJF.event.removeSubscriber(PJF.stm.client.events.LHT_SUCCESS, tmpfunc);
        callback && callback(res);
      }
    };

    PJF.stm.client.callClient('LHT', 'endDetect', cmdArgs, cb);
  },
  //关闭摄像头
  closeCamera: function (callback, args) {
    PJF.stm.log('人脸识别关闭摄像头', 'PJF_LOG_HARDWARE');
    var cmdArgs = $.extend({}, args);
    PJF.stm.client.callClient('LHT', 'closeCamera', cmdArgs, callback);
  }
};

/*
 * 人脸识别双目摄像头
 */
PJF.stm.LHA = {
    fnErrorCode: function (data) {
        var result = data || {};
        if (data.errorCode == "DRVLHT0000") {
            result.status = 1;
        }
        return result;
    },
    //打开摄像头
    openCamera: function (args, callback) {
        PJF.stm.log('人脸识别打开摄像头', 'PJF_LOG_HARDWARE');
        var he = $('#' + args.domId)[0];
        if (he) {
            var br = he.getBoundingClientRect(); // 摄像头窗口的定位
            var cnturl = location.host;
            if (cnturl.indexOf('.wn.') != -1) {
                cnturl = 'cnt01.nemc.jh';
            }
            var cmdArg = $.extend({
                iIndex: 1, //摄像头序号，主摄像头：1
                frameRate: 30 //帧率
            }, {
                left: args.left || br.left + window.screenLeft,
                top: args.top || br.top + window.screenTop,
                height: args.height || br.height,
                width: args.width || br.width,
                pchUrl: 'http://' + (PJF.constants.ON_PROD ? cnturl : PJF.constants.LHT_URL) + '/bosWeb/page/stm/common/web_small/index.html',
                showWaterMark: (typeof(args.showWaterMark) != 'undefined' ? args.showWaterMark : true), //是否显示人像框
                showFaceRect: (typeof(args.showFaceRect) != 'undefined' ? args.showFaceRect : true), //是否显示人脸跟踪框
                loadingConf: args.loadingConf
            });
            if (PJF.util.isKylinSTM()) {
                //linux下chrome打开被拉宽了
                var _rate = screen.width/document.body.clientWidth;
                cmdArg.left *= _rate;
                cmdArg.top *= _rate;
                cmdArg.height *= _rate;
                cmdArg.width *= _rate;
            }
            PJF.stm.client.callClient('LHA', 'openCamera', cmdArg, function (data) {
                var result = PJF.stm.LHA.fnErrorCode(data);
                callback && callback(result);
            });
        }
        else {
            console.log('openCamera找不到摄像头开启的DOM元素');
        }
    },
    //开始检测
    startDetect: function (args, callback) {
        PJF.stm.log('人脸识别开始检测', 'PJF_LOG_HARDWARE');
        var cmdArgs = $.extend({
            motion: 10, // 检测动作 10:自动
            detectMode: 1, // 0:EASY模式，1:NORMAL模式，2:HARD模式，3:HELL模式
            picMode: 0,  // 0:单图模式，1:多图模式
            photoHeight: 480, // 拍摄照片尺寸
            photoWidth: 640, // 拍摄图片尺寸
            expressRate: 70, // 取值为0~100的整数，表示压缩的百分比
            timeout: 10, // 动作检测超时
            photoPath: '' //保存照片路径，文件名
        }, args);

        var cbresult = {}; //外设命令先返回的结果
        var loading; //等待外设事件时的遮罩
        var tmpfunc1, tmpfunc2;

        PJF.event.addSubscriber(PJF.stm.client.events.LHA_SUCCESS, tmpfunc1 = function () {
            loading && loading.destroy();
            eventCb(true);
        });

        PJF.event.addSubscriber(PJF.stm.client.events.LHA_FAIL, tmpfunc2 = function () {
            loading && loading.destroy();
            eventCb(false, {
                errorCode: 'LHA_LOSS_ERR',
                errorMsg: '人像采集失败'
            });
        });

        var eventCb = function (flag, data) {
            PJF.event.removeSubscriber(PJF.stm.client.events.LHA_SUCCESS, tmpfunc1);
            PJF.event.removeSubscriber(PJF.stm.client.events.LHA_FAIL, tmpfunc2);
            //失败事件，应用执行失败逻辑
            if (!flag) {
                cbresult.status = 0;
                cbresult.errorCode = data.errorCode;
                cbresult.errorMsg = data.errorMsg;
            }
            console.log('lha start detect:' + JSON.stringify(cbresult));
            callback && callback(cbresult);
        };

        var cb = function (res) {
            cbresult = res;
            if (res.status == 1) {
                if (cmdArgs.loadingConf !== false) loading = new PJF.ui.loading({msg: "", opacity: 0.1, noIcon: true, timeout: cmdArgs.timeout});
            }
            //任务直接失败了
            else {
                PJF.event.removeSubscriber(PJF.stm.client.events.LHA_SUCCESS, tmpfunc1);
                PJF.event.removeSubscriber(PJF.stm.client.events.LHA_FAIL, tmpfunc2);
                callback && callback(res);
            }
        };

        PJF.stm.client.callClient('LHA', 'startDetect', cmdArgs, function (data) {
            var result = PJF.stm.LHA.fnErrorCode(data);
            cb && cb(result);
        });
    },
    //停止检测
    endDetect: function (callback, args) {
        PJF.stm.log('人脸识别停止检测', 'PJF_LOG_HARDWARE');
        var cmdArgs = $.extend({}, args);
        PJF.stm.client.callClient('LHA', 'endDetect', cmdArgs, function (data) {
            var result = PJF.stm.LHA.fnErrorCode(data);
            callback && callback(result);
        });
    },
    //关闭摄像头
    closeCamera: function (callback, args) {
        PJF.stm.log('人脸识别关闭摄像头', 'PJF_LOG_HARDWARE');
        var cmdArgs = $.extend({}, args);
        PJF.stm.client.callClient('LHA', 'closeCamera', cmdArgs, function (data) {
            var result = PJF.stm.LHA.fnErrorCode(data);
            callback && callback(result);
        });
    },
    //裁取人脸
    faceDetectFromImage: function (args, callback) {
        var cmdArgs = $.extend({
            faceCount: 1
        }, args);

        function fnHandler(resultJson) {
            var info = {
              faceBase64: ''
            };
            try{
                info.faceBase64 = PJF.util.safeParse(resultJson.faceArray)[0]
            }catch (e) {
                console.log(e.stack)
            }
            return info;
        }

        PJF.stm.client.callClient('LHA', 'faceDetectFromImage', cmdArgs, function (data) {
            var result = PJF.stm.LHA.fnErrorCode(data);
            callback && callback(result);
        }, fnHandler, fnHandler);
    }
};

/*
 * 智能卡库
 */
PJF.stm.ZNK = {
  /*
   * 获取设备状态
   */
  getStatus: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchLastOptId = resultJson.pchLastOptId;
      info.pchStatus = resultJson.pchStatus;
      return info;
    }

    PJF.stm.client.callClient('ZNK', 'getStatus', cmdArgs, callback, fnSuccess);
  },

  /*
   * 重置复位设备
   */
  reset: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'reset', cmdArgs, callback);
  },

  /*
   * 单张加卡
   */
  addCard: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchSpareSlotCnt = resultJson.pchSpareSlotCnt;
      return info;
    }

    PJF.stm.client.callClient('ZNK', 'addCard', cmdArgs, callback, fnSuccess);
  },

  /*
   * 批量加卡
   */
  addCardBatch: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchSpareSlotCnt = resultJson.pchSpareSlotCnt;
      return info;
    }

    PJF.stm.client.callClient('ZNK', 'addCardBatch', cmdArgs, callback, fnSuccess);
  },

  /*
   * 手工加卡
   */
  addCardManual: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchSpareSlotCnt = resultJson.pchSpareSlotCnt;
      return info;
    }

    PJF.stm.client.callClient('ZNK', 'addCardManual', cmdArgs, callback, fnSuccess);
  },

  /*
   * 停止加卡
   */
  stopAddCard: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'stopAddCard', cmdArgs, callback);
  },

  /*
   * 单张取卡
   */
  getCardByNo: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'getCardByNo', cmdArgs, callback);
  },

  /*
   * 读卡磁道
   */
  getCardNum: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'getCardNum', cmdArgs, callback, PJF.stm.CardReader.fnSuccess);
  },

  /*
   * 读IC卡客户信息
   */
  getICCardInfo: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041',
      iIcFlag: 1,
      aryTagList: args.aryTagList || "x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A",
      aryAIDList: args.aryAIDList || 'A000000333010101|A000000333010102|A000000333010103|A000000333010106'
    }, args);

    function fnSuccess(resultJson) {
      var result = {};
      var info;
      result.resType = (resultJson.pICType == '1') ? '1' : '0'; //智能卡库返回1-接触式 3-磁条
      result.resInfo = resultJson.pcICInfo;
      if (resultJson.pICType == '3') result.pchTrackData2 = resultJson.pcICInfo; //磁条卡时，加个字段
      info = PJF.stm.ICMaker.fnSuccess(result);
      return info;
    }

    var callback1 = function (result) {

      if (result.status == 1 && args.ARQC && result.info.resType == '1') {
        PJF.stm.ZNK.genARQC({
          ARQC: args.ARQC,
          pchIp: args.pchIp
        }, function (arqcRes) {
          var extResult = $.extend(true, {}, result, arqcRes); //简单覆盖结果
          extResult = $.extend(true, extResult, {
            info: {
              resInfo: arqcRes.info
            }
          }); //55域等放到resInfo里
          callback && (callback(extResult));
        })
      } else if (result.status == 1 && result.info.resType == '3') {
        var pchTrackData2 = result.info.stmPchTrackData2.split("=")[1];
        if ((pchTrackData2.charAt(4) == 2) || (pchTrackData2.charAt(4) == 6)) {
          result.status = 0;
          result.errorCode = 'PJF_TRACK2_PARSE_ERR04';
          result.errorMsg = '不允许IC复合卡通过磁条交易，' + (PJF.otherInfo.isSelfBank ? '请联系工作人员' :  '详情请咨询网点工作人员。');
        } else {
          result.info.resType = '0'; //正常的场景，resType都恢复0吧
        }
        callback && (callback(result));
      } else {
        callback && (callback(result));
      }
    };

    PJF.stm.client.callClient('ZNK', 'getICCardInfo', cmdArgs, callback1, fnSuccess);
  },

  /*
   * 从IC卡获取ARQC
   */
  genARQC: function (args, callback) {
    var args1 = {
      iPort: '11041',
      iIcFlag: 1,
      pchInput: args.pchInput,
      pchAIDList: args.pchAIDList || 'A000000333010101|A000000333010102|A000000333010103|A000000333010106',
      piLengthD55: args.piLengthD55 || 2048,
      piLengthD60: args.piLengthD60 || 2048,
      timeout: args.timeout || 20
    };
    args1.loadingConf = {
      msg: "设备正在处理中",
      opacity: 0.1,
      noIcon: true,
      timeout: args1.timeout
    };
    $.extend(true, args1, args);

    if (args.ARQC) {
      var currTime = PJF.util.formatDate(new Date(), 'yyyyMMddhhmmss');
      //这是用来生成产生ARQC数据的值
      args.ARQC = $.extend(args.ARQC, {
        transDate: currTime.substr(0, 8), //交易日期
        transTime: currTime.substr(8, 16), //交易时间
        transOper: PJF.userInfo.userCode //商户，默认传操作员号
      });
      //应用列表数据
      if (args.ARQC.appType == 'default') {
        args1.pchAIDList = 'A000000333010101|A000000333010102|A000000333010103|A000000333010106';
      } else if (args.ARQC.appType == '1') {
        args1.pchAIDList = 'A000000333010101';
      } else if (args.ARQC.appType == '2') {
        args1.pchAIDList = 'A000000333010102';
      }
      args1.pchInput = PJF.stm.ICMaker.genARQCpchInput(PJF.stm.ICMaker.decimal2Ans(args.ARQC.authAmt),
        PJF.stm.ICMaker.decimal2Ans(args.ARQC.otherAmt),
        args.ARQC.cType, args.ARQC.transDate, args.ARQC.transType,
        args.ARQC.transTime, args.ARQC.transOper);
    }

    function fnSuccess(resultJson) {
      var info = {};
      info.pICType = resultJson.pIcType;
      info.pchD55 = resultJson.pchD55;
      info.pchD60 = resultJson.pchD60;
      info.pchInput = args1.pchInput;
      info.pchD55Len = resultJson.pchD55.length / 2;
      return info;
    }
    PJF.stm.client.callClient('ZNK', 'genARQC', args1, callback, fnSuccess);
  },

  /*
   * 从卡盘中取卡到读卡位
   */
  getCardToReadSlot: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'getCardToReadSlot', cmdArgs, callback);
  },

  /*
   * 读卡口回收卡到卡盘
   */
  recoverReadSlotToChunk: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'recoverReadSlotToChunk', cmdArgs, callback);
  },

  /*
   * 吐卡口吐卡
   */
  spitCard: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchStaffId = resultJson.pchStaffId;
      return info;
    }

    PJF.stm.client.callClient('ZNK', 'spitCard', cmdArgs, callback, fnSuccess);
  },

  /*
   * 吐卡口回收到卡盘
   */
  recoveSpitToChunk: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'recoveSpitToChunk', cmdArgs, callback);
  },

  /*
   * 根据卡号查询卡登记簿中符合条件数据
   */
  queryCardsExistByNo: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchCardInfos = resultJson.pchCardInfos;
      return info;
    }

    PJF.stm.client.callClient('ZNK', 'queryCardsExistByNo', cmdArgs, callback, fnSuccess);
  },

  /*
   * 查询当天吞卡记录
   */
  getRetainedCardInfo: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchCardInfos = resultJson.pchCardInfos;
      return info;
    }

    PJF.stm.client.callClient('ZNK', 'getRetainedCardInfo', cmdArgs, callback, fnSuccess);
  },

  /*
   * 复位设备
   */
  restoreDev: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'restoreDev', cmdArgs, callback);
  },

  /*
   * 进卡
   */
  putCardIn: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchStaffId = resultJson.pchStaffId;
      info.pchStaffName = resultJson.pchStaffName;
      return info;
    }

    PJF.stm.client.callClient('ZNK', 'putCardIn', cmdArgs, callback, fnSuccess);
  },

  /*
   * 出卡
   */
  putCardOut: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'putCardOut', cmdArgs, function(result){
        if ((cmdArgs.socialCard == "ZNK") && (cmdArgs.iIsValidCard == "1")) {
            //吞卡失败特殊菜单处理，指纹验证
            var isSpecialMenu1 = (['ACC10001', 'SPB30001', 'SPB30002', 'SPB30003', 'SPB30005'].indexOf(PJF.otherInfo.MENU_ID) != -1); //返回首页
            var isSpecialMenu2 = (['CPB30008', 'CPB30026', 'CPB20005', 'CPB20013', 'CPB20006', 'CPB20009', 'CPB20014'].indexOf(PJF.otherInfo.MENU_ID) != -1); //继续流程
            //吞卡时，向pad发消息
            var menuName = PJF.stm.enterMenu ? PJF.stm.enterMenu.NAME : '首页';
            var padReason = cmdArgs.stmManage ? (cmdArgs.stmManage.recycle_msg ? cmdArgs.stmManage.recycle_msg : cmdArgs.conReason) : cmdArgs.conReason;
            var padMsg = menuName + '有卡被吞，吞卡原因为' + padReason;
            PJF.communication.callPad({
                busiName: padMsg
            });

            //若此时有身份证，发送消息至pad
            if (PJF.fsm.get(PJF.fsm.fmIds.STM_IDCARD).is('hasId')) {
                PJF.communication.callPad({
                    busiName: menuName + '有卡被吞，卡槽中还有身份证'
                });
            }

            if (result.status) {
                //发卡页面吞卡
                if (cmdArgs.stmManage) {
                    $.extend(cmdArgs.stmManage, {
                        cardkey_type: 'Card',
                        device_id: PJF.otherInfo.devId,
                        ins_id: PJF.roleInfo.orgCode
                    });
                    PJF.communication.stmManageAjax({
                        fwServiceId: 'stm.doLogCardKeyFailure',
                        jsonData: cmdArgs.stmManage
                    });
                    PJF.communication.addSwallowCardRecord(cmdArgs.stmManage);
                }
                //非发卡页面吞卡
                else {
                    PJF.communication.returnCard(cmdArgs);
                }

                callback && callback(result);
            } else if (!result.status && PJF.otherInfo.MENU_ID && (isSpecialMenu1 || isSpecialMenu2)) {
                //发卡失败，吞卡失败时，弹工作人员框，发送PAD消息
                var name = PJF.stm.enterMenu ? PJF.stm.enterMenu.NAME : '首页';
                PJF.communication.callPad({
                    busiName: PJF.userInfo.userCode + '设备' + name + '吞卡失败'
                });
                var randomId = PJF.util.generateUUid();
                $('body').append('<div id="' + randomId + '"></div>');
                new PJF.ui.fingerReader({
                    dom: randomId,
                    authTip: '吞卡失败，请工作人员授权通过后返回首页点击“退卡/证”取卡，取卡后请检查该卡是否正常。',
                    success: function (fingerResult) {
                        console.log("吞卡失败场景，指纹验证通过");
                        if (isSpecialMenu1) {
                            template.loadPage('homepage');
                        } else if (isSpecialMenu2) {
                            callback && callback(result);
                        }
                    },
                    failure: function (fingerResult) {
                        console.log("吞卡失败场景，指纹验证失败，返回数据：" + JSON.stringify(fingerResult));
                        callback && callback(result);
                    }
                });
            } else {
                callback && callback(result);
            }

            PJF.stm.util.clearAuthInfo();
            PJF.stm.util.clearAuthInfo(true);
            PJF.stm.util.clearCardInfo();
        } else {
            callback && callback(result);
        }
    });
  },

  /*
   * 写入磁条数据
   */
  writeMagnet2Card: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'writeMagnet2Card', cmdArgs, callback);
  },

  /*
   * 对IC卡上电
   */
  powerOnIMC: function (args, callback) {
    var cmdArgs = $.extend({
      iPort: '11041'
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchATR = resultJson.pchATR;
      return info;
    }

    PJF.stm.client.callClient('ZNK', 'powerOnIMC', cmdArgs, callback, fnSuccess);
  },

  /*
   * 对IC卡下电
   */
  powerOffIMC: function (args, callback) {
    var cmdArgs = $.extend({
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'powerOffIMC', cmdArgs, callback);
  },

  /*
   * 执行IC卡指令
   */
  execICCmd: function (args, callback) {
    var cmdArgs = $.extend({
      iPort: '11041'
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchRes = resultJson.pchRes;
      return info;
    }

    PJF.stm.client.callClient('ZNK', 'execICCmd', cmdArgs, callback, fnSuccess);
  },

  /*
   * 卡面平印
   */
  printCardFace: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'printCardFace', cmdArgs, callback);
  },

  /*
   * 卡面凸字
   */
  bulgeCardFace: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    PJF.stm.client.callClient('ZNK', 'bulgeCardFace', cmdArgs, callback);
  },

  /*
   * 查询卡库中空白卡种类与数量（智慧银行带制卡功能的卡库专用）
   */
  queryAllBlankCardTypeExist: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30,
      iPort: '11041'
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      if (resultJson.pchCardInfos == '') {
        info.pchCardInfos = [];
      } else {
        info.pchCardInfos = JSON.parse(resultJson.pchCardInfos);
      }
      return info;
    }

    PJF.stm.client.callClient('ZNK', 'queryAllBlankCardTypeExist', cmdArgs, callback, fnSuccess);
  },

    /*
     * 通用数据交互接口（带制卡功能的卡库专用）
     */
    cardStoreTrans: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30,
            iPort: '11041'
        }, args);

        function fnSuccess(resultJson) {
            var info = {};
            info.pchOut = resultJson.pchOut;
            return info;
        }

        PJF.stm.client.callClient('ZNK', 'cardStoreTrans', cmdArgs, callback, fnSuccess);
    }
};

/*
 * 扩展行业卡读写模块
 */
PJF.stm.EXT = {
  /*
   * 获取设备状态
   */
  getDevStatus: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 20
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchExtSN = resultJson.pchExtSN;
      return info;
    }

    PJF.stm.client.callClient('EXT', 'getDevStatus', cmdArgs, callback, fnSuccess);
  },

  /*
   * 行业IC卡-上电
   */
  initHYICCard: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchInitData = resultJson.pchInitData;
      return info;
    }

    PJF.stm.client.callClient('EXT', 'initHYICCard', cmdArgs, callback, fnSuccess);
  },

  /*
   * 行业IC卡-下电
   */
  closeHYICCard: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30
    }, args);

    PJF.stm.client.callClient('EXT', 'closeHYICCard', cmdArgs, callback);
  },

  /*
   * 行业IC卡-执行指令
   */
  readWriteHYICCard: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30
    }, args);

    function fnSuccess(resultJson) {
      var info = {};
      info.pchExcuteResult = resultJson.pchExcuteResult;
      return info;
    }

    PJF.stm.client.callClient('EXT', 'readWriteHYICCard', cmdArgs, callback, fnSuccess);
  },

  /*
   * 行业IC卡-读卡磁道
   */
  getCardNum: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30
    }, args);

    PJF.stm.client.callClient('EXT', 'getCardNum', cmdArgs, callback, PJF.stm.CardReader.fnSuccess);
  },

  /*
   * 行业IC卡-模块复位
   */
  resetDev: function (args, callback) {
    var cmdArgs = $.extend({
      timeout: 30
    }, args);

    PJF.stm.client.callClient('EXT', 'resetDev', cmdArgs, callback);
  }
};

PJF.stm.AppIME = {

  /*
   * 之所以这里写是因为侯大师把错误码接口给别人写错了
   */
  fnCallBack: function (data) {
    var dataJson = JSON.parse(data);
    var result = {
      status: 0
    };
    if (dataJson.success) {
      var resultJson = JSON.parse(dataJson.result);
      result.errorCode = resultJson.pchErrCode;
      result.errorMsg = resultJson.pchError;
      if (resultJson.pchErrCode == "IME0000000") {
        result.status = 1;
      }
    }
    return result;
  },

  openSoftKeyboard: function (args, callback) {
    var me = this;
    if (PJF.orgInfo && PJF.orgInfo.instSvrlLgPsnID === 'DA003') args.hmode = '2'
    args = $.extend({
      hmode: 0
    }, args);
    PJF.communication.devices.CallDevice("AppIME", "openSoftKeyboard", args, function (data) {
      var result = me.fnCallBack(data);
      callback && callback(result)
    });
  },

  closeSoftKeyboard: function (args, callback) {
    var me = this;
    args = $.extend({}, args);
    PJF.communication.devices.CallDevice("AppIME", "closeSoftKeyboard", args, function (data) {
      var result = me.fnCallBack(data);
      callback && callback(result)
    });
  }
};

/*
 * 协作提示
 */
PJF.stm.SIU = {
    /*
     * 启动SIU
     */
    openSIU: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 20
        }, args);

        PJF.stm.client.callClient('SIU', 'openSIU', cmdArgs, callback);
    },

    /*
     * 关闭SIU
     */
    closeSIU: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30
        }, args);

        PJF.stm.client.callClient('SIU', 'closeSIU', cmdArgs, callback);
    }
};

/*
 * 通行证扫描识读模块
 */
PJF.stm.PSR = {
    /*
     * 获取设备状态
     */
    getDevStatus: function (args, callback) {
        var cmdArgs = $.extend({
            pchReserve: '',
            timeout: 20
        }, args);

        PJF.stm.client.callClient('PSR', 'getDevStatus', cmdArgs, callback);
    },

    /*
     * 复位设备
     */
    resetDev: function (args, callback) {
        var cmdArgs = $.extend({
            pchReserve: ''
        }, args);

        PJF.stm.client.callClient('PSR', 'resetDev', cmdArgs, callback);
    },

    /*
     * 取消操作
     */
    cancelDev: function (args, callback) {
        var cmdArgs = $.extend({
            pchReserve: ''
        }, args);

        PJF.stm.client.callClient('PSR', 'cancelDev', cmdArgs, callback);
    },

    /*
     * 读取信息
     */
    scanAndRead: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 60,
            iDpi: '300'
        }, args);

        PJF.stm.client.callClient('PSR', 'scanAndRead', cmdArgs, callback, PJF.stm.PSR.fnSuccess);
    },
    /*
     * 读取证件的全部信息（包含正反面）
     */
    scanAndReadAllInfo: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 60,
            iDpi: '300'
        }, args);

        PJF.stm.client.callClient('PSR', 'scanAndReadAllInfo', cmdArgs, callback, PJF.stm.PSR.fnSuccess);
    },

    fnSuccess: function (resultJson) {
        var info = {};
        var pchInfo = {};
        resultJson.pchInfo = JSON.parse(resultJson.pchInfo);
        //港澳居民来往内地通行证:证件类型、证件号码、中文姓名、英文姓名/拼音、性别、出生日期、有效期限、签发机关/地点、签发日期；境外身份证件号码、换证次数
        //台湾居民往来大陆通行证:证件类型、证件号码、中文姓名、英文姓名/拼音、性别、出生日期、有效期限、签发机关/地点、签发日期；境外身份证件号码、换证次数
        //护照：证件类型、证件号码、英文姓名、性别、出生日期、有效期限、签发国家、持证人国籍；本国姓名、境外身份证件号码、签发机关
        pchInfo.recognizeType = resultJson.pchInfo.recognizeType; //识别方式:1-读取芯片 2-MRZ 3-其它（OCR等）
        pchInfo.side = resultJson.pchInfo.side; //卡片正反面:0-反面 1-正面 2-证件不区分正反 3-未知
        pchInfo.credType = resultJson.pchInfo.credType; //证件类型:A-护照 B-港澳居民来往内地通行证 C-台湾居民来往内地通行证 D-签证
        pchInfo.subCredType = resultJson.pchInfo.subCredType; //证件子类型: B1-旧版港澳居民来往内地通行证 B2-新版港澳居民来往内地通行证 C1-旧版台湾居民来往内地通行证 C2-新版台湾居民来往内地通行证(2015)
        pchInfo.reserve = resultJson.pchInfo.reserve; //保留信息
        if (pchInfo.credType == 'A') {
            //护照
            pchInfo.credID = resultJson.pchInfo.MRZCredID; //证件号码
            pchInfo.EnglishName = resultJson.pchInfo.EnglishName; //英文姓名
            pchInfo.sex = resultJson.pchInfo.sex; //性别
            pchInfo.birthday = resultJson.pchInfo.birthday.replace(/-/g, ''); //出生日期
            //只有截止日期，'2020-01-02'
            pchInfo.validity = '-' + resultJson.pchInfo.validity.replace(/-/g, ''); //本证有效期
            pchInfo.issueNationCode = resultJson.pchInfo.issueNationCode; //签发国家
            pchInfo.nationCode = resultJson.pchInfo.nationCode; //持证人国籍
            pchInfo.loss = (pchInfo.recognizeType == '1') && (!pchInfo.credID || !pchInfo.EnglishName || !pchInfo.sex || !pchInfo.birthday || !pchInfo.validity || !pchInfo.issueNationCode || !pchInfo.nationCode);//是否缺失必审项
            pchInfo.nativeName = resultJson.pchInfo.nativeName; //本国姓名
            pchInfo.nativeCredID = resultJson.pchInfo.nativeCredID; //境外身份证件号码
            pchInfo.issueOffice = resultJson.pchInfo.issueOffice; //签发机关
        } else {
            //旧版回乡证/新版回乡证
            //旧版台胞证/新版台胞证
            if (resultJson.pchInfo.validity.indexOf('-') == -1) {
                //老证，只有截止日期
                resultJson.pchInfo.validity = (resultJson.pchInfo.issueDate || "").replace(/[-\.]/g, '') + '-' + resultJson.pchInfo.validity; //签发日期
            }
            pchInfo.credID = resultJson.pchInfo.credID || resultJson.pchInfo.MRZCredID; //证件号码
            pchInfo.nativeName = resultJson.pchInfo.nativeName; //中文姓名
            pchInfo.EnglishName = resultJson.pchInfo.EnglishName; //英文姓名
            pchInfo.sex = resultJson.pchInfo.sex; //性别
            pchInfo.birthday = resultJson.pchInfo.birthday.replace(/-/g, ''); //出生日期
            pchInfo.validity = resultJson.pchInfo.validity; //本证有效期
            pchInfo.issueOffice = resultJson.pchInfo.issueOffice; //签发机关
            pchInfo.issueDate = resultJson.pchInfo.issueDate; //签发日期
            pchInfo.nativeCredID = resultJson.pchInfo.nativeCredID; //境外身份证件号码
            pchInfo.issueTimes = resultJson.pchInfo.issueTimes; //换证次数
            if (pchInfo.credType == 'C') {
                pchInfo.address = resultJson.pchInfo.address; //现住址
                pchInfo.profession = resultJson.pchInfo.profession; //职业
                if (pchInfo.subCredType == "C2") {
                    pchInfo.validity = resultJson.pchInfo.validityTime; //新台胞证有效期使用validityTime
                    pchInfo.issueDate = resultJson.pchInfo.validityTime.split("-")[0]; //新台胞证无签发日期，暂时补一个吧
                }
            }
            pchInfo.loss = (pchInfo.recognizeType == '1') && (!pchInfo.credID || !pchInfo.nativeName || !pchInfo.EnglishName || !pchInfo.sex || !pchInfo.birthday || !pchInfo.validity || !pchInfo.issueOffice || !pchInfo.issueDate);//是否缺失必审项
        }
        info.pchInfo = pchInfo;

        var endDate = pchInfo.validity.replace(/\s/g, '').split('-')[1];
        var serverTime = PJF.communication.getServerTime('yyyyMMdd');
        var nowDate = serverTime ? serverTime : PJF.util.formatDate(new Date()); //当前时间
        //证件过期
        if (parseInt(nowDate) > parseInt(endDate)) {
            info.pjfstatus = '0';
            info.pchErrCode = "PJF_PSR_PARSE_ERR01";
            info.pchError = "证件已过期，请更换有效证件办理业务";
        }

        return info;
    }
};

/*
 * 远程协助
 */
PJF.stm.RTS = {
    fnErrorCode : function (data) {
        var result = data || {};
        if (data.errorCode === "RTS0000000") {
            result.status = 1;
        }
        return result;
    },

    /*
     * 远程协助呼叫
     */
    call: function (args, callback) {
        var cmdArgs = $.extend({
        }, args);

        PJF.stm.client.callClient('RTS', 'ZS_SMCS_Call', cmdArgs, function (data) {
            callback && callback(PJF.stm.RTS.fnErrorCode(data));
        });
    },

    /*
     * 挂断呼叫
     */
    close: function (args, callback) {
        var cmdArgs = $.extend({
        }, args);

        PJF.stm.client.callClient('RTS', 'ZS_SMCS_Close', cmdArgs, function (data) {
            callback && callback(PJF.stm.RTS.fnErrorCode(data));
        });
    },

    /*
     * 发送自定义数据
     */
    transmit: function (args, callback) {
        var cmdArgs = $.extend({
        }, args);

        PJF.stm.client.callClient('RTS', 'ZS_SMCS_SetTransmitData', cmdArgs, function (data) {
            callback && callback(PJF.stm.RTS.fnErrorCode(data));
        });
    },

    /*
     * 设置IotID
     */
    setIotID: function (args, callback) {
        var cmdArgs = $.extend({
            pchIOTId: ''
        }, args);

        PJF.stm.client.callClient('RTS', 'ZS_SMCS_SetIotID', cmdArgs, function (data) {
            callback && callback(PJF.stm.RTS.fnErrorCode(data));
        });
    }
};

/*
 * 照片打印机
 */
PJF.stm.PTP = {
    fnErrorCode : function (data) {
        var result = data || {};
        if (data.errorCode === "ONLINE0000") {
            result.status = 1;
        }
        return result;
    },

    /*
     * 获取设备状态
     */
    getDevStatus: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30
        }, args);

        PJF.stm.client.callClient('PTP', 'getDevStatus', cmdArgs, function (data) {
            callback && callback(PJF.stm.PTP.fnErrorCode(data));
        });
    },

    /*
     * 照片打印
     */
    startPrintPhoto: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30
        }, args);

        PJF.stm.client.callClient('PTP', 'startPrintPhoto', cmdArgs, callback);
    },

    /*
     * 复位设备
     */
    resetDev: function (args, callback) {
        var cmdArgs = $.extend({
        }, args);

        PJF.stm.client.callClient('PTP', 'resetDev', cmdArgs, callback);
    }
};

/*
 * 手提话筒
 */
PJF.stm.HVT = {
    /*
     * 检查手提话筒状态
     */
    checkStatus: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30
        }, args);

        PJF.stm.client.callClient('HVT', 'checkHandVoiceDeviceStatus', cmdArgs, callback);
    }
};

/*
 * 金融舱舱门
 */
PJF.stm.FTC = {
    /*
     * 开门（带条件）
     */
    openCabin: function (args, callback) {
        var cmdArgs = $.extend({
            pchIp: "127.0.0.1",
            iPort: "21019",
            timeout: 30
        }, args);

        PJF.stm.client.callClient('FTC', 'openCabin', cmdArgs, callback);
    },

    /*
     * 获取舱内有无人状态
     */
    getCabinStatus: function (args, callback) {
        var cmdArgs = $.extend({
            pchIp: "127.0.0.1",
            iPort: "21019",
            timeout: 30
        }, args);

        PJF.stm.client.callClient('FTC', 'getCabinStatus', cmdArgs, callback);
    },

    /*
     * 获取模块信息
     */
    getFtcStatus: function (args, callback) {
        var cmdArgs = $.extend({
            pchIp: "127.0.0.1",
            iPort: "21019",
            timeout: 30
        }, args);

        PJF.stm.client.callClient('FTC', 'getFtcStatus', cmdArgs, callback);
    },

    /*
     * 获取设备状态
     */
    getDevStatus: function (args, callback) {
        var cmdArgs = $.extend({
            pchIp: "127.0.0.1",
            iPort: "21019",
            timeout: 30
        }, args);

        PJF.stm.client.callClient('FTC', 'getDevStatus', cmdArgs, callback);
    },

    /*
     * 复位设备
     */
    resetDev: function (args, callback) {
        var cmdArgs = $.extend({
            pchIp: "127.0.0.1",
            iPort: "21019",
            timeout: 30
        }, args);

        PJF.stm.client.callClient('FTC', 'resetDev', cmdArgs, callback);
    }
};

/*
 * 非接触式二代证
 */
PJF.stm.ID2 = {
    /*
     * 读取信息
     */
    getID2CardInfo: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30
        }, args);

        PJF.stm.client.callClient('ID2', 'getID2CardInfo', cmdArgs, callback, PJF.stm.IdCard.fnSuccess);
    },

    /*
     * 停止读证
     */
    stopReadID2: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30
        }, args);

        PJF.stm.client.callClient('ID2', 'stopReadID2', cmdArgs, callback);
    }
};
/**
 * P2 Framework JS Library 1.0
 *
 * Copyright(c) 2012, China Construction Bank.
 *
 * 说明:PJF和P2 ytd平台壳和外设之间的互相调用
 */

PJF.namespace("PJF.ytd");

/*
 * 公用接口（获取设备状态，复位设备，关闭设备）
 */
PJF.ytd.COMMON = {

    /***
     * 获取设备状态
     * @param args
     * @param callback
     * @returns {*}
     */
    getDevStatus: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30
        }, args);

        return PJF.stm.client.callClient("COMMON", "getDevStatus", cmdArgs, callback);
    },

    /***
     * 复位设备
     * @param args
     * @param callback
     * @returns {*}
     */
    resetDev: function (args, callback) {
        var cmdArgs = $.extend({
        }, args);

        return PJF.stm.client.callClient("COMMON", "resetDev", cmdArgs, callback);
    },

    /***
     * 关闭设备
     * @param args
     * @param callback
     * @returns {*}
     */
    closeDev: function (args, callback) {
        var cmdArgs = $.extend({
        }, args);

        return PJF.stm.client.callClient("COMMON", "closeDev", cmdArgs, callback);
    },

    /***
     * 获取设备序列号
     * @param args
     * @param callback
     * @returns {*}
     */
    getDevSN: function (args, callback) {
        var cmdArgs = $.extend({
        }, args);

        function fnSuccess(resultJson) {
            var info = {};
            info.pchDevSN = resultJson.pchDevSN;
            return info;
        }

        return PJF.stm.client.callClient("COMMON", "getDevSN", cmdArgs, callback, fnSuccess);
    }
};

/*
 * 密码键盘接口(录入密码，获取当前输入密码长度，灌注DES主秘钥)
 */
PJF.ytd.PIN = {

    /***
     * 录入密码
     * @param args
     * @param callback
     * @returns {*}
     */
    readPin: function (args, callback) {
        /*var cmdArgs = $.extend({
            iEncodeType: 2,
            timeout: 30,
            iLength: 6,
            pUserID: (PJF.otherInfo && PJF.otherInfo.devId) ? PJF.otherInfo.devId : "",
            pSecNodeID: (PJF.otherInfo && PJF.otherInfo.secNode) ? PJF.otherInfo.secNode : "",
            p2KeyInfo: (PJF.otherInfo && PJF.otherInfo.token) ? PJF.otherInfo.token : "",
            keyInfoLen: (PJF.otherInfo && PJF.otherInfo.token) ? PJF.otherInfo.token.length : 0,
            //deviceStartSound:args.pinSound || (args.iTimes == 1 ? "PIN_inputPwd.wav" : "PIN_inputPwd2.wav")
        }, args);

        return PJF.stm.client.callClient("App_PIN", "PIN_readPin", cmdArgs, callback);*/
        PJF.stm.Pin.readPin(args, callback);
    }
};

/*
 * 刷卡器（读卡磁道，写卡磁道信息）
 */
PJF.ytd.RDC = {

    /***
     * 读卡磁道
     * @param args
     * @param callback
     * @returns {*}
     */
    getCardNum: function (args, callback) {
        var cmdArgs = $.extend({
            trackNum: 23,
            timeout:30,
            deviceStartSound: args.rdcSound || "devprompt/RDC_read.wav",
            readPassbook: args.readPassbook
        }, args);
        function cb(result){
            result.readPassbook = cmdArgs.readPassbook;
            return PJF.ytd.RDC.fnSuccess(result);
        }
        return PJF.stm.client.callClient("RDC", "getCardNum", cmdArgs, callback, cb);
    },

    fnSuccess: function (resultJson) {
        //去除首位可能存在的：号
        if(resultJson.pchTrackData2.indexOf(':') == 0){
            resultJson.pchTrackData2 = resultJson.pchTrackData2.substr(1);
        }
        var info = {};
        info.pchTrackData2 = resultJson.pchTrackData2;
        info.pchTrackData3 = resultJson.pchTrackData3;
        //info.accountNo = resultJson.pchTrackData2.split('=')[0];
        if (info.pchTrackData2.indexOf('=') != -1) {
            info.accountNo = info.pchTrackData2.split('=')[0];
            info.ytdPchTrackData2 = info.pchTrackData2;
        }
        else if (info.pchTrackData2.indexOf("'") != -1) {
            info.accountNo = info.pchTrackData2.split("'")[0];
            info.pchTrackData2 = info.pchTrackData2.replace("\'", "=");
            info.ytdPchTrackData2 = info.pchTrackData2.replace("\'", "=");
        }
        else if (info.pchTrackData2.indexOf(">") != -1) {
            info.accountNo = info.pchTrackData2.split(">")[0];
            info.pchTrackData2 = info.pchTrackData2.replace(">", "=");
            info.ytdPchTrackData2 = info.pchTrackData2.replace(">", "=");
        }
        else {
            console.log("未能正确匹配磁道分隔符");
            info.pjfstatus = '0';
            info.pchErrCode = "PJF_TRACK2_PARSE_ERR01";
            info.pchError = "未能正确匹配磁道分隔符";
        }
        var encryptSecDisk = PJF.util.encrypt(info.pchTrackData2);
        if (encryptSecDisk) {
            info.pchTrackData2 = encryptSecDisk;
        }else{
            console.log("二磁数据加密失败");
            info.pjfstatus = '0';
            info.pchErrCode = "PJF_TRACK2_PARSE_ERR02";
            info.pchError = "二磁数据加密失败";
        }

		//由于全局变量没有resInfo，构造一个
        info.resInfo={};
        info.resInfo.accountNo=info.accountNo;
        info.resInfo.secDisInfo=info.pchTrackData2;
        info.resType = '0';

        //如果是存折逻辑
        if((PJF.util.array.indexOf(["'","=",">"],resultJson.pchTrackData2.substr(19,1)) != -1) && (resultJson.pchTrackData2.length == 35)){
            //19位账号+分隔符+4位印刷号+3位dvv+2位册号+2位支取方式+0000
            var printNo = resultJson.pchTrackData2.substr(20,4); //印刷号
            var dvvNo = resultJson.pchTrackData2.substr(24,3); //DVV
            var bkNumber = "0" + resultJson.pchTrackData2.substr(27,2); //册号
            var tempWithDrawMode = resultJson.pchTrackData2.substr(29,2); //支取方式
            /*
             支取方式，主机一般下送4位，由前端转化为2位，写入存折，读折时再转化为4位
             4转2：
             （第一位*2+第二位）*10+第三位*2+第四位
             若以上输出为个位数前补0
             2转4
             第1位除以2取整+第1位除以2取余+第2位除以2取整+第2位除以2取余

             */
            var tmp1 = parseInt(tempWithDrawMode.charAt(0),10);
            var tmp2 = parseInt(tempWithDrawMode.charAt(1),10);
            var withdrawMode = [Math.floor(tmp1 / 2), tmp1 % 2, Math.floor(tmp2 / 2), tmp2 % 2].join('');
            info.resInfo.printNo = printNo; //印刷号
            info.resInfo.dvvNo = dvvNo; //dvv
            info.resInfo.bkNumber = bkNumber; //册号
            info.resInfo.withdrawMode = withdrawMode; //支取方式
        }
        return info;
    },

    /***
     * 写卡磁道信息
     * @param args
     * @param callback
     * @returns {*}
     */
    wrtCart: function (args, callback) {
        var cmdArgs = $.extend({
            trackNum: 23,
            timeout: 30
        }, args);

        return PJF.stm.client.callClient("RDC", "wrtCart", cmdArgs, callback);
    }
};

/*
 * 金融IC卡（读IC卡客户信息，从IC卡获取ARQC，向IC卡发送ARPC，发送写脚本，读IC卡交易明细）
 */
PJF.ytd.ICC = {

    /***
     * 读IC卡客户信息
     * @param args
     * @param callback
     * @returns {*}
     */
    getICCardInfo: function (args, callback) {
        var cmdArgs = $.extend({
            iIcFlag: 3,
            aryTagList: "x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A",
            aryAIDList: "A000000333010101|A000000333010102|A000000333010103|A000000333010106",
            piCInfoLen: 4096,
            timeout:30,
            loadingConf: {msg: "请放置您的银行卡",opacity:0.1,noIcon:true,timeout:30}
        }, args);

        if(cmdArgs.ARQC){
            var currTime = PJF.util.formatDate(new Date(),'yyyyMMddhhmmss');
            //这是用来生成产生ARQC数据的值
            cmdArgs.ARQC = $.extend(cmdArgs.ARQC,{
                transDate:currTime.substr(0,8), //交易日期
                transTime:currTime.substr(8,16), //交易时间
                transOper:PJF.userInfo.userCode //商户，默认传操作员号
            })
            //应用列表数据
            if(cmdArgs.ARQC.appType == 'default'){
                cmdArgs.ARQC.pchAIDList = 'A000000333010101|A000000333010102|A000000333010103|A000000333010106';
            }
            else if(cmdArgs.ARQC.appType == '1'){
                cmdArgs.ARQC.pchAIDList = 'A000000333010101';
            }
            else if(cmdArgs.ARQC.appType == '2'){
                cmdArgs.ARQC.pchAIDList = 'A000000333010102';
            }
            cmdArgs.ARQC.piLengthD55 = cmdArgs.ARQC.piLengthD55 || 2048;
            cmdArgs.ARQC.piLengthD60 = cmdArgs.ARQC.piLengthD60 || 2048;
            cmdArgs.ARQC.timeout = cmdArgs.ARQC.timeout || 20;
            cmdArgs.ARQC.pchInput = PJF.stm.ICMaker.genARQCpchInput(PJF.stm.ICMaker.decimal2Ans(cmdArgs.ARQC.authAmt),
                PJF.stm.ICMaker.decimal2Ans(cmdArgs.ARQC.otherAmt),
                cmdArgs.ARQC.cType, cmdArgs.ARQC.transDate, cmdArgs.ARQC.transType,
                cmdArgs.ARQC.transTime, cmdArgs.ARQC.transOper);
        }
        var callback1 = function(result){

            if(result.status == 1 && cmdArgs.ARQC && result.info.resType == 1){
                PJF.stm.ICMaker.genARQC(cmdArgs.ARQC,function(arqcRes){
                    if(arqcRes.status == 1)
                        result.ARQC = arqcRes.info;
                    callback && (callback(result));
                })
            }else{
                callback && (callback(result));
            }
        }
        return PJF.stm.client.callClient("ICC", "getICCardInfo", cmdArgs, callback1, PJF.ytd.ICC.fnSuccess);
    },

    fnSuccess: function (resultJson) {
        var info = {};
        info.pICType = resultJson.pICType;
        info.resType = PJF.constants.IS_DOWNGRADE ? "1": "2";
        var pcICInfoStr = resultJson.pcICInfo;
        var pcICInfoObj = {};
        var mappingObj = {
            'A': 'accountNo',
            'B': 'userName',
            'C': 'identityCardType',
            'D': 'identityCardNo',
            'E': 'secDisInfo',
            'F': 'firDisInfo',
            'G': 'balance',
            'H': 'balanceLimit',
            'I': 'invalidDate',
            'J': 'ICCardNo'
        };

        //判断是否为纯数字
        function checkNum(str){
            if(str){
                return str.match(/\D/) == null;
            }
            return false;
        }

        function errHandler(resultJson){
            info.resInfo = "IC卡数据格式错误,数据为:" + resultJson.resInfo;
            info.pjfstatus = '0';
            info.pchErrCode = "PJF_IC_PARSE_ERR01";
            info.pchError = info.resInfo;
        }

        //规范永远是X+3位长度+对应数据
        var time = 10;
        while (pcICInfoStr.length > 4 && time >= -1) {
            time--;
            var tempStr = pcICInfoStr.substr(0, 4);
            var tempLength = parseInt(pcICInfoStr.substr(1, 3), 10);
            pcICInfoObj[mappingObj[tempStr[0]]] = pcICInfoStr.substr(4, tempLength);
            pcICInfoStr = pcICInfoStr.slice(4 + tempLength);
        }
        if (time == -1 || time != 0 || pcICInfoStr != '') {
            pcICInfoStr = resultJson.pcICInfo;
            //1. 读取是否有A,I,J标签
            if(pcICInfoStr.indexOf('A') == -1 || pcICInfoStr.lastIndexOf('I') == -1 || pcICInfoStr.lastIndexOf('J') == -1){
                errHandler(resultJson);
            }else{
                //2. A,I标签的值应为纯数字；J标签的值的前三位应为纯数字或空字符串
                var tempAccountNo = pcICInfoStr.substring(4, pcICInfoStr.indexOf('B'));
                var tempAccountNoLen = tempAccountNo.length;
                //账号以F结尾， 去除
                if(tempAccountNo.charAt(tempAccountNoLen - 1) == 'F'){
                    tempAccountNo = tempAccountNo.substr(0, tempAccountNoLen -1);
                }
                var tempInvalidDate = pcICInfoStr.substring(pcICInfoStr.lastIndexOf('I')+4, pcICInfoStr.lastIndexOf('J'));
                var tempICCardNo = pcICInfoStr.substring(pcICInfoStr.lastIndexOf('J')+4 );
                if(!checkNum(tempAccountNo) || !checkNum(tempInvalidDate) || (!checkNum(tempICCardNo.substr(0,3)) && tempICCardNo.substr(0,3) !== '')){
                    errHandler(resultJson);
                }else{
                    //3. 对J标签的值具体处理，0位补001，1位开头补00，2位开头补0，多于3位舍弃第三位后面的
                    if(tempICCardNo.length == 0){
                        tempICCardNo = '001';
                    }else if(tempICCardNo.length == 1){
                        tempICCardNo = '00' + tempICCardNo;
                    }else if(tempICCardNo.length == 2){
                        tempICCardNo = '0' + tempICCardNo;
                    }else if(tempICCardNo.length > 3){
                        tempICCardNo = tempICCardNo.substr(0,3);
                    }
                    //4. B,C,D,E,F,G,H 默认为空串
                    pcICInfoObj = {};
                    pcICInfoObj.accountNo = tempAccountNo;
                    pcICInfoObj.userName = '';
                    pcICInfoObj.identityCardType = '';
                    pcICInfoObj.identityCardNo = '';
                    pcICInfoObj.secDisInfo = '';
                    pcICInfoObj.firDisInfo = '';
                    pcICInfoObj.balance = '';
                    pcICInfoObj.balanceLimit = '';
                    pcICInfoObj.invalidDate = tempInvalidDate;
                    pcICInfoObj.ICCardNo = tempICCardNo;
                }
            }
        }
        if (pcICInfoObj.balance) {
            pcICInfoObj.balance = (parseFloat(pcICInfoObj.balance) / 100 ).toFixed(2)
        }
        var encryptSecDisk = PJF.util.Encrypt0x88(40);
        var equalSecDisk = PJF.util.encrypt(pcICInfoObj.secDisInfo);
        if(equalSecDisk){
            pcICInfoObj.equalSecDisInfo = equalSecDisk;
        }else{
            console.log("等效二磁数据加密失败");
            info.pjfstatus = '0';
            info.pchErrCode = "PJF_TRACK2_PARSE_ERR03";
            info.pchError = "等效二磁数据加密失败";
        }

        if (encryptSecDisk) {
            pcICInfoObj.secDisInfo = encryptSecDisk;
        }else{
            console.log("二磁数据加密失败");
            info.pjfstatus = '0';
            info.pchErrCode = "PJF_IC_PARSE_ERR02";
            info.pchError = "二磁数据加密失败";
        }

        if(pcICInfoObj.accountNo){
            //处理accountNo字段，去除末位可能有的F
            var accNo = pcICInfoObj.accountNo;
            var accNoLen = accNo.length;
            //账号以F结尾， 去除
            if(accNo.charAt(accNoLen - 1) == 'F'){
                accNo = accNo.substr(0, accNoLen -1);
            }
            pcICInfoObj.accountNo = accNo;
        }

        if(pcICInfoObj.ICCardNo){
            //处理ICCardNo字段，保证为三位
            var icCardNo = pcICInfoObj.ICCardNo;
            if(icCardNo.length == 0){
                icCardNo = '001';
            }else if(icCardNo.length == 1){
                icCardNo = '00' + icCardNo;
            }else if(icCardNo.length == 2){
                icCardNo = '0' + icCardNo;
            }else if(icCardNo.length > 3){
                icCardNo = icCardNo.substr(0,3);
            }
            pcICInfoObj.ICCardNo = icCardNo;
        }

        info.resInfo = pcICInfoObj;
        return info;
    },

    /***
     * 从IC卡获取ARQC
     * @param args
     * @param callback
     * @returns {*}
     */
    genARQC: function (args, callback) {
        var cmdArgs = $.extend(true, {
            iIcFlag: 3,
            piLengthD55: 2048,
            piLengthD60: 2048,
            loadingConf: {msg : "请放置您的银行卡",opacity:0.1,noIcon:true}
        }, args);

        if (cmdArgs.ARQC) {
            var currTime = PJF.util.formatDate(new Date(), 'yyyyMMddhhmmss');
            //这是用来生成产生ARQC数据的值
            cmdArgs.ARQC = $.extend(cmdArgs.ARQC, {
                transDate: currTime.substr(0, 8), //交易日期
                transTime: currTime.substr(8, 16), //交易时间
                transOper: PJF.userInfo.userCode //商户，默认传操作员号
            });
            //应用列表数据
            if (cmdArgs.ARQC.appType == 'default') {
                cmdArgs.pchAIDList = 'A000000333010101|A000000333010102|A000000333010103|A000000333010106';
            }
            else if (cmdArgs.ARQC.appType == '1') {
                cmdArgs.pchAIDList = 'A000000333010101';
            }
            else if (cmdArgs.ARQC.appType == '2') {
                cmdArgs.pchAIDList = 'A000000333010102';
            }
            cmdArgs.pchInput = PJF.stm.ICMaker.genARQCpchInput(PJF.stm.ICMaker.decimal2Ans(cmdArgs.ARQC.authAmt),
                                                               PJF.stm.ICMaker.decimal2Ans(cmdArgs.ARQC.otherAmt),
                                                               cmdArgs.ARQC.cType, cmdArgs.ARQC.transDate, cmdArgs.ARQC.transType,
                                                               cmdArgs.ARQC.transTime, cmdArgs.ARQC.transOper);
        }

        function fnSucc(data){
            data.pchD55Len = data.pchD55.length / 2;
            return data;
        }

        PJF.ytd.ICC.getICCardInfo({}, function() {
            return PJF.stm.client.callClient("ICC", "genARQC", cmdArgs, callback, fnSucc);
        });
    },

    /***
     * 向IC卡发送ARPC，发送写脚本
     * @param args
     * @param callback
     * @returns {*}
     */
    ARPC_ExeICScript: function (args, callback) {
        var cmdArgs = $.extend({
            iIcFlag: 3,
            timeout: 30,
            iLenGAC2: 2048
        }, args);

        return PJF.stm.client.callClient("ICC", "ARPC_ExeICScript", cmdArgs, callback);
    },

    /***
     * 读IC卡交易明细
     * @param args
     * @param callback
     * @returns {*}
     */
    getTxDetail: function (args, callback) {
        var cmdArgs = $.extend({
            iIcFlag: 3,
            iLenGAC2: 2048,
            pchAIDList: 'A000000333010101|A000000333010102|A000000333010103|A000000333010106'
        }, args);

        return PJF.stm.client.callClient("ICC", "getTxDetail", cmdArgs, callback);
    }
};

/*
 * 指纹仪（指纹模板登记，读取指纹特征）
 */
PJF.ytd.FIG = {

    /***
     * 指纹模板登记
     * @param args
     * @param callback
     * @returns {*}
     */
    registerFinger: function (args, callback) {
        var cmdArgs = $.extend({
        }, args);

        return PJF.stm.client.callClient("FIG", "registerFinger", cmdArgs, callback);
    },

    /***
     * 读取指纹特征
     * @param args
     * @param callback
     * @returns {*}
     */
    readFinger: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30
        }, args);

        return PJF.stm.client.callClient("FIG", "readFinger", cmdArgs, callback);
    }
};

/*
 * 二代证阅读器（读取信息）
 */
PJF.ytd.IDC = {

    /***
     * 读取信息
     * @param args
     * @param callback
     * @returns {*}
     */
    getIDCardInfo: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 60

        }, args);
        cmdArgs.pchPhotoPath = PJF.stm.baseDir + "/identity/" + args.pchPhotoName;
        cmdArgs.frontPhotoPath  = PJF.stm.baseDir + "/identity/" + args.frontPhotoName;
        cmdArgs.backPhotoPath  = PJF.stm.baseDir + "/identity/" + args.backPhotoName;

        return PJF.stm.client.callClient(PJF.util.deviceType.pad ? "App_IDC" : "IDC", PJF.util.deviceType.pad ? "IDC_readCard" : "getIDCardInfo", cmdArgs, callback, PJF.ytd.IDC.fnSuccess);
    },

    fnSuccess: function (resultJson) {
        //判断是否为纯数字
        function checkNum(str){
            if(str){
                return str.match(/\D/) == null;
            }
            return false;
        }

        var info = {};
        var pchInfo = {};
        var pchInfoArr = resultJson.pchInfo.split('|');
        // 港澳台居民居住证拦截
        // 未升级：姓名|性别|民族|出生年月日|住址|公民身份号码|签发机关|有效期限
        // 已升级：J|姓名|性别|出生年月日|住址|公民身份号码|签发机关|有效期限|通行证号码|签发次数
        if ((['81', '82', '83'].indexOf(pchInfoArr[5].substr(0, 2)) === 0) || (pchInfoArr[0] === 'J')) {
            info.pjfstatus = '0';
            info.pchErrCode = "PJF_IdCard_PARSE_ERR02";
            info.pchError = "港澳台居民居住证，移步至柜面办理";
            return info;
        }
        var isForeign;
        if(pchInfoArr[0] == 'I'){
            isForeign = true;
        }
        if(isForeign){
            pchInfo.isForeign = true;
            pchInfo.engName = pchInfoArr[1];
            pchInfo.sex = pchInfoArr[2];
            pchInfo.identity = pchInfoArr[3];
            pchInfo.areaCode = pchInfoArr[4];
            pchInfo.name = pchInfoArr[5];
            pchInfo.validDate = pchInfoArr[6].replace(/\s/g,'');
            pchInfo.birth = pchInfoArr[7];
            pchInfo.version = pchInfoArr[8];
            pchInfo.issueOfficeCode = pchInfoArr[9];
        }else{
            pchInfo.name = pchInfoArr[0];
            pchInfo.sex = pchInfoArr[1];
            pchInfo.nation = pchInfoArr[2];
            pchInfo.birth = pchInfoArr[3];
            pchInfo.address = pchInfoArr[4];
            pchInfo.identity = pchInfoArr[5].toUpperCase();//转大写最后一位;
            pchInfo.issueOffice = pchInfoArr[6];
            pchInfo.validDate = pchInfoArr[7].replace(/\s/g,'');
        }
        info.pchInfo = pchInfo;

        //去除读取出可能存在的族
        if(!isForeign && (pchInfoArr[2].indexOf('族')> -1)){
            pchInfo.nation = pchInfoArr[2].substring(0, pchInfoArr[2].indexOf('族'));
        }

        var endDate = isForeign? pchInfoArr[6].replace(/\s/g,'').split('-')[1] : pchInfoArr[7].replace(/\s/g,'').split('-')[1];
        if(endDate == '99991231') {
            endDate = '长期';
            pchInfo.validDate = pchInfo.validDate.split('-')[0] + '-' + endDate;
        }
        var serverTime = PJF.communication.getServerTime('yyyyMMdd');
        if(checkNum(endDate)){//结束日期为纯数字
            var nowDate = serverTime ? serverTime: PJF.util.formatDate(new Date()); //当前时间
            //二代证结束日期去除空格后不为8位
            if(endDate.length != 8){
                info.pjfstatus = '0';
                info.pchErrCode = "PJF_IDC_PARSE_ERR00";
                info.pchError = "身份证有效日期结束时间格式错误,结束时间即为"+endDate;
            }
            else if(parseInt(nowDate) > parseInt(endDate)){ //身份证过期
                info.pjfstatus = '0';
                info.pchErrCode = "PJF_IDC_PARSE_ERR01";
                info.pchError = "身份证已过期，请更换身份证后再办理";
            }
        }else{
            //二代证结束日期去除空格后不为'长期'
            if(endDate != '长期'){
                info.pjfstatus = '0';
                info.pchErrCode = "PJF_IDC_PARSE_ERR00";
                info.pchError = "身份证有效日期结束时间格式错误,结束时间即为"+endDate;
            }
        }

        return info;
    }

};

/*
 * 二维码扫描仪（获取二维码数据）
 */
PJF.ytd.TDC = {

    /***
     * 获取二维码数据
     * @param args
     * @param callback
     * @returns {*}
     */
    getTDCode: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30
        }, args);

        return PJF.stm.client.callClient("TDC", "getTDCode", cmdArgs, callback);
    }
};

/*
 * 票号打印机（执行打印）
 */
PJF.ytd.TPT = {

    /***
     * 执行打印
     * @param args
     * @param callback
     * @returns {*}
     */
    doPrint: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30
        }, args);

        return PJF.stm.client.callClient("TPT", "doPrint", cmdArgs, callback);
    }
};

/*
 * 摄像头（拍照，获取当前帧，实时预览（客户端），停止预览）
 */
PJF.ytd.SXT = {

    /***
     * 拍照
     * @param args
     * @param callback
     * @returns {*}
     */
    takePhoto: function (args, callback) {
        var cmdArgs = $.extend({
            iIndex: 1,
            imageType: 2,
            iExpRate: 70,
            iWidth: 640,
            iHeight: 480
        }, args);

        return PJF.stm.client.callClient("SXT", "takePhoto", cmdArgs, callback);
    },

    /***
     * 获取当前帧
     * @param args
     * @param callback
     * @returns {*}
     */
    getCurFrame: function (args, callback) {
        var cmdArgs = $.extend({
            iIndex: 1,
            iType: 3,
            iRate: 70
        }, args);

        return PJF.stm.client.callClient("SXT", "getCurFrame", cmdArgs, callback);
    },

    /***
     * 实时预览（客户端）
     * @param args
     * @param callback
     * @returns {*}
     */
    cameraPreview: function (args, callback) {
        var cmdArgs = $.extend({
            iIndex: 1,
            iWidth: 640,
            iHeight: 480,
            showWaterMark: true
        }, args);

        var he = $('#' + cmdArgs.domId)[0];
        if (he) {
            var br = he.getBoundingClientRect(); // 摄像头窗口的定位
            var cmdArg = $.extend(cmdArgs, {
                x: br.left + window.screenLeft,
                y: br.top + window.screenTop,
                w: br.width,
                h: br.height
            });

            function fnSuccess(result) {
                return result;
            }
            PJF.fsm.get(PJF.fsm.fmIds.STM_CAMERA).openCamera();
            return PJF.stm.client.callClient("SXT", "cameraPreview", cmdArg, callback);
        }
        else {
            console.log('openCamera找不到摄像头开启的DOM元素');
        }
    },

    /***
     * 停止预览
     * @param args
     * @param callback
     * @returns {*}
     */
    stopPreview: function (args, callback) {
        var cmdArgs = $.extend({
            iIndex: 1
        }, args);
        PJF.fsm.get(PJF.fsm.fmIds.STM_CAMERA).closeCamera();
        return PJF.stm.client.callClient("SXT", "stopPreview", cmdArgs, callback);
    }
};

/*
 * 组织机构数字证书（ODC）读取
 */
PJF.ytd.ODC = {

    /***
     * 读取ODC信息
     * @param args
     * @param callback
     * @returns {*}
     */
    getODCInfo: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 30
        }, args);

        return PJF.stm.client.callClient("ODC", "getODCInfo", cmdArgs, callback);
    }
};

/*
 * 多设备联动接口(磁条、接触IC、非接触IC联动，磁条、二代证联动，磁条、接触IC、非接触IC、二代证联动)
 */
PJF.ytd.MLT = {

    /***
     * 磁条、接触IC、非接触IC联动
     * @param args
     * @param callback
     * @returns {*}
     */
    callThreeDevice: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 20
        }, args);

        function cb(result){
            result.readPassbook = cmdArgs.readPassbook;
            return PJF.ytd.MLT.fnSuccess(result);
        }
        return PJF.stm.client.callClient("MLT", "callThreeDevice", cmdArgs, callback, cb);
    },

    fnSuccess: function (resultJson) {
        var type = resultJson.piType; //读取卡片的设备类别
        if(type == 1 || type == 2){
            var iccResult = {};
            var iccInfo;
            var data = resultJson.pchCardData || resultJson.pcICInfo
            iccResult.pcICInfo = data;
            iccInfo = PJF.ytd.ICC.fnSuccess(iccResult);
            iccInfo.type = type;
            return iccInfo;
        }else if(type == 3){
            var rdcResult = {};
            var rdcInfo;
            var data = resultJson.pchCardData || resultJson.pchTrackData2;
            rdcResult.pchTrackData2 = data;
            rdcResult.readPassbook = resultJson.readPassbook;
            rdcInfo = PJF.ytd.RDC.fnSuccess(rdcResult);
            rdcInfo.type = type; //增加type字段，方便组件处理芯片卡降级交易
            return rdcInfo;
        }else if(type == 4){
            var id1Result = {};
            var id1Info ;
            var data = resultJson.pchInfo
            id1Result.pchInfo = data;
            id1Info = PJF.ytd.IDC.fnSuccess(id1Result);
            return id1Info;
        }else{
            console.log("输出信息中读取卡片的设备类别字段错误");
        }

    },

    /***
     * 磁条、二代证联动
     * @param args
     * @param callback
     * @returns {*}
     */
    callTwoDevice: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 20
        }, args);

        return PJF.stm.client.callClient("MLT", "callTwoDevice", cmdArgs, callback,PJF.ytd.MLT.fnSuccess);
    },

    /***
     * 磁条、接触IC、非接触IC、二代证联动
     * @param args
     * @param callback
     * @returns {*}
     */
    callFourDevice: function (args, callback) {
        var cmdArgs = $.extend({
            timeout: 20
        }, args);

        return PJF.stm.client.callClient("MLT", "callFourDevice", cmdArgs, callback,PJF.ytd.MLT.fnSuccess);
    },

    closeMltDev:function(args, callback){
        var cmdArgs = $.extend({
            timeout: 20
        }, args);
        return PJF.stm.client.callClient("MLT", "closeMltDev", cmdArgs, callback);
    }
};

/**
 * Created by SergioCanales on 2016/3/3.
 */

PJF.stm.vta = {
    hasLogin: false,
    //身份核查拍照
    /**
     * @param snapShotSavePath[string]:照片存储路径
     */
    terminalSnapShot: function(snapShotSavePath) {
        console.log('拍照开始:'+snapShotSavePath);
        snapShotSavePath = PJF.stm.baseDir +'/identity/'+ snapShotSavePath;
        var Terminal = parent.document.getElementById("EspaceMediaOCX");
        var result = Terminal.mediaTerminalSnapShot(snapShotSavePath);
        if (result != 0) {
            new PJF.ui.errorMessageBox({
                content:'摄像头调用失败',
                detailMsg : '错误码为:'+result,
                buttonConfs: [{
                    name:'确认',
                    style:'main',
                    btnBgColor: 'rgb(65,159,245)',
                    onClick: function() {
                        template.loadPage('homepage');
                    }
                }]
            });
            return false;
        };
        return true;

    },
    /**
     * @param filePath[string]:照片文件路径
     */
    terminalSendFile: function(filePath) {
        console.log('发送文件:'+filePath);
        filePath = PJF.stm.baseDir +'/identity/'+ filePath;
        var Terminal = parent.document.getElementById("EspaceMediaOCX");
        var result = Terminal.mediaTerminalSendFile(filePath);
        if (result != 0){
            new PJF.ui.errorMessageBox({
                content:'发送文件失败',
                detailMsg : '错误码为:'+result,
                buttonConfs: [{
                    name:'确认',
                    style:'main',
                    btnBgColor: 'rgb(65,159,245)',
                    onClick: function() {
                        template.loadPage('homepage');
                    }
                }]
            });
            return false;
        }
        return true;

    },
    /*
     *创建视频Window
     *@param json格式的数据，包含视频位置和大小
     */
    createWindow: function(data) {
        var hd = $('#' + data.domId);
        var he = hd[0];
        var br = he.getBoundingClientRect();
        var args = {
            x: br.left + window.screenLeft,
            y: br.top + window.screenTop,
            w: br.width,
            h: br.height,
            showWaterMark : (typeof(data.showWaterMark) != 'undefined' ? data.showWaterMark : true)
        };
        var frameArgs = {
            imageType: 3,
            iExpRate: 100,
            iIndex: 1
        };
        console.log('创建窗口开始');
        PJF.communication.devices.CallDevice("WindowFactory", "Create", args, function(e) {
            console.log('enter create window,result is '+e);
            var jsonData = eval('('+e+')');
            if (jsonData.success) {

                var hwnd = JSON.parse(jsonData.result).hwnd;
                console.log('创建窗口成功,句柄:'+hwnd);
                var Terminal = parent.document.getElementById("EspaceMediaOCX");
                Terminal.mediaTerminalSetLocalVedioHandle(hwnd);
                Terminal.mediaTerminalSetRemoteVedioHandle(hwnd);
            }else{
                alert('窗口创建失败,请联系管理员');
                template.loadPage('homepage');
            }
        });
    },
    //关闭窗口
    closeWindow: function(data) {
        console.log('关闭窗口');
        PJF.stm.client.callClient("WindowFactory", "Close", {}, function(e) {
            console.log('window关闭成功')
        });
    },
    //发送信息
    /**
     * @param msg[string]:发送信息内容
     */
    terminalSendMsg: function(msg) {
        console.log('开始sendMsg:'+msg);
        var Terminal = parent.document.getElementById("EspaceMediaOCX");
        var result = Terminal.mediaTerminalSendMsg(msg);
        if (result != 0) {
            new PJF.ui.errorMessageBox({
                content:'发送消息失败',
                detailMsg : '错误码为:'+result,
                buttonConfs: [{
                    name:'确认',
                    style:'main',
                    btnBgColor: 'rgb(65,159,245)',
                    onClick: function() {
                        template.loadPage('homepage');
                    }
                }]
            });
            return false;
        };
        return true;

    },
    //接收消息
    /**
     * @param msg[string]:接收信息内容
     */
    terminalReceiveMsg: function(msg) {
        console.log('开始receiveMsgMsg:'+msg);
        PJF.stm.vta.terminalRecMsg(msg);
    },
    initTerminal: function() {
        //首先设置通话状态为false
        window.vtaTalking=false;
        if (!PJF.stm.vta.hasLogin && PJF.util.isExist("PJF.otherInfo.vtaId") && PJF.util.isExist("PJF.otherInfo.authType") && PJF.otherInfo.authType == '01') {
            var Terminal = parent.document.getElementById("EspaceMediaOCX");
            var result = Terminal.mediaTerminalLogin(PJF.otherInfo.vtaId, 1);
            if (0 == result) {

                if(window.vtaLoginTimeId){
                    window.clearTimeout(window.vtaLoginTimeId)
                }

                Ext["vtmId"] = PJF.otherInfo.vtaId;
                PJF.stm.vta.hasLogin = true;
            } else {

                if(result=='9009'){
                    new PJF.ui.errorMessageBox({
                        content:'视频服务账号已登陆,请过3分钟再使用系统功能',
                        buttonConfs: [{
                            name:'确认',
                            style:'main',
                            btnBgColor: 'rgb(65,159,245)',
                            onClick: function() {
                            }
                        }]
                    });
                    window.vtaLoginTimeId = setTimeout(function(){PJF.stm.vta.initTerminal()},60000);

                }else{
                    new PJF.ui.errorMessageBox({
                        content:'视频服务登录失败',
                        detailMsg : '错误码为:'+result,
                        buttonConfs: [{
                            name:'确认',
                            style:'main',
                            btnBgColor: 'rgb(65,159,245)',
                            onClick: function() {
                            }
                        }]
                    });
                }

            }
        }


    },
    callTerminal: function() {
        console.log('开始callTerminal..');
        window.vtaComplete=false;
        window.vtaLoading = new PJF.ui.loading({noIcon:true,msg:'',opacity:0.1,timeout:99});
        var Terminal = parent.document.getElementById("EspaceMediaOCX");
        var result = Terminal.mediaTerminalCall('2', PJF.otherInfo.vtaTeller, "");
        PJF.stm.vta.createWindow({domId: 'takePhoto'});
        if (result != 0) {
            window.vtaLoading.destroy();
            new PJF.ui.errorMessageBox({
                content:'呼叫坐席失败',
                detailMsg : '错误码为:'+result,
                buttonConfs: [{
                    name:'确认',
                    btnBgColor: 'rgb(65,159,245)',
                    style:'main',
                    onClick: function() {
                        PJF.stm.vta.closeWindow();
                        template.loadPage('homepage');
                    }
                }]
            });
            return false;
        }
        return true;

    },
    destroyTerminal: function() {
        window.vtaComplete=true;
        var Terminal = parent.document.getElementById("EspaceMediaOCX");
        var result = Terminal.mediaTerminalReleaseCall();
        console.log('ReleaseCall:'+result);
    },
    //响应建立连接
    handleTaking:function(eventInfo){
        console.log('taking event:'+eventInfo)
        var _eventInfo = eval("("+eventInfo+")");
        var _callMode = _eventInfo["callmode"];
        if(window.vtaLoading)
            window.vtaLoading.destroy();
        if ("onewayvideo" == _callMode)
        {
            window.vtaTalking=true;
            PJF.communication.devices.CallDevice("WindowFactory", "Show", {}, function(e) {
                PJF.communication.player.PlaySoundByUrl('devprompt/SXT_selfCheck.wav');
                PJF.stm.vta.connectSuccess();
            });

        }
        else{
            PJF.stm.vta.destroyTerminal();
        }
    },
    //处理释放逻辑
    handleRelease:function(eventInfo){
        console.log('release:'+eventInfo+'vtaTalking:'+window.vtaTalking);
        //只要不是true则表示是异常情况
        if(!window.vtaTalking){

            PJF.stm.vta.closeWindow();
            if(window.vtaLoading)
                window.vtaLoading.destroy();
            new PJF.ui.errorMessageBox({
                content:'后台坐席繁忙，请稍后重试',
                buttonConfs: [{
                    name:'重新呼叫',
                    style:'main',
                    btnBgColor: 'rgb(65,159,245)',
                    onClick: function() {
                        PJF.stm.vta.callTerminal();
                    }
                },{
                    name:'取消',
                    style:'main',
                    onClick: function() {
                        template.loadPage('homepage');
                    }
                }]
            });
        }else{
            window.vtaTalking=false;
            var eventInfo = eval("("+eventInfo+")");
            var remoteNum = eventInfo['remote_number'];
            //不等于表示是服务端主动挂断，是异常情况
            if(!window.vtaComplete){
                PJF.stm.vta.closeWindow();
                if(window.vtaLoading)
                    window.vtaLoading.destroy();
                PJF.stm.vta.destroyTerminal();
                new PJF.ui.errorMessageBox({
                    content:'坐席繁忙，请重新操作',
                    buttonConfs: [{
                        name:'确定',
                        style:'main',
                        btnBgColor: 'rgb(65,159,245)',
                        onClick: function() {
                            template.loadPage('homepage');
                        }
                    }]
                });
            }

        }

    },
    //处理摄像头失败
    handleCamerFail:function(evnetInfo){
        PJF.stm.vta.closeWindow();
        if(window.vtaLoading)
            window.vtaLoading.destroy();
        new PJF.ui.messageBox({
            title: "提示信息",
            content:'摄像头启动失败',
            buttonConfs: [{
                name:'重新呼叫',
                style:'main',
                appendStyle:'confirm',
                width: 200,
                height: 80,
                onClick: function() {
                    PJF.stm.vta.callTerminal();
                }
            },{
                style:'main',
                name:'取消',
                style:'main',
                width: 200,
                height: 80,
                onClick: function() {
                    template.loadPage('homepage');
                }
            }]
        });
    },
    //处理视频
    handleVideoFail:function(){
        PJF.stm.vta.closeWindow();
        if(window.vtaLoading)
            window.vtaLoading.destroy();
        new PJF.ui.messageBox({
            title: "提示信息",
            content:'视频启动失败',
            buttonConfs: [{
                name:'重新呼叫',
                style:'main',
                appendStyle:'confirm',
                width: 200,
                height: 80,
                onClick: function() {
                    PJF.stm.vta.callTerminal();
                }
            },{
                style:'main',
                name:'取消',
                style:'main',
                width: 200,
                height: 80,
                onClick: function() {
                    template.loadPage('homepage');
                }
            }]
        });

    },

    showFailedEvent: function(){
        if(PJF.otherInfo.authType == '01'){
            new PJF.ui.errorMessageBox({
                content: '加载华为视频控件失败，请联系设备管理员',
                buttonConfs:[
                    {
                        style: "main",
                        name: "确定",
                        onClick: function(){
                        }
                    }
                ]
            });
        }
    }
};

PJF.namespace("PJF.stm.iot");
;
(function (exports) {
    exports.cdbIssue = function (args, callback) {
        var args1 = {
            cardSource: args.cardSource,
            iIcFlag: args.iIcFlag || 1,
            aryTagList: args.aryTagList || "x41,x42,x43,x44,x45,x46,x47,x48,x49,x4A",
            aryAIDList: args.aryAIDList || "A000000333010101|A000000333010102|A000000333010103|A000000333010106",
            piCInfoLen: args.piCInfoLen || 4096,
            trackNum: args.trackNum || 2,
            timeout: args.timeout || 20,
            iotFunc: true,
            uniqueNo: '',
            coordinateX: PJF.otherInfo.globalParams.coordinateX,
            coordinateY: PJF.otherInfo.globalParams.coordinateY,
            angle: PJF.otherInfo.globalParams.angle
        };
        args1.loadingConf = {
            msg: "设备正在处理中",
            opacity: 0.1,
            noIcon: true,
            timeout: args1.timeout
        };
        $.extend(true, args1, args);
        PJF.stm.client.callClient("App_CDB", "CDB_CardIssue", args1, function (issRes) {
            console.log('cdbIssue issRes:' + JSON.stringify(issRes))
            if (issRes.info && issRes.info.robotId) {
                var _robotObj = {};
                args.robotIdList.forEach(function (v) {
                    if (v.robotIotId === issRes.info.robotId) {
                        PJF.util.extend(_robotObj, v)
                    }
                })
                PJF.util.extend(true, args.stmManage, {
                    cardkey_type: 'Card',
                    device_id: _robotObj.device_id,
                    box_no: _robotObj.box_no
                });
            }
            PJF.stm.client.newCard = args.stmManage;
            var failCallBack = function (r) {
                PJF.stm.ICMaker.confiscateDev(function (res) {
                    r = r || {};
                    r.confiscateResult = res;
                    callback && callback(r);
                }, {
                    stmManage: PJF.stm.client.newCard,
                    conReason: r.conReason,
                    iotFunc: true,
                    uniqueNo: args1.uniqueNo
                });
            }

            function isCardIssued(errCode) {
                if (errCode == 'DRV0000000') {
                    return true;
                } else if (errCode != 'DRVCDB0012' && errCode != 'DRVCDB0001' && errCode != 'DRVCDB0011' && errCode.indexOf('DRVCDB') != -1) {
                    return true;
                } else {
                    return false;
                }
            }

            if (issRes.status) {
                $.extend(PJF.stm.client.newCard, {
                    cardkey_no: issRes.info.resInfo.accountNo
                });
                PJF.communication.stmManageAjax({
                    fwServiceId: 'stm.doReadCardKey',
                    jsonData: PJF.stm.client.newCard,
                    success: function (data) {
                        callback && callback(issRes);
                    },
                    failure: function (data) {
                        PJF.stm.client.newCard.recycle_type = 'Read';
                        PJF.stm.client.newCard.recycle_msg = data.BK_DESC;
                        failCallBack({
                            status: 0,
                            errorMsg: data.BK_DESC,
                            conReason: data.BK_DESC
                        });
                    }
                })
            } else {
                if (isCardIssued(issRes.errorCode)) {
                    PJF.stm.client.newCard.recycle_type = 'Read';
                    PJF.stm.client.newCard.recycle_msg = '发卡出错,出卡或读卡出错:' + issRes.errorMsg;
                    $.extend(issRes, {
                        conReason: '发卡出错,出卡或读卡出错'
                    });
                    failCallBack(issRes)
                } else {
                    callback && callback(issRes);
                }
                console.log('cdbIssue从机器人发卡失败:' + JSON.stringify(issRes));
            }

            // 原子服务，卡箱数量减1，暂时忽略从卡箱不出卡的情况
            if (isCardIssued(issRes.errorCode)) {
                PJF.communication.stmManageAjax({
                    fwServiceId: 'stm.doModifyCardKeySurplus',
                    jsonData: PJF.stm.client.newCard
                })
                console.log("cdbIssue发卡返回错误码为:" + issRes.errorCode + ",卡箱数量将减一。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newCard));
            } else {
                console.log("cdbIssue发卡返回错误码为:" + issRes.errorCode + ",卡箱数量将不变。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newCard));
            }
        }, PJF.stm.ICMaker.fnSuccess);
    };

    exports.cdbEject = function (callback, args) {
        var args = $.extend({}, args);
        PJF.stm.ICMaker.ejectDev(function (result) {
            if (result.status) {
                var timeout = 30;
                var tempFun;
                args.cdbEjectSound ? PJF.communication.player.PlaySoundByUrl(args.cdbEjectSound) : PJF.communication.player.PlaySoundByUrl("devprompt/CDB_taken.wav", true);
                var loading = new PJF.ui.loading({
                    msg: PJF.i18n.getI18nResource('pjfI18n.takeIcCardTip'),
                    timeout: timeout
                });
                var timeoutHandler = setTimeout(function () {
                    PJF.event.removeSubscriber(PJF.stm.client.events.CDB_TAKEN, tempFun);
                    loading.destroy();
                    if (args.stmManage) {
                        args.stmManage.recycle_type = 'Popout';
                        args.stmManage.recycle_msg = '客户发卡未取';
                    }
                    PJF.stm.ICMaker.confiscateDev(function (confiscateResult) {
                        if (result.status) {
                            confiscateResult.status = 3;
                        } else {
                            confiscateResult.status = 4;
                            console.log("没收卡失败，错误代码为:" + result.errorCode);
                        }
                        callback && (callback(confiscateResult));
                    }, {
                        stmManage: args.stmManage,
                        conReason: '吐卡超时未取',
                        recycleType: '8',
                        iotFunc: true,
                        uniqueNo: args.uniqueNo
                    });
                }, timeout * 1000)
                PJF.event.onceSubscriber(PJF.stm.client.events.CDB_TAKEN, tempFun = function () {
                    clearTimeout(timeoutHandler);
                    loading.destroy();
                    callback && (callback({
                        status: 1
                    }));
                })
            } else {
                callback && callback(result)
            }
        }, {
            keepAuthInfo: true,
            iotFunc: true,
            uniqueNo: args.uniqueNo
        });
        //清除缓存之前保留一份IC卡信息和客户信息，因为退卡时可能会吞卡，这样就没有卡片信息
        PJF.stm.IC_CARD_INFO_BAK = {};
        PJF.stm.CUSTOM_INFO_BAK = {};
        $.extend(true, PJF.stm.IC_CARD_INFO_BAK, PJF.stm.IC_CARD_INFO);
        $.extend(true, PJF.stm.CUSTOM_INFO_BAK, PJF.stm.CUSTOM_INFO);
        PJF.stm.IC_CARD_INFO_COR_BAK = {};
        PJF.stm.CUSTOM_INFO_COR_BAK = {};
        $.extend(true, PJF.stm.IC_CARD_INFO_COR_BAK, PJF.stm.IC_CARD_INFO_COR);
        $.extend(true, PJF.stm.CUSTOM_INFO_COR_BAK, PJF.stm.CUSTOM_INFO_COR);
        PJF.stm.util.clearAuthInfo(true);
        PJF.stm.util.clearCardInfo();
        PJF.event.publish("STM_EJECTCARD");
    };

    exports.kdbPublish = function (args, callback) {
        var args1 = {
            iotFunc: true,
            uniqueNo: '',
            coordinateX: PJF.otherInfo.globalParams.coordinateX,
            coordinateY: PJF.otherInfo.globalParams.coordinateY,
            angle: PJF.otherInfo.globalParams.angle
        };
        $.extend(args1, args)

        function fnSuccess(resultJson) {
            var info = {};
            info.status = resultJson.status;
            info.keyData = resultJson.keyData;
            info.robotId = resultJson.robotId;
            return info;
        }

        PJF.stm.client.callClient("App_KDB", "KDB_Publish", args1, function (pubRes) {
            console.log('kdbPublish pubRes:' + JSON.stringify(pubRes))
            var failCallBack = function (r) {
                PJF.stm.KDB.confiscateDev({
                    stmManage: PJF.stm.client.newKey,
                    conReason: r.conReason,
                    iotFunc: true,
                    uniqueNo: args1.uniqueNo
                }, function (res) {
                    callback && callback(r);
                })
            }
            if (pubRes.info && pubRes.info.robotId) {
                var _robotObj = {};
                args.robotIdList.forEach(function (v) {
                    if (v.robotIotId === pubRes.info.robotId) {
                        PJF.util.extend(_robotObj, v)
                    }
                })
                PJF.util.extend(true, args.stmManage, {
                    cardkey_type: 'Key',
                    device_id: _robotObj.device_id,
                    box_no: _robotObj.box_no,
                    cardkey_no: _robotObj.key_no_to_send
                });
            }
            PJF.stm.client.newKey = args.stmManage;

            function isPublished(errcode) {
                if (errcode == 'DRV0000000') {
                    return true;
                } else if (errcode != 'DRVKDB0007' && errcode != 'DRVKDB0001' && errcode != 'DRVKDB0003' && errcode.indexOf('DRVKDB') != -1) {
                    return true;
                } else {
                    return false;
                }
            }

            if (isPublished(pubRes.errorCode)) {
                PJF.communication.stmManageAjax({
                    fwServiceId: 'stm.doModifyCardKeySurplus',
                    jsonData: PJF.stm.client.newKey
                })
                console.log("kdbPublish发盾返回错误码为:" + pubRes.errorCode + ",盾箱数量将减一。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newKey));

                //现在需要去后端管理核实盾号再做后面的操作
                PJF.communication.stmManageAjax({
                    fwServiceId: 'stm.doReadCardKey',
                    jsonData: PJF.stm.client.newKey,
                    success: function (data) {
                        if (pubRes.status) {
                            callback && callback(pubRes)
                        } else {
                            PJF.stm.client.newKey.recycle_type = 'Read';
                            PJF.stm.client.newKey.recycle_msg = '外设出盾失败，错误信息为:' + pubRes.errorMsg;
                            $.extend(pubRes, {
                                conReason: '外设出盾失败'
                            });
                            failCallBack(pubRes);
                        }
                    },
                    failure: function (data) {
                        pubRes.status = 0;
                        pubRes.errorMsg = data.BK_DESC;
                        PJF.stm.client.newKey.recycle_type = 'Read';
                        PJF.stm.client.newKey.recycle_msg = data.BK_DESC;
                        $.extend(pubRes, {
                            conReason: data.BK_DESC
                        });
                        failCallBack(pubRes);
                    }
                })
            } else {
                console.log("kdbPublish发盾返回错误码为:" + pubRes.errorCode + ",盾箱数量将不变。doModifyCardKeySurplus参数为:" + JSON.stringify(PJF.stm.client.newKey));
                callback && callback(pubRes);
            }
        }, fnSuccess);
    };
})(PJF.stm.iot = {})
/**
 * 这个文件只是为了复写padClient.js里的某些方法
 * by shenye
 */
PJF.namespace("PJF.stm.client");
(function(exports) {

    //暴露这个方法在框架初始化的时候调用，为了以防万一...
    exports.redefine = function () {
        _funcs.forEach(function (func) {
            func();
        })
    }

    var resPath = PJF.communication.fileSystem.getAppResourceDir().result;
    /*
     * 由于生产将客户端wav音频全改为mp3音频，避免应用大幅度改代码，统一在这里将.wav转换为.mp3
     */
    var _func1 = function () {
        var oldPlaySoundByUrl = PJF.communication.player.PlaySoundByUrl;

		PJF.communication.player.PlaySoundByUrl = function(path, supporti18n) {
            if (PJF.orgInfo.instSvrlLgPsnID == 'DA003') return; //说不放语音了，反正听不懂
			//侯大爷说，devprompt目录下的wav并没有转为mp3!
			if (path.indexOf('devprompt') == -1)
				path = path.replace(new RegExp("\.wav$", "gm"), ".mp3");
            //多语言音频
            if (supporti18n && (PJF.i18n.getLanguage() != 'cn') && PJF.otherInfo.MENU_ID && PJF.constants.I18N_MENUS[PJF.i18n.getLanguage()] && (PJF.constants.I18N_MENUS[PJF.i18n.getLanguage()].indexOf(PJF.otherInfo.MENU_ID) > -1)) {
                var pathPreFix = path.replace(/([^.]*)\.(wav|mp3)$/, '$1');
                var i18nPath = pathPreFix + '_' + PJF.i18n.getLanguage() + '.mp3';
                var result = PJF.communication.fileSystem.getFileSize(resPath + i18nPath);
                console.log('getFileSize result:' + JSON.stringify(result) + ',i18nPath:'+i18nPath);
                if (result.success) {
                    path = i18nPath;
                }
            }
            console.log('客户端即将播放声音文件:' + path);
            oldPlaySoundByUrl.apply(PJF.communication.player, [path]);
        }
    }

	var _forceCloseTab;

	/*
	 * 针对龙易行，新开的STM webview不关闭，只隐藏，加快打开速度
	 */
	var _func2 = function() {		
		
		//若支持新开webview做隐藏，那么直接重定义stm里closetab的动作, 改为隐藏，这样重复打开不再耗时过多
		if (PJF.util.supportHideWebView()) {

			var _deviceCalls = {}; //存放外设调用事件ID, 目前只用于判断webview里是否还有外设调用没结束

			PJF.event.addSubscriber(PJF.stmEvent.PJF_STM_CALL_DEVICE, function(eventId){
				_deviceCalls[eventId] = true;
			});

			PJF.event.addSubscriber(PJF.stmEvent.PJF_STM_CALL_DEVICE_BACK, function(eventId){
				delete _deviceCalls[eventId];
			});
			//清除外设调用的回调
			var _clearDeviceCalls = function(){

			}

			var oldBeforeCloseThisTab = PJF.communication.Tabs.CloseThisTab;
			//重置api
			/*PJF.communication.Tabs.CloseThisTab = function() {
				//移除所有的未完成的外设回调
				console.log('隐藏stm webview, 准备删除所有未完成的外设调用回调')
				//这里是所有的未完成外设命令
				for (var eventId in _deviceCalls){
					PJF.event.removeSubscriber(eventId);
				}
				PJF.stm.client.callbackList = {};
				//隐藏当前webview
				oldBeforeCloseThisTab(null); //关闭当前页面
			}*/
			//新开webview右上角的X不关闭，只隐藏
			PJF.communication.Tabs.CanCloseThisTab = function() {

				if(_forceCloseTab){
					_forceCloseTab = false;
					return 2;
				}					
				console.log('点击右上角隐藏stm webview');
				//当前还有外设在调用
				if(!$.isEmptyObject(_deviceCalls)){
					/* console.log('当前还有外设调用没有返回');
					new PJF.ui.errorMessageBox({
						content: '当前还有外设正在调用,请稍后关闭',
						buttonConfs: [{
							name: '确定',
							style: 'main',
							btnBgColor: 'rgb(65,159,245)',
							onClick: function() {

							}
						},{
							name: '继续关闭',
							style: 'main',
							btnBgColor: 'rgb(65,159,245)',
							onClick: function() {
								//移除所有的未完成的外设回调
								console.log('隐藏stm webview, 准备删除所有未完成的外设调用回调')
								//这里是所有的未完成外设命令
								for (var eventId in _deviceCalls){
									PJF.event.removeSubscriber(eventId);
								}
								_deviceCalls = {};
								PJF.stm.client.callbackList = {};
								_forceCloseTab = true;
								PJF.communication.Tabs.CloseThisTab();
							}
						}]
					});
					return 0; */
					for (var eventId in _deviceCalls){
						PJF.event.removeSubscriber(eventId);
					}
					_deviceCalls = {};
					PJF.stm.client.callbackList = {};
				}			
				return 2; //0-不允许/1-关闭并重置/2-隐藏不重置.
			}
			//注册事件，当非第一次打开STM页面时
			PJF.event.addSubscriber(PJF.stmEvent.PJF_RELOAD_PADURL, function(url){
				PJF.stm.register.registerPad(url || "");
			})
		}
	}

    //物联网调用发卡、发盾时，增加一步锁定资源，先分开写吧，感觉会有不同
    var _toast = function (content) {
        new PJF.ui.errorMessageBox({
            content: content,
            buttonConfs: [{
                style: 'main',
                name: '确定',
                width: 200,
                height: 80,
                onClick: function () {
                    template.loadPage("homepage")
                }
            }]
        });
    }
    var pb = PJF.communication.fileSystem.readImage(resPath + 'webcache/AdBase_442000000_1.jpg');
    var base64 = pb.success ? pb.result : "";
    var _func3 = function () {
        var _originalCDB = PJF.stm.ICMaker.cardIssue;
        PJF.stm.ICMaker.cardIssue = function (args, callback) {
            if (PJF.otherInfo.moduleParams["CDB"] && (PJF.otherInfo.moduleParams["CDB"]["Apl_Tp_ID"] == 'remote') && (args.socialCard != "ZNK")) {
                var loading = new PJF.ui.loading({msg: '', noIcon: true, opacity: 0.1})
                if (args.ARQC) {
                    var currTime = PJF.util.formatDate(new Date(), 'yyyyMMddhhmmss');
                    args.ARQC = $.extend(args.ARQC, {
                        transDate: currTime.substr(0, 8), //交易日期
                        transTime: currTime.substr(8, 16), //交易时间
                        transOper: PJF.userInfo.userCode //商户，默认传操作员号
                    })
                    if (args.ARQC.appType == 'default') {
                        args.pchAIDList = 'A000000333010101|A000000333010102|A000000333010103|A000000333010106';
                    } else if (args.ARQC.appType == '1') {
                        args.pchAIDList = 'A000000333010101';
                    } else if (args.ARQC.appType == '2') {
                        args.pchAIDList = 'A000000333010102';
                    }
                    args.pchInput = PJF.stm.ICMaker.genARQCpchInput(PJF.stm.ICMaker.decimal2Ans(args.ARQC.authAmt),
                        PJF.stm.ICMaker.decimal2Ans(args.ARQC.otherAmt),
                        args.ARQC.cType, args.ARQC.transDate, args.ARQC.transType,
                        args.ARQC.transTime, args.ARQC.transOper);
                }
                var _oldParams = arguments;
                PJF.communication.devices.CallDevice("COMMON", "resourceRequest", {
                    "devType": "CDB",
                    "timeout": 120,
                    "robotIdList": args.robotIdList,
                    "_iotCall": true,
                    "uniqueNo": args.uniqueNo
                }, function (data) {
                    loading && loading.destroy();
                    console.log('cdb resourceRequest data:' + data)
                    data = PJF.util.safeParse(data)
                    if (data.success) {
                        var _errCode = PJF.util.safeParse(data.result).pchErrCode;
                        if (_errCode === 'DRV0000023') {
                            var _cdbId = PJF.util.generateUUid();
                            $('body').append('<div id="' + _cdbId + '"><div id="_cdbContent"><p class="pjf_stm_title">卡资源预约中，请稍候</p><img style="max-width: 8rem; max-height: 6rem;margin:0.5rem auto;display: block;" src="data:image/png;base64,'
                                + base64 + '"><div class="pjf_stm_bottom" style="width: 100%; left: 0;"><span id="_cdbCancel"></span></div></div></div>');
                            var _cdbwin = new PJF.ui.window({
                                dom: _cdbId,
                                width: 1000,
                                height: 800,
                                htmlDomId: '_cdbContent',
                                domLoadedCallBack: function () {
                                    new PJF.ui.linkButton({
                                        dom: "_cdbCancel",
                                        style: "main",
                                        btnBgColor: 'rgb(65,159,245)',
                                        textColor: 'rgb(255,255,255)',
                                        name: "取消等待",
                                        onClick: function () {
                                            PJF.event.removeSubscriber(PJF.stm.client.events.RSV_RESULT)
                                            clearTimeout(_cdbTm)
                                            PJF.communication.devices.CallDevice("COMMON", "cancelQueue", {
                                                "devType": "CDB",
                                                "timeout": 120,
                                                "_iotCall": true,
                                                "uniqueNo": args.uniqueNo
                                            })
                                            _cdbwin.destroy()
                                            $("#" + _cdbId).remove()
                                            template.loadPage("homepage")
                                        }
                                    });
                                }
                            });

                            PJF.event.onceSubscriber(PJF.stm.client.events.RSV_RESULT, function (result) {
                                clearTimeout(_cdbTm)
                                _cdbwin.destroy()
                                $("#" + _cdbId).remove()
                                result = PJF.util.safeParse(result);
                                if (result.state === 'success') {
                                    PJF.util.extend(_oldParams[0], {robotIotId: result.info})
                                    PJF.stm.iot.cdbIssue.apply(PJF.stm.iot, _oldParams);
                                } else {
                                    _toast("发卡：资源调度失败，请稍后再试<br>" + result.state)
                                }
                            })

                            var _cdbTm = setTimeout(function () {
                                PJF.event.removeSubscriber(PJF.stm.client.events.RSV_RESULT)
                                PJF.communication.devices.CallDevice("COMMON", "cancelQueue", {
                                    "devType": "CDB",
                                    "timeout": 120,
                                    "_iotCall": true,
                                    "uniqueNo": args.uniqueNo
                                })
                                _cdbwin.destroy()
                                $("#" + _cdbId).remove()
                                _toast("发卡：资源调度超时，请稍后再试")
                            }, 120 * 1000)
                        } else if (_errCode === 'DRV0000000') {
                            PJF.stm.iot.cdbIssue.apply(PJF.stm.iot, _oldParams);
                        } else {
                            _toast("发卡：预约资源失败，请稍后再试<br>错误码：" + _errCode)
                        }
                    } else {
                        _toast("发卡：预约资源失败，请稍后再试")
                    }
                })
            } else {
                _originalCDB.apply(PJF.stm.ICMaker, arguments);
            }
        }
    }
    var _func4 = function () {
        var _originalKDB = PJF.stm.KDB.publish;
        PJF.stm.KDB.publish = function (args, callback) {
            if (PJF.otherInfo.moduleParams["KDB"] && (PJF.otherInfo.moduleParams["KDB"]["Apl_Tp_ID"] == 'remote')) {
                var loading = new PJF.ui.loading({msg: '', noIcon: true, opacity: 0.1})
                var _oldParams = arguments;
                PJF.communication.devices.CallDevice("COMMON", "resourceRequest", {
                    "devType": "KDB",
                    "timeout": 120,
                    "robotIdList": args.robotIdList,
                    "_iotCall": true,
                    "uniqueNo": args.uniqueNo
                }, function (data) {
                    loading && loading.destroy();
                    console.log('kdb resourceRequest data:' + data)
                    data = PJF.util.safeParse(data)
                    if (data.success) {
                        var _errCode = PJF.util.safeParse(data.result).pchErrCode;
                        if (_errCode === 'DRV0000023') {
                            var _kdbId = PJF.util.generateUUid();
                            $('body').append('<div id="' + _kdbId + '"><div id="_kdbContent"><p class="pjf_stm_title">盾资源预约中，请稍候</p><img style="max-width: 8rem; max-height: 6rem;margin:0.5rem auto;display: block;" src="data:image/png;base64,'
                                + base64 + '"><div class="pjf_stm_bottom" style="width: 100%; left: 0;"><span id="_kdbCancel"></span></div></div></div>');
                            var _kdbwin = new PJF.ui.window({
                                dom: _kdbId,
                                width: 1000,
                                height: 800,
                                htmlDomId: '_kdbContent',
                                domLoadedCallBack: function () {
                                    new PJF.ui.linkButton({
                                        dom: "_kdbCancel",
                                        style: "main",
                                        btnBgColor: 'rgb(65,159,245)',
                                        textColor: 'rgb(255,255,255)',
                                        name: "取消等待",
                                        onClick: function () {
                                            PJF.event.removeSubscriber(PJF.stm.client.events.RSV_RESULT)
                                            clearTimeout(_kdbTm)
                                            PJF.communication.devices.CallDevice("COMMON", "cancelQueue", {
                                                "devType": "KDB",
                                                "timeout": 120,
                                                "_iotCall": true,
                                                "uniqueNo": args.uniqueNo
                                            })
                                            _kdbwin.destroy()
                                            $("#" + _kdbId).remove()
                                            template.loadPage("homepage")
                                        }
                                    });
                                }
                            });

                            PJF.event.onceSubscriber(PJF.stm.client.events.RSV_RESULT, function (result) {
                                clearTimeout(_kdbTm);
                                _kdbwin.destroy();
                                $("#" + _kdbId).remove();
                                result = PJF.util.safeParse(result);
                                if (result.state === 'success') {
                                    PJF.util.extend(_oldParams[0], {robotIotId: result.info})
                                    PJF.stm.iot.kdbPublish.apply(PJF.stm.iot, _oldParams);
                                } else {
                                    _toast("发盾：资源调度失败，请稍后再试<br>" + result.state)
                                }
                            })

                            var _kdbTm = setTimeout(function () {
                                PJF.event.removeSubscriber(PJF.stm.client.events.RSV_RESULT);
                                PJF.communication.devices.CallDevice("COMMON", "cancelQueue", {
                                    "devType": "KDB",
                                    "timeout": 120,
                                    "_iotCall": true,
                                    "uniqueNo": args.uniqueNo
                                })
                                _kdbwin.destroy();
                                $("#" + _kdbId).remove();
                                _toast("发盾：资源调度超时，请稍后再试");
                            }, 120 * 1000)
                        } else if (_errCode === 'DRV0000000') {
                            PJF.stm.iot.kdbPublish.apply(PJF.stm.iot, _oldParams);
                        } else {
                            _toast("发盾：预约资源失败，请稍后再试<br>错误码：" + _errCode)
                        }
                    } else {
                        _toast("发盾：预约资源失败，请稍后再试")
                    }
                })
            } else {
                _originalKDB.apply(PJF.stm.KDB, arguments);
            }
        }
    }
    var _func5 = function () {
        var _originalEject = PJF.stm.ICMaker.ejectCard;
        PJF.stm.ICMaker.ejectCard = function (callback, args) {
            var args = $.extend({}, args);
            if (PJF.otherInfo.moduleParams["CDB"] && (PJF.otherInfo.moduleParams["CDB"]["Apl_Tp_ID"] == 'remote') && args.iotFunc) {
                PJF.stm.iot.cdbEject.apply(PJF.stm.iot, arguments);
            } else {
                _originalEject.apply(PJF.stm.ICMaker, arguments);
            }
        }
    }

    var _funcs = [_func1, _func2, _func3, _func4, _func5];
})(PJF.stm.client);


/**
 * stm的i18n工具
 */
PJF.namespace('PJF.i18n');

(function () {

  var lang = 'cn', lazyResource = [], vueI18n
  
  var formatter = function() {
    
  }
  formatter.prototype.interpolate = function (message, values) {
    var lan = PJF.i18n.getLanguage()
    var opts = (values && values.opts) || {}
    var sep = '<br>'
    if (opts.extraLan && opts.extraLan !== lan) {
      
    }
    console.log(arguments)
    return [message]
  }

  // 还是定义成api调用，你懂的，万一出问题呢
  
  PJF.i18n = {
    init: function () {
      if (vueI18n) {
        return vueI18n
      }
      Vue.use(VueI18n) // 挂载插件
      vueI18n = new VueI18n({
        locale: lang,
        messages: PJF.i18n.resource,
        fallbackLocale: lang,
        // formatter: new formatter(),
        dateTimeFormats: {
          'cn': {
            short: {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            },
            long: {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              weekday: 'long'
            }
          },
          'en': {
            short: {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            },
            long: {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              weekday: 'short',
            }
          }
        }
      })
      lazyResource.forEach(function(o) { // 懒加载
        PJF.i18n.addI18nResource(o.lan, o.appId, o.obj)
      }) 
      PJF.i18n.loadCss()
      return vueI18n
    },
    getVueI18n: function () {
      return vueI18n
    },
    setLanguage: function (lan) {
      lang = lan
      vueI18n && (vueI18n.locale = lan)
      PJF.i18n.fitCss()
    },
    getLanguage: function () {
      return lang
    },
    // 支持懒加载(应用调用时可能vueI18n还没初始化)
    addI18nResource: function (lan, appId, obj) {
      if (!appId || !obj) return;
      // 懒加载
      if (!vueI18n) {
        lazyResource.push({lan: lan, appId: appId, obj: obj})
        return
      }
      appId = appId.split('.')
      var objmsg = {}
      for(var i = 0, tmp = objmsg; i < appId.length; i++ ) {
        tmp[appId[i]] = i == appId.length - 1 ? obj : {}
        tmp = tmp[appId[i]]
      }
      var exist = PJF.i18n.getI18nResource('', lan) // 暴力点，获取整个语言
      if (!$.isEmptyObject(exist)) { // 深度拷贝一哈
        objmsg = $.extend(true, exist, objmsg)
      }
      
      vueI18n.mergeLocaleMessage(lan, objmsg)
    },
    getI18nResource: function (path, lan) {
      lan = lan || lang      
      var t = vueI18n.t(path, lan)
      if (t == path) { // 不是到子节点的
        var obj = vueI18n.getLocaleMessage(lan)
        if (path && obj) {
          path = path.split('.')
          for (var i = 0; i < path.length; i++) {
            if (obj[path[i]]) {
              obj = obj[path[i]]
            } else {
              obj = null
              break
            }
          }
        }
        return obj
      } else {
        return t
      }
    }
  }

})();
/**
 * 组件自己的i18n css
 */
;
(function(){

  // 直接这样来实现多行字符串  IE 11还不支持``, 并且也不准备给stm加入编译过程, 所以就在运行时解析了
  // 将css添加到匿名函数的注释里
  var css = (function(){/**
    @preserve
    <!-- 英文 -->
    <style reg = "en">
    .template_navbtn_home {
      background-image: url(/bosWeb/css/stmimg/homepageBtn_en.png);
    }
    </style>
   <!-- 繁体 -->
   <style reg = "fan">
   .template_navbtn_home {
      background-image: url(/bosWeb/css/stmimg/homepageBtn_fan.png);
    }
   </style>
    <!-- 维文 -->
    <style reg = "wei">
    body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,input,textarea,p,th,td {
      font-family: 'ALKATIP Basma Tom',Arial,'Microsoft Yahei','微软雅黑',sans-serif;
    }
    </style>
    <style reg = "wei" menuid = "true">
    .stm-btn-main .stm-btn-text {
      font-size: 0.2rem;
      line-height: 0.25rem;
    }
    </style>
    <style pjf-if = "PJF.otherInfo.isSelfBank || (PJF.otherInfo.globalParams.useNewViewStatus === '01')">
    .template_top {
      background: #fff;
    }
    .template_posdate {
      color: #666666;
    }
    .template_pos {
      font-size: .16rem;
      color: #222222;
    }
    .template_date .template_version_id .template_dev_id {
      font-size: .14rem;
    }
    .template_welcomeText {
      width: 0;
    }
    .template_middle {
      margin: 0 .1rem;
    }
    .template_search {
      width: 5.69rem;
      height: .56rem;
      background: #F0F0F0;
      border-radius: 100px;
      line-height: .56rem;
    }
    .template_searchHint {
      width: auto;
      flex: 1;
      padding-left: 0.3rem;
      margin-left: 0;
    }
    .template_searchContent {
      top: .56rem;
    }
    </style>
   <style pjf-if = "PJF.orgInfo.instSvrlLgPsnID == 'DA003'">
   .errorMsgbox_content_text_content {
    display: inline-block;
    text-align: left;
    word-break: keep-all;
    word-wrap: break-word;
    width: 100%;
    }
   </style>
  */}).toString().match(/^[\s\S]*\/\*{2}([\s\S]*)\*\//)[1].replace(/(?:<style([^>]*?)>([\s\S]*?)<\/style>)/ig, function($0, attrs, cssContent) {
    if (attrs && cssContent) { // 至少要配置reg, 所以判断这两个值都必须存在
      return '<style ' + attrs + ' type = "text/css" pjfI18nCss = "true">' + cssContent + '</style>'
    } else
      return ''
  }).replace('@preserve', '')

  /**
   * 加载框架的i18n css
   */
  PJF.i18n.loadCss = function () {
    $(css).appendTo(document.head)    
    PJF.i18n.defineMenuId()
    PJF.i18n.fitCss()
  }

  /**
   * 框架css根据语言环境重新设置，目前在以下两个情况发生时调用：
   * 1. 初始化时
   * 2. 语言改变时
   * 3. 菜单ID改变时(坑)
   */
  PJF.i18n.fitCss = function () {
    // 查询框架的i18n css, 也包括应用页面，这样可以做到实时改变
    var i18nCssDoms = document.querySelectorAll('style[pjfI18nCss="true"]')
    var lan = PJF.i18n.getLanguage()
    Array.prototype.forEach.call(i18nCssDoms, function(style){
      var reg = style.getAttribute('reg')
      var pjfIf = style.getAttribute('pjf-if')
      if (reg && new RegExp(reg).test(lan)) {
        // 再判断下菜单ID
        var whiteMenuIds = style.getAttribute('menuid') || ''
        if (whiteMenuIds == 'true') {
          whiteMenuIds = PJF.constants.I18N_MENUS[lan] || '' // 代表使用PJF自定义的白名单，应用也可以自定menuid
        }
        if (!whiteMenuIds) {
          style.disabled = false
        } else {
          style.disabled = !whiteMenuIds.split(',').some(function(menuId) {
            return PJF.otherInfo.MENU_ID == menuId // 当前menuId为白名单
          })
        }
      } else if (pjfIf) { // 只要为true就生效, 针对无人银行
        try {
          if (!eval(pjfIf)) {
            style.disabled = true
          } else {
            style.disabled = false
          }
        } catch (e) {
          console.log('pjf-if error:', e.message)
        }
      }else {
        style.disabled = true
      }
    })
    
  }
  // 这里定义PJF.otherInfo.menuId成响应式的，为了给多语言增加一个维度（有时候只有某几个菜单上多语言，然后再去改对应的style)
  PJF.i18n.defineMenuId = function () {
    PJF.otherInfo = PJF.otherInfo || {}
    var value = PJF.otherInfo.MENU_ID // 初始值
    Object.defineProperty(PJF.otherInfo, 'MENU_ID', {
      enumerable: true,
      configurable: true,
      get: function () {
        return value
      },
      set: function (v) {
        if (v === value || (v !== v && value !== value)) {
          return
        }
        value = v
        // 样式表根据菜单也有维度了， 这里触发下fitcss
        PJF.i18n.fitCss()
      }
    })
  }
})();
/**
 * stm框架自己的多语言翻译, 都写到pjfI18n里
 */

PJF.i18n.resource = {
    "cn": {
        "pjfI18n": {
            devId: "设备编号",
            devVersion: "设备版本",
            selectRequired: "该项为必填项",
            takeIcCardTip: "请取走您的银行卡",
            popIcCardTip: '卡槽已经有卡，请点弹出按钮取出卡',
            popIcCardBtn: '弹卡',
            loadingMsg: '业务正在处理中，请稍候……',
            detailMsg: '详细信息',
            arqcMsg: '设备正在处理中',
            errorSerNum: '全局跟踪号：',
            errorKeyword: '暂时未能处理您的请求，请联系大堂经理。'
        }
    },
    "en": {
        "pjfI18n": {
            devId: "dev Id",
            devVersion: "dev version",
            selectRequired: "Required fields",
            takeIcCardTip: "Please take your card",
            popIcCardTip: 'Please click Pop The Card button and insert the card again',
            popIcCardBtn: 'Pop The Card',
            loadingMsg: 'In Progress',
            detailMsg: 'Detail Message',
            arqcMsg: 'In Progress',
            errorSerNum: 'Series number:',
            obTimoutTip: 'Online Banking Account will automatically log out after counting down for 10 seconds.Please touch the screen to continue.'
        }
    },
    "wei": {},
    "fan": {
        "pjfI18n": {
            devId: "設備編號",
            devVersion: "設備版本",
            selectRequired: "該項為必輸項",
            takeIcCardTip: "請拿走你的銀行卡",
            popIcCardTip: '卡槽已經有卡，請點擊彈出按鈕取走卡',
            popIcCardBtn: '彈卡',
            loadingMsg: '業務正在處理中，請稍候',
            detailMsg: '詳細信息',
            arqcMsg: '設備正在處理中',
            errorSerNum: '全局跟蹤號：',
            errorKeyword: '暫時未能處理您的請求，請聯繫大堂經理。',
            obTimoutTip: '網上銀行戶口將於10秒倒數計時結束後自動退出，請點擊屏幕繼續。'
        }
    }
}
/**
 * Framework JS Library 1.0
 * Copyright(c) 2014, China Construction Bank.
 * Author: zws
 * Create on: 2015年12月1日16:49:30
 * Last Updated:
 * 说明:动画结束显示label或者input内容
 */
PJF.ui.animateLabel = PJF.extend( PJF.ui.component ,{
    init:function(conf){
        this.options = {
            orient:'horizontal',
            orientClass:'pjf-animateLabel-goRight'
        };
        $.extend( this.options , conf );
        this.initHtml();
        this.adjustCSS();
        this.bindEvent();
    },
    initHtml:function(){
        var html = ['<div class="pjf-animateLabel-frame">',
                    '<div class="pjf-animateLabel-cont"></div>',
                    '<div class="pjf-animateLabel-img"></div>',
                    '</div>'];
        this.com.append( html.join('') );
        this.frame = this.com.find( ".pjf-animateLabel-frame:first" );
        this.cont  = this.com.find( ".pjf-animateLabel-cont:first" );
        this.icon  = this.com.find( ".pjf-animateLabel-img:first" );
    },
    adjustCSS:function(){
        var opts = this.options ;
        if( opts.orient === 'vertical' ){
            opts.orientClass = 'pjf-animateLabel-goBottom';
        }
        if( opts.width ){
            this.frame.width( opts.width / PJF.constants.DEFAULT_FONTSIZE + 'rem' );
        }
        if( opts.height ){
            this.frame.height( opts.height / PJF.constants.DEFAULT_FONTSIZE + 'rem' );
        }
        if( opts.showBorder === false ){
            this.cont.css({'border':"none"})
        }
        if(opts.showBackground === false ){{
            this.cont.css({'background':"none"});
        }}
        var iconSize = opts.height/ PJF.constants.DEFAULT_FONTSIZE + 'rem' ;
        if( opts.orient === 'vertical' ){
            iconSize = opts.width / PJF.constants.DEFAULT_FONTSIZE + 'rem';
        }
        if( opts.iconUrl ){
            this.icon.css('background-image','url(' + opts.iconUrl + ')' );
        }
        this.icon.height( iconSize );
        this.icon.width( iconSize );
    },
    bindEvent:function(){
        var me = this ;
        var orientClass = this.options.orientClass ;

        /**
         * 用途 ： 绑定点击滚动图标的事件
         * @variable isEnd ： 控制只要在滚动图标结束位置，点击滚动图标就会往回滚
         * 注：当滚动图在初始位置时，在异步模式下是不会滚动的，滚动行为取决于外部ajax的success调用
         * */
        this.icon.on('click',function(){
            var isEnd = $(this).hasClass( orientClass ) ;
            if( isEnd ){
                me.icon.removeClass( orientClass );
                me.cont.stop().fadeOut( 1500 );
            }else{
                me._onClickIcon();
                if( !me.options.async ){
                    me.icon.addClass( orientClass );
                    me.cont.stop().fadeIn( 1500 );
                }
            }
        });

        /**
         * 用途 ： 绑定滚动结束时的事件
         * @variable runOnce ： 控制动画结束的行为，只执行一次
         * @variable isEnd ：   控制只在动画结束位置触发_onAnimateEnd回调，初始位置不触发
         * */
        this.icon.on('transitionend',function(){
            var runOnce = $(this).data( 'runOnce' ) ;
            var isEnd = $(this).hasClass( orientClass ) ;
            if( runOnce ){
                $(this).removeData( 'runOnce' );
                return ;
            }
            if( isEnd ){
                if( !me.options.async ){
                    me.setContent( me.options.content );
                }
                me._onAnimateEnd();
            }else{
                me.setContent("")
            }
            $(this).data( 'runOnce',true );
        })
    },
    //--------------------------event callback--------------------
    /**
     * 用途：设置点击icon回调，只在滚动图标在初始位置时有效
     * */
    _onClickIcon:function(){
        this.options.onClickIcon && this.options.onClickIcon.call();
    },
    /**
     * 用途：设置滚动图标滚动到结束位置时的回调函数
     * */
    _onAnimateEnd:function(){
        this.options.onAnimateEnd && this.options.onAnimateEnd.call();
    }
})

PJF.apply(  PJF.ui.animateLabel.prototype,{
    /**
     * 用途：设置显示内容
     * @param html : 文字或者html片段
     */
    setContent:function( html ){
        this.cont.html( html );
    },
    /**
     * 用途：手动设置动画滚动到末尾
     */
    showContent:function(){
        var orientClass = this.options.orientClass ;
        this.icon.addClass( orientClass );
        this.cont.stop().fadeIn( 1500 );
    },
    getClassName: function() {
        return "PJF.ui.animateLabel";
    },
    destroy:function(){
        PJF.ui.componentMgr.remove(this.id);
        this.com.remove();
        this.com = null;
        this.id = null;
    }
});
/**
 * Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * Author: famingyuan
 * Create on: 2015-05-28
 * Last Updated:
 * 说明:STM 按钮组件
 */
/***
 *
 * 创建PJF.ui.linkButton
 *
 * @param conf 指定创建 linkButton 时 需要的参数
 *
 * @return 创建的PJF.ui.linkButton实例
 */
PJF.ui.linkButton = PJF.extend(PJF.ui.component, {
	dom: null,
	// 按钮点击会 针对不同类型做特殊处理
	specialHandlerMap: {
		'auth-code': 'authCodeClickHandler',
		'icon-cycle': 'iconCycleClickHandler',
		'group': 'groupBtnClickHandler',
		'pag-btn': 'pagBtnClickHandler',
		'icon-switch': 'iconSwitchBtnClickHandler'
	},
	// 特殊按钮初始化前回调 用于整理参数 变更参数等
	specialInitHandlerMap: {
		// style:handler
		'main': 'mainBtnInitHandler'
	},
	// 特殊按钮布局变更 --- 用于重新定义按钮的布局
	specialDomCreateHandlerMap: {
		//		'icon-cycle': 'iconCycleCreateHandler'//zws 注销此代码 数据
	},
	// 特殊初始化后函数 用于创建完按钮布局、值之后 做部分扩展处理
	specialInitedHandlerMap: {
		'icon-switch': 'iconSwitchInitedHandler',
		'auth-code': 'authCodeInitedHandler'
	},
	// 特殊按钮在*禁用* *启用*时的回调 在按钮disable enable之后 做响应处理
	specialStatusChangeHandlerMap: {
		// style:handler
	},
	btnGroupMap: {}, // key value=[]
	// 初始方法
	init: function(conf) {
		//		console.log('1.创建按钮开始,dom为:'+conf.dom);
		var _super = this;
		//console.log('stm button init, dom id is :' + conf.dom)
		var p = {
			dom: conf.dom,
			text: conf.name, // 按钮显示文字
			authCodeRepeatText: conf.authCodeRepeatText, // 重新发送验证码的文字描述 只对style为auth-code有效
			iconUrl: conf.iconUrl, // icon图标地址
			leftIconUrl: conf.leftIconUrl, // 左上角表
			choosedUrl: conf.choosedUrl, // 选中状态使用的图片 --- icon-cycle使用
			disabledIconUrl: conf.disabledIconUrl, // 禁用状态下使用的按钮图片

			disabled: conf.disabled,
			handler: conf.onClick,

			// 可能有的按钮的href 此时就不应该再传递onClick了
			href: conf.href,

			// 是否允许重复提交
			isRepeat: (typeof(conf.isRepeat) != "undefined" ? conf.isRepeat : true),

			style: conf.style || "default", // 按钮样式 正方形
			fontSize: conf.fontSize,
			appendStyle: conf.appendStyle, // 附加样式--- 用于定制同一个样式下的 特殊样式

			bgColor: conf.bgColor, // 背景颜色
			textColor: conf.textColor, // 文字颜色
			disabledTextColor: conf.disabledTextColor, // 禁用按钮的文字

			// 是否显示按钮边框
			showBorder: conf.showBorder,

			// 双击按钮之后 延时enable
			delayTime: conf.delayTime || 1000,
			/*添加浮动控制*/
			align: conf.align,
			/*按钮宽度指定*/
			width: conf.width,
			/*按钮高度*/
			height: conf.height,
			/*图片与文件上下间距*/
			imgTextMargin: conf.imgTextMargin,

			/*按钮上图片宽度控制*/
			imgWidth: conf.imgWidth,
			/*按钮上图片高度控制*/
			imgHeight: conf.imgHeight,

			/*按钮文字对齐方式*/
			textAlign: conf.textAlign,
			/*追加的className*/
			appendClass: conf.appendClass,
			// 所属组ID
			groupId: conf.groupId,

			// switch按钮 是否选中 默认不选中
			switchBtnchecked: conf.switchBtnchecked,

			// 默认的验证码倒计时时间
			authCodeTime: conf.authCodeTime || 60,

			// 按钮组的某一个按钮点击时触发事件
			groupClickHandler: conf.groupClickHandler,

			// 应用级参数
			menuId: conf.menuId,
			//新的背景
			btnBgColor: conf.btnBgColor,
			switchBtnDisableInfo: conf.switchBtnDisableInfo || '已签约',
			beforeClickHandler: conf.beforeClickHandler
		};
		p.iconUrl = PJF.util.addAtchBtchNoToUrl(p.iconUrl)
		p.leftIconUrl = PJF.util.addAtchBtchNoToUrl(p.leftIconUrl)
		p.disabledIconUrl = PJF.util.addAtchBtchNoToUrl(p.disabledIconUrl)
		// 保存参数
		this.p = p;

		// 特殊按钮 需要在初始化前 做处理
		if (this.specialInitHandlerMap[p.style]) {
			this[this.specialInitHandlerMap[p.style]]();
		}

		// 创建按钮样式以及dom结构
		this.createBtnDom(p);

		// 可能有的样式调整
		this.adjustStyle();

		// 为按钮添加onclick事件 
		this.regClickHandler(p.handler);

		// 禁用
		if (p.disabled && this.com.length > 0) {
			this.disable();
		}
		// 如果指定按钮组ID 则添加当前对象到该组中
		if (p.groupId !== undefined) {
			this.btnGroupMap[p.groupId] = this.btnGroupMap[p.groupId] || [];
			this.btnGroupMap[p.groupId].push(this);
			// 监听按钮组任意一个按钮点击事件
			if (p.groupClickHandler) {
				this.groupClickHandlerWrapper = function() {
					p.groupClickHandler.apply(_super, Array.prototype.slice.call(arguments));
				};
				PJF.event.addSubscriber('GROUP_CLICK_' + p.groupId, this.groupClickHandlerWrapper);
			}
		}
		//		console.log('4.处理按钮回调');
		// 特殊按钮 需要在初始化后 做进一步处理
		if (this.specialInitedHandlerMap[p.style]) {
			this[this.specialInitedHandlerMap[p.style]]();
		}
	},
	/**
	 * style配置为main的按钮 在初始化前对参数进一步处理
	 * @return {[type]} [description]
	 */
	authCodeInitedHandler: function() {		
		this.com.css('background', '-ms-linear-gradient(top,#a5d3f8,#43a2fb)');
		this.com.find('.stm-btn-text').css('color', 'white');
		this.com.find('.stm-btn-text').css('text-shadow', '0px 0px 0px #666');

	},
	/**
	 * style配置为main的按钮 在初始化前对参数进一步处理
	 * @return {[type]} [description]
	 */
	mainBtnInitHandler: function() {
		this.p.bgColor = undefined;
	},
	/**
	 * 带switch的按钮初始化之后的回调函数
	 * @return {[type]} [description]
	 */
	iconSwitchInitedHandler: function() {
		var disableInfo = this.p.switchBtnDisableInfo;
		/*初始化时为按钮底部添加switch图标布局*/
		$('<span class="icon-switch-status-desc">' + disableInfo + '</span>').appendTo(this.com);
		this.checkboxImg = $('<span class="stm-btn-icon-switch-icon"></span>').appendTo(this.com);
		// 为当前对象扩展函数
		PJF.apply(this, {
			// 用于获取当前switch按钮是否选中
			'getValue': (function(obj) {
				return function() {
					return obj.checkboxImg.hasClass('stm-btn-icon-switch-checked-fake');
				};
			})(this),
			// 用于设置当前switch按钮选中状态
			'setValue': (function(obj) {
				return function(flag) {
					if (flag) {
						obj.checkboxImg.removeClass('stm-btn-icon-switch-checked-fake').addClass('stm-btn-icon-switch-checked-fake');
					} else {
						obj.checkboxImg.removeClass('stm-btn-icon-switch-checked-fake');
					}

				};
			})(this)
		});

		// 是否启用
		if (this.p.switchBtnchecked) {
			if (this.p.disabled) {
				this.checkboxImg.remove();
			} else
				this.setValue(true);
		}
	},
	/**
	 * 圆形按钮的布局创建函数
	 * @return {[type]} [description]
	 */
	iconCycleCreateHandler: function(conf) {
		// 文字处理
		var btnContentDom = [];
		btnContentDom.push('<span class="btn-content">');

		// 判断是否存在图片
		if (conf.iconUrl) {
			btnContentDom.push('<img class="stm-btn-img" src="' + conf.iconUrl + '"/>');
		}
		btnContentDom.push('</span>');

		var btnText = conf.text || "";
		btnContentDom.push('<p class="stm-btn-text">' + btnText + '</p>');

		this.com.append(btnContentDom.join(''));
	},
	/**
	 * 创建按钮样式
	 * @param  {[type]} conf [description]
	 * @return {[type]}   [description]
	 */
	createBtnDom: function(conf) {
		var com = this.com;

		var btnText = conf.text || "";
		var style = conf.style;

		com.addClass('stm-btn ' + 'stm-btn-' + style);
		if (conf.leftIconUrl) {
			com.prepend('<img src="' + conf.leftIconUrl + '" class = "stm-btn-left-icon" >')
		}
		// 追加可能有class
		conf.appendClass && com.addClass(conf.appendClass);
		// 添加可能有的href
		conf.href && com.attr('href', conf.href);

		// 自定义背景色 这里从bgcolor重新换了个名字
		if (conf.btnBgColor !== undefined) {
			com.css('background-color', conf.btnBgColor);
		} else {
			com.addClass('stm-btn-defaultBg');
		}
		// 特殊按钮自定义创建
		if (this.specialDomCreateHandlerMap[style]) {
			this[this.specialDomCreateHandlerMap[style]](conf);
			return;
		}

		// 文字处理
		var btnContentDom = [];
		btnContentDom.push('<span class="btn-content">');

		// 判断是否存在图片
		if (conf.iconUrl) {
			btnContentDom.push('<img class="stm-btn-img" src="' + conf.iconUrl + '"/>');
		}

		// 默认按钮样式 大方块 215*215
		if (style === 'default') {
			if (btnText.length == 2) {
				btnText = btnText.substring(0, 1) + '&nbsp;&nbsp;' + btnText.substring(1, 2);
			}
			btnContentDom.push('<p class="stm-btn-text">' + btnText + '</p>');
		} else {
			// 其他样式 默认文字是单行 两个字的 则中间加空格

			btnContentDom.push('<p class="stm-btn-text">' + btnText + '</p>');
		}


		btnContentDom.push('</span>');

		com.append(btnContentDom.join(''));
	},
	/**
	 * 可能有的初始化时 样式调整
	 * @return {[type]} [description]
	 */
	adjustStyle: function() {
		if (this.p.width) {
			this.com.css('width', this.p.width / PJF.constants.DEFAULT_FONTSIZE + 'rem');
		}
		if (this.p.height) {
			this.com.css('height', this.p.height / PJF.constants.DEFAULT_FONTSIZE + 'rem');
		}

		if (this.p.fontSize) {
			this.com.find('.stm-btn-text').css('font-size', this.p.fontSize / PJF.constants.DEFAULT_FONTSIZE + 'rem')
		}

		var imgContainer = this.imgContainer = $('.stm-btn-img', this.com);
		if (this.p.imgWidth) {
			if (this.p.imgWidth == 'auto') {
				imgContainer.css('width', this.p.imgWidth);
			} else {
				imgContainer.css('width', this.p.imgWidth / PJF.constants.DEFAULT_FONTSIZE + 'rem');
			}
		}
		if (this.p.imgHeight) {
			if (this.p.imgHeight == 'auto') {
				imgContainer.css('height', this.p.imgHeight);
			} else {
				imgContainer.css('height', this.p.imgHeight / PJF.constants.DEFAULT_FONTSIZE + 'rem');
			}

		}

		if (this.p.style == 'icon-cycle') {
			// icon-cycle 默认情况下 无背景色
			this.com.removeClass('stm-btn-bg-none').addClass('stm-btn-bg-none');
		}


		// 文字颜色控制
		if (this.p.textColor) {
			this.com.find('.stm-btn-text').css('color', this.p.textColor);
		}
		/*图片与文件上下间距*/
		if (this.p.imgTextMargin != undefined) {
			this.com.find('.stm-btn-img').css('margin-bottom', this.p.imgTextMargin + 'px');
		}

		/*同一个style下的 定制样式*/
		if (this.p.appendStyle) {
			this.com.addClass('stm-btn-' + this.p.style + '-' + this.p.appendStyle);
		}
		/*是否显示图片按钮*/
		if (this.p.showBorder === false) {
			this.com.css('border', 'none');
		}
	},
	/**
	 * 更新按钮背景颜色
	 * @param  {[type]} color [description]
	 * @return {[type]}       [description]
	 */
	updateBtnBackGroundColor: function(bgColor) {
		this.com.css('background-color', bgColor);
	},
	/**
	 * 按钮点击后的可能有的特殊设置
	 * @return {[type]} [description]
	 */
	commonClickAfterHandler: function(event) {
		var p = this.p;

		var style = p.style;
		var handler = this.specialHandlerMap[style];
		handler && this[handler]();

		// 监听按钮组任意一个按钮点击事件
		if (p.groupClickHandler && p.groupId) {
			PJF.event.publish('GROUP_CLICK_' + p.groupId, this);
		}

		// 存在应用参数
		if (p.menuId != undefined) {
			PJF.event.publish('STM_MENU_CLICK', p.menuId, event, this);
		}

	},
	/**
	 * 验证码设置
	 * @return {[type]} [description]
	 */
	authCodeClickHandler: function() {
		// 禁用
		this.disable();
		var authCodeTime = this.p.authCodeTime;
		var me = this;
		var btnText = this.p.authCodeRepeatText || this.p.text;

		if (authCodeTime > 0) {
			me.updateButtonText(btnText + ' ( ' + (authCodeTime < 10 ? ('0' + authCodeTime) : authCodeTime) + ' ) ');
			me.com.css('background', '-ms-linear-gradient(top, #A8A8A8,#A8A8A8)');
			me.com.find('.stm-btn-text').css('color', '#4F4F4F');
			authCodeTime--;
		}
		// 每隔一秒更新一次按钮文字
		var interval = setInterval(function() {
			if (authCodeTime == 0) {
				// 更新为重新发送验证码
				me.updateButtonText(btnText);
				me.com.css('background', '-ms-linear-gradient(top, #a5d3f8,  #43a2fb)');
				me.com.find('.stm-btn-text').css('color', 'white');
				clearInterval(interval);
				me.enable();

				return;
			}
			me.updateButtonText(btnText + ' ( ' + (authCodeTime < 10 ? ('0' + authCodeTime) : authCodeTime) + ' ) ');
			authCodeTime--;
		}, 1000);
		this.intervalId = interval;
	},
	/**
	 * 圆形光圈按钮特殊处理处理逻辑
	 * @return {[type]} [description]
	 */
	iconCycleClickHandler: function() {
		// 默认情况下均需要添加光圈
		this.com.removeClass('stm-btn-icon-cycle-curr').addClass('stm-btn-icon-cycle-curr');
		// 可能有的按钮组
		var btns = this.btnGroupMap[this.p.groupId] || [];
		for (var i = 0, len = btns.length; i < len; i++) {
			if (btns[i].com) {
				if (btns[i] !== this) {
					btns[i].com.removeClass('stm-btn-icon-cycle-curr');
					btns[i].imgContainer.attr('src', btns[i].p.iconUrl);
				} else {
					btns[i].imgContainer.attr('src', btns[i].p.choosedUrl);
				}
			}
		}
	},
	/**
	 * 默认组按钮处理逻辑
	 * @return {[type]} [description]
	 */
	groupBtnClickHandler: function() {

		// 可能有的按钮组
		var btns = this.btnGroupMap[this.p.groupId] || [];
		for (var i = 0, len = btns.length; i < len; i++) {
			if (btns[i].com) {
				if (btns[i] !== this) {
					btns[i].com.removeClass('stm-btn-group-curr');
				} else {
					btns[i].com.removeClass('stm-btn-group-curr').addClass('stm-btn-group-curr');
				}
			}
		}
	},
	/**
	 * 分页按钮点击回调
	 * @return {[type]} [description]
	 */
	pagBtnClickHandler: function() {

	},
	/**
	 * 带switch按钮点击后处理函数
	 * @return {[type]} [description]
	 */
	iconSwitchBtnClickHandler: function() {
		// 切换显示按钮图标
		if (this.isDisabled()) {
			return;
		}
		this.checkboxImg.toggleClass('stm-btn-icon-switch-checked-fake');
	},

	/********************************************************/
	/**
	 * [ 按钮状态变更]
	 * @param  {[type]} status [状态 true 表示启用状态 false 表示禁用状态]
	 * @return {[type]}        [description]
	 */
	commonStatusChangeHandler: function(status) {
		var handlerName = this.specialStatusChangeHandlerMap[this.p.style];
		// 如果有自身特殊状态变更操作 则自己来
		if (handlerName && this[handlerName]) {
			this[handlerName](status);
			return;
		}

		// 通用操作 1. 如果有禁用图片情况下 则操作切换图片
		var img = this.com.find('img.stm-btn-img');
		if (status) {
			// 只有在有禁用状态图片时才做操作 避免不必要的图片切换
			this.p.disabledIconUrl && this.p.iconUrl && img.attr('src', this.p.iconUrl);
			// 恢复原有的文字颜色
			if (this.p.disabledTextColor) {
				// 有原来的定制颜色 就使用 没有就取消禁用颜色就好
				if (this.p.textColor) {
					this.com.find('.stm-btn-text').css('color', this.p.textColor);
				} else {
					this.com.find('.stm-btn-text').css('color', '');
				}
			} else {
				// 对于没有禁用颜色的按钮 如果有自定义颜色 则设置为原来的颜色
				if (this.p.textColor) {
					this.com.find('.stm-btn-text').css('color', this.p.textColor);
				}
			}
		} else {
			this.p.disabledIconUrl && img.attr('src', this.p.disabledIconUrl);

			// 禁用状态下 设置禁用的文字颜色
			if (this.p.disabledTextColor) {
				this.com.find('.stm-btn-text').css('color', this.p.disabledTextColor);
			} else {
				this.com.find('.stm-btn-text').css('color', '');
			}
		}
	},
	/**
	 * 通用的点击前回调函数
	 * @param  {[type]} event [description]
	 * @return {[type]}       [description]
	 */
	commonClickBeforeHandler: function(event) {
		// 存在应用参数
		if (this.p.menuId != undefined) {
			PJF.event.publish('STM_MENU_CLICK_BEFOREHANDLER', this.p.menuId, event, this);
		}
		if (this.p.beforeClickHandler)
			return this.p.beforeClickHandler();
		return true;
	},
	/**
	 * 独立出点击事件注册 	 2013/05/07
	 */
	regClickHandler: function(clickHandler) {
		// 移除绑定的点击事件 防止同一事件绑定多次
		var me = this;
		this.com.off('click');
		this.p.originHandler = clickHandler;
		// 点击的回调函数
		this.p.handler = (function(fn) {
			//notSound代表不播放点击声音,notQucik代表不是连续点击
			return function(event, noSound, notQuick, noFn) {
				if (me.isDisabled()) {
					event && event.preventDefault();
					return; // 按钮禁用 ,直接返回
				}
				if (!notQuick) {
					PJF.constants.lastClickBtn = PJF.constants.lastClickBtn || 0;
					var tmp = new Date().getTime() - PJF.constants.lastClickBtn;
					PJF.constants.lastClickBtn = new Date().getTime();
					if (tmp < PJF.constants.BUTTON_REPEAT_TIME) {
						console.log('重复快速点击,此次点击无效:' + me.p.dom + ',' + me.p.text);
						event && event.preventDefault();
						return;
					}
				}
				// 通用的点击前回调处理 如果返回false 则终止后续操作
				if (me.commonClickBeforeHandler(event) === false) {
					return;
				}
				console.log('stm button id ' + me.p.dom + ',' + me.p.text + ' clicked');
				if (!me.p.isRepeat) {
					me.disable();
				}
				//添加声音
				if (!noSound)
					PJF.communication.player.PlaySoundByUrl("devprompt/COMMON_click.wav");				
				// 如果返回false 则终止后续操作
				if (!noFn && fn && fn.call(me, event) === false) {
					return false;
				}
				me.com && me.com.trigger(PJF.stmEvent.LINKBTN_CLICK) // 不改修改阻止冒泡，改为发送另一个事件上去
				// 可能有的点击后特殊处理函数
				me.commonClickAfterHandler(event);
				event && event.stopPropagation(); // 阻止事件冒泡				
			};
		})(clickHandler);
		// 注册点击事件
		this.com.on('click', this.p.handler);
	},
	/*添加后绑定函数*/
	bindClickHandler: function(newHandler) {
		this.regClickHandler(newHandler);
	},
	/**
	 * 模拟按钮的点击事件
	 * @return {[type]} [description]
	 */
	triggerBtnHandler: function(noFn) {
		//模拟点击事件中，不播放声音，不代表连续点击
		this.com.trigger('click', [true, true, noFn]);
	},
	getClassName: function() {
		return "PJF.ui.linkButton";
	}
});
PJF.apply(PJF.ui.linkButton.prototype, {
	/***
	 *
	 * 得到当前按钮状态，可用/禁用
	 *
	 * @return boolean true表示禁用
	 */
	isDisabled: function() {
		return this.disableStatus === true;
	},
	//是否只读状态
	isReadyOnly: function() {
		return false;
	},
	//是否显示状态
	isDisplay: function() {
		// 只要不为fasle 都是true 
		return this.visibleStatus !== false;
	},
	/***
	 *
	 * 按钮禁用
	 *
	 * @return 无
	 */
	disable: function() {
		if (this.p.style != 'image') {
			this.com.removeClass('stm-btn-disabled').addClass('stm-btn-disabled');
		}
		// 标示是否为禁用状态  true为禁用 false 为启用
		this.disableStatus = true;

		if (this.checkboxImg) {
			this.checkboxImg.remove();
		}

		this.commonStatusChangeHandler(false);

	},
	readOnly: function (flag) {
		var me = this;
		var $container =  this.com;
		if(flag){
			me.overlayer = $('<div class="pjf_stmbutton_overlayer"></div>');
			me.overlayer.bind('click',function(e){
				me.overlayer.focus();
				return false;
			});
			$container.append(me.overlayer);
		}else{
			$container.find(".pjf_stmbutton_overlayer").remove();
		}
	},
	/***
	 *
	 * 按钮激活
	 *
	 * @return 无
	 */
	enable: function() {
		this.com.removeClass('stm-btn-disabled');
		// 标示是否为禁用状态  true为禁用 false 为启用
		this.disableStatus = false;

		this.commonStatusChangeHandler(true);
	},
	/***
	 *
	 * 按钮可见
	 *
	 * @param isVisible boolean 是否可见 true表示显示 false表示隐藏
	 *
	 * @return 无
	 */
	setVisible: function(isVisible) {
		if (isVisible) {
			this.com.show();
			// 标示是否可见  true 表示可见 false 表示不可见
			this.visibleStatus = true;
		} else {
			this.com.hide();
			// 标示是否可见  true 表示可见 false 表示不可见
			this.visibleStatus = false;
		}
	},
	/***
	 *
	 * 更新按钮名字
	 *
	 * @param newText 按钮新的名称
	 *
	 * @return 无
	 */
	updateButtonText: function(newText) {
		var textNode = this.com.find("p.stm-btn-text");
		if (textNode.length < 1) {
			alert("Error:未找到文本节点！");
			return;
		}
		textNode.html(newText);
		this.p.text = newText;
	},
	updateIconSwitchText: function(newText) {
		this.com.find('.icon-switch-status-desc').text(newText);
	},
	/***
	 *
	 * 获取按钮文本
	 *
	 * @return String
	 */
	getButtonText: function() {
		return this.p.text;
	},
	/***
	 *
	 * 销毁组件
	 *
	 * @return 无
	 */
	destroy: function() {
		PJF.ui.componentMgr.remove(this.id);
		this.com.remove();
		// 如果有监听按钮点击事件 那么移除掉
		this.groupClickHandlerWrapper && PJF.event.removeSubscriber('GROUP_CLICK_' + this.p.groupId, this.groupClickHandlerWrapper);
		this.groupClickHandlerWrapper = null;
		//从group中移除
		if(this.p.groupId){
			var group = this.btnGroupMap[this.p.groupId] || [];
			var index = group.indexOf(this);
			if(index != -1)
				group.splice(index,1); // 删除它
		}	
		this.com = null;
		clearInterval(this.intervalId);
	},
	/* 验证参数 */
	validateParam: function(conf) {

		if (conf.dom) {
			if (document.getElementById(conf.dom)) {
				this.dom = conf.dom;
				return true;
			} else {
				// 创建
				alert("提示：linkButton的dom属性 " + conf.dom + " 指定的容器不存在！");
				return false;
			}
		} else {
			alert("提示：linkButton的dom属性不能为空！");
			return false;
		}
	}
});
/**
 * Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * Author: famingyuan
 * Create on: 2015-05-29
 * Last Updated:
 * 说明:STM 按钮组件
 */
/***
 *
 * 创建PJF.ui.list
 *
 * @param conf 指定创建 list 时 需要的参数
 *
 * @return 创建的PJF.ui.list实例
 */
PJF.ui.list = PJF.extend(PJF.ui.component, {
	dom: null,
	// 初始方法
	init: function(conf) {

		conf = this.params = this.conf = PJF.apply({
			data: [],
			url: null,

			queryParams: conf.queryParam || conf.queryParams, // 请求参数

			timeOut: PJF.constants.AJAX_TIMEOUT,
			defaultSelectedItems: [], // 默认选中的
			currentSelectedItems: [], // 缓存选中的item index
			singleSelect: true, // 默认是单选

			height: null,
			rowTpl: null, // 行 html模板
			onClick: null, // 行点击回调函数
			dataFilter: null, // 数据加载前的回调函数
			rowFormatter: null, // 行格式化函数 返回html 优先级高于rowTpl
			onLoadSuccess: null // 行数据加载完毕
		}, conf);

		// 分页信息
		this.paginationOptions = {
			pageSize: conf.pageSize || 5, // 每页显示多少条

			totalPath: conf.totalPath || 'total',
			rowsPath: conf.rowsPath || "rows",

			// 每页大小字段名称
			pageSizeParamName: conf.pageSizeParamName || 'REC_IN_PAGE',
			// 页码字段名称
			pageNumberParamName: conf.pageNumberParamName || 'PAGE_JUMP',

			// 分页参数存放路径 默认为"_pagination" 如更改为. 则存放在根层
			paginationParamsLevelName: conf.paginationParamsLevelName || '_pagination',

			// 是否本地分页 --- 本地分页则一次性传递所有数据 如果配置了url 那么就.....
			isLocalPagination: conf.isLocalPagination && !conf.url,

			// 单页模式 计数均不包含 startIndex
			singlePageMode: conf.singlePageMode,

			// 页码变更
			pageChangeHandler: conf.pageChangeHandler,

			currentPage: conf.currentPage || 0, // 当前页码
			totalPage: conf.currentPage ? conf.currentPage + 1 : 1, // 总共多少页
			total: 0 // 总共多少条记录
		};

		// 是否初始化过
		this.isInit = false;
		this.conf.currentSelectedItems = $.extend([], this.conf.defaultSelectedItems);
		this.createListBasicDom();

		// 如果是本地分页
		if (this.paginationOptions.isLocalPagination) {
			this.paginationOptions.currentPage = 1;
			var data = this._dataFilter(this.conf.data);
			// 加载可能有的数据或者发送请求获取数据
			this._loadData(data, {
				direction: true
			});
		} else {
			// 加载可能有的数据或者发送请求获取数据
			this._loadData(this.conf.data, {
				direction: true
			});
		}

		// 绑定事件
		this.regEvent();

	},
	/**
	 * 构建基础结构
	 * @return {[type]} [description]
	 */
	createListBasicDom: function() {
		this.com.addClass('stm-list-container');
		var dom = [
			'<!-- 外层遮罩 用于遮挡滚动条 -->',
			'<div class="stm-list-outer-mask">',
			'<!-- 滚动条将被遮挡 内部存放具体的列表内容 -->',
			'<div class="stm-list-inner-mask"></div>',
			'<!-- 加载提示 -->',
			'<div class="stm-list-loading-container"><span class="stm-list-loading">加载中...</span></div>',
			'</div>'];
		this.com.append(dom.join(''));


		if (this.conf.height) {
            //2015年10月12日08:53:00 zws modify px => rem
			this.com.height(this.conf.height/PJF.constants.DEFAULT_FONTSIZE + 'rem');
		}

		if (this.conf.width) {
            //2015年10月12日08:53:00 zws modify px => rem
			this.com.width(this.conf.width/PJF.constants.DEFAULT_FONTSIZE + 'rem');
		}

		var width = parseInt(this.com.width(), 10);
		var height = parseInt(this.com.height(), 10);

		// 小一个滚动条宽度
		this.outerMask = $("div.stm-list-outer-mask", this.com);
		// 更大点 隐藏的滚动条
		this.listContainer = $("div.stm-list-inner-mask", this.com);

		// 遮罩
		this.loading = $("div.stm-list-loading-container", this.com);

		this.outerMask.css({
			width: (width - 17) + 'px',
			height: height + 'px'
		});

        //zws add 2015年12月28日11:26:11 适配单点触摸设备（不支持滑动）显示滚动条
        if( PJF.util.deviceType.icm ){
            this.listContainer.css({
                width: (width - 17 ) + 'px',
                height: height + 'px'
            });
        }else{
            this.listContainer.css({
                width: (width) + 'px',
                height: height + 'px',
                paddingRight:'17px'
            });
        }


		this.isInit = true;
	},
	/**
	 * 设置默认选中
	 * @return {[type]} [description]
	 */
	setDefaultSelected: function(currentSelectedItems) {

		var paginationOptions = this.paginationOptions;
		var startIndex = 0;
		// 如果是本地分页
		if (paginationOptions.isLocalPagination) {
			startIndex += (paginationOptions.currentPage - 1) * paginationOptions.pageSize;
		}
		// 单页模式
		if (paginationOptions.singlePageMode) {
			startIndex = 0;
		}

		currentSelectedItems = currentSelectedItems || [];
		var checkedMap = {};
		for (var i = 0, len = currentSelectedItems.length; i < len; i++) {
			checkedMap['item_' + currentSelectedItems[i]] = true;
		}

		var me = this;
		$('div.list-item', this.com).each(function() {
			var target = $(this);
			var index = target.attr('data-index');
			index = parseInt(index, 10) + startIndex;
			if (checkedMap['item_' + index]) {
				target.addClass('list-item-curr');
				me.currentListItem = this;
			}
		});

	},
	/**
	 * 加载数据
	 * @param  {[type]} data [description]
	 * @param  {[type]} opts [flag系统流程 or 用户流程]
	 * @return {[type]}      [description]
	 */
	_loadData: function(data, opts) {
		// 如果配置了url地址 
		if (this.conf.url) {
			this.conf.data = [];
			this._handleListLoading(opts);
		} else {
			// 重置
			this.listContainer.html('');
			// 根据提供的数据 渲染
			this.renderRows(data);
			this.updatePagination();
			this.conf.onLoadSuccess && this.conf.onLoadSuccess.call(this);
		}
	},
	/**
	 * 对外暴露 执行本地数据加载
	 * @param  {[type]} data [description]
	 * @param  {[type]} opts [description]
	 * @return {[type]}      [description]
	 */
	loadData: function(data, opts) {

		// 重置变量
		// 1. 内容清空
		this.listContainer.empty();
		// 2. 变量重置
		this.conf.url = "";
		var paginationOptions = this.paginationOptions;
		paginationOptions.currentPage = 1; // 当前页码
		paginationOptions.totalPage = 1; // 总共多少页
		paginationOptions.total = 0; // 总共多少条记录

		this.conf.data = data;
		this.conf.currentSelectedItems = $.extend([], this.conf.defaultSelectedItems);
		// 3. 执行数据加载
		// 加载可能有的数据或者发送请求获取数据
		this._loadData(this._dataFilter(data), {
			direction: true
		});
		// 初始化分页
		this.updatePagination();
	},
	/**
	 * 渲染行数据
	 * @param  {[type]}  data    [description]
	 * @return {[type]}          [description]
	 */
	renderRows: function(data, isAppend) {
		var conf = this.conf;
		// 可能有的数据过滤
		if (conf.dataFilter) {
			// 必须返回数组
			data = conf.dataFilter(data);
		}
		// data = data || [];

		var dom = this.combinateRowDom(data, isAppend);
		if (isAppend) {
			this.listContainer.append(dom);
		} else {
			this.listContainer.html(dom);
		}

		this.currentListItem = null;

		// 交易数据 需要追加
		// if (conf.url) {
		// 	conf.data = conf.data || [];
		// 	conf.data = conf.data.concat(data);
		// } else {
		// 	conf.data = data;
		// }
		// 设置可能有的默认选中
		this.setDefaultSelected(conf.currentSelectedItems);
	},
	/**
	 * 根据提供的数据 组装DOM
	 * @param  {[type]} data [description]
	 * @param  {[type]} isAppend [是否为追加数据]
	 * @return {[type]}      [description]
	 */
	combinateRowDom: function(data, isAppend) {
		if(!data) return ''; //把中间置空
		var conf = this.conf;
		// 行所有的html代码
		var rowDom = [];
		var rowFormatter = conf.rowFormatter;
		var rowTpl = conf.rowTpl;
		// 尝试按照页面标签的id 获取模板内容
		if (/^[a-zA-Z0-9_]+$/.test(rowTpl) && $("#" + rowTpl).length) {
			rowTpl = document.getElementById(rowTpl).innerHTML || document.getElementById(rowTpl).text;
		}
		var start = (isAppend === true) ? this.conf.data.length : 0;
		for (var i = 0, len = data.length; i < len; i++) {

			rowDom.push('<div class="list-item" data-index="' + (i + start) + '">');
			// 行格式化
			if (rowFormatter) {
				rowDom.push(rowFormatter(i, data[i], data));
			} else if (rowTpl) {
				// 使用模板
				rowDom.push(PJF.html.template(rowTpl, data[i]));
			} else {
				rowDom.push(' ');
			}
			rowDom.push('</div>');
		}

		return rowDom.join('');
	},
	/**
	 * 注册事件
	 * @return {[type]} [description]
	 */
	regEvent: function() {
		var me = this;
		// 注册点击事件
		this.listContainer.on('click', 'div.list-item', function() {
			var target = $(this);
			// 点击回调
			var index = target.attr('data-index');
			index = parseInt(index,10);
			var paginationOptions = me.paginationOptions;
			// 如果是本地分页 需要加一个startIndex
			var startIndex = 0;
			if (paginationOptions.isLocalPagination) {
				startIndex = (paginationOptions.currentPage - 1) * paginationOptions.pageSize;
			}
			index += startIndex;

			// 如果是多选状态
			if (me.conf.singleSelect === false) {
				target.toggleClass('list-item-curr');

                //currentSelectedItems 利用该参数，作缓存 zws 2015年8月24日16:51:58
                if ( paginationOptions.isLocalPagination ) {
                    if( target.hasClass('list-item-curr') ){    //  放入缓存
                        var _isExist = false;
                        for( var i = 0 ,len = me.conf.currentSelectedItems.length; i < len ;i++ ){
                            if( me.conf.currentSelectedItems[i] === index ){
                                _isExist = true;
                            }
                        };
                        if( !_isExist ){ me.conf.currentSelectedItems.push( index )};
                        me.conf.currentSelectedItems.sort();
                    }else{
                        for( var i = 0 ,len = me.conf.currentSelectedItems.length; i < len ;i++ ){
                            if( me.conf.currentSelectedItems[i] === index ){
                                me.conf.currentSelectedItems.splice(i,1);
                            }
                        };
                    };
                };

				me.conf.onClick && me.conf.onClick(index, me.conf.data[index], target.hasClass('list-item-curr'));
				return;
			}

			// 当前已选中 则取消选中
			if (me.currentListItem === this) {
				target.removeClass('list-item-curr');
                if( paginationOptions.isLocalPagination ){
                    me.conf.currentSelectedItems = [];
                };
				me.currentListItem = null;
				me.conf.onClick && me.conf.onClick(index, me.conf.data[index], false);
			} else {
				$(me.currentListItem).removeClass('list-item-curr');
				target.addClass('list-item-curr');
                if( paginationOptions.isLocalPagination ) {
                    me.conf.currentSelectedItems = [index];
                };
				me.currentListItem = this;
				me.conf.onClick && me.conf.onClick(index, me.conf.data[index], true);
			}
		});

		return;
		// 滚动事件绑定
		this.listContainer.bind("scroll", function() {
			if (me.isLoading === true || me.isTouched !== true) {
				console.log('当前正在加载中...跳过...(isLoading = ' + me.isLoading + ',isTouched=' + me.isTouched + ')');
				return;
			}
			me._handleListLoading(this);
		});

		// 直接测试
		this.listContainer.bind('mousedown', function() {
			me.isTouched = true;
			console.log('-----mousedown----');
			me._handleListLoading(this);
		});
		this.listContainer.bind('mouseup', function() {
			me.isTouched = false;
		});

		// 触摸屏
		this.listContainer[0].addEventListener('touchstart', function() {
			me.isTouched = true;
			me._handleListLoading(this);
		}, false);
		this.listContainer[0].addEventListener('touchend', function() {
			me.isTouched = false;
		}, false);

	},
	/**
	 * 执行加载操作
	 * @return {[type]} [description]
	 */
	_handleListLoading: function(opts) {
		var conf = this.conf;
		// 没有url地址的话 直接返回		
		if (!conf.url) {
			var paginationOptions = this.paginationOptions;
			// 没有url 且配置了url地址
			if (paginationOptions.isLocalPagination) {
				var currentPage = paginationOptions.currentPage;
				var totalPage = paginationOptions.totalPage;
				// direction ==true 下一页  false 上一页
				currentPage += (opts.direction ? 1 : -1);

				if (currentPage < 1 || currentPage > totalPage) {
					console.log('翻页结束：currentPage = ' + currentPage + ' and totalPage = ' + totalPage + ' direction = ' + opts.direction);
					return;
				}
				this.paginationOptions.currentPage += (opts.direction ? 1 : -1);
				this._loadData(this._dataFilter(this.conf.data));
			}
			return;
		}
		var me = this;



		// // 整个高度  ---------------------  原始粗糙滚动翻页
		// var scrollHeight = dom.scrollHeight;
		// // 可见高度
		// var clientHeight = dom.clientHeight;
		// // 当前滚动的高度
		// var scrollTop = dom.scrollTop;

		// // 整个高度 >= 可见高度+当前滚动的高度 相等时滚动到底部
		// console.log('scrollHeight = ' + scrollHeight);
		// console.log('clientHeight = ' + clientHeight);
		// console.log('scrollTop = ' + scrollTop);

		// // 滚动到底部  处理发送交易
		// if (scrollHeight !== clientHeight + scrollTop) {
		// 	return;
		// }

		// 准备最终发送的请求参数
		var reqParams = this.prepareParams(opts.direction);

		// 取消翻页操作
		if (reqParams === false) {
			return;
		}
		// 显示加载中
		this._showLoading();
		// 暂时先使用$.ajax
		PJF.communication.cpsJsonReq($.extend({}, conf.queryParams, {
			//请求地址
			url: conf.url,
			//默认为json格式
			dataType: 'json',
			//传递的数据
			data: reqParams,
			//同步模式：默认为异步
			async: true,
			//默认为post
			type: 'post',
			//默认为10秒
			timeout: conf.timeOut,
			success: function(data, ts, jq) {
				// 一切交由用户做
				try {
					me.conf.data = rows = me._dataFilter(data);		
					if(rows && rows.length > 0)	{		
						// 更新分页
						me.paginationOptions.currentPage += (opts.direction ? 1 : -1);
					}

					me.renderRows(rows, false);

					me.updatePagination();
				} catch (e) {
					console.log('error: ' + e.message);
				}
				me._hideLoading();
				me.conf.onLoadSuccess && me.conf.onLoadSuccess.call(me);
			},
			//通信失败回调函数
			failure: function(data) {
				new PJF.ui.errorMessageBox({
					data:data
				});
				me._hideLoading();
			}
		}));

	},
	_showLoading: function() {
		this.isLoading = true;
		this.loading.css('display', 'block');
	},
	_hideLoading: function() {
		this.isLoading = false;
		this.loading.css('display', 'none');
	},
	/**
	 * 将数据格式化返回为标准的数组
	 * @param  {[type]} data [description]
	 * @return {[type]}      [description]
	 */
	_dataFilter: function(data) {
		var obj = {};

		// 更新分页信息中总记录等信息
		var paginationOptions = this.paginationOptions;

		// 如果没有传数据
		if (!data) {
			obj = {
				rows: [],
				total: 0
			};
		} else {

			if (data instanceof Array) {
				obj = {
					rows: data,
					total: data.length
				};
			} else {
				this.___data = data;
				try {
					obj['rows'] = eval('this.___data.' + paginationOptions.rowsPath);
				} catch (e) {
					console.warn('当前数据 无法根据rowsPath(' + paginationOptions.rowsPath + ')取到行数据');
					obj['rows'] = [];
				}

				if(obj['rows'] && obj['rows'].length === undefined){
					obj['rows'] = [obj['rows']];
				}

				try {
					obj['total'] = eval('this.___data.' + paginationOptions.totalPath);
				} catch (e) {
					console.warn('当前数据 无法根据rowsPath(' + paginationOptions.rowsPath + ')取到总记录数');
					obj['total'] = 0;
				}

			}

		}


		try {
			paginationOptions.total = parseInt(obj.total, 10);
		} catch (e) {
			paginationOptions.total = 0;
		}

		paginationOptions.totalPage = Math.ceil(paginationOptions.total / paginationOptions.pageSize);

		// 本地分页
		if (paginationOptions.isLocalPagination) {
			var startIndex = (paginationOptions.currentPage - 1) * paginationOptions.pageSize;
			return obj.rows.slice(startIndex, startIndex + paginationOptions.pageSize);
		}
		return obj.rows;

	},
	/**
	 * 请求前准备参数
	 * @return {[type]} [description]
	 */
	prepareParams: function(direction) {
		var conf = this.conf;
		// 分页参数
		var paginationOptions = this.paginationOptions;
		// 用户请求参数
		var params = conf.queryParams || {};

		var reqParams = {};

		PJF.apply(reqParams, params);
		// 添加jsonData字段
		reqParams.jsonData = reqParams.jsonData || {};

		if(typeof(reqParams.jsonData) == 'string'){
			reqParams.jsonData = eval('(' + reqParams.jsonData + ')');
		}

		// 分页信息
		var paginationInfo = {};

		var currentPage = paginationOptions.currentPage;
		var totalPage = paginationOptions.totalPage;
		// direction ==true 下一页  false 上一页
		currentPage += (direction ? 1 : -1);

		if (currentPage < 1 || currentPage > totalPage) {
			console.log('翻页结束：currentPage = ' + currentPage + ' and totalPage = ' + totalPage + ' direction = ' + direction);
			return false;
		}

		// 每页多少条
		paginationInfo[paginationOptions.pageSizeParamName] = paginationOptions.pageSize;
		// 请求第几页
		paginationInfo[paginationOptions.pageNumberParamName] = currentPage;


		if (paginationOptions.paginationParamsLevelName == '.') {
			PJF.apply(reqParams, paginationInfo);
		} else {
			reqParams.jsonData[paginationOptions.paginationParamsLevelName] = paginationInfo;
		}
		reqParams.jsonData = PJF.util.json2str(reqParams.jsonData);
		conf.queryParams = reqParams;
		console.log('will req = ' + currentPage);

		return reqParams;
	},
	/**
	 * [ 为表格添加分页栏]
	 * @param  {[type]} prevBtn  [description]
	 * @param  {[type]} nextBtn  [description]
	 * @param  {[type]} paginationDesc [description]
	 * @return {[type]}          [description]
	 */
	addPaginationBar: function(prevBtn, nextBtn, paginationDesc) {
		var paginationOptions = this.paginationOptions;
		var me = this;
		/*重新设置按钮的回调事件*/
		if (prevBtn && paginationOptions.prevBtn === prevBtn) {
			alert('重复绑定上一页按钮');
			return;
		}
		if (nextBtn && paginationOptions.nextBtn === nextBtn) {
			alert('重复绑定下一页按钮');
			return;
		}
		if (prevBtn) {
			prevBtn.bindClickHandler((function prevBtnHandler(fn) {
				return function() {
					// 默认调用它自己的
					fn && fn.call(prevBtn);
					// 触发表格的上一页
					me._handleListLoading({
						direction: false
					});
				};
			})(prevBtn.p.originHandler));
			paginationOptions.prevBtn = prevBtn;
		}
		if (nextBtn) {
			nextBtn.bindClickHandler((function nextBtnHandler(fn) {
				return function() {
					// 默认调用它自己的
					fn && fn.call(nextBtn);
					// 触发表格的下一页
					me._handleListLoading({
						direction: true
					});
				};
			})(nextBtn.p.originHandler));
			paginationOptions.nextBtn = nextBtn;
		}

		if (paginationDesc) {
			paginationOptions.paginationDesc = $("#" + paginationDesc);
		}

		// 更新下
		this.updatePagination();
	},
	/**
	 * 更新分页信息
	 * @return {[type]} [description]
	 */
	updatePagination: function() {
		var paginationOptions = this.paginationOptions;

		// 没有url且非本地分页状态 则禁用掉上下页并只显示一页信息
		if (!paginationOptions.isLocalPagination && !this.conf.url) {
			paginationOptions.prevBtn && paginationOptions.prevBtn.disable();
			paginationOptions.nextBtn && paginationOptions.nextBtn.disable();
			paginationOptions.paginationDesc && paginationOptions.paginationDesc.html(1 + '/' + 1);
			return;
		}

		var currentPage = paginationOptions.currentPage || 1;
		var totalPage = paginationOptions.totalPage || 1;

		if (currentPage > 1) {
			paginationOptions.prevBtn && paginationOptions.prevBtn.enable();
		} else {
			paginationOptions.prevBtn && paginationOptions.prevBtn.disable();
		}

		if (currentPage < totalPage) {
			paginationOptions.nextBtn && paginationOptions.nextBtn.enable();
		} else {
			paginationOptions.nextBtn && paginationOptions.nextBtn.disable();
		}

		if (paginationOptions.paginationDesc) {
			paginationOptions.paginationDesc.html(currentPage + '/' + totalPage);
		}

		// 页码变更回调函数
		this.paginationOptions.pageChangeHandler && this.paginationOptions.pageChangeHandler.call(this, currentPage, totalPage);

	},
	/**
	 * 下一页
	 * @return {[type]} [description]
	 */
	nextPage: function() {
		// 触发表格的下一页
		this._handleListLoading({
			direction: true
		});
	},
	/**
	 * 前一页
	 * @return {[type]} [description]
	 */
	prevPage: function() {
		// 触发表格的上一页
		this._handleListLoading({
			direction: false
		});
	},
	/**
	 * 更新请求参数
	 * @param  {[type]} param [description]
	 * @return {[type]}       [description]
	 */
	updateQueryParam: function(param) {
		this.conf.queryParams = $.extend({}, this.conf.queryParams, param);
	},
	/**
	 * 刷新list选中值
	 * @return {[type]} [description]
	 */
	refreshSelectRowIndex: function(rowIndexArray) {
		var me = this,
			data = me.getSelectedItem(true),
			newData = [];

		if (!data) {
			me.conf.currentSelectedItems = [];
			return false;
		}
		me.conf.currentSelectedItems = data;
		for (var i = 0, len = data.length; i < len; i++) {
			var cnt = 0,
				flag = false;

			for (var j = 0; j < rowIndexArray.length; j++) {
				if (data[i] > rowIndexArray[j]) {
					cnt++;
				} else if (data[i] == rowIndexArray[j]) {
					flag = true;
					break;
				}
			}
			!flag && (data[i] - cnt >= 0) && newData.push(data[i] - cnt);
		}
		me.conf.currentSelectedItems = newData;
	},
	/**
	 * 批量删除数据
	 * @param  {[type]} rowIndexArray [description]
	 * @return {[type]}          [description]
	 */
	deleteRows: function(rowIndexArray) {
		if (!rowIndexArray) {
			alert("Error: deleteRows 方法参数不能为空！");
			return false;
		}

		// 是否有删除一行数据 默认为false
		var hasDeleteOne = false;

		// 对要删除的索引进行排序 以便对数组索引进行操作
		rowIndexArray.sort();

		var paginationOptions = this.paginationOptions;
		var startIndex = 0;
		// 如果是本地分页
		if (paginationOptions.isLocalPagination) {
			startIndex += (paginationOptions.currentPage - 1) * paginationOptions.pageSize;
		}
		// 单页模式
		if (paginationOptions.singlePageMode) {
			startIndex = 0;
		}
		var checkedMap = {};
		var me = this;
		for (var i = 0, len = rowIndexArray.length; i < len; i++) {
			checkedMap['item_' + rowIndexArray[i]] = true;
			if (!me.conf.url) {
				me.conf.data.splice(rowIndexArray[i] - i,1);
			}
			// 标示是否有删除一行数据
			hasDeleteOne = true;
		}
		// 没有没有做任何删除操作 则直接返回 不用刷新索引等
		if (hasDeleteOne === false) {
			return false;
		}
		if (!me.conf.url) {
			me.refreshSelectRowIndex(rowIndexArray);
			me._loadData(me._dataFilter(me.conf.data));
		} else {
			$('div.list-item', me.com).each(function() {
				var target = $(this);
				var index = target.attr('data-index');
				index = parseInt(index, 10) + startIndex;
				if (checkedMap['item_' + index] === true) {
					target.remove();
				}
			});
		}
		return true;
	},
	/**
	 * 获取当前选中的数据 有选中的 返回数组或者对象 没有选中的，则统一返回null
	 * @return {[type]} [description]
	 */
	getSelectedItem: function(isIndex) {

		var startIndex = 0;
		var paginationOptions = this.paginationOptions;
		// 如果是本地分页
		if (paginationOptions.isLocalPagination) {
			startIndex += (paginationOptions.currentPage - 1) * paginationOptions.pageSize;
		};

		// 如果是多选
		if (this.conf.singleSelect === false) {
			var data = [];
			var me = this;
            if( paginationOptions.isLocalPagination ){
                //遍历缓存，如果是勾选则抛出
                for(var i in me.conf.currentSelectedItems ){
                	var index = me.conf.currentSelectedItems[i];
                    data.push(isIndex ? index : me.conf.data[index]);
                };
            }else{
                $('div.list-item-curr', this.com).each(function() {  //遍历节点，把有被选中的全部放入缓存
                	var index = parseInt($(this).attr('data-index'), 10) + startIndex;
                    data.push(isIndex ? index : me.conf.data[index]);
                });
            };
			return data.length ? data : null;
		}

		// 当前选中的item
		if (this.currentListItem) {
			var index = parseInt($(this.currentListItem).attr('data-index'), 10) + startIndex;
			return (isIndex ? [index] : this.conf.data[index]);
		}
		return null;
	},
	/**
	 * 选中行
	 * @param  {[type]} rowIndex [description]
	 * @return {[type]}          [description]
	 */
	/**
	 * [ 选中行]
	 * @param  {[type]} rowIndex [description]
	 * @param  {[type]} flag     [默认为false]
	 * @return {[type]}          [description]
	 */
	_selectRow: function(rowIndex, flag) {
		flag = !! flag;
		if (!(rowIndex instanceof Array)) {
			rowIndex = [rowIndex];
		}

		var conf = this.conf;
		if (conf.singleSelect !== false && flag && rowIndex.length > 1) {
			alert('Error: 单选状态下 只能选中一行！');
			return;
		}

		var paginationOptions = this.paginationOptions;
		var startIndex = 0;
		// 如果是本地分页
		if (paginationOptions.isLocalPagination) {
			startIndex += (paginationOptions.currentPage - 1) * paginationOptions.pageSize;
		}
		// 单页模式
		if (paginationOptions.singlePageMode) {
			startIndex = 0;
		}

		var checkedMap = {};
		for (var i = 0, len = rowIndex.length; i < len; i++) {
			checkedMap['item_' + rowIndex[i]] = flag;
		}
		var me = this;
		$('div.list-item', this.com).each(function() {
			var target = $(this);
			var index = target.attr('data-index');
			index = parseInt(index, 10) + startIndex;
			// 多选状态
			if (conf.singleSelect === false) {
				// 选中
				if (checkedMap['item_' + index] === true) {
					target.removeClass('list-item-curr').addClass('list-item-curr');
				} else if (checkedMap['item_' + index] === false) {
					target.removeClass('list-item-curr');
				}
			} else { // 单选状态下
				// 选中
				if (checkedMap['item_' + index] === true) {
					target.removeClass('list-item-curr').addClass('list-item-curr');
					me.currentListItem = this;
				} else if (checkedMap['item_' + index] === false) {
					// 取消选中
					target.removeClass('list-item-curr');
					// 如果当前选中的是this 那么设置为currentListItem为null
					if (me.currentListItem === this) {
						me.currentListItem = null;
					}
				} else {
					// 如果是选中模式
					if (flag === true) {
						target.removeClass('list-item-curr');
					}
				}
			}
		});

	},
	/**
	 * 选中某一行或者某些行
	 * @param  {[type]} rowIndex [description]
	 * @param  {[type]} callback [description]
	 * @return {[type]}          [description]
	 */
	checkRow: function(rowIndex,callback) {
		this._selectRow(rowIndex, true);
		if(callback)
			callback(rowIndex);
	},
	/**
	 * 取消选中某行或某些行
	 * @param  {[type]} rowIndex [description]
	 * @return {[type]}         [description]
	 */
	unCheckRow: function(rowIndex) {
		this._selectRow(rowIndex, false);
	},
	getClassName: function() {
		return "PJF.ui.list";
	},

	setRequestOptions:function(conf){
		// 暂时不能跳转到指定页
		this.paginationOptions.currentPage = 0;
		this.paginationOptions.totalPage = 1;
		this.paginationOptions.total = 0;
		$.extend(true, this.conf, conf);
		$.extend(true, this.paginationOptions, conf);		
		this._loadData(null, {direction:true});
	}
});
PJF.apply(PJF.ui.list.prototype, {
	/***
	 *
	 * 销毁组件
	 *
	 * @return 无
	 */
	destroy: function() {
        PJF.ui.componentMgr.remove(this.id);
        this.com.remove();
        this.com = null;
        this.id = null;
	},
	/* 验证参数 */
	validateParam: function(conf) {

		// 默认选中条目
		var currentSelectedItems = conf.currentSelectedItems || [];
		var len = currentSelectedItems.length;
		if (conf.singleSelect !== false && len > 1) {
			alert('Error: 单选状态下 默认选中不能大于1. currentSelectedItems.length = ' + len);
			return false;
		}

		if (conf.dom) {
			return true;
		} else {
			alert("提示：list 的dom属性不能为空！");
			return false;
		}
	}
});
PJF.ui.simpleTable = PJF.extend(PJF.ui.component, {
    init:function( conf ){
        this.options = {
            width:600,
            height:400
        };
        $.extend( this.options , conf );
        this._widthCalculate();
        this.createDom();
        this.adjustCss();
        this.bindEvent();
    },

    createDom:function(){
        this._createFrame();
        this._getDOMRefer();
        this._createHead();//填表头内容
        this._createRows();//填表身内容
    },
    _createFrame:function(){
        var htmlFrame = "<div  class='pjf_stmTable_head'>"+
            "<table class='f'  border=0 >"+
            "<thead class='bh'>"+
            "</thead>"+
            "</table>"+
            "</div>"+
            "<div class='pjf_stmTable_body'>"+
            "<table class='f'>"+
            "<tbody>"+
            "</tbody>"+
            "</table>"+
            " </div>";
        this.com.append( htmlFrame );
    },
    _widthCalculate:function(){
        //0，获取可见宽度
        var opts = this.options;
        var cols = opts.column;
        var dCol = cols[ cols.length - 1 ];
        var pRate = parseInt( $('html').css('font-Size') ) / PJF.constants.DEFAULT_FONTSIZE;

        //累积总宽度
        var wTol = 0;
        $.each(dCol,function(a,b){
            if( isNaN(Number(b.width))){
                var title = b.title;
                var len = title.length;
                b.width = len * 24;
            }
            wTol += Number(b.width)
        })

        var num = ( dCol.length - 1 );
        var buf = 17 + num + 2;

        if( wTol < ( opts.width - buf / pRate ) ){
            var wDif = ( opts.width - buf / pRate ) - wTol;
            var aDif = wDif / dCol.length;
            $.each(dCol,function(a,b){
                b.width += aDif ;
            })
        }
    },
    _getDOMRefer:function(){

        this.head = this.com.find(".pjf_stmTable_head");
        this.body = this.com.find(".pjf_stmTable_body");
        this.headContent = this.head.find("thead");
        this.bodyContent = this.body.find("tbody");

    },
    _createHead:function(){
        var me,
            opts,
            cols,
            html;

        me = this;
        opts = this.options;
        cols = opts.column;
        html = [];

        $.each(cols,function(outIndex,colArr){
            var Len  = colArr.length;
            var lastA = ( outIndex == ( cols.length - 1 ) );
            var fistA = ( outIndex == 0 );
            html.push("<tr>");
            $.each(colArr,function(inIndex,colObj){

                var cSpan = colObj.colspan;
                var title = colObj.title;
                var field = colObj.field;
                var wCol = colObj.width;
                var last = ( inIndex == ( Len - 1 ) ) ;

                var clas = "bt br";
                var clasE = "bb";
                if( fistA ){
                    clas = clas.replace("bt","");
                }
                if( last ){
                    clas = clas.replace("br","");
                }
                if( lastA ){
                    clasE = clasE.replace("bb","");
                }

                var tHtml = "<th " +
                    "field='" + field  + "' " +
                    "colspan='" + cSpan + "' class='" + clas + "'>" +
                    "<div style='width:" + ( lastA ? ( wCol / PJF.constants.DEFAULT_FONTSIZE) : "" ) + "rem'>" +
                    title +
                    "</div>" +
                    "</th>" ;
                if( last ){
                    tHtml += "<th class='empty " + clasE + "' style='border-left: none'>" +
                        "<div style='width:17px'></div>" +
                        "</th>";
                }
                html.push( tHtml );
            });
            html.push("</tr>");
        });
        this.headContent.append(html.join())
    },
    _createRows:function(){
        var opts,
            data,   //  传入数据
            html,   //  html片段
            cols;   //  基础col数组

        opts = this.options;

        if($.isPlainObject(opts.data)){
            opts.data = [].concat( opts.data)
        }else if( typeof opts.data == "undefined"){
            opts.data = [];
        }

        html = [];
        data = opts.data;
        cols = opts.column[ opts.column.length - 1 ];

        $.each(data,function(rowIndex,rowObj){
            html.push("<tr rowIndex='" + rowIndex + "'>");
            $.each(cols,function( colIndex , colObj ){
                var last = ( colIndex == ( cols.length - 1 ) );
                var value = rowObj[ colObj[ 'field' ] ];
                var align = colObj[ 'align' ] || "center" ;

                var reglTd = last ? "bb" : "br bb" ;
                var lastTd = "bb";
                var wCol = colObj.width;
                var rowHtml = "<td class='" + reglTd + "'>" +
                    "<div style='padding:0 4px;" +
                    "width:" + ( wCol / PJF.constants.DEFAULT_FONTSIZE) + "rem' " +
                    "align='" + align + "'>" +
                    value +
                    "</div>" +
                    "</td>";
                if( last ){
                    rowHtml += "<th class='empty " + lastTd + "'>" +
                        "<div style='width:17px'></div>" +
                        "</th>";
                }
                html.push( rowHtml );
            });
            html.push("</tr>");
        });
        this.bodyContent.append(html.join())
    },
    _clearTable:function(){
        this.options.data = [];//清理数据
        this.bodyContent.empty();//清理DOM
    },
    adjustCss:function(){
        var me,
            opts,
            fSize,
            wHead,
            pRate,
            wBody;
        me = this;
        opts = this.options;
        fSize = parseInt( $('html').css('font-Size') );
        pRate = fSize / PJF.constants.DEFAULT_FONTSIZE;
        wHead = this.head.height();
        wBody = opts.height * pRate - wHead;

        this.com.css({
            width :opts.width / PJF.constants.DEFAULT_FONTSIZE + 'rem' ,
            height:opts.height / PJF.constants.DEFAULT_FONTSIZE + 'rem'
        });

        this.body.css({
            height:wBody / fSize + 'rem'
        });

        if( PJF.util.deviceType.icm ){
            this.body.addClass("pjf_stmTable_showScroll");
            this.body.find(".empty>div").css({width:'0px'});
        }
    },
    bindEvent:function(){
        var opts;
        var me;
        me = this;
        opts = this.options;
        this.body.off("click").on("click","[rowIndex]",function(){
            var rowIndex = $(this).attr("rowIndex");
            if($.isFunction(opts.onClick)){
                opts.onClick.call(rowIndex,opts.data[rowIndex]);
            }
        })

        //设置滚动同步；
        this.body.off("scroll").on("scroll",function(){
            var scrollLeft = $(this).scrollLeft();
            var scrollWidth = this.scrollWidth;
            var bodyWidth = opts.width;

            if( ( scrollWidth + 16 ) > bodyWidth ){
//                    me.bodyContent.find(".empty").hide();
            }

            me.head.scrollLeft(scrollLeft);
        })
    },
    loadData:function( newData ){
        var opts;
        opts = this.options;

        this._clearTable();
        if($.isPlainObject(newData)){
            opts.data = [].concat(newData)
        }else if($.isArray(newData)){
            opts.data = newData;
        }else{
            alert("传入参数类型必须为数组或对象");
        }

        this._createRows();

        if( PJF.util.deviceType.icm ){
            this.body.find(".empty>div").css({width:'0px'});
        }
    }
})
PJF.apply(PJF.ui.simpleTable.prototype,{
    getClassName:function(){
        return "PJF.ui.simpleTable";
    },
    destroy:function(){
        this.com.remove();
        this.com = null;
        PJF.ui.componentMgr.remove(this.id);
    }
})
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * Author: bianhangying
 * Create on: 2015-05-29
 * Last Updated:
 * 说明:幻灯片滑块组件
 *
 * 待改进：
 */
PJF.ui.slides = PJF.extend(PJF.ui.component, {
	init: function(conf) {
		//设置默认值
		this.options = {
			data: [], 	//需要展示的数据
			height: 300, //整个组件高度，默认300px
			slideWidth: 200, //每一个块的宽度，默认2rem
			slideHeight: 200, 	//每一个块的高度，默认2rem
			slideMarginRight: 12,	//每一个块的右边距，默认0.12rem
			slideBorderWidth: 2, //每一个块的border宽度，默认2px
			type:'arrow',	//类型1.arrow(箭头指引型)2.circle(圆点指引型)，默认为'arrow'
			templates: this.templates
		};
		$.extend(this.options, conf);
		//转为rem
		this.options.slideWidth  = this.options.slideWidth / PJF.constants.DEFAULT_FONTSIZE;
		this.options.slideHeight  = this.options.slideHeight / PJF.constants.DEFAULT_FONTSIZE;
		this.options.slideMarginRight  = this.options.slideMarginRight / PJF.constants.DEFAULT_FONTSIZE;

		var options = this.options;

		//创建html
		var htmlStr = this.initHtml();
		//存在dom的情况，添加在dom里
		if(options.dom){
			this.com.append(htmlStr);
		}
		//设置样式
		this.cssSlides();
		//绑定事件
		this.bindEvents();

	},
	templates:function(data){
		return "";
	},
	//初始化html代码
	initHtml:function(){
		var me = this;
		var options = me.options;
		var htmlStr = "";
		switch(options.type){
			case "arrow":
				htmlStr += '<div class="stm_slides_container stm_slides_container_arrow">'
							// + '<div class="stm_slides_arrow_left"></div>'
								+ '<div class="stm_slides_view stm_slides_view_arrow">'
									+ me.initSlidesHtml() 
								+ '</div>'
							// + '<div class="stm_slides_arrow_right"></div>'
			           	 + '</div>';

	        	break;

	        case "circle":
				htmlStr += '<div class="stm_slides_container stm_slides_container_circle">'
								+ '<div class="stm_slides_view stm_slides_view_circle">'
									+ me.initSlidesHtml() 
								+ '</div>'
								+ me.initCircleHtml()
						 + '</div>';

				break;
	        default:
	        	break;
		}


	    return htmlStr;
	},
	initCircleHtml:function(){
		var me = this;
		var options = me.options;
		var data = options.data;
		var htmlStr = "";

		htmlStr += '<div class="stm_slides_circles">';
		for(var i=0;i<data.length;i++){
			htmlStr += '<div class="stm_slides_circle'+(i==0?" stm_slides_circle_selected":"")+'" slideIndex='+i+'></div>';
		}
		htmlStr += '</div>';

		return htmlStr;
	},
	initSlidesHtml:function(){
		var me = this;
		var options = me.options;
		var data = options.data;
		var htmlStr = "";

		switch(options.type){
			case "arrow":
				htmlStr += '<div class="stm_slides_view_slides_arrow">';
				for(var i=0;i<data.length;i++){
					htmlStr += '<div class="stm_slides_view_slide_arrow" dataIndex="'+i+'">'+options.templates(data[i])+'</div>';
				}
				htmlStr += '</div>';	

				break;

			case "circle":
				htmlStr += '<div class="stm_slides_view_slides_circle">';
				for(var i=0;i<data.length;i++){
					htmlStr += '<div class="stm_slides_view_slide_circle" dataIndex="'+i+'">'+options.templates(data[i])+'</div>';
				}
				htmlStr += '</div>';	

				break;

			default:
	        	break;
		}


		return htmlStr;
	},
	cssSlides:function(){
		var me = this;
		var options = me.options;

		switch(options.type){
			case "arrow":
				var $container = me.com.find('.stm_slides_container_arrow');
				// var $arrow_left = me.com.find('.stm_slides_arrow_left');
				// var $arrow_right = me.com.find('.stm_slides_arrow_right');
				var $view = me.com.find('.stm_slides_view_arrow');
				var $slides = me.com.find('.stm_slides_view_slides_arrow');
				var $slide = me.com.find('.stm_slides_view_slide_arrow');
				//组件高度
				$container.css({
					'height': (options.slideHeight*2 + options.slideMarginRight) + "rem",		//2个内部块的高度
					'width': (options.slideWidth*4 + options.slideMarginRight*4) + "rem"			//4个内部块的高度
				});
				//箭头的top位置--备注:154为箭头图片的高度
				// var top = (options.height - 154)/2;
				// $arrow_left.css({
				// 	'top': top + "px"
				// });
				// $arrow_right.css({
				// 	'top': top + "px"
				// });
				// var view_height = options.slideHeight;	//slide高度
				// var view_width = $container.width() - options.slideMarginRight*2 - 53*2; //53为左右箭头图片的宽度
				//设置滑块显示区域的宽度和高度以及top、left位置及是否显示右边框
				// $view.css({
				// 	'height': view_height + "px",
				// 	'width': view_width + "px",
				// 	'top': (options.height - view_height)/2 + "px",
				// 	'left': (53 + options.slideMarginRight) + "px"
				// });
				//设置滑块滑动区域的宽度
				// var len = options.data.length;
				// $slides.css({
				// 	'width': options.slideWidth*len + options.slideMarginRight*len + "px"
				// });
				//设置每一个滑块的高度宽度以及右间距
				$slide.css({
					'width': options.slideWidth + "rem",
					'height': options.slideHeight + "rem",
					'border': options.slideBorderWidth +'px solid #BFE9F0',
					'margin-right': options.slideMarginRight + "rem"
				});	

				break;

			case "circle":
				var $container = me.com.find('.stm_slides_container_circle');
				var $view = me.com.find('.stm_slides_view_circle');
				var $slides = me.com.find('.stm_slides_view_slides_circle');
				var $slide = me.com.find('.stm_slides_view_slide_circle');
				var $circles = me.com.find('.stm_slides_circles');

				//组件高度
				$container.css({
					'height': options.slideHeight + 0.30 + 0.10*2 + "rem"	//30为底部圆点区域高度，10*2为内部上下padding
				});
				//设置滑块显示区域的宽度和高度
				$view.css({
					'height': options.slideHeight + "rem"
				});
				//设置滑块滑动区域的宽度
				var len = options.data.length;
				var view_width = $view.width();
				view_width = $view.width() / $('html').css('font-size').split('px')[0];
				$slides.css({
					'width': view_width*len + "rem"
				});
				//设置每一个滑块的高度宽度
				$slide.css({
					'width': view_width + "rem"
				});
				//计算圆点区域居中的位置
				var circle_width = 0.20*len + 0.10*(len-1); //其中20为圆点的半径，10为圆点的右边距
				var padding_left = (view_width - circle_width)/2;
				$circles.css({
					'padding-left': padding_left + "rem"
				});


				break;

			default:
				break;		
		}

	},
	bindEvents:function(){
		var me = this;
		var options = me.options;
		switch(options.type){
			case "arrow":
				// var $arrow_left = me.com.find('.stm_slides_arrow_left');
				// var $arrow_right = me.com.find('.stm_slides_arrow_right');
				var $slides = me.com.find('.stm_slides_view_slides_arrow');
				var $slide = me.com.find('.stm_slides_view_slide_arrow');

				var slides_cnt = options.data.length;
				var slide_width = options.slideWidth;
				var slide_border_width = options.slideBorderWidth;
				var slide_margin_right = options.slideMarginRight;	

				// //滑动一次的距离
				// var per_distance = slide_width + slide_margin_right;

				// $arrow_left.unbind('click').bind('click',function(){
				// 	var left = $slides[0].offsetLeft;
				// 	if(left < 0){
				// 		left = left + per_distance;
				// 	}else{
				// 		left = 0;
				// 	}
				// 	$slides.css({'left':left + 'px','transition':'all 0.3s ease 0s'});	
				// });

				// $arrow_right.unbind('click').bind('click',function(){
				// 	var left_max = per_distance*(slides_cnt - 1);
				// 	var left = $slides[0].offsetLeft;
				// 	if(Math.abs(left) < Math.abs(left_max)){
				// 		left = left - per_distance;
				// 	}else{
				// 		left = - left_max;
				// 	}
				// 	$slides.css({'left':left + 'px','transition':'all 0.3s ease 0s'});
				// });

				$slide.unbind('click').bind('click',function(){
					if(options.onClick && (options.onClick instanceof Function)){
						PJF.communication.player.PlaySoundByUrl("devprompt/COMMON_click.wav");
						options.onClick(options.data[$(this).attr('dataIndex')]);
					}
				});

				break;

			case "circle":
					var $circle = this.com.find('.stm_slides_circle');
					var $view = me.com.find('.stm_slides_view_circle');
					var $slides = me.com.find('.stm_slides_view_slides_circle');
					var $slide = me.com.find('.stm_slides_view_slide_circle');

					var view_width = $view.width() / $('html').css('font-size').split('px')[0];

					$circle.unbind('click').bind('click',function(){
						$circle.removeClass('stm_slides_circle_selected');
						var index = $(this).attr('slideIndex');
						$circle.eq(index).addClass('stm_slides_circle_selected');

						var left =  ( - index*view_width) + "rem";
						$slides.css({'left':left,'transition':'all 0.3s ease 0s'});
					});

					$slide.unbind('click').bind('click',function(){
						if(options.onClick && (options.onClick instanceof Function)){
							PJF.communication.player.PlaySoundByUrl("devprompt/COMMON_click.wav");
							options.onClick(options.data[$(this).attr('dataIndex')]);
						}
					});
				break;

			default:
				break;
		}
	},
	setData:function(data){
		this.options.data = data;
		var htmlStr = this.initSlidesHtml();
		var $view = this.com.find('.stm_slides_view');
		$view.children().remove();
		$view.append(htmlStr);
		if(this.options.type=="circle"){
			this.com.find('.stm_slides_circles').remove();
			this.com.find('.stm_slides_container').append(this.initCircleHtml());
		}
		this.cssSlides();
		this.bindEvents();
	}
});
PJF.apply(PJF.ui.slides.prototype, {
	//返回类名
	getClassName: function() {
		return "PJF.ui.slides";
	},
	//销毁组件
	destroy:function(){
		PJF.ui.componentMgr.remove(this.id);
		this.com.remove();
		this.com = null;
		this.id = null;
	}
});
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 *
 * 待改进
 */
PJF.ui.panel = PJF.extend(PJF.ui.component, {
    init: function (conf) {
        //备份div中内容
        this.content = $('#' + this.dom).html();

        this.options = {
            id: null,//面板的ID属性
            title: null,//在面板头部显示的标题文本
            iconUrl: null,
            width: 1760,//设置面板宽度
            height: 800,//设置面板高度
            left: null,//设置面板距离左边的位置（即X轴位置）
            top: null,//设置面板距离顶部的位置（即Y轴位置）
            href: null,//从URL读取远程数据并且显示到面板。注意：内容将不会被载入，直到面板打开或扩大，在创建延迟加载面板时是非常有用的：
            cache: true,//如果为true，在超链接载入时缓存面板内容
            border: true,//定义是否显示面板边框
            content: null,//面板主体内容
            tools: null,///自定义工具菜单，可用值： 1) 数组，每个元素都包含'iconCls'和'handler'属性。2) 指向工具菜单的选择器。面板工具菜单可以声明在已经存在的<div>标签上
            loadingMessage: "Loading...",
            extractor: function (data) {//定义如何从ajax应答数据中提取内容，返回提取数据
                var pattern = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
                var matches = pattern.exec(data);
                if (matches) {
                    return matches[1];
                } else {
                    return data;
                }
            },
            onLoad: function () {
            },//在加载远程数据时触发
            isLoaded: false,
            domLoadedCallBack: function () {
            },
            initMargin: 20
        }
        var me = this;
        $.extend(this.options, conf);

        //大标题
        var title = me.options.title;

        //获取的间距
        var initMargin = me.options.initMargin;

        //面板头部图片
        var iconUrl = me.options.iconUrl;

        //body部分样式
        var body = this.com.addClass("stmPanel-body");
        var pageArea = me.getPageArea();
        var width, height;
        var width = me.options.width;
        if (width) {
            width = me.options.width;
            height = me.options.height;
        } else {
            width = pageArea.width - 8 * initMargin;
            height = pageArea.height - 3 * initMargin;
        }
        console.log("width:", width + " , height:", height)
        //设置body宽度和高度
        $(body).css({width: (width) + "px", height: (height) + "px"});
        var stmPanel = $("<div class=\"stmPanel\" ></div>").insertBefore(body);
        $(stmPanel).append(body);
        if (this.options.content) {
            $(".stmPanel-body").html(this.options.content);
        } else if (this.options.htmlDomId) {
            var html = $("#" + this.options.htmlDomId).html();
            this.com.html(html);
            this.options.domLoadedCallBack();
            $("#" + this.options.htmlDomId).remove();
        }

        $(stmPanel).find("div.stmPanel").css({"overflow-x": "auto", "overflow-y": "auto", "padding-bottom": "0px"});

        if (me.options.tools && typeof me.options.tools == "string") {
            stmPanel.find(">div.stmPanel-header>div.stmPanel-tool .stmPanel-tool-a").appendTo(me.options.tools);
        }

        //创建panel header
        var padHeader = $("<div class=\"stmPanel-header\"><div class=\"stmPanel-title\">" + me.options.title + "</div></div>").prependTo(stmPanel);
        if (me.options.iconUrl) {
            padHeader.find(".stmPanel-title").addClass("stmPanel-with-icon");
            $('<img class="stmPanel-icon" src="' + me.options.iconUrl + '"/>').addClass(me.options.iconCls).appendTo(padHeader);
        }
        $(stmPanel).find('.stmPanel-icon').click(function () {
            if (me.options.onclick instanceof Function) {
                me.options.onclick.call(me);
            }
        })
        var tool = $("<div class=\"stmPanel-tool\"></div>").appendTo(padHeader);
        tool.bind("click", function (e) {
            e.stopPropagation();
        });
        if (me.options.tools) {
            if (typeof me.options.tools == "string") {
                $(me.options.tools).children().each(function () {
                    $(this).addClass($(this).attr("iconCls")).addClass("stmPanel-tool-a").appendTo(tool);
                });
            } else {
                for (var i = 0; i < me.options.tools.length; i++) {
                    var t = $("<a href=\"javascript:void(0)\"></a>").addClass(me.options.tools[i].iconCls).appendTo(tool);
                    if (me.options.tools[i].handler) {
                        t.bind("click", eval(me.options.tools[i].handler));
                    }
                }
            }
        }
        if (me.options.href) {
            me.loadDataByUrl(me.options.href);
        }

        me.setPanelSize();

        this.move(this.com.parent());//move panel

        //panel header 显隐设置
        if (me.options.title == null || me.options.title == '') {
            this.com.siblings("div.stmPanel-header").hide();
            this.com.parent().removeClass('stmPanel-withHeader').addClass('stmPanel-withOutHeader');
        } else {
            this.com.parent().removeClass('stmPanel-withOutHeader').addClass('stmPanel-withHeader');
        }

    },

    /**
     * 移动面板
     * @param container
     */
    move: function (container) {//  move panel
        var me = this;
        container.css({
            left: me.options.left,
            top: me.options.top
        });
    },

    /**
     * 获取屏幕宽度高度
     * @returns {{width: number, height: number}}
     */
    getPageArea: function () {
        if (document.compatMode == 'BackCompat') {
            return {
                width: Math.max((document.body.scrollWidth, document.body.clientWidth)),
                height: Math.max((document.body.scrollHeight, document.body.clientHeight))
            }
        } else {
            return {
                width: Math.max((document.documentElement.scrollWidth, document.documentElement.clientWidth)),
                height: Math.max((document.documentElement.scrollHeight, document.documentElement.clientHeight))
            }
        }
    },

    /**
     * 设置面板宽高
     */
    setPanelSize: function () {//设置面板的大小,以及布局
        var me = this;
        var stmPanel = me.com.parent();
        var pheader = stmPanel.children("div.stmPanel-header");//面板head 对象
        var pbody = stmPanel.children("div.stmPanel-body");//面板body 对象
        if (me.options.fit == true) {//true时自适应父容器的大小
            var p = stmPanel.parent();
            p.addClass("stmPanel-noscroll");
            if (p[0].tagName == "BODY") {
                $("html").addClass("stmPanel-fit");
            }
            me.options.width = p.width();
            me.options.height = "auto";
        }
        if (!isNaN(me.options.width)) {
            stmPanel.width(me.options.width + "px");//面板对象
            pheader.width(me.options.width + "px");//面板head宽度
            pbody.width(me.options.width + "px");//面板body宽度
        } else {
            stmPanel.width("auto");
            pheader.add(pbody).width("auto");

        }

        if (!isNaN(me.options.height)) {
            stmPanel.height(me.options.height + "px");
            pbody.height((stmPanel.height() - pheader.outerHeight()) + "px");
        } else {
            pbody.height("auto");
        }
    },

    //加载面板内容
    loadDataByUrl: function (url, isRefresh) {//刷新面板来装载远程数据。如果'href'属性有了新配置，它将重写旧的'href'属性
        var me = this;
        if (me.options.href && (isRefresh || !me.options.isLoaded || !me.options.cache)) {
            me.options.isLoaded = false;
            var pbody = me.com;
            pbody.html($('<div class="stmPanel-loading"></div>').html(me.options.loadingMessage));
            var target = pbody;
            $.ajax({
                url: url,
                cache: false,
                success: function (data) {
                    pbody.html(me.options.extractor.call(target, data));
                    if ($.parser) {
                        $.parser.parse(pbody);
                    }

                    //判定onLoad是否为null
                    if (me.options.onLoad) {
                        me.options.onLoad.apply(target, arguments);
                    }
                    me.options.isLoaded = true;

                    pbody.parent().css({"overflow-x": "auto", "overflow-y": "auto"});

                }
            });
        }
    },

    /**
     * 销毁方法
     */
    destroy: function () {
        this.com.removeAttr("class").removeAttr("title").removeAttr("style").children().remove();
        this.com.empty();
        $("#" + this.dom).html(this.content);
        this.com.clone().insertAfter(this.com.parent());
        this.com.parent().remove();
        PJF.ui.componentMgr.remove(this.id);
        this.content = null;
        this.com = null;
        this.params = null;
        // abort 当前panel 关联的ajax请求 famingyuan 2015/02/05
        PJF.communication.ajaxMgr && PJF.communication.ajaxMgr.remove(this);
    },

    //动态设置panel 内容 url
    setUrl: function (url, fn) {
        this.options.href = url;
        this.loadDataByUrl(url, true);
        this.options.onLoad = fn;
    },

    //动态设置panel 内容 字符串
    setContent: function (content) {
        if (content) {
            $(".stmPanel-body").html(content);
        }
    },

    //动态设置panel的title
    setTitle: function (title) {
        this.com.siblings("div.stmPanel-header").show();
        this.com.siblings("div.stmPanel-header").find("div.stmPanel-title").html(title);
    },

    //显示panel的title
    showTitle: function () {
        this.com.siblings("div.stmPanel-header").show();
        this.com.parent().removeClass('stmPanel-withOutHeader').addClass('stmPanel-withHeader');
    },

    //隐藏panel的title
    hideTitle: function () {
        this.com.siblings("div.stmPanel-header").hide();
        this.com.parent().removeClass('stmPanel-withHeader').addClass('stmPanel-withOutHeader');
    }
})

PJF.apply(PJF.ui.panel.prototype, {

    //获取组件名称
    getClassName: function () {
        return "PJF.ui.panel";
    }

})

/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 *
 * 待改进：
 */
PJF.ui.tab = PJF.extend(PJF.ui.component, {
    init: function (conf) {
        //设置默认值
        this.options = {
            initMargin: 20,
            domLoadedCallBack: function () {
            },
            onSelect:function(){
            }
        };
        $.extend(this.options, conf);
        //保存点击过得tab title
        this.clickTitle = {};
        this.com.addClass('stm-tab');


        //创建dom 结构
        var htmlStr = this.createHtml();

        //存在dom的情况，添加在dom里
        if (this.options.dom) {
            this.com.append(htmlStr);
        }

        this.tab = {
            titleContainer: this.com.find('.tab_title_container')
        }
        //设置样式
        this.adjustTabStyle();
        this.tab.tabContainer = this.com.find('.tab_container');
        this.tab.panelContainer = this.com.find('.tab_panels');
        //回调中初始化组件
        var containters = this.com.find('.tab_panels').children()
        this.options.domLoadedCallBack(containters);

        //默认选中第一个tab
        this.defaultSelectedTab();

        //绑定事件
        this.bindEvents();
    },

    getPageArea: function () {
        if (document.compatMode == 'BackCompat') {
            return {
                width: Math.max((document.body.scrollWidth, document.body.clientWidth)),
                height: Math.max((document.body.scrollHeight, document.body.clientHeight))
            }
        } else {
            return {
                width: Math.max((document.documentElement.scrollWidth, document.documentElement.clientWidth)),
                height: Math.max((document.documentElement.scrollHeight, document.documentElement.clientHeight))
            }
        }
    },

    /**
     * 创建dom结构
     * @returns {string}
     */
    createHtml: function () {
        var options = this.options;
        var iconUrls = this.options.iconUrl;
        var tabIds = [];
        //创建tab title的html
        var htmlStr = '<div class="tab_container">';
        if (options.titles && (options.titles instanceof Array)) {
            var titles = options.titles;
            for (var i = 0, len = titles.length; i < len; i++) {
                var id = PJF.util.generateUUid();
                var tabId = "tab-" + id;
                tabIds.push(tabId);
                htmlStr += '<div id="' + tabId + '" dataindex="' + i + '" class="tab_title_container">';
                if (options.closables && options.closables[i]) {
                    htmlStr += '<div class="tab_tool_close" dataindex="' + i + '"></div>'
                }
                htmlStr += ' <div class="tab_title_context"  ><span >' + titles[i] + '</span></div>';
                htmlStr += '</div>';
            }
        }
        htmlStr += '</div>';
        htmlStr += '<div class="tab_panels">';

        //添加body
        
        var htmlDomIds = options.htmlDomIds;
        if(htmlDomIds){
        var len = htmlDomIds.length;
        if (len != options.titles.length) {
            alert("创建Tab组件失败，Tab 选项卡表头与html dom id个数不一致");
            return;
        }
        if (htmlDomIds && (htmlDomIds instanceof Array)) {
            for (var i = 0; i < len; i++) {
                for (var j = 0, len = options.titles.length; j < len; j++) {
                    if (j == i) {
                        htmlStr += '<div   id="' + tabIds[i] + '" class="tab_panel" dataindex="' + i + '">';
                        htmlStr += $("#" + htmlDomIds[i]).html();
                        htmlStr += "</div>";
                        $("#" + htmlDomIds[i]).remove();
                        break;
                    } else {
                        continue;
                    }
                }
            }

            htmlStr += "</div>";
        }
         }
         else{
            for(var i = 0; i < titles.length; i++){
                htmlStr += '<div   id="' + tabIds[i] + '" class="tab_panel" dataindex="' + i + '">';
                        htmlStr += "</div>";
            }
         }
        return htmlStr;
    },

    /**
     * 调整样式
     */
    adjustTabStyle: function () {
        var options = this.options;
        var colors = this.options.backgroundColors;
        var icons = this.options.iconCls;
        var pageArea = this.getPageArea();
        //获取的间距
        var initMargin = this.options.initMargin;
        var width, height;
        width = this.options.width;
        height = this.options.height;
        if (!isNaN(width)) {
            this.com.css('width',width / PJF.constants.DEFAULT_FONTSIZE + 'rem')
        } else {
            this.com.width("auto");
        }
        if (!isNaN(height)) {
            this.com.css('height',height / PJF.constants.DEFAULT_FONTSIZE + 'rem')
        } else {
            this.com.height("auto");
        }
        //设置背景色
        this.tab.titleContainer.each(function (index) {
            for (var i in colors) {
                if (index == i) {
                    $(this).css({
                        backgroundColor: colors[i]
                    });
                }
            }
        })
    },

    /**
     *设置默认选中
     */
    defaultSelectedTab: function () {
        var me = this;
        //默认选中第一个
        var colors = me.options.backgroundColors;
        var selectedTitle = "tab_title_selected";
        //设置header
        me.tab.titleContainer.each(function (index) {
            if (index == 0) {
                $(this).addClass("tab_title_selected");
            } else {
                $(this).addClass("tab_title_unselected");
            }
        })
        //设置tab 的body 部分索引为0 为选中状态
        var panels = this.com.children('.tab_panels').children(".tab_panel");
        panels.addClass('tab_panel_hidden');
        panels.each(function (index) {
            if (index == 0) {
                $(this).removeClass("tab_panel_hidden").addClass("tab_panel_selected");
            }
        });
        me.options.onSelect && me.options.onSelect(0, me.options.titles[0]);
    },
    /**
     * 绑定事件
     */
    bindEvents: function () {
        var options = this.options;
        var iconCls = this.options.iconCls;
        //绑定click事件
        var me = this;
        me.tab.tabContainer.on("click", ".tab_title_container", function(){
            var clickTab = this;
            var dataIndex = $(this).attr('dataindex');
            var className = "tab_title_selected";
            var unSelectClassName = "tab_title_unselected";

            me.tab.titleContainer.each(function () {
                var index = $(this).attr('dataindex');
                if(dataIndex == index){
                    //选中的那个tab并不是之前选中的
                    if(!$(clickTab).hasClass(className)){
                        me.select(dataIndex);
                        me.options.onSelect && me.options.onSelect(dataIndex, options.titles[dataIndex]);
                        $(clickTab).addClass(className).removeClass(unSelectClassName);
                    }
                }
                else{
                    $(this).addClass(unSelectClassName).removeClass(className);
                }
            })
        });

        me.tab.tabContainer.on("click", ".tab_tool_close", function(event){
            var dataIndex = $(this).attr('dataindex');
            me.remove(dataIndex);
            event.stopPropagation();
        });
    },
    /***
     * 该方法是用来添加tab
     * 
     * @param conf 创建tab的参数<Array or Object>
     */
    add: function(conf) {
        var options = this.options;
        var titleStr = '';
        var panelStr = '';

        if (!conf) {
            return;
        } else if (!(conf instanceof Array)) {
            conf = [conf];
        }

        for (var i = 0, len = conf.length; i < len; i++) {
            var data = conf[i];
            options.titles.push(data.title);
            options.backgroundColors.push(data.backgroundColor);
            options.closables.push(data.closable);

            var id = PJF.util.generateUUid();
            var tabId = "tab-" + id;
            var index = options.titles.length -1;
            titleStr += '<div id="' + tabId + '" dataindex="' + index + '" class="tab_title_container tab_title_unselected" style="background-color: ' + data.backgroundColor + '">';
            if (data.closable) {
                titleStr += '<div class="tab_tool_close" dataindex="' + index + '"></div>'
            }
            titleStr += ' <div class="tab_title_context"  ><span >' + data.title + '</span></div>';
            titleStr += '</div>';

            panelStr += '<div id="' + tabId + '" class="tab_panel tab_panel_hidden" dataindex="' + index + '">';
            panelStr += data.content;
            panelStr += "</div>";
        }
        var me = this;
        me.tab.tabContainer.append(titleStr);
        me.tab.panelContainer.append(panelStr);
        me.tab.titleContainer = me.com.find('.tab_title_container');
        var selectTab = me.tab.tabContainer.find('.tab_title_selected');
        if (!(selectTab && selectTab.length)) {
            $(me.tab.titleContainer[0]).trigger('click');
        }
    },
    /***
     * 该方法是根据title删除tab
     * 
     * @param title 传入的要删除标题的名字 
     */
    removeTitle:function(title){
        var me = this;
        var titles = this.options.titles;

        for (var i = 0, len = titles.length; i < len; i++) {
            if (titles[i] == title) {
                me.remove(i);
                break;
            }
        }
    },
    /***
     * 该方法是根据dataIndex删除tab
     * 
     * @param index 传入的要删除tab的索引
     */
    remove:function(index){
        var me = this;
        var options = this.options;
        var title =  options.titles[index];
        options.titles.splice(index, 1);
        options.backgroundColors.splice(index, 1);

        me.tab.titleContainer.each(function (titleIndex) {
            if (titleIndex == index) {
                $(this).remove();
            } else if (titleIndex > index) {
                $(this).find('.tab_tool_close').attr('dataindex', titleIndex - 1);
                $(this).attr('dataindex', titleIndex - 1);
            }
        })
        me.tab.panelContainer.children().each(function (panelIndex) {
            if (panelIndex == index) {
                $(this).remove();
            } else if (panelIndex > index) {
                $(this).attr('dataindex', panelIndex - 1);
            }
        });
        me.tab.titleContainer = me.com.find('.tab_title_container');
        me.options.onRemove && me.options.onRemove(index, title);
        $(me.tab.titleContainer[0]).trigger('click');
    },
    //选中项
    select: function (index) {
        var me = this;
        var options = me.options;
        var colors = options.backgroundColors;
        var tabId;
        var targetTitle = me.com.find('.tab_title_container').eq(index);
        if (targetTitle.length > 0) {
            var className = "tab_title_selected";
            me.tab.titleContainer.each(function (titleIndex) {
                if (index == titleIndex) {
                    tabId = $(this).attr("id");
                }
            })
        }

        //更换body
        me.com.children('.tab_panels').children('.tab_panel').each(function () {
            //隐藏所有panel
            $(this).removeClass('tab_panel_selected').addClass('tab_panel_hidden');
            var bodyId = $(this).attr("id");
            if (tabId == bodyId) {
                $(this).removeClass('tab_panel_hidden').addClass('tab_panel_selected');
            }
        })

    },

    selectTab: function (title) {
        var elem = $('span:contains("' + title + '")')[0];
        if (elem) {
            $(elem).trigger('click');
        }
    },

    //销毁方法
    destroy: function () {
        this.com.remove();
        PJF.ui.componentMgr.remove(this.id);  
    }


});
PJF.apply(PJF.ui.tab.prototype, {
    //返回类名
    getClassName: function () {
        return "PJF.ui.tab";
    }
});
/**
* 单页面模块
*/
;
(function (exports) {

  var _loadedResource = {}; //根据url作为key,把页面对应的js,HTML，CSS缓存起来避免重复请求
  var _loadPhase = {}; //每一次加载的动作周期里记录一些信息,比如是否正在加载,加载成功与失败
  var _newPage, _oldPage; //用于保存新页面、旧页面jq对象
  var _notTriggerHashChange; //在调用API跳转页面时，改变页面HASH值，但是不触发change
  var _waitingToLoad = []; //在某个页面正在加载过程中时，若有另外的加载请求，等待上一个页面加载完成后再加载
  var _cbs = { //一堆回调
    beforeLoadPage: function () { }, //页面加载之前
    beforeNewPageLoad: function () { }, //新页面资源加载相关的
    afterNewPageLoad: function () { },
    newPageLoadSucc: function () { },
    newPageLoadErr: function () { },
    beforeNewPageInit: function () { }, //新页面初始化相关的
    afterNewPageInit: function () { },
    newPageInitSucc: function () { },
    newPageInitErr: function () { },
    beforeOldPageDestroy: function () { }, //旧页面销毁相关的
    afterOldPageDestroy: function () { },
    oldPageDestroySucc: function () { },
    oldPageDestroyErr: function () { },
    switchAnimate: function (oldPage, newPage, callback) { //页面切换动画
      oldPage ? oldPage.fadeOut(200, callback) : callback(); //默认用旧页面淡出方式切换
    },
    loadingInitFunction: function () {  //讲道理肯定要遮罩

    },
    loadingDestroyFunction: function () { //遮罩销毁的

    }
  }
  //暴露给调用方
  var _params = {
    routing: {}, //路由数据
    useJsBkDoor: true, //js文件走GIN的p2服务,你懂的
    useJsCache: false, //js文件是否每次都重新请求....按理不应该，但是....曾经的坑
    cbs: _cbs, //一系列回调
    homepage: 'homepage', //默认首页是homepage
    //pageid允许在某些情况下加入后缀,如ccbs改造、填单机样式的,按照从后向前的顺序从路由数据里覆盖
    postfix: [],   // i.e ['_ytd','_ccbstransform']
    newPageTmpl: '', //单个页面主体内的DOM框,存放获取的css,html
    pageContainer: '' //jq对象,所有页面都存在于这个containter下,除了切换页面的时候，平时这个下面只会有一个页面资源
  }
  /**
  * 说白了就是获取pageId
  */
  var _getLocation = exports.getLocation = function () {
    var curl = window.location.href;
    var upos = curl.search('#!');
    if (upos > 0) {
      return curl.slice(upos + 2);
    } else {
      return "";
    }
  }
  /*
  * 单页面框架初始化函数
  */
  exports.init = function (conf) {
    $.extend(true, _params, conf);
    //检测hashchange
    window.onhashchange = function () {
      $.extend(_loadPhase, { isLoading: true });
      _beforeLoadPage(exports.getLocation() || _params.homepage);
    }
    if (exports.getLocation()) {
      _beforeLoadPage(exports.getLocation())
    }
    else if (_params.homepage) {
      location.hash = '!' + _params.homepage;
    }
  }

  exports.loadPage = function (pageId, data) {
    if (_loadPhase.isLoading) {
      setTimeout(function () {
        exports.loadPage(pageId, data);
      }, 100)
      console.log('页面正在加载中, 页面:' + pageId + '将稍后加载');
      /*_waitingToLoad.push([pageId, data]);*/
      return;
    }
    //如果pageId一样，那么不能走hashchange
    if (exports.getLocation() == pageId) {
      exports.refresh(data);
      return;
    }
    $.extend(_loadPhase, { initData: data, isLoading: true })
    location.hash = '!' + pageId;
  }

  function _changeLoadPhase(extendObj) {
    $.extend(_loadPhase, extendObj);
    _loadPhase.scriptDoms && _loadPhase.scriptDoms.forEach(function (value) {
      document.head.removeChild(value);
    })
  }

  exports.refresh = function (data) {
    console.log('刷新页面:' + exports.getLocation());
    _beforeLoadPage(exports.getLocation(), data);
  }

  function _beforeLoadPage(pageId, data, notTriggerCb) {
    if (!notTriggerCb && _cbs.beforeLoadPage) {
      _cbs.beforeLoadPage(pageId, data, _beforeLoadPage);
      return;
    }
    $.extend(_loadPhase, {
      pageId: pageId,
      isLoading: true,
      loadErr: false,
      scriptDoms: [],
      cssStr: '',
      htmlStr: '',
      htmlCssStr: '', // vue不允许<style>标签, 把这部分抽离出来，放到cssstr后面加载(优先级更高)
      initData: data,
      FHTS: false
    });
    //分行特色的要走交易获取页面数据
    if (pageId.indexOf('FHTS') == 0) {
      _loadFHTSPage(pageId);
    }
    else {
      _loadPage(pageId);
    }
  }

  exports.goback = function () {

  }

  exports.goforward = function () {

  }

  function _loadFHTSPage(pageid) {
    var id = pageid.split('-')[2];
    var transId = pageid.split('-')[1];
    $.extend(_loadPhase, {
      FHTS: true
    })

    /*$.when($.ajax('fhts/' + id+'.js',{dataType:'text'}), $.ajax('fhts/' + id+'.css'),$.ajax('fhts/' + id+'.html')).done(function(a1, a2, a3){
      var js = a1[0];
      var css = '<style>' + a2[0] + '</style>';
      var html = a3[0];
      try {
        var ctx = eval("(" + js + ")");
        ctx.compsContainer = {};
        if (ctx.beforeInitCmp && ctx.beforeInitCmp(_loadPhase.initData) === false) {
          _loadPhase.isLoading = false; //允许跳往别的页面
          return;
        }
        _loadPhase.cssStr = css, _loadPhase.pageInfo = ctx, _loadPhase.htmlStr = html;
        _switchPage(function() {
          try {
            ctx.compsContainer = PJF.html.tagScan(_newPage.children(), ctx, ctx.compsContainer)
            if (ctx.afterInitCmp)
              ctx.afterInitCmp(_loadPhase.initData);
          } catch (e) {
            _loadFHTSErr(e, '初始化页面' + pageid + '失败, 错误信息:' + e.message, '', true)
          }
        });
      } catch (e) {
        _loadFHTSErr(e, '初始化页面' + pageid + '失败, 错误信息:' + e.message, '',true);
    }
    }).fail(function(){
      _loadFHTSErr({}, '加载分行特色功能失败','',true);
    })*/


    PJF.communication.FHTSCpsJsonReq({
      jsonData: JSON.stringify({
        PgFc_Txn_SN: id
      }),
      fwServiceId: 'simpleTransaction',
      fwTranId: transId,
      async: true,
      loadingText: PJF.i18n.getI18nResource('pjfCommon.loadingPageMsg'),
      maskAll: true,
      success: function (data) {
        //万一他们的JS有问题
        try {
          var html = data.Bsn_Dsc;
          var js = data.Insn_Dtl_Inf;
          var css = '<style>' + data.Tpl_Dsc + '</style>';
          var ctx = eval("(" + js + ")");
          ctx.compsContainer = {};
          if (ctx.beforeInitCmp && ctx.beforeInitCmp(_loadPhase.initData) === false) {
            _loadPhase.isLoading = false; //允许跳往别的页面
            return;
          }
          _loadPhase.cssStr = css, _loadPhase.pageInfo = ctx, _loadPhase.htmlStr = html;
          if (_loadPhase.FHTS && _loadPhase.pageInfo.vueConf) {
              var _parseRst = _parseI18nHtml(html)
              _loadPhase.htmlCssStr = _parseRst.css
              _loadPhase.htmlStr = _parseRst.html
          }
          _switchPage(function () {
            try {
              ctx.compsContainer = PJF.html.tagScan(_newPage.children(), ctx, ctx.compsContainer)
              if (ctx.afterInitCmp)
                ctx.afterInitCmp(_loadPhase.initData);
            } catch (e) {
              _loadFHTSErr(e, '初始化页面' + pageid + '失败, 错误信息:' + e.message, undefined)
            }
          });
        } catch (e) {
          _loadFHTSErr(e, '初始化页面' + pageid + '失败, 错误信息:' + e.message, undefined);
        }
      },
      failure: function (data) {
        data = data || {};
        data.BK_DESC = "加载分行特色功能失败，" + data.BK_DESC;
        _loadFHTSErr(undefined, data, null, true);
      },
      complete: function () {

      }
    });
  }

  function _loadFHTSErr(e, content, msg, backToHomepage) {
    e && console.log(e.stack);
    _loadPhase = {};
    new PJF.ui.errorMessageBox({
      data: typeof (content) == 'object' ? content : null,
      content: content,
      detailMsg: msg,
      buttonConfs: [{
        bgColor: 'rgb(121,198,30)',
        name: backToHomepage ? '返回首页' : '确定',
        style: 'main',
        width: 200,
        height: 80,
        onClick: function () {
          backToHomepage && template && template.loadPage('homepage');
        }
      }]
    })
  }

  function _loadPage(pageId) {
    var pageInfos = _params.routing[pageId];
    if (!pageInfos) {
      console.log(pageId + '没有定义,页面无法跳转');
      _loadPhase = {};
      return;
    }
    _params.cbs.loadingInitFunction();
    pageInfos.css = pageInfos.css || [];
    //如果是满足_ytd, _ccbstransform之类带后缀的pageid
    for (var i = 0; i < _params.postfix.length; i++) {
      pageInfos = $.extend(pageInfos, _params.routing[pageId + _params.postfix[i]]);
    }
    $.extend(true, _loadPhase, {
      fileCount: pageInfos.js.length + pageInfos.css.length + 1,
      pageInfo: pageInfos,
      initData: pageInfos.initData
    })

    _params.cbs.beforeNewPageLoad();
    _loadFile('html', pageInfos.html);
    _loadFile('css', pageInfos.css);
    _loadFile('js', pageInfos.js);
  }

  /*
  * 根据url获取出绝对路径，用于获取资源文件
  */
  var _toAbsURL = function () {
    var directlink = function (url) {
      var a = document.createElement('a');
      a.href = url;
      return a.href;
    };
    return directlink('') === '' ? function (url) {
      var div = document.createElement('div');
      div.innerHTML = '<a href="' + url.replace(/"/g, '%22') + '"/>';
      return div.firstChild.href;
    } : directlink;
  }();

  /*
  * 加载css,js,html
  */
  function _loadFile(type, urls) {
    if (typeof (urls) == 'string') {
      urls = [urls];
    }
    urls.forEach(function (url) {
      if (!url) { //怕有人搞事配个空的，发现已经有这种情况
        _loadEnd();
        return;
      }
      //加载js
      if (type == 'js') {
        var bkJsUrl;
        //看一下p2是否有缓存
        if (_params.useJsBkDoor) {
          var path = _toAbsURL(url).split('bosWeb/page/')[1];
          $.ajax({
            async: false,
            url: '/bosWeb/FileServlet?type=status&path=' + path,
            success: function (data) {
              if (data == "true") {
                _loadedResource[url] = false; //这种情况下不走缓存
                bkJsUrl = '/bosWeb/FileServlet?type=load&path=' + path;
              }
            }
          });
        }
        if (_loadedResource[url]) {
          return _loadEnd();
        }
        //P2服务没有，本地没有缓存，那就去服务器重新下载JS文件
        var script = document.createElement('script');
        script.src = bkJsUrl || url;
        script.onerror = function () {
          _loadErr(url);
          document.head.removeChild(script)
        }
        script.onload = function () {
          _loadedResource[url] = (bkJsUrl || !_params.useJsCache) ? false : true;
          _loadEnd();
          document.head.removeChild(script)
        }
        _loadPhase.scriptDoms.push(script);
        document.head.appendChild(script);
      }
      //css或者html
      else {
        //没有缓存的
        if (!_loadedResource[url]) {
          $.ajax({
            url: url,
            success: function (str) {
              if (type == 'css') {
                str = ['<style>', str, '</style>'].join('');
                _loadPhase.cssStr += str;
                _loadedResource[url] = str;
              } else {                
                var parseRst = _parseI18nHtml(str) // i18n支持
                _loadedResource[url] = {} // 储存两部分内容，一部分是纯html（剥离<i18n> <style>), 另一部分是<style>
                _loadedResource[url].htmlCssStr = _loadPhase.htmlCssStr = parseRst.css // html里面的<style>
                _loadedResource[url].htmlStr = _loadPhase.htmlStr = parseRst.html                
              }            
              _loadEnd();
            },
            error: function () {
              _loadErr(url);
            }
          })
        }
        else {
          if (type == 'css')
            _loadPhase.cssStr += _loadedResource[url]
          else if (type == 'html') {
            _loadPhase.htmlStr = _loadedResource[url].htmlStr
            _loadPhase.htmlCssStr = _loadedResource[url].htmlCssStr
          }
            
          _loadEnd();
        }

      }
    })
  }


  function _loadEnd() {
    //所有资源加载完毕
    if (--_loadPhase.fileCount === 0) {
      _params.cbs.afterNewPageLoad();
      //部分文件加载错误
      if (_loadPhase.loadErr) {
        _loadPhase = {};
        _params.cbs.loadingDestroyFunction();
        _params.cbs.newPageLoadErr();
        //TODO 这种情况下 应该把#!pageId还原回去 否则就不能再次点击相关功能了
        return;
      }
      _params.cbs.newPageLoadSucc();
      //成功了，开始切换页面
      _switchPage();
    }
  }

  function _loadErr(url) {
    _loadPhase.loadErr = true;
    _loadEnd();
  }
  /**
  * 进行新旧页面切换
  */
  function _switchPage(cb) {
    _newPage && (_oldPage = _newPage);
    //切换动画
    _params.cbs.switchAnimate(_oldPage, _newPage, function () {
      try {
        _destroyOldPage(); //销毁旧页面
        _createNewPage(); //创建新页面
        _params.cbs.loadingDestroyFunction();
        cb && cb();
      } catch (e) {
        console.log('页面切换动画回调失败:' + e.message);
      } finally {
        _loadPhase = {};
        var toLoad = _waitingToLoad.shift();
        toLoad && exports.loadPage.apply(exports, toLoad);
      }
    })
  }
  /**
  * 销毁旧页面
  */
  function _destroyOldPage() {
    //第一次渲染的时候没有旧页面
    if (_oldPage) {
      try {
        _params.cbs.beforeOldPageDestroy();
        var destroyflag = true;
        if (_oldPage.pageObj.vueCmp) {
          _oldPage.pageObj.vueCmp.$destroy()
        }
        _oldPage.pageObj.destroy && _oldPage.pageObj.destroy();
        destroyflag = false;
        _params.cbs.oldPageDestroySucc(_oldPage.pageId);
      } catch (e) {
        destroyflag && _params.cbs.oldPageDestroyErr(_oldPage.pageId, e);
        console.log(_oldPage.pageId + ' destroy error : ' + e.message);
        console.log(e.stack)
      }
      finally {
        _params.cbs.afterOldPageDestroy(_oldPage.pageId);
        _oldPage.cssObj.remove();
        _oldPage.remove();
      }
    }
  }

  function _createNewPage() {
    _newPage = $(_params.newPageTmpl).appendTo(_params.pageContainer);
    var randomId = PJF.util.generateUUid() + Date.now()
    _newPage.attr('id', randomId)
    _newPage.append(_loadPhase.htmlStr);
    _newPage.cssObj = $(_loadPhase.cssStr + _loadPhase.htmlCssStr).appendTo(document.head)
    _newPage.pageId = _loadPhase.pageId;
    try {
      var initflag = true;
      _oldPage && _oldPage.pageObj && _oldPage.pageObj.beforeNextPageInit && _oldPage.pageObj.beforeNextPageInit();
      var _addI18n = function() {
          if (_newPage.pageObj.vueConf) { // 现在用这种模式来，方便些
              _newPage.pageObj.vueCmp = new Vue($.extend({
                  el: _newPage[0],
                  i18n: PJF.i18n.getVueI18n(),
              }, _newPage.pageObj.vueConf()))
              var _vuenewpage = $('#' + randomId) // vue首次渲染会copy一个新的节点
              _vuenewpage.pageId = _newPage.pageId
              _vuenewpage.pageObj = _newPage.pageObj
              _vuenewpage.cssObj = _newPage.cssObj
              _newPage = _vuenewpage
          }
      }
      if (_loadPhase.FHTS) {
        _newPage.pageObj = {
          beforeClickSubMenu: _loadPhase.pageInfo.beforeClickSubMenu,
          beforeClickHomePage: _loadPhase.pageInfo.beforeClickHomePage,
          destroy: _loadPhase.pageInfo.destroy,
          vueConf: _loadPhase.pageInfo.vueConf
        }
        _addI18n()
        _params.cbs.beforeNewPageInit(_newPage.pageId);
      }
      else {
        _newPage.pageObj = new window[_loadPhase.pageInfo.className]();
        _addI18n()
        _params.cbs.beforeNewPageInit(_newPage.pageId);
        _newPage.pageObj.init(_loadPhase.initData);
      }
      initflag = false;
      _params.cbs.newPageInitSucc(_newPage.pageId);
    } catch (e) {
      console.log(_newPage.pageId + ' init error : ' + e.message);
      console.log(e.stack);
      initflag && _params.cbs.newPageInitErr(_newPage.pageId, e);

    } finally {  //无论如何都要完成的事情
      _params.cbs.afterNewPageInit();
    }

  }

  function _parseI18nHtml(html, addI18n) {
    addI18n = typeof(addI18n) !== 'undefined' ? addI18n : true
    var lan = PJF.i18n.getLanguage()
    var result = {html: '', css: '', i18nJson: {}}
    result.html = html.replace(/(?:<style([^>]*?)>([\s\S]*?)<\/style>)|(?:<i18n([^>]*?)>([\s\S]*)<\/i18n>)/ig, function ($0, styleAttrs, cssContent, i18nAttrs, i18nContent) {
      // i18n css
      if (styleAttrs || cssContent) {
        var extraAttrs = '>'
        if (styleAttrs && styleAttrs.match(/reg\s*=/)) {
          extraAttrs = ' pjfI18nCss = "true">'
        }
        result.css += '<style ' + styleAttrs + extraAttrs + cssContent + '</style>'
      } else if (i18nAttrs && i18nContent && addI18n) { // i18n配置appId
        i18nAttrs.replace(/appId\s*=\s*["']([^"']*)["']/, function ($0, appId) {
          try {
            result.i18nJson[appId] = JSON.parse(i18nContent)      
          } catch (e) { // 担忧应用格式不标准
            console.log('页面<i18n>解析出错:' + e.message)
          }              
        })
      }
      return ''
    })
    for (var appId in result.i18nJson) {
      for (var lan in result.i18nJson[appId]) {
        PJF.i18n.addI18nResource(lan, appId, result.i18nJson[appId][lan])
      }      
    }
    return result
  }



  exports.getNewPage = function () {
    return _newPage;
  }

  exports.getOldPage = function () {
    return _oldPage;
  }

})(PJF.spa = {});

PJF.ui.template = PJF.extend(PJF.ui.component, {

  init: function (conf) {
    var me = this;
    //根据当前分辨率重置rem
    PJF.html.resetRem();
    //监听键盘影响，若遮挡输入框则上抬
    PJF.util.adaptKeyBoard(400, 100);
    PJF.i18n.init()
    //防止在非输入框上按了退格键（一般不会在这种情况下出现键盘），阻止页面后退
    $(document).on('keydown', function (e) {
      if (e.keyCode == 8 && e.target.tagName.toUpperCase() != 'INPUT' && e.target.tagName.toUpperCase() != 'TEXTAREA') {
        e.preventDefault();
        return;
      }
    });
    document.body.style.height = document.body.clientHeight + 'px';
    //检测窗口大小变化，动态设置font-size,改变rem值            
    $(window).bind('resize', function () {
      PJF.html.resetRem({ width: true }); //只监听宽度变化			
      //之所以在这里打日志，是因为生产上出现了屏幕偏离的情况，以便校对
      if (PJF.constants.ON_PROD)
        console.log('屏幕高宽发生变化,高:' + $(window).height() + ',宽:' + $(window).width());
    })
    this.conf = $.extend({
      process: {},
      onPageLoad: function () { } //TODO 这个我觉得不应该保留，等和应用确定
    }, conf);
    this.pageCom = {}; //储存每个页面生成的组件
    this.topbar = {}; //保存右上角工具条
    this.compLength = 0; //右上角按钮相关
    PJF.roleInfo = PJF.roleInfo || {};
    PJF.otherInfo = PJF.otherInfo || {};
    
    if (PJF.otherInfo.isSelfBank) {
      document.body.classList.add('pjf_is_self')
    }
    //若非pad，则禁止用户缩放, 并且目前只针对ie就行啦
    if (!PJF.util.deviceType.pad) {
      document.documentElement.classList.add('pjf_stm_none_zooming')
    } else { // pad的情况
      // pad下大部分是安卓， ie基本已经gg
      /* if (PJF.otherInfo.sysParam && PJF.otherInfo.sysParam.PAD_PAGE_SCALE === '1') { // 如果允许pad缩放
        // 不用做任何事情， IE没有配置-ms-content-zooming, 首页也没有配置viewport
      } else {
        // 添加-ms-content-zooming和viewport禁止缩放
        document.documentElement.classList.add('pjf_stm_none_zooming')
        var meta = document.createElement('meta')
        meta.setAttribute('name', 'viewport')
        meta.setAttribute('content', 'initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no')
        document.head.appendChild(meta)
      } */
    }

    this.prePageid = this.getLocation() || 'homepage';
    var tempSearchHtml = '', languageChoose = '';
    if (!PJF.util.deviceType.pad) {
      tempSearchHtml = '<div id="template_middle" class="template_middle">' +
        '<div id="template_search" class="template_search">' +
        '<input id="template_searchHint" class="template_searchHint" type="text">' +
        ((PJF.otherInfo.isSelfBank || PJF.otherInfo.globalParams.useNewViewStatus === '01') ? '<div class="template_search_self"><div class="template_search_self_icon"><div>搜索</div></div></div>' : '') +
        '<div id="template_searchContent" class="template_searchContent"></div></div></div>';
    }
    /* if(!PJF.util.deviceType.pad && !PJF.util.deviceType.tcr && PJF.constants.I18N_ORG.indexOf(PJF.roleInfo.orgCode) != -1){
      languageChoose = '<div style="z-index:1;position:fixed;top:2.3rem;font-size:.23rem" v-show="activeLanguage"><a :style="aLan(\'cn\')" @click= "chooseLanguage(\'cn\')">中文</a>/<a :style="aLan(\'en\')" @click= "chooseLanguage(\'en\')">ENG</a></div>';
    } */
    this.com.append('<div class="template_cntr"><div id="pjf_template_top_vue" class="template_top">' +
      '<div class="template_left"><div class="template_navbar"><div class="template_navbtn">' +
      '<div class="template_navbtn_home"></div></div></div><div class="template_welcome"><div class="template_posdate"><div class="template_pos">'
      + PJF.roleInfo.orgName + '</div><div class="template_dev_id">{{ $t("pjfI18n.devId") }}:' + PJF.otherInfo.devId + '</div><div class="template_version_id">{{ $t("pjfI18n.devVersion") }}:' + PJF.otherInfo.verInfo
      + '</div><div class="template_date">{{ $d(new Date(), "long") }}</div></div><div class="template_welcomeText"></div></div></div>'
      + tempSearchHtml
      + '<div id="template_right" class="template_right">'
      + '<div class="template_logo"></div></div>'
      + languageChoose + '</div><div class="template_content"></div></div>');

      //中德
      if(PJF.orgInfo && PJF.orgInfo.instSvrlLgPsnID == 'DF001') $('.template_logo').css('background-image', 'url(icon/logo_zd.png)');
      //建亚
      if(PJF.orgInfo && PJF.orgInfo.instSvrlLgPsnID == 'DA003') $('.template_logo').css('background-image', 'url(icon/logo_hw.png)');
    this.initTopVue();
    this.guide = new PJF.ui.guide({});
    PJF.event.addSubscriber("onCompCreated", function (pjfCom) {
      if (!me.newpage) return;
      me.pageCom[me.newpage.pageId] = me.pageCom[me.newpage.pageId] || [];
      me.pageCom[me.newpage.pageId].push(pjfCom);
    });

    //im正在连接
    PJF.event.addSubscriber(PJF.constants.IM_CONNECTING_EVENT, function () {
      $('.template_welcome').css('background-image', 'url(icon/im_connecting.gif)')
    });

    //im连接失败
    PJF.event.addSubscriber(PJF.constants.IM_CONNECT_FAIL, function () {
      $('.template_welcome').css('background-image', 'url(icon/im_connect_fail.png)')
    });

    //im正在断开
    PJF.event.addSubscriber(PJF.constants.IM_DISCONNECTING_EVENT, function () {
      $('.template_welcome').css('background-image', 'url(icon/im_disconnecting.gif)')
    });

    //im已断开
    PJF.event.addSubscriber(PJF.constants.IM_DISCONNECTED_EVENT, function () {
      $('.template_welcome').css('background-image', 'url(icon/im_disconnected.png)')
    });

    //im已连接
    PJF.event.addSubscriber(PJF.constants.IM_CONNECTED_EVENT, function () {
      $('.template_welcome').css('background-image', 'url(icon/im_connected.png)')
    });

    this.com.find('.template_navbtn').bind('click', function () {
      if (!me.navbarDisabled) {
        if (me.newpage && me.newpage.pageObj && me.newpage.pageObj.beforeClickHomePage) {
          if (me.newpage.pageObj.beforeClickHomePage() !== false) {
            PJF.communication.player.PlaySoundByUrl("devprompt/COMMON_click.wav");
            me.loadPage('homepage')
          }
        } else {
          console.log(me.newpage.pageid + '没有实现beforeClickHomePage方法')
          if (!me.isIframe) {
            PJF.communication.player.PlaySoundByUrl("devprompt/COMMON_click.wav");
            me.loadPage('homepage')
          }
        }
      }
    })
    var loading;
    var postfix = [];
    conf.postfixHandler = conf.postfixHandler || [];
    for (var i = 0; i < conf.postfixHandler.length; i++) {
      postfix.push(conf.postfixHandler[i]());
    }
    
    PJF.spa.init({
      routing: conf.pageRouting,
      newPageTmpl: '<div class = "template_newpage"></div>',
      pageContainer: me.com.find('.template_content'),
      homepage: conf.padMenuUrl ? null : 'homepage',
      //pageid可能要加后缀什么的
      postfix: postfix,
      cbs: {
        loadingInitFunction: function () {
          loading && loading.destroy()
          loading = new PJF.ui.loading({ noDestroy: true, text: PJF.i18n.getI18nResource('pjfCommon.loadingPageMsg') });
        },
        loadingDestroyFunction: function () {
          loading && loading.destroy();
          loading = null
        },
        newPageLoadErr: function () {
          new PJF.ui.errorMessageBox({
            content: '网络故障，获取页面失败',
            buttonConfs: [{
              bgColor: 'rgb(121,198,30)',
              name: '返回首页',
              style: 'main',
              width: 200,
              height: 80,
              onClick: function () {
                template && template.loadPage('homepage');
              }
            }]
          })
        },
        newPageInitErr: function (pageid, err) {
          new PJF.ui.errorMessageBox({
            content: '初始化页面' + pageid + '失败, 错误信息:' + err.message,
            buttonConfs: [{
              bgColor: 'rgb(121,198,30)',
              name: '确定',
              style: 'main',
              width: 200,
              height: 80,
              onClick: function () {

              }
            }]
          })
        },
        newPageInitSucc: function (pageId) {
          me.newpage.obj = me.getNewPageObj();
          if (me.conf.onPageLoad) {
            me.conf.onPageLoad.call(me);
          }
          //fhts的没有，所以要判断下
          if(me.conf.pageRouting[pageId]){
            var tips = $.extend(true,{},me.conf.pageRouting[pageId].tips,me.conf.tips[PJF.otherInfo.MENU_ID + pageId]);
            me.guide.begin(tips, [me.oldpage && me.oldpage.obj, me.newpage.obj]);
          }					
        },
        beforeNewPageInit: function (pageid) {
          PJF.i18n.fitCss() // i18n
          me.newpage = PJF.spa.getNewPage();
          me.pageid = pageid;
          me.newpage.process = me.addProcess(pageid);
        },
        afterNewPageInit: function () {
          me.newpage.css({ opacity: 1 });
        },
        beforeOldPageDestroy: function () {
          me.oldpage = PJF.spa.getOldPage();
          me.oldpage.process && me.oldpage.process.destroy();
        },
        afterOldPageDestroy: function (oldPageId) {
          while (me.pageCom[oldPageId] && me.pageCom[oldPageId].length > 0) {
            var com = me.pageCom[oldPageId].pop();
            try {
              com.destroy();
            } catch (e) {
              console.log(e.stack);
              console.log(com.getClassName() + ' destroy error : ' + e.message)
            }
          }
          me.guide.stop();
        },
        beforeLoadPage: function (pageid, data, fn) {

          function jumpPage() {
            console.log('hashchange to page :' + pageid);
            PJF.event.publish('STM_HASH_CHANGE', me.prePageid, pageid);
            me.prePageid = pageid; //发布完事件后，更新
            fn(pageid, data, true);
          }

          function beForeJumpPage() {
            //跳转页面时，还有关注的外设请求未返回
            var deviceList = Object.keys(PJF.stm.client.callbackList);
            if (deviceList.length > 0) {
              var i = 0;
              //如果恰好此时没有loading,那么我来打一个吧，因为在跳转页面前还要等待外设返回
              //或许也有可能其中一个外设命令有遮罩，然后它消失了别的外设还没有返回? 先不考虑了把???
              var loadingArr = [];
              if (PJF.ui.loading.count == 0) {
                loadingArr.push(new PJF.ui.loading({}));
              }
              deviceList.forEach(function (eventId) {
                //现在stm外设一个命令最多一个回调，这句话可能出错吗?应该不会吧
                //假定所有外设都一定会最终返回，应该是没问题的，侯大爷说的
                var tmp = PJF.event.getCallBackList(eventId)[0];
                PJF.event.getCallBackList(eventId)[0] = function () {
                  tmp.apply(PJF.stm.client, arguments);
                  //每一个回调执行完了可能loading都没有了                    
                  if (deviceList.length == ++i) { //外设全部执行完了
                    for (var j = 0; j < loadingArr.length; j++) {
                      loadingArr[j].destroy();
                    }
                    beForeJumpPage();
                    return;
                  }
                  //如果还没执行完，然后其中某个回调结束了，发现没有遮罩，那么打一个
                  if (PJF.ui.loading.count == 0) {
                    console.log('回调执行后，没有遮罩')
                    loadingArr.push(new PJF.ui.loading({}));
                  }
                }
              })
            } else {
              jumpPage(pageid, data, fn);
            }
          }
          if (PJF.communication.isInClient()) {
            //某些外设必须返回了才跳页面
            PJF.event.publish(PJF.stmEvent.BEFORE_HASH_CHANGE);
            beForeJumpPage(pageid, data, fn);
          } else {
            jumpPage(pageid, data, fn);
          }


        }
      }
    })

  },
  initTopVue: function () {
    this.topVue = new Vue({
      el: '#pjf_template_top_vue',
      i18n: PJF.i18n.getVueI18n(),
      data: {
        language: 'cn',
        activeLanguage: true
      },
      methods: {
        chooseLanguage: function (lan) {
          this.$emit('languageChanged', lan);
          this.language = lan;
          PJF.i18n.setLanguage(lan);
        },
        aLan: function (lan) {
          if (lan == this.language) {
            return {
              'text-decoration': 'underline',
              'font-weight': 'bold'
            }
          }
          else {
            return {
              color: 'black'
            }
          }
        }
      }
    });
    // Vue在初始化的时候，会重新创建节点
    // this.com = $(this.com.selector)
    this.topVue.$on('showOrHide', function (flag) {
      this.activeLanguage = flag;
    });
  },
  loadPage: function (pageid, data) {
    var me = this;
    if (PJF.util.deviceType.pad && (pageid == 'homepage' || pageid == 'subMenuPage')) {
      PJF.communication.Tabs.CloseThisTab();
      return;
    }
    //PAD上的打印页面，全部跳转到新的页面去
    if (PJF.util.deviceType.pad && PJF.constants.PRINT_PAGE_IDS.indexOf(pageid) != -1 && PJF.fsm.get(PJF.fsm.fmIds.STM_PAD_TEMPLATEINFO).is('yes')) {
      pageid = 'padCommonTransactionEnd';
      PJF.fsm.get(PJF.fsm.fmIds.STM_PAD_TEMPLATEINFO).notTemplateInfoAuth();
    }
    PJF.spa.loadPage(pageid, data)
  },
  refresh: function (data) {
    PJF.spa.refresh(data);
  },
  getLocation: function () {
    return PJF.spa.getLocation();
  },
  triggerGuide: function (key) {
    this.guide.triggerGuide(key)
  },
  addTopBarComp: function (conf) {
    var me = this;
    if (PJF.util.getType(conf) == 'array') {
      for (var a in conf) {
        addBtn(conf[a]);
      }
    } else if (PJF.util.getType(conf) == 'object') {
      addBtn(conf);
    }
    function addBtn(cfg) {
      var id = cfg.id ? cfg.id : ('TemplateComp_' + me.compLength);
      cfg.cssClass = 'template_rightBtns';
      cfg.id = id;
      cfg.component = 'PJF.ui.linkButton';
      cfg.conf = cfg;
      me.topbar[id] = me.addComponent('template_right', cfg);
      return me.topbar[id];
    }
  },
  getTopBarComp: function (conf) {
    var me = this;
    if (typeof (conf) == 'string') {
      if (me.topbar[conf]) {
        return me.topbar[conf];
      }
    }
  },
  clearTopBar: function () {
    var me = this;
    for (a in me.topbar) {
      if (me.topbar[a]) {
        me.topbar[a].destroy();
        me.topbar[a] = null;
      }
    }
  },
  leftTopSwitch: function (mode) {
    var me = this;
    if (mode == 'welcomeInfo') {
      me.com.find('.template_welcome').show();
      me.disableNavbar(false);
      me.com.find('.template_navbar').hide();
    } else if (mode == 'navBar') {
      me.com.find('.template_welcome').hide();
      me.com.find('.template_navbar').show();
    } else {
      me.com.find('.template_welcome').toggle();
      me.com.find('.template_navbar').toggle();
    }
  },
  setNavbar: function (menulevel, menuname, target, data) {
    if (PJF.util.deviceType.pad || menulevel < 2)
      return;
    if (PJF.stm.menuTree && PJF.stm.menuTree[data]) {
      var _lan = PJF.i18n.getLanguage().toUpperCase();
      if (PJF.stm.menuTree[data]['NAME_' + _lan]) menuname = PJF.stm.menuTree[data]['NAME_' + _lan];
    }
    menuname = menuname.split('<br>').join('');
    var me = this;
    var btns = me.com.find('.template_navbtn');

    var btn;
    var insertAfterJq;
    var upLevelJq = btns.filter('.template_navbtn_' + (menulevel - 1)); //上一级导航条
    insertAfterJq = upLevelJq.length > 0 ? upLevelJq : $(btns[0]); //插入在上一级导航条或者返回首页后面        
    //已经有那一级的按钮了，没必要删除了
    var selfLevelJq = btns.filter('.template_navbtn_' + menulevel);
    if (selfLevelJq.length > 0) {
      btn = selfLevelJq;
      btn[0].style.width = "";//重置width
      btn.show()
      btn.find('span').text(menuname).show();
    } else {
      btn = $('<div class="template_navbtn template_navbtn_' + menulevel + '" style="color:#0065b3;font-weight: bold;"><span>' + menuname + '</span></div>')
      btn.insertAfter(insertAfterJq);
    }//

    btn.off('click').on('click', function () {
      if (me.newpage && me.newpage.obj && me.newpage.obj.beforeClickSubMenu && me.newpage.obj.beforeClickSubMenu(target, data) === false) {
        return;
      }
      console.log(me.newpage.pageid + '没有实现beforeClickSubMenu方法')
      PJF.communication.player.PlaySoundByUrl("devprompt/COMMON_click.wav");
      me.loadPage(target, data);

    })
    btn.nextAll().hide(); //比如设置了层级为2的导航条，那么层级2以下的都隐藏
    if (btns.length > 1) {
      me.com.find('.template_navbtn').each(function (i) {
        i >= 2 && $(this).addClass('template_nav_arrow'); //多余2级有右箭头
      })
    }
    me.leftTopSwitch('navBar');
    //重新设置宽度
    btn.width(btn.find("span").width() + 1);
  },
  getNewPageObj: function () {
    return this.newpage.pageObj;
  },
  addComponent: function (cntr, conf) {
    var me = this;
    if (PJF.util.getType(conf) == 'array') {
      var arr = [];
      for (a in conf) {
        arr.push(createComp(conf[a]));
      }
      return arr;
    } else if (PJF.util.getType(conf) == 'object') {
      return createComp(conf);
    }
    function createComp(obj) {
      var func = obj.component;
      var id = obj.id ? obj.id : ('TemplateComp_' + me.compLength);
      var cssClass = obj.cssClass ? obj.cssClass : '';
      var config = obj.conf;
      var style = obj.style instanceof Object ? obj.style : {};
      cntr = cntr ? $('#' + cntr) : me.newpage;
      config.dom = id;
      config.noDestroy = true;
      var comp;

      var box = $("<div id='" + id + "'class='" + cssClass + "'></div>");
      cntr.prepend(box);
      comp = new PJF.ui[func.substring(7)](config);
      me.compLength++;

      return comp;
    }
  },
  disableNavbar: function (flag) {
    var me = this;
    me.navbarDisabled = flag;
  },
  addProcess: function (pageid) {
    var me = this;
    var page = me.conf.pageRouting[pageid] || {};
    var processComp;
    //这是应用需要的实际的process，针对公共页面
    PJF.otherInfo.MENU_ID = PJF.otherInfo.MENU_ID || "";
    var speProcess = me.conf.process[PJF.otherInfo.MENU_ID + pageid];
    if (page.process || speProcess) {
        //适配建亚多语言的cfg process..
        var data = [];
        if (speProcess) {
            data = speProcess.data.slice(0, speProcess.data.length - 1);
        } else {
            var processArray = me.conf.process[page.process[0]].data;
            try {
                for (var i in processArray) {
                    data.push(PJF.i18n.getI18nResource(processArray[i]) ? PJF.i18n.getI18nResource(processArray[i]) : processArray[i])
                }
            } catch (e) {
                data = processArray;
            }
        }
      //zws 2015年8月10日14:22:29 修复process条因为绝对定位遮挡了其他按钮
      //me.com.find('.template_newpage').append('<div class="pjf_stm_template_process"><div class="pjf_stm_template_process" id="'+pageid+'_process"></div></div>');
      me.com.find('.template_newpage').prepend('<div id="' + pageid + '_process"></div>');
      processComp = new PJF.ui.process({
        dom: pageid + '_process',
        data: data
      })
      var step = speProcess ? speProcess.data[speProcess.data.length - 1] : page.process[1];
      processComp.setDoing(step);
      return processComp;
    }
  }

})
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * @Author chenyue
 * Create on: 2015-01-07
 * Last Updated: 
 * 说明:stmtextfield组件;
 * hmode    输入法模式   int     
   HWMODE_WRITE= 0 //手写模式
   HWMODE_CH= 1 //键盘中文
   HWMODE_ENG = 2 //键盘英文
   HWMODE_CHAR = 3 //键盘符号
   HWMODE_NUM = 4 //数字键盘
 */

PJF.ui.textfield = PJF.extend(PJF.ui.component, {
    init:function(conf){
        var me = this;
        var dfconf = { };
        me.value = null;
        me.changed = false;
        me.conf = $.extend(dfconf,conf);
        me.com.addClass('pjf_stmtextfield');
        me.mouseObj = {};
        // set Dom
        if( me.conf.placeHolder ){
            me.setPlaceHolder( me.conf.placeHolder  )
        }        
        me.com.wrap('<div class="pjf_stmtextfield_cntr"></div>');
        me.cntr = me.com.parent('.pjf_stmtextfield_cntr');
        me.disabled(me.conf.disabled);
        me.readOnly(me.conf.readOnly);
        me.setComSize();
        me.bindEvents();
        if (me.conf.defaultValue) {
            me.setValue(me.conf.defaultValue + "");
        }
        if(me.conf.datatype){
            me.com.bind('focus',function(){
               
                clearInterval(me.time);
                //KEY1: 获得聚焦时的初始值
                me.value = me.getValue();
                me.time = setInterval(function(){
                    try{
                        var currentPos = me.getCursorPosition();//获取当前光标位置
                        var realValue = me.com[0].value.substr(0,currentPos);//获取当前光标位置之前的字符串
                        var calculatedPos = me._adjustCursorPosition(currentPos,realValue);//重新计算之后的光标位置

                        //me.setValue( me.fixValue(me.getValue()) );
                        me.com[0].value = me.fixValue(me.getValue());
                        me.setCursorPosition( calculatedPos );//设定新的光标位置

                        //KE2: 将初始值与整理后的值比较：如果不同了，就认为是值改变了
                        me.changed = ( me.value != me.getValue() ) ? true : false ;

                        //KEY3: 值被改变了，就保持这种状态
                        if( !me.changed ){
                            me.value = me.getValue();
                        }
                    }catch(e){
                        console.log('textfield focus error : ', e.stack)
                    }
                },20)
            }).bind('blur',function(){
                clearInterval(me.time);
            })
        }
        // me.coFm.attr('type','text');
    },
    /**
     * 用途：修改textfield的属性
     * @param obj : 文本框的新属性对象
     * */
    modifyProperty:function(obj){
        $.extend(this.conf, obj);
    },
    /**
     * 用途：设置插件的高宽
     * 注：1.input 和 textarea 都是可以 设置高宽
     *    2.input 的 高 和 行高 是一致的，以保持垂直居中
     *    3.textarea 的行高不做处理
     * */
    setComSize:function(){
        var me = this;
        var isInput = ( me.com[0].nodeName.toUpperCase() === 'INPUT'); //检测宿主元素是 textArea 还是 input

        if( me.conf.width ){
            var scaledWidth = me.conf.width/PJF.constants.DEFAULT_FONTSIZE + "rem" ;
            me.com.css({ width:scaledWidth });
        }
        if(me.conf.height){
            var scaledHeight = me.conf.height/PJF.constants.DEFAULT_FONTSIZE + "rem" ;
            if( isInput ){
                me.com.css({ height:scaledHeight,'line-height':scaledHeight });
            }else{
                me.com.css({ height:scaledHeight});
            }
        }
    },
    fixValue:function(str, isPrecision){
        var me = this;
        var numValue = "";

        if (isPrecision && (str || str == 0) && str != "" && $.isNumeric(new Number(str))) {
            if (me.conf.precision) {
                numValue = Number(str).toFixed(me.conf.precision);
                str = numValue;
            }
        }
        if(me.conf.datatype == 'money'){
            var s1, s2;
            var p = /(\d+)(\d{3})/;
            var dpos = str.indexOf(".");

            if (dpos >= 0) {
                s1 = str.substring(0, dpos);
                s2 = str.substring(dpos + 1, str.length);
                while (p.test(s1)) {
                    s1 = s1.replace(p, "$1" + "," + "$2");
                }
                str = s1 + "." + s2;
            } else {
                while (p.test(str)) {
                    str = str.replace(p, "$1" + "," + "$2");
                }
            }
        }
        if(me.conf.datatype == "card"){
            var sep = ' ';
            var p = /(\S{4})(\S+)/;
            while (p.test(str)) {
                str = str.replace(p, "$1" + sep + "$2");
            }
            
        }
        if(me.conf.datatype == "mobile"){
            var sep = ' ';
            var pStart = /^(\d{3})(\d+)/;
            var pCycle = /(\d{4})(\d+)/;
            if( pStart.test(str) ){
                str = str.replace(pStart, "$1" + sep + "$2");
            }

            while ( pCycle.test(str) ) {
                str = str.replace(pCycle, "$1" + sep + "$2");
            }

        }
        return str;
    },
    bindEvents:function(){
        var me = this;
        me.com.bind('mousedown',function(e){
            me.mouseObj.startX = e.pageX;
            me.mouseObj.startY = e.pageY;
        })
        me.com.bind('mouseup',function(e){
            me.mouseObj.endX = e.pageX;
            me.mouseObj.endY = e.pageY;
        })
        me.com.bind('focus',function(e){
            if(!e.data || !e.data.isClick){
                if(me.params.onFocus){
                    me.params.onFocus();
                }
                me.com.addClass('pjf_stmtextfield_focus');
            }
        });
        me.com.bind('blur',function(){
            me.com.removeClass('pjf_stmtextfield_focus');
            if (!me.conf.notOpenKb) PJF.util.closeKeyboard();
            me.conf.blur && me.conf.blur();
            me.setValue(me.fixValue(me.getValue(), true));
            me.validated();
            //比较值的不同，若不同则触发
            if( me.changed && me.conf.datatype ){
                me.changed = false;
                if( me.params.onChange instanceof Function ){
                    me.params.onChange();
                }
            }
        });

        if( !me.conf.datatype ){
            me.com.bind('change',function(){
                if( me.params.onChange instanceof Function ){
                    me.params.onChange();
                }
            });
        }

        me.com.bind('click',function(){
            $(this).val() == '' && $(this).select()
            var selectionStart = me.com && me.com[0] && me.com[0].selectionStart;
            console.log('click cursor position:' , selectionStart)
            me.com[0].setSelectionRange(selectionStart,selectionStart)
            //非滑动触发,允许3的误差
            if((Math.abs(me.mouseObj.endX - me.mouseObj.startX) <= 3 && Math.abs(me.mouseObj.endY - me.mouseObj.startY) <= 3) && !me.conf.notOpenKb)
            {
                PJF.util.openKeyboard(me.conf.hmode);
            }
        });
    },
    validated:function(){
        var me = this;
        var conf = me.conf;
        var value = me.getValue();
        var $container = me.cntr;
        var $input = me.com;
        var $tip = me.cntr.find('.pjf_stmtextfield_msg');
        if (conf.required === true) {
            $tip.remove();
            if(value==""){
                var required = PJF.i18n.getI18nResource('pjfI18n.selectRequired');
                $('<span class="pjf_stmtextfield_msg">'+required+'</span>').appendTo($container);
                $input.addClass("pjf_stmtextfield_error");
                $container.find('.pjf_stmtextfield_msg').css({'top': $input.height()});
                return required;
            } else {
                $input.removeClass("pjf_stmtextfield_error");
            }
        } else if (value=="") {
            $tip.remove();
            $input.removeClass("pjf_stmtextfield_error");
            return;
        }
        //如果没有验证条件则直接返回
        if (conf.validType == undefined) {
            return;
        }
        var msgArray = [];
        if (conf.validType) {
            if (!(conf.validType instanceof Array)) {
                conf.validType = [conf.validType];
                conf.invalidMessage = [conf.invalidMessage];
            }
            if (conf.validType instanceof Array) {
                for (var i in conf.validType) {
                    //错误信息
                    var msg = conf.invalidMessage[i];
                    var typeParam = /([a-zA-Z0-9_]+)(.*)/.exec(conf.validType[i]);
                    //根据校验类型获取校验方法
                    var rule = PJF.validator.rules()[typeParam[1]];
                    //调用校验方法---根据获取值、参数
                    var status = rule(value, eval(typeParam[2]));
                    //校验不通过
                    if(!status){
                        msgArray.push(msg);
                    }
                }
            }
        }
        var msgStr = msgArray.join('、');
        $tip.remove();
        if (msgStr!="") {
            $('<span class="pjf_stmtextfield_msg">'+msgArray.join('、')+'</span>').appendTo($container);
            $input.addClass("pjf_stmtextfield_error");
            $container.find('.pjf_stmtextfield_msg').css({'top': $input.height()});
        } else {
            $input.removeClass("pjf_stmtextfield_error");
        }
        return msgStr;
    },
    disabled:function(flag){
        var me = this;
        me.com.attr('disabled',flag);
    },
    readOnly:function(flag){
        var me = this;
        if(this.readOnlyFlag == flag)
            return;
        this.readOnlyFlag = flag;
        me.com.attr('readOnly',flag);
        if(flag){
            me.overlayer = $('<div class="pjf_stmtextfield_overlayer"></div>');
            me.overlayer.bind('click',function(e){
                me.focus();
                return false;
            });

            me.cntr.append(me.overlayer);
        }else{
            me.cntr.find(".pjf_stmtextfield_overlayer").remove();
        }
    },
    setValue:function(str, isTriggerChange){
        var me = this;
        var isInput = ( me.com[0].nodeName.toUpperCase() === 'INPUT');        
        //代表多行文本textarea
        if(!isInput && typeof(str) == 'string'){
            str = str.replace(new RegExp("\\\\n", "gm"), "\n");
            str = str.replace(new RegExp("\\\\r", "gm"), "\r");
        }
        //me.com.val(me.fixValue(str));
        if(isTriggerChange){
            var oldVal = me.com[0].value;
            isTriggerChange = oldVal == str ? false : true;
        }
        me.com[0].value = me.fixValue(str, true);
        if(isTriggerChange && me.params.onChange){
            me.params.onChange();
        }
    },
    getValue:function(){
        var me = this;
        var val = me.com.val();
        if(me.conf.datatype == 'money'){
            val = val.replace(new RegExp("\,", "gm"), "");
        }else if(me.conf.datatype == 'card' || me.conf.datatype == 'mobile'){
            val = val.replace(new RegExp(" ", "gm"), "");
        }
        return PJF.util.trim(val);
    },
    /**
     * 用途 ： 获得输入框占位提示（placeholder）
     */
    getPlaceHolder:function(){
        return this.com.attr('placeHolder');
    },
    /***
     * 用途：设置输入框占位提示（placeholder）
     * @param str : 传入输入框占位提示参数
     * 注：字长需用户自己注意
     */
    setPlaceHolder:function( str ){
        this.com.attr({
            placeHolder: str
        });
    },
    focus:function(){
        var me = this;
        if(me.readOnly){
            $('.pjf_stmtextfield').removeClass('pjf_stmtextfield_focus');
            me.com.addClass('pjf_stmtextfield_focus');
            $('body').bind('click.stmtextfield',function(){
                $('.pjf_stmtextfield').removeClass('pjf_stmtextfield_focus');
                $('body').unbind('click.stmtextfield');
            });
            if(me.params.onFocus){
                me.params.onFocus();
            }
        }else{
            me.com.focus();
        }
    },
    blur:function(){
        var me = this;
        me.com.blur();
    },
    /**
     * 用途：获取一端文字中，光标位置索引（从左到右）
     * @returns {number}
     */
    getCursorPosition:function(){
        var me = this;
        var pos = 0;
        if(document.selection){
            var range = document.selection.createRange();
            range.text = '';
            range.setEndPoint('StartTpStart',me.com[0].createTextRange());
            pos = range.text.length;
        }else{
            pos = me.com[0].selectionStart;
        }
        return pos;
    },
    /**
     * 用途：设定光标位置
     * @param pos ：光标位置索引
     */
    setCursorPosition:function( pos ){
        var me = this;
        if(document.selection){
            var range = document.selection.createRange();
            var textRange = me.com[0].createTextRange();
            textRange.moveStart('character',pos);
            textRange.collapse();
            textRange.select();
        }else{
            me.com[0].setSelectionRange(pos,pos)
        }
    },
    /**
     * 用途：计算新的光标应该出现的位置
     * @param pos  : 获取到的位置
     * @param subValue ：光标之前的字符串
     */
    _adjustCursorPosition:function( pos , subValue ){
        var me = this;
        var e = /\s/g;  //空字符匹配
        var b = 0;      //尾部空格长度
        var postPos;
        var difLength;
        var fixedValue;

        //获取光标左侧最后一个字符是不是空格，
        var lastChar = subValue.substr(subValue.length-1,1);
        if( lastChar == " " ){
            b = 1 ;
        }

        fixedValue = me.fixValue(subValue.replace(e,""));
        difLength = fixedValue.length - subValue.length;

        postPos = pos + difLength + b;
        return postPos;
    },

    destroy:function(){
        clearInterval(this.time);
        this.com.remove();
        PJF.ui.componentMgr.remove(this.id);
        this.com = null;
        this.params = null;
        this.id = null;        
    }
})

PJF.ui.simpleTable = PJF.extend(PJF.ui.component, {
    init:function( conf ){
        this.options = {
            width:600,
            height:400
        };
        $.extend( this.options , conf );
        this._widthCalculate();
        this.createDom();
        this.adjustCss();
        this.bindEvent();
    },

    createDom:function(){
        this._createFrame();
        this._getDOMRefer();
        this._createHead();//填表头内容
        this._createRows();//填表身内容
    },
    _createFrame:function(){
        var htmlFrame = "<div  class='pjf_stmTable_head'>"+
            "<table class='f'  border=0 >"+
            "<thead class='bh'>"+
            "</thead>"+
            "</table>"+
            "</div>"+
            "<div class='pjf_stmTable_body'>"+
            "<table class='f'>"+
            "<tbody>"+
            "</tbody>"+
            "</table>"+
            " </div>";
        this.com.append( htmlFrame );
    },
    _widthCalculate:function(){
        //0，获取可见宽度
        var opts = this.options;
        var cols = opts.column;
        var dCol = cols[ cols.length - 1 ];
        var pRate = parseInt( $('html').css('font-Size') ) / PJF.constants.DEFAULT_FONTSIZE;

        //累积总宽度
        var wTol = 0;
        $.each(dCol,function(a,b){
            if( isNaN(Number(b.width))){
                var title = b.title;
                var len = title.length;
                b.width = len * 24;
            }
            wTol += Number(b.width)
        })

        var num = ( dCol.length - 1 );
        var buf = 17 + num + 2;

        if( wTol < ( opts.width - buf / pRate ) ){
            var wDif = ( opts.width - buf / pRate ) - wTol;
            var aDif = wDif / dCol.length;
            $.each(dCol,function(a,b){
                b.width += aDif ;
            })
        }
    },
    _getDOMRefer:function(){

        this.head = this.com.find(".pjf_stmTable_head");
        this.body = this.com.find(".pjf_stmTable_body");
        this.headContent = this.head.find("thead");
        this.bodyContent = this.body.find("tbody");

    },
    _createHead:function(){
        var me,
            opts,
            cols,
            html;

        me = this;
        opts = this.options;
        cols = opts.column;
        html = [];

        $.each(cols,function(outIndex,colArr){
            var Len  = colArr.length;
            var lastA = ( outIndex == ( cols.length - 1 ) );
            var fistA = ( outIndex == 0 );
            html.push("<tr>");
            $.each(colArr,function(inIndex,colObj){

                var cSpan = colObj.colspan;
                var title = colObj.title;
                var field = colObj.field;
                var wCol = colObj.width;
                var last = ( inIndex == ( Len - 1 ) ) ;

                var clas = "bt br";
                var clasE = "bb";
                if( fistA ){
                    clas = clas.replace("bt","");
                }
                if( last ){
                    clas = clas.replace("br","");
                }
                if( lastA ){
                    clasE = clasE.replace("bb","");
                }

                var tHtml = "<th " +
                    "field='" + field  + "' " +
                    "colspan='" + cSpan + "' class='" + clas + "'>" +
                    "<div style='width:" + ( lastA ? ( wCol / PJF.constants.DEFAULT_FONTSIZE) : "" ) + "rem'>" +
                    title +
                    "</div>" +
                    "</th>" ;
                if( last ){
                    tHtml += "<th class='empty " + clasE + "' style='border-left: none'>" +
                        "<div style='width:17px'></div>" +
                        "</th>";
                }
                html.push( tHtml );
            });
            html.push("</tr>");
        });
        this.headContent.append(html.join())
    },
    _createRows:function(){
        var opts,
            data,   //  传入数据
            html,   //  html片段
            cols;   //  基础col数组

        opts = this.options;

        if($.isPlainObject(opts.data)){
            opts.data = [].concat( opts.data)
        }else if( typeof opts.data == "undefined"){
            opts.data = [];
        }

        html = [];
        data = opts.data;
        cols = opts.column[ opts.column.length - 1 ];

        $.each(data,function(rowIndex,rowObj){
            html.push("<tr rowIndex='" + rowIndex + "'>");
            $.each(cols,function( colIndex , colObj ){
                var last = ( colIndex == ( cols.length - 1 ) );
                var value = rowObj[ colObj[ 'field' ] ];
                var align = colObj[ 'align' ] || "center" ;

                var reglTd = last ? "bb" : "br bb" ;
                var lastTd = "bb";
                var wCol = colObj.width;
                var rowHtml = "<td class='" + reglTd + "'>" +
                    "<div style='padding:0 4px;" +
                    "width:" + ( wCol / PJF.constants.DEFAULT_FONTSIZE) + "rem' " +
                    "align='" + align + "'>" +
                    value +
                    "</div>" +
                    "</td>";
                if( last ){
                    rowHtml += "<th class='empty " + lastTd + "'>" +
                        "<div style='width:17px'></div>" +
                        "</th>";
                }
                html.push( rowHtml );
            });
            html.push("</tr>");
        });
        this.bodyContent.append(html.join())
    },
    _clearTable:function(){
        this.options.data = [];//清理数据
        this.bodyContent.empty();//清理DOM
    },
    adjustCss:function(){
        var me,
            opts,
            fSize,
            wHead,
            pRate,
            wBody;
        me = this;
        opts = this.options;
        fSize = parseInt( $('html').css('font-Size') );
        pRate = fSize / PJF.constants.DEFAULT_FONTSIZE;
        wHead = this.head.height();
        wBody = opts.height * pRate - wHead;

        this.com.css({
            width :opts.width / PJF.constants.DEFAULT_FONTSIZE + 'rem' ,
            height:opts.height / PJF.constants.DEFAULT_FONTSIZE + 'rem'
        });

        this.body.css({
            height:wBody / fSize + 'rem'
        });

        if( PJF.util.deviceType.icm ){
            this.body.addClass("pjf_stmTable_showScroll");
            this.body.find(".empty>div").css({width:'0px'});
        }
    },
    bindEvent:function(){
        var opts;
        var me;
        me = this;
        opts = this.options;
        this.body.off("click").on("click","[rowIndex]",function(){
            var rowIndex = $(this).attr("rowIndex");
            if($.isFunction(opts.onClick)){
                opts.onClick.call(rowIndex,opts.data[rowIndex]);
            }
        })

        //设置滚动同步；
        this.body.off("scroll").on("scroll",function(){
            var scrollLeft = $(this).scrollLeft();
            var scrollWidth = this.scrollWidth;
            var bodyWidth = opts.width;

            if( ( scrollWidth + 16 ) > bodyWidth ){
//                    me.bodyContent.find(".empty").hide();
            }

            me.head.scrollLeft(scrollLeft);
        })
    },
    loadData:function( newData ){
        var opts;
        opts = this.options;

        this._clearTable();
        if($.isPlainObject(newData)){
            opts.data = [].concat(newData)
        }else if($.isArray(newData)){
            opts.data = newData;
        }else{
            alert("传入参数类型必须为数组或对象");
        }

        this._createRows();

        if( PJF.util.deviceType.icm ){
            this.body.find(".empty>div").css({width:'0px'});
        }
    }
})
PJF.apply(PJF.ui.simpleTable.prototype,{
    getClassName:function(){
        return "PJF.ui.simpleTable";
    },
    destroy:function(){
        this.com.remove();
        this.com = null;
        PJF.ui.componentMgr.remove(this.id);
    }
})
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * Author: bianhangying
 * Create on: 2015-11-04
 * 说明:label组件，主要为添加显示文本特定样式
 */

/***
* 该组件提供初始化固定样式的label
* @param conf 初始化配置，详情如下
* <ul>
* <li> doms 渲染组件的目标DOM数组</li>
* <li> values 选填，数组，对应doms使用，需要填入label的值，若不填，即为label标签中的值</li>
* </ul>
*/
PJF.ui.label=PJF.extend(PJF.ui.component,{
	init:function(conf){
		//设置默认值
		this.options = {
            align:"justify",    //默认两端对齐 left right
			separator: ":",
            fontWeight: "bold",     //1.bold(加粗);2.normal(正常); 默认为bold
            onClick:function(){}
		};
		$.extend(this.options, conf);
        //这是针对标签的
        if(this.options.dom){
            this.options.doms = [this.options.dom];
        }
        if(this.options.value){
            this.options.values = [this.options.value];
        }
        //保存下jquery对象，因为在destroy的时候根据dom去销毁，可能导致页面切换的时候同名dom问题
        this.jqComs = [];
        var me = this;
        this.options.doms.reduce(function(map,value,index){
            me.jqComs.push($('#'+value));
        },{})
		//创建html
		this.initHtml();
        this.bindEvent();
	},
    bindEvent:function(){
        var me = this ;
        var doms = me.options.doms ;
        setTimeout(function(){
            $.each( doms ,function( index , dom ){
                $('#' + dom).on('click',function(){
                    if( me.options.onClick instanceof Function ){
                        me.options.onClick.call( this,index );
                    }
                })
            })
        },0);
    },
	//初始化html代码
	initHtml:function(){
		var options = this.options;
        var align = this.options.align ;
        switch( align ){
            case 'justify':
                renderAsJustify();
                break;
            case 'redefined':
                renderAsRedefined();
                break;
            default:
                alert('no such style');
                break;
        }

        //渲染方式1：两端对齐
        function renderAsJustify(){
            //MARK 1 : replaced Function
            $.each( options.doms, function( indexDom , dom ){
                var htmlStr = "" ;
                var width = (options.width/PJF.constants.DEFAULT_FONTSIZE) || 1.2;
                var cnt = width / 0.3;
                var len = options.values[indexDom].length;
                $.each( options.values[indexDom].split(''), function(indexValue , value){
                    if (len > cnt) {
                        var d = len - (len%cnt);
                        var s = len%cnt;
                        if ((indexValue)<d) {
                            htmlStr += "<span class='stm_lable_sub' style='width:" + ( 1 / cnt ) * 100 + "%;'>" +
                                    value +
                                "</span>" ;
                        } else {
                            htmlStr += "<span class='stm_lable_sub stm_lable_remain' style='width:" + ( 1 / s ) * 100 + "%;'>" +
                                    value +
                                "</span>" ;
                        }
                        if (cnt % (indexValue + 1) === 0 && indexValue > 0) {
                            htmlStr += "<br/>"
                        }
                    } else {
                        htmlStr += "<span class='stm_lable_sub' style='width:" + ( 1 / len ) * 100 + "%;'>" +
                                    value +
                                "</span>" ;                        
                    }   
                });
                htmlStr = "<div class='stm_lable "+(options.fontWeight=="normal"?"stm_lable_normal":"")+"' " + ( options.width?"style='width:" + ( options.width/PJF.constants.DEFAULT_FONTSIZE) + "rem;'":"") + ">" +
                                htmlStr +
                           "</div>" +
                            "<span class='stm_lable_sep'>" +
                                options.separator +
                            "</span>";
                $("#" + dom ).append( htmlStr );
                $("#" + dom ).find('.stm_lable_remain').first().css("text-align","left");
                $("#" + dom ).find('.stm_lable_remain').last().css("text-align","right");
            });
        }

        //渲染方式2：自定义
        function renderAsRedefined(){
            $.each( options.doms, function( indexDom , dom ){
                var htmlStr = "" ;
                htmlStr = "<div class='stm_lable "+(options.fontWeight=="normal"?"stm_lable_normal":"")+"' " + ( options.width?"style='" + options.cssStyle +"; width:" + ( options.width/PJF.constants.DEFAULT_FONTSIZE) + "rem;'":"") + ">" +
                        "<span>" +
                            options.values[indexDom] +
                        "</span>" +
                        "</div>" +
                        "<span class='stm_lable_sep'>" +
                            options.separator +
                        "</span>";
                $("#" + dom ).append( htmlStr );
            });
        }
	},
    /**
     * @param obj : [{index:2,value:'新设置的值1'},{index:3,value:'新设置的值2'}]
     *          或 {index:1,value:'新设置的值3'}
     * */
    setValue:function( obj ){
        var me = this ;
        var doms = me.options.doms ;
        var values = me.options.values ;
        if( $.isPlainObject(obj) ){
            obj = [].concat( obj );
        }

        $.each( obj ,function( index ,data ){
            if( values[data.index] ){
                values[data.index] = data.value;
            }
        } );

        $.each(doms,function( index ,data){
            $("#" + data).empty();
        });

        me.initHtml();
    },
    /**
     * @param indexArray : 索引数组 空 ， 1 或者 [ 1 ，2 ，3，4 ]
     *                  空 ：返回全部
     *                  number :对饮索引的值
     *                  【array】:逐个返回
     * */
    getValue:function( indexArray ){
        var me = this;
        var values = me.options.values;
        var result = [];

        indexArray = [].concat( indexArray );

        $.each( values ,function( index ,value ){
            if( indexArray[0] === undefined || $.inArray( index ,indexArray ) > -1 ){
                result.push({
                    key:index,
                    value:value
                });
            }
        })
        return result ;
    }
});
PJF.apply(PJF.ui.label.prototype,{
	destroy:function(){
		/*var options = this.options;
		for(var i=0; i<options.doms.length; i++){
			$("#"+options.doms[i]).children().remove();
		}*/
        for(var i = 0; i < this.jqComs; i++){
            this.jqComs[i].remove();
        }
        PJF.ui.componentMgr.remove(this.id);
	}
});

//MARK 1 : replaced Function
//            for( var i=0; i< options.doms.length; i++){
//                //var htmlStr = "<label class='stm_lable'>"+options.values[i]+" "+options.separator+"</label>";
//                var htmlStr = ""
//                var len = options.values[i].length;
//                for(var j= 0 ; j < len ; j++ ){
//                    htmlStr += "<span class='stm_lable_sub' style='width:"+(1/len)*100+"%;'>" + options.values[i][j] + "</span>" ;
//                }
//                htmlStr = "<div class='stm_lable' "+(options.width?"style='width:"+(options.width/PJF.constants.DEFAULT_FONTSIZE)+"rem;'":"")+">"+htmlStr+"</div><span class='stm_lable_sep'>"+options.separator+"</span>"
//                $("#"+options.doms[i]).append(htmlStr);
//            }
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * Author: shen ye
 * Create on: 2016-04-25
 * Last Updated:
 * 说明:语音识别组件
 */

(function() {
	PJF.ui.voice = PJF.extend(PJF.ui.component, {

		init: function(conf) {
            var _title = PJF.otherInfo.isSelfBank ? "" : ("<div class='pjf-voice-boxTitle'><span style='color: red;'>温馨提示：</span><span class='pjf-voice-boxTitle-span'>{{:title}}</span></div>");
            var msgBoxStr = "<div class='pjf-voice-boxContainer'><div class='pjf-voice-mask'></div><div class='pjf-voice-content'><img class='pjf-voice-content-cancel' src='icon/hp_smartCancel.png'>"+
                _title + "<div class='pjf-voice-boxImg'></div>"+
                "<div class='pjf-voice-boxFooter'>点击麦克风按钮，开始语音输入!</div></div></div>";
            var me = this;
            if (!conf.keepCss) {
                this.com.addClass('pjf-voice')
            }

            var cmdArgs = {
                file : PJF.stm.baseDir + "/identity/yuyin.wav",
                param : "appid=1zh5Gy6J,svc=iatnlp,auf=audio/L16;rate=16000,aue=raw,type=1,uid=660Y5r,url=128.128.98.38:1028,extend_params={\"params\":\"org=stm,token=D2572A0D1,ability=ab_atsnlp,eos=2000\"}"
            };
            if(PJF.constants.ON_PROD)
                $.extend(cmdArgs,{param : "appid=1zh5Gy6J,svc=iatnlp,auf=audio/L16;rate=16000,aue=raw,type=1,uid=660Y5r,url=11.49.186.17:1028,extend_params={\"params\":\"org=stm,token=D2572A0D1,ability=ab_atsnlp,eos=2000\"}"});
			this.com.off('click').on('click', function() {
				//弹出层的父容器
				me.msgBox = $(PJF.html.template(msgBoxStr,{
					title:conf.title
				})).appendTo($('body'));
				me.msgBox.find('.pjf-voice-boxImg').on('click',function(){
                    var result = PJF.communication.IAT.StartTransForm(cmdArgs.param, function(){
                    });
                    var ret = result;
                    if (typeof result === 'string') ret = JSON.parse(result);
                    if(!ret.success){
                        new PJF.ui.errorMessageBox({
                            content: '语音识别失败<br>'+ret.error,
                            buttonConfs: [{
                                style: 'main',
                                name: '确定',
                                width: 200,
                                height: 80,
                                onClick: function () {
                                    me.hideBox();
                                }
                            }]
                        });
                        return;
                    }

                    var loading = new PJF.ui.loading({msg:'语音录入中'});
                    //解析
                    PJF.communication.IAT.StartRecording(cmdArgs.file, function(data) {
                        loading && loading.destroy();
                        console.log('声音解析结果:' + data);
                        var result = typeof(data) == 'string' ? JSON.parse(data) : data;
                        conf.afterRecord && conf.afterRecord(result);
                    });//解析录音
					me.hideBox();
				});
                me.msgBox.find('.pjf-voice-content-cancel').on('click',function(){
                    PJF.communication.IAT.StopRecording(function(data) {
                        console.log('语音停止识别结果:'+data)
                    });
                    conf.cancel && conf.cancel();
                    me.hideBox();
                });
			})
		},

		hideBox:function(){
			if(!this.msgBox)
				return;
			this.msgBox.off('click');
			this.msgBox.remove();
		},

		destroy: function() {
			this.hideBox();
            PJF.ui.componentMgr.remove(this.id);
            this.com.remove();
		}

	})

})();
/**
 * Framework JS Library 1.0
 * Copyright(c) 2013, China Construction Bank.
 * Author: gefenghao
 * Create on: 2013-01-18
 * Last Updated: 
 */
PJF.ui.areaSelector = PJF.extend(PJF.ui.component, {
	init : function(conf) {
		this.options={
			provinceDomId:this.generateId(),
	    	cityDomId:this.generateId(),
	    	countyDomId:this.generateId(), 
	    	cityName:true,
	    	countyName:true,  
	    	nullOption:false,
	    	nullLabel: false,
	    	categoryId:'110256' //默认如果走应用级标准数据，都是在这个分类下
	    };
	    $.extend(this.options,conf);

		var me=this;

		//初始化html
	 	me.initHtml();
		//绑定事件
	 	//me.bindEvents();
	 	//初始化数据
	 	me.initData();
	},
	//初始化html
	initHtml:function(){
		var me = this;

		$("#"+me.options.dom).append('<div class="stm_as_container"></div>');

		var $container = me.com.find('.stm_as_container');
		var options = me.options;
		//生成省的input的框
		var label = options.nullLabel ? '' : '省';
		$container.append("<span id='"+options.provinceDomId+"'></span><span class='stm_as_prelabel'>"+label+"</span>");
		var provinceConf = {
			dom : options.provinceDomId,
			nullOption : options.nullOption,
			textAlign : "center",
			placeholder : options.nullLabel ? '省' : '',
			width : options.width || 160, 
			onChange : function(){
				me.provinceOnChange();
				if(options.provinceOnChange instanceof Function){
					options.provinceOnChange(me.getProvinceValue());
				}
			}
		};
		options.provinceSelect = new PJF.ui.select(provinceConf);
		//生成市的input的框
		if(options.cityName){
			var label = options.nullLabel ? '' : '市';
			$container.append("<span id='"+options.cityDomId+"'></span><span class='stm_as_prelabel'>"+label+"</span>");
			var cityConf = {
				dom : options.cityDomId,
				nullOption : options.nullOption,
				textAlign : "center",
				width : options.width || 160,
				placeholder : options.nullLabel ? '市' : '',
				onChange : function(){
					me.cityOnChange();
					if(options.cityOnChange instanceof Function){
						options.cityOnChange(me.getCityValue());
					}
				}
			};
			options.citySelect = new PJF.ui.select(cityConf);			
		}
		//生成县的input的框
		if(options.countyName){
			var label = options.nullLabel ? '' : '区';
			$container.append("<span id='"+options.countyDomId+"'></span><span class='stm_as_prelabel'>"+label+"</span>");
			var countyConf = {
				dom : options.countyDomId,
				placeholder : options.nullLabel ? '区' : '',
				nullOption : options.nullOption,
				textAlign : "center",
				width : options.width || 160,
				onChange : function(){
					if(options.countyOnChange instanceof Function){
						options.countyOnChange(me.getCountyValue());
					}
				} 
			};
			options.countySelect = new PJF.ui.select(countyConf);			
		}
	},
	//请求省/市/县数据
	sendRequest:function(code){
		var me = this;
		var dataArray = [];
		//企业级标准数据
		if(!this.options.appId){
			PJF.communication.ajax({
		    	url:'\ecpJson?_fw_service_id=getCitys&inData={}&provinceCode='+code,
		    	//url:'areaSelector.json',
		    	type:'get',
		    	dataType:'json',
		  	    async:false,
		    	success:function(data){
		    		dataArray = data; 
		    	},
		    	failure:function(){
					console.log("请求数据失败！");
				}
			});
		}
		//有的应用要自己玩
		else{
			PJF.communication.getStandardCode({
				categoryId: this.options.categoryId,
				appId: this.options.appId,
				clcd: code,
				async: false,
				success: function(data) {
					data.forEach(function(item){
						item.name = item.itemValue;
						item.desc = item.itemName;
					})
					dataArray = data;
				}
			})
		}	

		return dataArray;
	},
	//省的onChange事件
	provinceOnChange:function(){
		var me = this;
		var options = me.options;
		var provinceValue = options.provinceSelect.getValue();
		var provinceText = options.provinceSelect.getText();
		if(provinceValue!=""){
			//根据省的值发交易改变市的值
			//不是直辖市的时候
			//或者应用自己的标准数据
			if(options.appId || (provinceValue!=PJF.constants.AREA_BEIJING&&provinceValue!=PJF.constants.AREA_TIANJING&&provinceValue!=PJF.constants.AREA_SHANGHAI&&provinceValue!=PJF.constants.AREA_CHONGQING)){
			if(options.cityName){
				var data = me.sendRequest(provinceValue);
				options.citySelect.setData(data);
				options.citySelect.setValue("");
				if(options.countyName){
					options.countySelect.setData([]);
					options.countySelect.setValue("");
				}
			}
			}else{
                if(options.cityName){
                    //获取直辖市的值
                    var cityData = [{
                        "name": provinceValue,
                        "desc": provinceText
                    }];
                    options.citySelect.setData(cityData);
				    options.citySelect.setValue("");
				    if(options.countyName){
				    	var countyData = me.sendRequest(provinceValue);
					    options.countySelect.setData(countyData);
					    options.countySelect.setValue("");
				    }     	
                }
			}
		}else{
			if(options.nullOption){
				if(options.cityName){
					options.citySelect.setData([]);
					if(options.countyName){
						options.countySelect.setData([]);
					}
				}
				
			}
		}
	},
	//市的onChange事件
	cityOnChange:function(){
		var me = this;
		var options = me.options;
		var cityValue = options.citySelect.getValue();
		if(cityValue!=""){
			//根据市的值发交易改变县的值
			if(options.countyName){
				var data = me.sendRequest(cityValue);
				options.countySelect.setData(data);
				options.countySelect.setValue("");
			}
		}else{
			if(options.nullOption){
				if(options.countyName){
					options.countySelect.setData([]);
				}	
			}
		}
	},
	//初始化数据
	initData:function(){
		var me = this;
		var options = me.options;

		//获取省的数据
	    var provinceData = me.sendRequest(options.clcd ? options.clcd : '101573');
	    options.provinceSelect.setData(provinceData);
	},
	//获取省的代码值
	getProvinceValue:function(){
		return this.options.provinceSelect.getValue();
	},
	//获取省的文本
	getProvinceText:function(){
		return this.options.provinceSelect.getText();
	},
	//获取市的代码值
	getCityValue:function(){
		return this.options.citySelect.getValue();
	},
	//获取的文本
	getCityText:function(){
		return this.options.citySelect.getText();
	},
	//获取县的值
	getCountyValue:function(){
		return this.options.countySelect.getValue();
	},
		//获取县的信息
	getCountyText:function(){
		return this.options.countySelect.getText();
	},
	//disabed,让area不可选
	disable:function(){
		this.options.provinceSelect.disabled();
		this.options.citySelect.disabled();
		this.options.countySelect.disabled();
	},
	//让area可选
	enable:function(){
		this.options.provinceSelect.enable();
		this.options.citySelect.enable();
		this.options.countySelect.enable();
	},
	readOnly:function(flag){
		this.options.provinceSelect && this.options.provinceSelect.readOnly(flag);
		this.options.citySelect && this.options.citySelect.readOnly(flag);
		this.options.countySelect && this.options.countySelect.readOnly(flag);
	},
	//readonly
	setReadOnly:function(flag){
		if(flag){
		}else{
		}
	},
	//设置省的值
	setProvinceValue:function(val){
		this.options.provinceSelect.setValue(val);
	},
	//设置市的值
	setCityValue:function(val){
		this.provinceOnChange();
		this.options.citySelect.setValue(val);
	},
	setCountyValue:function(val){
		this.cityOnChange();
		this.options.countySelect.setValue(val);
	},
	//根据给定的值设置省市县
	setValue:function(val){	
		var me = this;	
		if(val.length==6){
			var provinceValue = val.substring(0,2)+"0000"; 
			me.options.provinceSelect.setValue(provinceValue);
			if(me.options.cityName){
				me.provinceOnChange();
				var cityValue = val.substring(0,4)+"00";
				//不是直辖市的时候
				if(provinceValue!=PJF.constants.AREA_BEIJING&&provinceValue!=PJF.constants.AREA_TIANJING&&provinceValue!=PJF.constants.AREA_SHANGHAI&&provinceValue!=PJF.constants.AREA_CHONGQING){
					me.options.citySelect.setValue(cityValue);
				}else{
					me.options.citySelect.setValue(provinceValue);
				}
				if(me.options.countyName){
					me.cityOnChange();
					var countyValue = val;
					me.options.countySelect.setValue(val);
				}
			}
		}																																																													
	},
	//获取组件名称
	getClassName:function(){
		return "PJF.ui.areaSelector";
	},
	//销毁
	destroy:function(){
		this.options.provinceSelect.destroy();
		if(this.options.cityName){
			this.options.citySelect.destroy();
		}
		if(this.options.countyName){
			this.options.countySelect.destroy();	
		}
	    this.com.remove();
		PJF.ui.componentMgr.remove(this.id);
		this.com = null;
		this.params = null;
		this.id = null;	
	}
});
PJF.apply(PJF.ui.areaSelector.prototype,{ 
});


/**
 * Framework JS Library 1.0
 * Copyright(c) 2013, China Construction Bank.
 * Author: bianhangying
 * Create on: 2015-06-01
 * Last Updated: 
 */
PJF.ui.select = PJF.extend(PJF.ui.component, {
	init : function(conf) {
		this.options={
			baseFontSize: 30,
			width: 240,		//组件宽度
			initLabel:null,	//初始化显示的标签
			prefix: false, //默认lable的位置为后缀
			placeholder: "",  //默认的显示内容
			resizeFontSize: true,   //是否根据字体长度，动态计算字体大小，默认为是
			inputId:this.generateId(),
			selectId:this.generateId(),
			textAlign: 'left',
			optionAlign: 'center',	//选项的文字位置，默认为居中
			showUp: false,
			multiple: false,
			timeoutId:null,
			onChange:null,
			containerId:this.generateId()
		};
		$.extend(this.options,conf);
		this.options.multiple && !conf.optionAlign && (this.options.optionAlign = 'left');

		var me = this;

		//初始化html
	 	me.initHtml();
	 	//初始化样式
	 	me.initCss();
	 	//初始化数据
	 	me.initData();
	 	//绑定事件
	 	me.bindEvents();
	},
	//autoComplete
	autoComplete:function(){
		var me = this;

		var $input =  this.com.find('.stm_select_input');
		//可编辑
		$input.removeAttr("readonly");

		if(me.options.autoComplete && !me.options.fnAjax){
			window.clearInterval(me.intervalId); 
			me.intervalId = window.setInterval(function(){
				//console.log("autoComplete setInterval");
				var value = $input.val().trim();
				if(me.preValue!=value){
					//console.log("autoComplete onKeyPress");
					me.onKeyPress();
					me.preValue = value;	
					//window.clearInterval(me.intervalId); 
				}
			},300);
		}

		if(me.options.fnAjax instanceof Function){
			window.clearInterval(me.intervalId); 
			me.intervalId = window.setInterval(function(){
				//console.log("fnAjax setInterval");
				var value = $input.val().trim();
				if(me.preValue!=value){
					//console.log("fnAjax fnAjax");
					me.options.fnAjax(value);
					me.preValue = value;
					//window.clearInterval(me.intervalId); 
				}
			},300);
		}

	},
	triggerKeyup:function(){
		var $input =  this.com.find('.stm_select_input');
		$input.trigger("keyup");
	},
	onKeyPress:function(){
		var me = this;

		var $input = this.com.find('.stm_select_input');	//获取输入框
		var value = $input.val().trim();	//输入框的值
		var showData = [];
		var data = me.data;

		if(value === ""){
			showData = data;
		}else{
			for(var i=0; i<data.length; i++){
				if (data[i].desc.toLowerCase().indexOf(value, 0) >= 0) {
					showData.push(data[i]);
				}
			}
		}

		//先隐藏删了重画再显示--感觉会被卡死的--后面优化
		//隐藏
		me.hideDiv();
		//删除原数据，添加新数据
		var $selectId = $("#"+me.options.selectId);
    	$selectId.find("option").remove();
    	$selectId.append(me.formatter(showData));
    	//显示
    	me.addDiv(me.options.selectId,me.options.inputId,me.options.containerId);
		
	},
	//初始化html
	initHtml:function(){
		var options = this.options;
	    var htmlStr = '<div class="stm_select_root"><div class="stm_select_container">';
	    // if(options.label){
	    // 	htmlStr += '<label class="pjf_label">'+options.label+'：</label>';
	    // }
	    htmlStr += '<input placeholder="'+options.placeholder+'" readonly="readonly"   id="'+options.inputId+'" class="stm_select_input stm_select_input_'+options.textAlign+'"/><select style="display:none"  id="'+options.selectId+'"></select>';
	    //初始化时select框内显示的标签(如：年  月  日)
	    if(options.initLabel){
	    	htmlStr += '<div class="stm_select_initLable">'+options.initLabel+'</div>';
	    }
	    htmlStr += '</div></div>';
	    $("#"+options.dom).append(htmlStr);
	},
	//初始化样式
	initCss:function(){
		var me = this;
		var options = me.options;

        //获取DOM引用
		var $container =  this.com.find('.stm_select_container');
        var $initLabel = this.com.find('.stm_select_initLable');
		var $input =  this.com.find('.stm_select_input');

        //设置组件外框宽度
		$container.css({
			'width': options.width / PJF.constants.DEFAULT_FONTSIZE + 'rem'
        });

		//根据initLabel的长度计算input的margin位置
		if ( options.initLabel ){ //带有说明文字的下拉框

			var initLabelWidth = $initLabel.eq(0).width();

			if(options.prefix){ //如果是前导文字
                $initLabel.css({
					'left': '0.1rem'
				});
				$input.css({
					'padding-left': ( initLabelWidth + 15 )/PJF.constants.DEFAULT_FONTSIZE	 + 'rem' //rem 为 文字 两侧缓冲距离
				});
			}else{              //如果是后缀文字
				$input.css({
					'padding-right': ( initLabelWidth + 15 )/PJF.constants.DEFAULT_FONTSIZE + 'rem'
				});				
			}
		}else{		 //不带有说明文字的下拉框

            var _autoWidth = 35, // autoComplete 右侧补白宽度 px
                _arroWidth = 25; // 非autoComplete 右侧补白宽度 px

            var _autoLeft = ( options.width - _autoWidth ) / PJF.constants.DEFAULT_FONTSIZE  , //rem
                _arroLeft = ( options.width - _arroWidth ) / PJF.constants.DEFAULT_FONTSIZE  ; //rem

            var _autoPRight = _autoWidth  / PJF.constants.DEFAULT_FONTSIZE, //rem
                _arroPRight = _arroWidth  / PJF.constants.DEFAULT_FONTSIZE; //rem


			if( options.autoComplete === true ){ //如果是放大镜图标
			    $input.addClass("stm_select_input_bg_auto").css({
				    'padding-right': _autoPRight + 'rem',
				    'background-position' : _autoLeft + 'rem center'
			    });
			}else{                              //如果是上下箭头图标
			    $input.addClass("stm_select_input_bg").css({
				    'padding-right': _arroPRight + 'rem',
				    'background-position' : _arroLeft + 'rem center'
			    });
		    }
		}	

		//解决ytd出现的键盘两次才能切换中文的问题
		if(me.options.autoComplete || me.options.fnAjax){
			$input.removeAttr("readonly");
		}
		if (me.options.multiple) {
			$input.attr("readonly", "readonly");
		}
	},
	//初始化数据
	initData:function(){
		var me = this;

		if(me.options.url){
			//成功的回调函数
			var fnSuccess = function(data){
		    	me.setData(data);
			};
			//失败的回调函数--省
			var fnFailure = function(){
				// me.showErrorMsg();	
			}
			//获取数据
		    me.sendRequest("101573",fnSuccess,fnFailure);	
		}else if(me.options.data){
			me.setData(me.options.data);
		}else{
			me.setData([]);
		}

		//如果有initLabel显示initLabel(值为空)，没有则显示第一项
	    if(!me.options.initLabel && !me.options.multiple){
	    	var value = $("#"+me.options.selectId).find("option").eq(0).val();
	    	value = value?value:"";
	    	me.setValue(value);
	    }

        //设置nullOption的值
        if(me.options.nullOption){
        	me.setValue("");
        }
	    //默认选中的值
		if(this.options.defaultValue){
		   me.setValue(this.options.defaultValue);
		}
	},
	//绑定事件
	bindEvents:function(){
		var me = this;

		$("#"+this.options.inputId).unbind("focus").bind("focus",function(){
			// me.options.clickInputId = me.options.inputId;
			//添加键盘 -- begin
			if(me.options.autoComplete || (me.options.fnAjax instanceof Function) && PJF.communication.isInClient()){
				PJF.util.openKeyboard(me.options.hmode);	
       		}
			//添加键盘 -- end
			me.addDiv(me.options.selectId,me.options.inputId,me.options.containerId);
			if(me.options.onFocus instanceof Function){
				me.options.onFocus();
			}
		}).unbind("blur").bind("blur",function(e,flag){
			//非ICM的情况下，绑定blur事件 --- by bhy 2015-12-29
			if(PJF.otherInfo.typeInfo != PJF.constants.ICM_NAME){
				console.log("blur===========================");
				if(flag !== true){
					console.log("blur==========+hideDiv=================");
					me.hideDiv();
					me.validated();
				}
			}
			//添加键盘 -- begin
			if(me.options.autoComplete || (me.options.fnAjax instanceof Function) && PJF.communication.isInClient()){
				PJF.util.closeKeyboard();
        	}
        	//添加键盘 -- end
		}).unbind("change").bind("change",function(){
			if(me.options.onChange instanceof Function){
				me.options.onChange();
			}
		});

		//如果设置了initLabel，也要绑定点击事件---以免点击到字的时候没有什么反应
		if(this.options.initLabel){
			this.com.find('.stm_select_initLable').unbind("click").bind("click",function(){
				$("#"+me.options.inputId).trigger('focus');
			});	
		}	
	},
	//取消绑定事件
	unbindEvents:function(){
		var me = this;
		$("#"+this.options.inputId).unbind("focus").unbind("blur").unbind("change");
		if(this.options.initLabel){
			this.com.find('.stm_select_initLable').unbind("click");
		}
	},
	unbindBlurEvent:function(){
		console.log("unbindBlurEvent===========================");
		var me = this;
		var doms = me.options.doms;
		if(me.options.selType == "date"){
			for(var i=0; i<doms.length; i++){
				var select = PJF.ui.componentMgr.get($("#"+doms[i]).attr("componentid"));
				$("#"+select.options.inputId).unbind("blur");
			}				
		}else{
			$("#"+this.options.inputId).unbind("blur");
		}
		
	},	
	bindBlurEvent:function(){
		console.log("bindBlurEvent===========================");
		var me = this;
		var doms = me.options.doms;
		$("#"+this.options.inputId).unbind("blur").bind("blur",function(e,flag){
			console.log("new + blur===========================");
			if(flag !== true){
				console.log("new + blur============+hideDiv===============");
				if(me.options.selType == "date"){
					//隐藏所有的select div
					for(var i=0; i<doms.length; i++){
						var select = PJF.ui.componentMgr.get($("#"+doms[i]).attr("componentid"));
						select.hideDiv();
					}	
				}else{
					me.hideDiv();
					me.validated();
				}				
			}

			// //添加键盘 -- begin
			// if(me.options.autoComplete || (me.options.fnAjax instanceof Function)){
			// 	try{
			// 		var penConnector = document.getElementById("penConnector");
	  //       		penConnector.SendMessage("close");
	  //       	}catch(e){
	  //       		console.log('调用输入法出错')
	  //       	}
   //      	}
   //      	//添加键盘 -- end
        	

        	//添加键盘 -- begin
			if(me.options.autoComplete || (me.options.fnAjax instanceof Function) && PJF.communication.isInClient()){
				PJF.util.closeKeyboard();  
        	}
        	//添加键盘 -- end

		});
	},
	//显示错误信息
	showErrorMsg:function(){
	},
	//请求省/市/县数据
	sendRequest:function(code, fnSuccess, fnFailure){
		var me = this;
		PJF.communication.ajax({
	    	url:me.options.url,
	    	type:'get',
	    	dataType:'json',
	  	    async:false,
	    	success:function(data){
	    		me.data = data;
	    	    //执行成功回调函数
	    		if(fnSuccess instanceof Function){
	    			fnSuccess(data);
	    		}
	    	},failure:function(){
	    	    //执行失败回调函数
	    		if(fnFailure instanceof Function){
	    			fnFailure();
	    		}
			}
		});
	},
	hideDiv:function(){
		window.clearInterval(this.intervalId);
		$("#"+this.options.containerId).remove();
	},
	addDiv:function(id,inputId,containerId){

		var me = this;

		//触发autoComplete||fnAjax
	 	if(me.options.autoComplete || (me.options.fnAjax instanceof Function)){
	 		me.autoComplete();
	 	}

		var offset = $("#"+inputId).offset();
		var disable= $("#"+inputId).attr("disabled");
		var readonly=$("#"+inputId).hasClass("pjf_readonly_input");

		if(disable||readonly){
			return ;
		}

		$("#"+containerId).remove();
		// $(".area_ctrlarea").remove();
		//拼装下拉选项
		//非ICM的情况下，都隐藏滚动条 --- by bhy 2015-12-29
		var optsHtml="<div id="+containerId+" class='area_ctrlarea'><div class='area_negative"+(PJF.otherInfo.typeInfo == PJF.constants.ICM_NAME ? "" : " area_negative_noScroll")+(me.options.multiple ? " multiple" : "")+"'><ul class='area_div"+(me.options.optionAlign=="left"?" alignLeft":"")+"'>";

		var selectedIndex=0;
		var fontSize = 0;
		$("#"+id).find("option").each(function(i){
			var val=$(this).attr("value");
			var text=$(this).text();
			if(me.options.selType == "date" || !me.options.resizeFontSize){
				if($(this).attr("data-selected") == "data-selected"){
					optsHtml+="<li data-value='"+val+"' class='areaSelected'";
					selectedIndex=i;
				}else{
					optsHtml+="<li data-value='"+val+"'";
				}
			}else{
				//根据宽度计算字体大小
				var numLen = text.match(/[1-9a-zA-Z]/g) || [];
				var len=(text.length - numLen.length) * 2 + numLen.length;
				fontSize = parseInt((me.options.width * 2 -30)/len);
				fontSize = fontSize>me.options.baseFontSize?me.options.baseFontSize:fontSize;
				fontSize = fontSize/PJF.constants.DEFAULT_FONTSIZE;	//rem
				if($(this).attr("data-selected") == "data-selected"){
					optsHtml+="<li data-value='"+val+"' style='font-size:"+fontSize+"rem;' class='areaSelected'";
					selectedIndex=i;
				}else{
					optsHtml+="<li data-value='"+val+"' style='font-size:"+fontSize*0.9+"rem;'";
				}				
			}
			
			optsHtml+='>'+text+"</li>";
		});
	
		optsHtml+="</ul></div></div>";
		me.options.showToBody ? $(optsHtml).appendTo($('body')) : $(optsHtml).appendTo(me.com.find(".stm_select_root"));

		//为li绑定点击事件
		$('#'+containerId).find(".area_div li").unbind("click").bind("click",function(){
			console.log("===============click:"+$(this).text());
			var value = $(this).attr("data-value");
			//autoComplete||fnAjax
		 	if(me.options.autoComplete || (me.options.fnAjax instanceof Function)){
		 		window.clearInterval(me.intervalId);
		 	}
			if (me.options.multiple) {
				if ($(this).hasClass("areaSelected")) {
					$(this).removeClass("areaSelected")
					$(this).css("font-size", (fontSize*0.9) + 'rem');
					me.setValue(value, false, true);
				} else {
					$(this).addClass("areaSelected");
					$(this).css("font-size", fontSize + 'rem');
					me.setValue(value);
				}
			} else {
				me.setValue(value);
			}
	   		//非ICM的情况下，绑定blur事件 --- by bhy 2015-12-29
			if(PJF.otherInfo.typeInfo != PJF.constants.ICM_NAME){
				me.bindBlurEvent();
			}else{
				if(me.options.selType == "date"){
					var doms = me.options.doms;
					//隐藏所有的select div
					for(var i=0; i<doms.length; i++){
						var select = PJF.ui.componentMgr.get($("#"+doms[i]).attr("componentid"));
						select.hideDiv();
					}	
				}else{
					me.hideDiv();
				}
			}
			if (me.options.multiple) {
				$("#"+inputId).trigger("change");
				return;
			}
	   		if(me.options.selType == "date"){		//日期组件专用
	   			$("#"+inputId).trigger("change");
	   			//非ICM的情况下，触发focus事件 --- by bhy 2015-12-29
	   			if(PJF.otherInfo.typeInfo != PJF.constants.ICM_NAME){
	   				$("#"+inputId).trigger("blur").trigger("focus");
	   			}else{
	   				$("#"+inputId).trigger("blur");
	   			}
	   		}else{
	   			$("#"+inputId).trigger("change");
	   			$("#"+inputId).trigger("blur");	
	   		}

		});

		//选项展示div的宽度
		$('#'+containerId).css({
			'width': me.options.width / PJF.constants.DEFAULT_FONTSIZE + 'rem'
		});
		var optionLen = $("#"+id).find("option").length;
		if(optionLen>=5){
			$('#'+containerId).find('.area_negative').css({
				'height': 248/ PJF.constants.DEFAULT_FONTSIZE + 'rem'
			});			
		}
		if (me.options.showToBody) {
			var stop = $("#"+inputId)[0].getBoundingClientRect().top + $("#"+inputId).height() + 1;
			var sleft = $("#"+inputId)[0].getBoundingClientRect().left;
			var selectHeight = $('#'+containerId).height();
			var winHeight = $(window).height();
			if (winHeight - stop > selectHeight) {
				$('#'+containerId).css({
					'top': stop,
					'left':sleft
				});
			} else {
				var stop = $("#"+inputId)[0].getBoundingClientRect().top - selectHeight - 1;
				$('#'+containerId).css({
					'top': stop,
					'left':sleft
				});
			}
		}

		if (me.options.showUp) {
			var selectHeight = $('#'+containerId).height();
			$('#'+containerId).css({
				'top': '-'+ selectHeight + 'px'
			});
		}

		if (me.options.areaZIndex) {
			$('#'+containerId).css('z-index', me.options.areaZIndex)
		}

		//将optsHtml定位到inputId所在位置
		// $("#"+containerId).offset({
		// 	"top":(offset.top + $("#" +inputId).innerHeight()+2),
		// 	"left":offset.left
		// });
		//设置滚动条的位置
		//$("#"+containerId).find(".area_negative").scrollTop(selectedIndex*50);

		//绑定事件
		//非ICM下才绑定事件 --- by bhy 2015-12-29
		if(PJF.otherInfo.typeInfo != PJF.constants.ICM_NAME){
			$('#'+containerId).find(".area_div").attr('tabIndex','-1').unbind("mousedown").bind('mousedown',function(e){
				console.log("mousedown===========================");
				me.unbindBlurEvent();
			}).unbind("mouseleave").bind('mouseleave',function(e){
				console.log("mouseout===========================");
				// setTimeout(function(){
				// 	console.log("**************enter timeout*****************");
				// 	me.bindBlurEvent();
				// },1000);
				$("#"+me.options.inputId).trigger("blur", me.options.multiple ? false : true);
				console.log("******************trigger blur finished********************");
				me.bindBlurEvent();
			}).unbind("blur").bind('blur',function(e){
				console.log("add blur-------------------------");
				if(me.com.find('.stm_select_root').find($(document.activeElement)).length > 0){
					return;
				}
				me.hideDiv();
			});	
		}
	},
	formatter:function(data){
		var optionHmtl="";
		for(var i=0; i<data.length; i++){
			optionHmtl+="<option value='"+data[i].name+"'>"+data[i].desc+"</option>";
		}
		return optionHmtl;
	},
	getValue:function(){
		var $selectId = $("#"+this.options.selectId);
		var inputValue = $("#"+this.options.inputId).val();
		//输入为空值则返回空
		if(inputValue === ""){
			return "";
		}else{
			if (this.options.multiple) {
				var d = new Array();
				$selectId.find("option[data-selected]").each(
					function() {
						var val = $(this).val();
						if (val) {
							d.push(val);
						}
				});
				return d;
			} else {
				//问题1：没选的时候，默认返回第一个值！！！
				var value = $selectId.find("option[data-selected]").val();
				return value ? value : "";
			}
		}
		//问题1：没选的时候，默认返回第一个值！！！
	},
	getText:function(){
		var inputValue = $("#"+this.options.inputId).val();
		return inputValue;
	},
	setText:function(text){
		$("#"+this.options.inputId).val(text);
	},
	//设置值
	setValue:function(val, isTriggerChange, isUnCheck){
		var me = this;
		var $inputId = $("#"+me.options.inputId);
		var $selectId = $("#"+me.options.selectId);

		//根据宽度计算字体大小
		var len=1;

		//autocomplete的特殊处理
		if(me.options.autoComplete && !me.options.fnAjax){
			//隐藏
			me.hideDiv();
			//删除原数据，添加新数据
			var $selectId = $("#"+me.options.selectId);
	    	$selectId.find("option").remove();
	    	$selectId.append(me.formatter(me.data));			
		}
		if ($.isArray(val) && me.options.multiple) {
			var value = val;
			$selectId.find("option").each(function(){
				if(!$(this).val){
					$(this).removeAttr("data-selected");
				}
			});
			for(var i in value){
				value[i] && $('#'+me.options.selectId+" option[value="+value[i]+"]").attr("data-selected","data-selected");
			}
		} else {
			if (!me.options.multiple) {
				$selectId.find("option").each(function(){
					$(this).removeAttr("data-selected");
				});
			}
			$selectId.find("option").each(function(){
				if($(this).val()==val){
					if (!isUnCheck) {
						me.preValue = $(this).text();
						$(this).attr("data-selected","data-selected");
						var text  = $(this).text();
						var numLen = text.match(/[1-9a-zA-Z]/g) || [];
						len=(text.length - numLen.length) * 2 + numLen.length;
					} else {
						$(this).removeAttr("data-selected");
					}
					return false;
				}
			});
		}
		var result=[];
		$selectId.find("option[data-selected='data-selected']").each(function() {
			if($(this).val()!=""&&($(this).val())!=undefined){
				result.push($(this).text())
			}
			
		});
		if(result.length>0){
			$inputId.val(result.toString());
		}else{
			$inputId.val($selectId.find("option[data-selected]").eq(0).text());
		}
		//空值则显示空
		if(val === "" && !me.options.nullOption){
			$inputId.val("");
			//显示initLabel
			if(me.options.initLabel && me.options.hideLabelForNull){
				var $initLabel = me.com.find('.stm_select_initLable');
				var initLabelWidth = $initLabel.eq(0).width();
                $initLabel.css({
					'display': 'block'
				});
				$inputId.css({
					'padding-right': (initLabelWidth+15)/PJF.constants.DEFAULT_FONTSIZE + 'rem'
				});
			}	
		}else{
		    if(me.options.initLabel && me.options.hideLabelForNull){
				var $initLabel = me.com.find('.stm_select_initLable');
                $initLabel.css({
					'display': 'none'
				});
				$("#"+this.options.inputId).css({
					'padding-right': '0.05rem'
				});
			}			
		}

		if(me.options.selType == "date"){		//日期组件专用，这样来触发联动操作
	   		$("#"+me.options.inputId).trigger("change");
	   		
	   	}
	   	if (isTriggerChange) {
	   		$("#"+me.options.inputId).trigger("change");
	   	}

		//根据宽度计算字体大小
		var fontSize = parseInt((me.options.width * 2-40)/len);
		fontSize = fontSize>me.options.baseFontSize?me.options.baseFontSize:fontSize;
		fontSize = fontSize/PJF.constants.DEFAULT_FONTSIZE;
		if(me.options.selType != "date" && me.options.resizeFontSize){	//日期控件不考虑
			//设置input框的fontSize
			$inputId.css({'font-size':fontSize*0.9+"rem"});
		}
	},
	//设置数据--会清空原数据
	setData:function(data){
		var me = this;
		var $selectId = $("#"+me.options.selectId);
		var $containerId = $("#"+me.options.containerId);
        me.data = data;
    	//移除原有数据，并添加新数据
    	$selectId.find("option").remove();
    	$selectId.append(me.formatter(data));
    	if(me.options.nullOption){
    		$selectId.prepend("<option value=''>"+(me.options.nullOptionText || PJF.i18n.getI18nResource('pjfCommon.selectNull'))+"</option>");
    		me.select(0);
    	}

    	//如果下拉div已显示则重绘下拉div，把值置空
    	if($containerId.length > 0 && me.options.selType!="date"){
			me.hideDiv();
			me.addDiv(me.options.selectId,me.options.inputId,me.options.containerId);
			//me.setValue("");
		}else{
			//me.setValue("");
		}
	},
	getData:function(){
		return this.data;
	},
	select:function(index){
		var me = this;
		var $selectId = $("#"+me.options.selectId);
		var value = $selectId.find("option").eq(index).val();
		me.setValue(value);
	},
	readOnly:function(flag){
		var me = this;
		var $container =  this.com.find('.stm_select_container');
		var $input =  this.com.find('.stm_select_input');
		
		if(flag){
			$input.attr("readonly", "readonly");
			me.overlayer = $('<div class="pjf_stmtextfield_overlayer"></div>');
			me.overlayer.bind('click',function(e){
				me.overlayer.focus();
				return false;
			});
			$container.append(me.overlayer);
		}else{
			$input.removeAttr("readonly");
			$container.find(".pjf_stmtextfield_overlayer").remove();
		}
	},
	validated: function() {
        var me = this;
        var options = me.options;
        var value = me.getValue();
        var $container = me.com.find('.stm_select_root');
        var $input = me.com.find('.stm_select_container');
        var $tip = me.com.find('.pjf_stmtextfield_msg');

        if (options.required === true) {
            $tip.remove();
            if(value==""){
            	var required = PJF.i18n.getI18nResource('pjfI18n.selectRequired');
                $('<span class="pjf_stmtextfield_msg">'+required+'</span>').appendTo($container);
                $input.addClass("pjf_stmtextfield_error");
                $container.find('.pjf_stmtextfield_msg').css({'top': $input.height()});
                return required;
            } else {
                $input.removeClass("pjf_stmtextfield_error");
            }
        }
	},
	disabled:function(){
		var $inputId = $("#"+this.options.inputId);
		$inputId.attr("disabled","disabled");
	},
	enable:function(){
		var $inputId = $("#"+this.options.inputId);
		$inputId.removeAttr("disabled");
	},
	show:function(){
		this.com.css({"display":"inline-block"});
	},
	hide:function(){
		this.com.css({"display":"none"});
	}
});
PJF.apply(PJF.ui.select.prototype,{ 
	//获取组件名称
	getClassName:function(){
		return "PJF.ui.select";
	},
	destroy:function(){
		//显示下拉选项框删除
		$("#"+this.options.containerId).remove();
		this.com.remove();
		PJF.ui.componentMgr.remove(this.id);
		window.clearInterval(this.intervalId);
		this.com = null;
		this.params = null;
		this.id = null;	
	}
});


PJF.ui.process=PJF.extend(PJF.ui.component,{
    init:function(conf){
        this.options={
        }
        $.extend(this.options,conf)
        var options=this.options;
        this.com.addClass('stm-process')
        var htmlStr=this.initHtml();
        if(options.dom){
            this.com.append(htmlStr);
        }

        this.adjustCsstyle();

    },

    /**
     * 调整样式
     */
    adjustCsstyle:function(){
        var data = this.options.data;
        //设置连接线的宽度
        this.com.find('li').css({
            width:(100/(data.length-1)-0.5)+'%'
        })
        //设置文字区宽度
        var unitWidth = this.com.find('li.stepBridge').width();
        var iconWidth = this.com.find('div.stepIco').width();
        this.com.find('.stepText').css({
            width : unitWidth/PJF.constants.DEFAULT_FONTSIZE + 'rem',
            marginLeft : -( unitWidth - iconWidth ) / ( 2 * PJF.constants.DEFAULT_FONTSIZE ) + 'rem'
        });
        //设置默认第一个样式
        this.com.find('.stepIco:first').addClass('doingIcon').children().addClass('doing');
    },

    /**
     * 初始化dom结构
     * @returns {string}
     */
    initHtml:function(){
        var data = this.options.data;
        console.log(data)

        var htmlDom=[];
        htmlDom.push('<div class="stepInfo">')
        htmlDom.push('<ul>')
        for(var j in data){
            if(j==data.length-1){
                break;
            }
            htmlDom.push('<li class="stepBridge"></li>')
        }
        htmlDom.push('</ul>');
        var left=0
        var average=(690/(data.length-1));
        for(var i  in  data){
            htmlDom.push('<div><div style="top:-0.07rem;left:'+parseInt(left-5)/PJF.constants.DEFAULT_FONTSIZE+"rem"+ '" class="stepIco stepIco'+(parseInt(i)+1)+'"><div class="stepText">'+ data[i]+'</div></div></div>');
            left=left+average;
        }
        htmlDom.push('</div>')
        return htmlDom.join('')
    }
})

PJF.apply(PJF.ui.process.prototype,{

    getClassName:function(){
        return 'PJF.ui.process';
    },

    /***
     * 设置id为执行中
     * @param id 目标id。
     */
    setDoing : function(id){
        this.com.find('div.stepIco').each( function(index){
            if( id > (index+1)){
                $(this).removeClass('doingIcon').addClass('done');
                $(this).children().removeClass('doing').addClass('done');
            }else if(id<(index+1)){
                $(this).removeClass('doingIcon done')
                $(this).children().removeClass('doing').removeClass("done")
            }else{
                $(this).removeClass('done').addClass('doingIcon');
                $(this).children().removeClass('done').addClass('doing');
            }
        });

        this.com.find('li.stepBridge').each(function(index){
            if( id > (index + 1) ){
                $(this).addClass('done');
            }else{
                $(this).removeClass('done');
            }
        })
    },
    destroy:function(){
        this.com.remove();
        PJF.ui.componentMgr.remove(this.id);
    }
})

/**
 * Framework JS Library 1.0
 * Copyright(c) 2015, China Construction Bank.
 * Author: WangSheng.chou
 * Create on: 2015-11-02
 * Last Updated:
 */


PJF.ui.pie = PJF.extend(PJF.ui.component, {
  init: function (conf) {
    var me = this;
    this.colorStore = [ //20个
      '#e40002', '#48bd33', '#3366cc', '#cc6633',
      '#999933', '#996699', '#3399cc', '#cc9933',
      '#9999cc', '#8cb469', '#65666d', '#fab042',
      '#91abbc', '#1edefd', '#e0f080', '#c9daff',
      '#b49369', '#8e97b3', '#87fdff', '#cc9999'
    ];
    this.options = {
      // ---- 预置参数 ----

      // ---- 全局参数 ----
      size: { //绘图区域大小
        w: null,
        h: null
      },
      precision: 1,
      scaleRate: 1, //像素压缩比
      scanStep: Math.PI / 1440, //仅用于类圆 ，角度扫描步进
      initAngle: Math.PI / 6 //仅用于类圆 ，扫描初始角度
    };
    $.extend(this.options, conf);

    this.trimData(); // ---NAN : 是否覆盖
    this.scalePixel(); // ---像素压缩，用于适应rem随分辨率变化
    this.createDom(); // ---确定画图区域canvas
    this.drawWhat(); // ---画图
    this.bindEvent(); // ---事件绑定
  },
  /**
   * 用途 ：解决canvas 只能对像素操作问题，将像素等比压缩，可以适应rem问题
   * */
  scalePixel: function () {
    var me = this;
    // scaleRate 计算压缩比例
    var scaleRate = me.options.scaleRate = parseFloat($('html').css('fontSize')) / 100;
    // ringParams 待压缩参数
    var ringParams = me.options;

    /**
     * 用途：对象参数压缩
     * @param obj {...}: 待压缩对象
     * @param exception ：非压缩项目
     * @param scaleRate ：压缩比例
     * */
    var convertScale = function (obj, exception, scaleRate) {
      for (var i in obj) {
        if (typeof obj[i] === "number" && exception.indexOf(i) == -1) {
          obj[i] = obj[i] * scaleRate;
        } else if ($.isPlainObject(obj[i])) {
          convertScale(obj[i], exception, scaleRate)
        }
      }
    }
    convertScale(ringParams, ["tipRowNum", "precision"], scaleRate);
  },
  /**
   * 用途:在目标DOM创建一个canvas并填满区域
   * 注：暂时仅考虑一个canvas，不作图片缓存
   * */
  createDom: function () {
    var opts = this.options;
    var size = this.options.size = {
      w: opts.width || this.com.width(),
      h: opts.height || this.com.height()
    };

    this.com.html("<canvas" +
      " width = " + size.w +
      " height = " + size.h +
      ">" +
      "</canvas>");

    this.canvas = this.com.find('canvas');
    this.pen = this.canvas[0].getContext('2d');

  },
  /**
   * instruction：initialize the parameters
   * temporarily only check whether the dom exists or not
   * */
  trimData: function () {
    //TODO
  },
  /**
   * 用途：画图入口，保持扩展其他图形可扩展
   * @param touch : 触摸坐标 ，用以点击事件
   * */
  drawWhat: function (touch) {
    this.options.type = 'ring'; //暂时写死
    try {
      this['draw_' + this.options.type](touch);
    } catch (e) {
      alert(e.message);
    }
  },
  /**
   * 用途：绑定事件处理
   * */
  bindEvent: function () {
    var me = this;

    me.canvas.on('mousedown', function (event) {

      var position = getPosition(event); //获取点击点

      me._clearAll(); //清空可是区域

      me.drawWhat(position); //重新绘制图片,此图片为highLight 色
    });


    /**
     * 用途：获取当前鼠标位置相对canvas（0，0）的坐标
     * @param event ：事件源 （mouse事件，模拟touchu ）
     * */
    function getPosition(event) {
      //绑定元素的位置
      var offset = me.canvas.offset();
      return {
        x: event.clientX - offset.left,
        y: event.clientY - offset.top
      }
    }
  },
  /******************以下为综合画图*******************/
  /***
   * 用途 : 画一个环形/饼形/椭圆形图表
   * @param touch : 传入触摸点坐标
   * callBack 。。。。
   * */
  draw_ring: function (touch, callBack) {
    var me = this;
    var config = me.options.ringParams;

    var radius = config.radius;
    var position = config.ringCenter;
    var innerRadius = config.innerRadius || 0;
    //KEY0 组装参数到数据单元
    this.$_assembleRingData(config.ringData);

    //KEY1 : 画饼图
    this._drawCombinePiece(config.ringData, position, radius, innerRadius, touch);

    //KEY2 ： 画说明文字
    this._drawTipsNSquare(touch);

    //KEY3 : 画个title
    if (config.showTitle) {
      this._drawTitle();
    }

  },


  /************************************************以下为组合画图(前导符号‘_’)********************************************/
  /**
   * 用途 ： 画一个联合的披萨饼
   * @parameter arrayData Array[]: 数据源
   * @parameter position Object{}：中心点
   * @parameter radius ：外圆半径
   * @parameter innerRadius ：内圆半径
   * @parameter touch ：传入触摸点
   * */
  _drawCombinePiece: function (arrayData, position, radius, innerRadius, touch) {
    var me = this;
    var pen = me.pen;
    var startAngle = this.options.initAngle;
    $.each(arrayData, function (index, data) {
      me.__drawPiece(
        position,
        radius,
        innerRadius, {
          fillColor: data.color
        },
        startAngle,
        data.angle
      );

      //#$# 在此判断是否有事件 和 坐标
      if (touch && pen.isPointInPath(touch.x, touch.y)) {

        //#$# 变化颜色
        if (me.options.onRingClick instanceof Function) {
          me.options.onRingClick.call(this, data);
        }
      }

      startAngle += data.angle;
    });
  },
  /**
   * 用途：绘制 方框 + title 说明文字
   * @param config : this.options
   * */
  _drawTipsNSquare: function (touch) {
    var me = this;
    var pen = this.pen;
    var config = this.options.ringParams.ringTips;
    var orient = config.orient;
    var data = this.options.ringParams.ringData;

    switch (orient) {
      case 'vertical':
        renderVertical(config, data, touch);
        renderFollow(config, data);
        break;
      case 'horizontal':
        renderHorizon(config, data, touch);
        renderFollow(config, data);
        break;

      default:
        break;
    }

    /**
     * 用途：绘制说明文字呈垂直型“三”
     * @param config ：渲染风格
     * @param data : 数据单元
     * */
    function renderVertical(config, data, touch) { //#$#
      var fontSize = config.tipStyle.font || 10;
      var color = config.tipStyle.color || 'black';
      var tipStart = config.tipStart;
      var tipSpace = config.tipSpace;
      for (var k = 0,
          len = data.length,
          startX = tipStart.sx,
          startY = tipStart.sy,
          offsetX = tipSpace.xSpace,
          offsetY = tipSpace.ySpace; k < len; k++) {

        me.__drawSquare({
          sx: startX,
          sy: startY - fontSize * 0.9
        }, {
          color: 'transparent'
        }, {
          w: fontSize + offsetX,
          h: fontSize
        });

        //$#$# 点击事件
        //#$# 在此判断是否有事件 和 坐标
        if (touch && pen.isPointInPath(touch.x, touch.y)) {
          //#$# 变化颜色
          if (me.options.onRingClick instanceof Function) {
            me.options.onRingClick.call(this, data[k]);
          }
        }

        // tip 前导小方块
        me.__drawSquare({
            sx: startX,
            sy: startY - fontSize * 0.6
          },
          data[k], {
            w: fontSize * 0.6,
            h: fontSize * 0.6
          }
        );

        // tip 说明文字
        var textWidth = me.__drawFonts({
            sx: startX + fontSize,
            sy: startY
          },
          data[k].title + ' ' + data[k].percent, {
            font: fontSize + 'px 黑体',
            color: color
          }
        );
        me.__drawLine({
          sx: startX + fontSize * 1,
          sy: startY + 3
        }, {
          ex: startX + fontSize * 1 + textWidth.width,
          ey: startY + 3
        });
        startY += offsetY;
      }
    }

    /**
     * 用途：绘制说明文字呈水平型“_ _ _”
     * @param config ：渲染风格
     * @param data : 数据单元
     * */
    function renderHorizon(config, data) {
      var fontSize = config.tipStyle.font || 18;
      var color = config.tipStyle.color || 'black';
      var tipRowNum = config.tipRowNum;
      var tipStart = config.tipStart;
      var tipSpace = config.tipSpace;
      for (var k = 0,
          len = data.length,
          row = Number(tipRowNum || 2),
          offsetX = tipSpace.xSpace,
          offsetY = tipSpace.ySpace,
          startX = tipStart.sx,
          startY = tipStart.sy; k < len; k++) {

        var newX = startX + (k % row) * offsetX;
        var newY = startY + parseInt(k / row) * offsetY;

        me.__drawSquare({
          sx: newX,
          sy: newY - fontSize * 0.9
        }, {
          color: 'transparent'
        }, {
          w: fontSize + offsetX,
          h: fontSize
        });

        //$#$# 点击事件
        if (touch && pen.isPointInPath(touch.x, touch.y)) {
          //#$# 变化颜色
          if (me.options.onRingClick instanceof Function) {
            me.options.onRingClick.call(this, data[k]);
          }
        }

        me.__drawSquare({
            sx: newX,
            sy: newY - fontSize * 0.6
          },
          data[k], {
            w: fontSize * 0.6,
            h: fontSize * 0.6
          }
        );

        var textWidth = me.__drawFonts({
            sx: newX + fontSize * 1,
            sy: newY
          },
          data[k].title + ' ' + data[k].percent, {
            font: fontSize + 'px 黑体',
            color: color
          }
        );

        me.__drawLine({
          sx: newX + fontSize * 1,
          sy: newY + 3
        }, {
          ex: newX + fontSize * 1 + textWidth.width,
          ey: newY + 3
        })

      }

    }

    /**
     * 用途：绘制说明文字呈环绕型“O”
     * @param config ：渲染风格
     * @param data : 数据单元
     * */
    function renderFollow(config, data) {
      var centerPos = me.options.ringParams.ringCenter;
      var fontSize = config.tipStyle.font || 18;
      var initAngle = me.options.initAngle;
      var radius = me.options.ringParams.radius;
      var innerRadius = me.options.ringParams.innerRadius;

      var midRadius = 0.7 * (Number(radius) + Number(innerRadius));
      var hMidRadius = me.$_round2Ellipse(midRadius, me.options.ringParams.sightAngel || 90);
      var hRadius = me.$_round2Ellipse(radius, me.options.ringParams.sightAngel || 90);

      var fontList = [] // getExtraMaxPosition方法的文字，避免重叠，所以要判断下，重新改变坐标
      /**
       * 用途：根据角度获得中间坐标 ，仅满足 > 2% 的情形
       * refAngle :相对角度
       * angle ： 绝对角度
       * */
      var getMidPosition = function (angle) {
        return {
          sx: centerPos.cx + midRadius * Math.cos(angle),
          sy: centerPos.cy + hMidRadius * Math.sin(angle),
        };
      };

      /**
       * 用途：根据角度获得外层坐标，满足当只有1%或2% 无法显示数字时放置园外
       * refAngle :相对角度
       * angle ： 绝对角度
       * */
      var getExtraMaxPosition = function (angle) {
        // 1.2 将文字放置在1.2倍的半径外， +5 将文字适当下移5像素，看上去正对披萨片中心
        var rScale = 1.25;
        return {
          out: true,
          sx: centerPos.cx + rScale * radius * Math.cos(angle),
          sy: centerPos.cy + rScale * hRadius * Math.sin(angle)
        };
      };

      /**
       * 用途 ： 根据披萨片占据比例决定tip是画在园内还是园外
       * 阀值 ：Math.PI / 18
       * @param absoluteAngle : 角度大小
       * @param referAngle ： 相对0角度大小
       * */
      var tipInOrOut = function (absoluteAngle, referAngle) {
        return absoluteAngle > Math.PI / 9 ?
          getMidPosition(referAngle) :
          getExtraMaxPosition(referAngle, absoluteAngle);
      };

      //KEY2 获取椭圆率
      for (var k = 0, currentAngle = initAngle; k < data.length; k++) {

        var angle = currentAngle + 0.5 * data[k].angle;
        //决定tip是放在园内还是园外
        var position = tipInOrOut(data[k].angle, angle)
        position.percent = data[k].percent
        position.height = fontSize
        position.lineColor = data[k].color || me.colorStore[k]
        position.lineSPosition = {
          sx: centerPos.cx + radius * Math.cos(angle),
          sy: centerPos.cy + radius * Math.sin(angle)
        } // 线起始位置
        fontList.push(position);

        currentAngle += data[k].angle;

        /* if( parseFloat( data[k].percent ) < 1 ){
            continue;
        } */
      }
      me._avoidOverlap(fontList)
      fontList.forEach(function (position) {
        me.__drawFonts(
          position,
          position.percent, {
            font: 0.9 * fontSize + 'px  黑体',
            align: position.out ? 'left' : 'center',
            baseline: 'middle'
          }
        )
      })
    }
  },
  _avoidOverlap: function (list) {
    var me = this
    var outList = list.filter(function (v) {
      return v.out
    })
    var lastY = 0,
      delta
    for (var i = 0, len = outList.length; i < len; i++) {
      delta = outList[i].sy - lastY
      // 重叠，调整一下y坐标
      if (delta < 0) {
        outList[i].sy = outList[i].sy - delta
      }
      lastY = outList[i].sy + outList[i].height
    }
    // 画线，将小饼图块与数字相连
    outList.forEach(function (position) {
      me.__drawLine(position.lineSPosition, {
        ex: position.sx,
        ey: position.sy
      }, position.lineColor)
    })
  },
  /**
   * 用途：画一个标题
   * */
  _drawTitle: function () {
    var me = this;
    var len = 0;
    var ringTitle = this.options.ringParams.ringTitle;
    var titleStart = ringTitle.titleStart;
    var titleStyle = ringTitle.titleStyle;
    //根据起始位置画文字
    me.__drawFonts({
        sx: titleStart.sx,
        sy: titleStart.sy
      },
      ringTitle.title, {
        font: 'bolder ' + titleStyle.font + 'px 黑体',
        color: titleStyle.color
      }
    );

    //根据title长度画五角星
    while (len < ringTitle.title.length * titleStyle.font) {
      me.__draw5corner({
          cx: titleStart.sx + len,
          cy: titleStart.sy + titleStyle.font
        },
        5, {
          color: 'red'
        }
      );
      len += 10;
    }
  },


  /*******************************************以下为原子画图（前导符 ‘__’）*************************************************/

  /**
   * instruction : draw a round / circle
   * @param  position :  plain Object  the center position of circle (pixel)
   * @param  radius : radius (pixel)
   * @param  style :  plain Object render style including color / opacity eg.
   * @param  flag : fill , stroke or both
   * */
  __drawRound: function (position, radius, style, flag) {
    var pen = this.pen;
    var fillColor = this.$_getSubStyle('fillColor', style);

    //get some additional parameters
    var compose = this.$_getSubStyle('compose', style);
    var alpha = this.$_getSubStyle('alpha', style);

    pen.beginPath();
    pen.save();


    if (alpha) {
      pen.globalAlpha = alpha;
    }
    if (compose) {
      pen.globalCompositeOperation = compose;
    }

    pen.fillStyle = fillColor;
    pen.arc(position.cx, position.cy, radius, 0, 2 * Math.PI);
    pen.fill();

    pen.restore();
    pen.closePath();
  },
  /**
   * 用途 ：画一个扇面 ，自带视角效果
   * @param position ： 圆心左标
   * @param radius ： 正圆半径
   * @param innerRadius ： 正圆同心圆内半径
   * @param style ： 渲染选项
   * @param startAngle ： 初始角度
   * @param offsetAngle ： 绝对角度
   * */
  __drawPiece: function (position, radius, innerRadius, style, startAngle, offsetAngle) {
    var me = this;
    var as = startAngle;
    var pen = this.pen;
    var step = this.options.scanStep;
    var hRadius = this.$_round2Ellipse(radius, this.options.ringParams.sightAngel || 90);
    var hInnerRadius = this.$_round2Ellipse(innerRadius, this.options.ringParams.sightAngel || 90);
    var fillColor = this.$_getSubStyle('fillColor', style);

    var lineToByAngle = function (angle, h, radius, hRadius) {
      pen.lineTo(position.cx + radius * Math.cos(angle), position.cy + hRadius * Math.sin(angle) + h || 0);
    };

    pen.save();
    pen.beginPath();

    var grad = pen.createRadialGradient(
      position.cx, position.cy, 0,
      position.cx, position.cy, radius
    );
    grad.addColorStop(0, fillColor);
    grad.addColorStop(0.90, fillColor);
    grad.addColorStop(0.99, '#CBCBD2');
    grad.addColorStop(1, fillColor);

    //        pen.shadowBlur = 0.5;
    //        pen.shadowColor = 'black';
    //        pen.shadowOffsetX = 0.5;
    //        pen.shadowOffsetY = 0.5;

    //        pen.fillStyle = grad;

    pen.fillStyle = fillColor;
    lineToByAngle(as, 0, innerRadius, hInnerRadius);

    //密闭逐点扫描
    while (as < startAngle + offsetAngle) {
      lineToByAngle(as, 0, radius, hRadius);
      as += step;
    }

    lineToByAngle(as, 0, innerRadius, hInnerRadius);

    //密闭逐点扫描
    while (as > startAngle) {
      lineToByAngle(as, 0, innerRadius, hInnerRadius);
      as -= step;
    }

    lineToByAngle(as, 0, innerRadius, hInnerRadius);

    pen.fill();
    pen.closePath();
    pen.restore();
  },
  /**
   * 用途：画一个矩形
   * style : 颜色/尺寸
   * */
  __drawSquare: function (position, style, size) {
    var me = this;
    var pen = this.pen;

    pen.save();
    pen.beginPath();

    pen.fillStyle = style.color;
    pen.rect(position.sx, position.sy, size.w, size.h);
    pen.fill();
    pen.closePath();
    pen.restore();

  },
  /**
   * 用途：画一行文字
   * style : 颜色/尺寸
   * */
  __drawFonts: function (position, str, style) {
    var me = this;
    var pen = this.pen;
    var textSize;

    pen.save();
    pen.beginPath();
    pen.fillStyle = style && style.color || '#000000';
    pen.font = style && style.font || '17px 黑体 ';
    if (style.align) {
      pen.textAlign = style.align;
    }
    if (style.baseline) {
      pen.textBaseline = style.baseline;
    }
    textSize = pen.measureText(str);
    pen.fillText(str, position.sx, position.sy);

    pen.closePath();
    pen.restore();

    return textSize;
  },
  __drawLine: function (sPosition, ePosition, color) {
    var me = this;
    var pen = this.pen;
    pen.save();
    pen.beginPath();
    pen.strokeStyle = color || 'black';
    pen.moveTo(sPosition.sx, sPosition.sy);
    pen.lineTo(ePosition.ex, ePosition.ey);
    pen.stroke();
    pen.closePath();
    pen.restore();
  },
  /**
   * 用途：画个五角星
   * position : 中心位置
   * radius : 半径
   * style ：颜色 暂时
   * */
  __draw5corner: function (position, radius, style) {
    var me = this;
    var pen = this.pen;
    var sRadius = radius * 0.38;
    var iCorner = 0.1 * Math.PI;
    var corner2Position = function (corner, radius) { //corner 累积角度
      pen.lineTo(position.cx + radius * Math.cos(corner), position.cy + radius * Math.sin(corner));
    };

    var cStep = 0.2 * Math.PI;

    pen.save();
    pen.beginPath();
    pen.fillStyle = style.color || 'green';
    pen.moveTo(position.cx, position.cy);
    for (var i = 0; i < 11; i++) {
      var currentCorner = iCorner + cStep * i;
      var currentRadius = i % 2 > 0 ? radius : sRadius;
      corner2Position(currentCorner, currentRadius);
    }
    pen.fill();
    pen.closePath();
    pen.restore();

  },
  _clearAll: function () {
    var me = this;
    me.__clearArea({
      sx: 0,
      sy: 0
    }, me.options.size);
  },
  /**
   * 用途：清空一个区域
   * */
  __clearArea: function (position, size) {
    var pen = this.pen;
    pen.clearRect(position.sx, position.sy, size.w, size.h);
  },
  /************************************************以下为数据转化（前导符 ‘$_’）********************************************/
  /**
   * instruction:get keyValue from plain object 'style'
   * @param key : key
   * @param style : plain Object render style including color / opacity eg.
   * */
  $_getSubStyle: function (key, style) {
    return style[key];
  },
  $_round2Ellipse: function (radius, corner) {
    return Math.sin(corner / 180 * Math.PI) * radius;
  },
  /**
   * 用途 ：压缩像素
   * @param originValue : 原始像素
   * scaleRate ： 像素压缩比 ，为了适应rem
   * */
  $_compressPixel: function (originPixel) {
    return originPixel * this.options.scaleRate;
  },
  $_number2Percent: function (unit, total) {
    var percent = (parseFloat(unit / total) * 100).toFixed(this.options.precision);
    return percent + '%';
  },
  $_number2Angle: function (unit, total) {
    return unit / total * (2 * Math.PI);
  },
  /**
   * 用途：仅给类圆形数据组装参数：data
   * @param arrayData : 数据单元数组
   * */
  $_assembleRingData: function (arrayData) {
    var me = this;
    var total = 0;
    var ringDataKey = this.options.ringParams.ringDataKey;
    var length = arrayData.length;
    var currentTotalPercent = 0;
    var maxValueIndex = 0;

    $.each(arrayData, function (index, data) {
      //KEY 1 ： 基础数据，直接参与数据运算
      data.title = data[ringDataKey.title];
      data.quantity = parseFloat(data[ringDataKey.quantity]);
      //KEY 2:    找到最大值
      if (index > 0) {
        if (data.quantity > arrayData[index - 1].quantity) {
          maxValueIndex = index;
        }
      }

      total += data.quantity;
    });

    $.each(arrayData, function (index, data) {
      //KEY 2 : 扩展数据，基于‘基础数据’间接参与 页面渲染

      data.percent = me.$_number2Percent(data.quantity, total);
      currentTotalPercent += Number((data.quantity / total * 100).toFixed(me.options.precision));

      if (index === (length - 1)) {
        //找最大的那个索引,将误差送给它
        arrayData[maxValueIndex].percent = (100 - currentTotalPercent + parseFloat(arrayData[maxValueIndex].percent)).toFixed(me.options.precision) + '%';
      }
      data.angle = me.$_number2Angle(data.quantity, total);
      data.color = data.color || me.colorStore[index];
    });

    this.options.ringParams.totalQty = total;
  },
  $_heightLightColor: function () {
    var newColor;
    return newColor;
  },
  $_dimLightColor: function () {
    var newColor;
    return newColor;
  },
  /******************以下为事件回调*******************/

  /*****************************************************以下为重新渲染******************************************************/
  //检测传入的data是否符合要求
  validateRingData: function (data) {
    return data instanceof Array && data.length > 0;
  },
  refreshPaint: function (data) {
    var me = this;
    var dataValid = this.validateRingData(data);

    if (dataValid) {
      me.options.ringParams.ringData = data;
      this._clearAll();
      this.drawWhat(); // ---画图
    } else {
      console.error('传入data不符合要求：非空数组，成员大于0个');
    }
  }
})

PJF.apply(PJF.ui.pie.prototype, {
  getClassName: function () {
    return "PJF.ui.pie";
  },
  destroy: function () {
    PJF.ui.componentMgr.remove(this.id);
    this.com.remove();
    this.com = null;
  }
});
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * Author: chenyue
 * Create on: 2015-06-01
 * Last Updated:
 * 说明:virtualKeyboard 虚拟键盘
 */

PJF.ui.virtualKeyboard = PJF.extend(PJF.ui.component, {
	
	init: function(conf) {

		var me = this;

		var defaultConf = {
			value:'number',
			onClick:function(){},
			type:'',
			onEnterClick:function(){}
		};

		me.conf = $.extend( defaultConf , conf );

		//创建dom
		me.com.append('<div class="vtkeyboard_cntr">' +
                            '<input id="virInput" class="vtkeyboard_input" type="text" readonly="true" />' +
                            '<div id="clearA" class="vtkeyboard_clinput" btnid="12"></div>' +
                            '<div class="vtkeyboard_btnBox">' +
                                '<div class="vtkeyboard_btn" btnid="1">1</div>' +
                                '<div class="vtkeyboard_btn" btnid="2">2</div>' +
                                '<div class="vtkeyboard_btn" btnid="3">3</div>' +
                                '<div class="vtkeyboard_btn" btnid="15" id="backSpace"><div class="Esc_icon"></div></div>' +
                                '<div class="vtkeyboard_btn" btnid="4">4</div>' +
                                '<div class="vtkeyboard_btn" btnid="5">5</div>' +
                                '<div class="vtkeyboard_btn" btnid="6">6</div>' +
                                '<div class="vtkeyboard_btn" btnid="12" style="font-size: .21rem">清空</div>' +
                                '<div class="vtkeyboard_btn" btnid="7">7</div>' +
                                '<div class="vtkeyboard_btn" btnid="8">8</div>' +
                                '<div class="vtkeyboard_btn" btnid="9">9</div>' +
                                '<div class="vtkeyboard_btn" btnid="00">00</div>' +
                                '<div class="vtkeyboard_btn" btnid="10">.</div>' +
                                '<div class="vtkeyboard_btn" btnid="0">0</div>' +
                                '<div class="vtkeyboard_btn_big" btnid="000">000</div>' +
                            '</div>' +
                        '</div>');

		me.inputBox = me.com.find('input');
		me.value = [];
		me.btncl = me.com.find( "#clearA" );        //  清空键
        me.btnbs = me.com.find( "#backSpace" );     //  退格键

		me.btncl.bind('click',function(){
			var $this = $(this);
			var btnid = $this.attr('btnid');
			if( btnid === '12' ){
                me.value=[];
                me.com.find( "#virInput" ).val('');
                $this.removeClass( "vtkeyboard_clinput_d" );
                me.conf.onClick.call( me , me.value );
			}
		});
		me.btns = me.com.find('.vtkeyboard_btn,.vtkeyboard_btn_big');
		me.btns.bind('click',function(){
            PJF.communication.player.PlaySoundByUrl( 'devprompt/COMMON_click.wav' );
            //KEY1 ： 基本变量
			var $this = $(this);
            var btnid = $this.attr( 'btnid' );                //获取btind字符
			var className = $this[0].className ;

            //KEY3 ： 数据处理入口
			if( btnid === '12' ){
                me.btncl.trigger('click');
			}else{
                var formerValue = me.getValue();
                if( btnid === '15' ){
                    if( formerValue.length == 1 ){
                        me.btncl.trigger('click');
                    };
                };
				me.pushValue( $this.text() );
				me.conf.onClick.call( me,me.value );
			};

            //KEY4 ： 输入框清空按钮
            if( btnid !== '10' && btnid !== '12' && btnid !== '15'){
                $("#clearA").addClass("vtkeyboard_clinput_d" );
            };

		});
        //按键连续删除
        me.btnbs.bind( 'mousedown',function(){
            var pendTime,                               //按了多久开始连续删除，减少与click事件的冲突
                stepTime;                               //连续删除的周期
            pendTime = setTimeout(function(){
                stepTime = setInterval( function(){
                    if( me.getValue().length == 1 ) {
                        me.btncl.trigger( 'click' );    //  同步叉叉视图
                    }
                    me.pushValue( '' );                 //  空输入代表退格键
                },150);
            },500);

            me.btnbs.bind( 'mouseup mouseout' ,function(){
                clearTimeout( pendTime );
                clearInterval(stepTime );
                me.btnbs.unbind( "mouseup mouseout");
            });
        });
	},
	bindEvent:function(eventName,func){
		var me = this;
		if(eventName == 'onClick'){
			me.conf.onClick = func;
		}
	},
	pushValue:function( str ){
        /**
         * 用途：封装同步显示
         * @param str : 当下输入的字符单元
         * */
        var _pushValue = function( str ){
            if( str.length > 0 ){
                me.value.push( str );
            };
            me.inputBox.val( me.value.join('') );
        };

		var me = this;
		if( !str ){   //  依次来判断是否是退格键
            var lastUnit;
            if( me.value.length != 0  ){
                if( me.value.length > 1 ){
                    lastUnit = me.value.pop();
                }else{
                    lastUnit = me.value[0];
                    me.value = [];
                };
                if( lastUnit.length > 1 ){  //弥补 00 000
                    lastUnit = lastUnit.slice( 0,lastUnit.length - 1 );
                    me.value.push( lastUnit );
                };
            };
		}else{

			if( me.conf.type == "int" ){
				if(str == '.'){
					return;
				};
				var intVal = me.getValue();

				if( intVal.length + str.length > 11 ){
                    var offset = intVal.length + str.length - 11;
                    str = str.slice( 0, str.length - offset );
				};

                _pushValue( str );
                return;

			}else if( me.conf.type == "money" ){

                //KEY1 取出当前值
				var intVal = me.getValue();

                //subKey 1 : 排除特殊情况（首字母是 ‘.’ ）
				if( intVal === "" && str === "." ){
					return;
				};

                //subKey 2 : 排除特殊情况（首字母是 ‘0 | 00 | 000’）
				if( intVal === "0" || intVal === "00" || intVal === "000" ){
                    if( str === "."  ){
                        var lastUnit = me.getValue();
                        //00. 000. => 0.
                        if( lastUnit.length > 1 ){
                            lastUnit = lastUnit.slice( 0,1 );
                            me.value.pop();
                            me.value.push( lastUnit );
                        };
                    }else{
                        // 09 | 009 | 0009  => 9
                        me.value.pop();
                    };
                    _pushValue( str );
					return;
				};

                //subKey 3 : 排除特殊情况（ 多个小数点 ‘2232.2324.323’ ）
				if( str === '.' ){          // money 模式下 , 只能有一个小数点‘.’；
					for(var a in me.value){
						if( me.value[a] === '.'){
							return;
						}
					};
                    _pushValue( str );
					return;
				};

                //subKey 4 : 排除特殊情况（ 当 3.1 + ‘000’）
				for( var a in me.value ){
					if( me.value[a] === '.' ){
                        var monValue,
                            monArray;
						    monValue = me.getValue();
						    monArray = monValue.split(".");
						if( monArray[1].length + str.length > 2 ){
							var offset = monArray[1].length + str.length - 2;
                            str = str.slice( 0, str.length - offset );
						};
                        _pushValue( str );
						return;
					}
				};

                //KEY2 常规情况
				me.value.push( str );

			}else if( me.conf.type === "card" ){

				var intVal = me.getValue();

				if ( str === '.' ){
                    //modify zws 2016年3月28日10:08:11 由原来可以输一个点改为不可输入点
                    return;
				};

				if( intVal.length + str.length > 27 ){
                    var offset = intVal.length + str.length - 27;
                    str = str.slice( 0, str.length - offset );
				};

                _pushValue( str );
                return;
			}else{
				me.value.push( str );
			}
		};
		me.inputBox.val(me.value.join(''));
	},
	getValue:function(){
		var me = this;
		return me.inputBox.val();
	},
    modifyParam:function(conf){
        $.extend(true, this.conf, conf);
    },
	setValue:function(str){
        var me,
            strArray,
            validChar;

		me = this;
        me.value = [];
        me.inputBox.val(me.value.join(''));//zws 修复数据视图不同步

        validChar = /^[0-9.]*$/;
        strArray = str.split('');

        for( var i = 0 , len = strArray.length ; i < len ; i++ ){
            var tempBtnId = strArray[i];
            if( !validChar.test( tempBtnId ) ){
                console.log('invalid character is detected ==> "' + tempBtnId + '"');
                return;
            };

            tempBtnId = tempBtnId === '.' ? '10' : tempBtnId ;
            //统一输入为键盘
            me.pushValue( strArray[i] );
//            me.com.find('.vtkeyboard_btn[btnid="' + tempBtnId+ '"]').trigger('click');
        };
	}
})
/**
 * Framework JS Library 1.0
 * Copyright(c) 2013, China Construction Bank.
 * Author: bianhangying
 * Create on: 2015-06-02
 * Last Updated: 
 */
PJF.ui.selectCombo = PJF.extend(PJF.ui.component, {
	init : function(conf) {
		this.options={
			confs:[]
		};
		$.extend(this.options,conf);

		var me=this;
		me.domArr = [];
		me.selectArr = [];

		//初始化html
	 	me.initHtml();	
	 	//绑定事件
	 	me.bindEvents();
	},
	//初始化html
	initHtml:function(){
		var me = this;

		$("#"+this.options.dom).append('<div class="stm_selectCombo_container"></div>');

		var $container = this.com.find('.stm_selectCombo_container');
		var options = me.options;
		var confs = me.options.confs;
		var len = confs.length;
		for(var i=0; i<len; i++){
			//生成select的容器，并存储dom id
			var dom = me.generateId();
			$container.append("<div class='stm_selectCombo_select' id="+dom+"></div>");
			me.domArr.push(dom);
			//在dom id上生成select组件
			confs[i].dom = dom;
		}
		for(var i=0; i<len; i++){
			confs[i].doms = me.domArr;
			var select = new PJF.ui.select(confs[i]);
			me.selectArr.push(select);
		}
	},
	//绑定事件
	bindEvents:function(){
		var me = this;

		var $container = this.com.find('.stm_selectCombo_container');
		var selectArr = this.selectArr;
		var domArr = this.domArr;

		for(var i=0; i<selectArr.length; i++){
			//去掉原有的select事件
			selectArr[i].unbindEvents();
			//绑定focus事件
			$("#"+selectArr[i].options.inputId).unbind('focus').bind('focus',function(){
				console.log("selectCombo-------------------------------focus");
				//同时显示所有的select div
				for(var i=0; i<selectArr.length; i++){
					selectArr[i].addDiv(selectArr[i].options.selectId,selectArr[i].options.inputId,selectArr[i].options.containerId);
				}
				//调整边框
				me.cssDiv();
			}).unbind('blur').bind('blur',function(e){
				//非ICM的情况下，绑定blur事件 --- by bhy 2015-12-29
				if(PJF.otherInfo.typeInfo != PJF.constants.ICM_NAME){
					console.log("selectCombo-------------------------------blur");
					//隐藏所有的select div
					for(var i=0; i<selectArr.length; i++){
						selectArr[i].hideDiv();
					}	
				}
			}).keyup(function(e) {
				//如果select为autoComplete，自动匹配后 需调整边框
				me.cssDiv();
			});	
			//绑定initLabel事件,使点击label时触发focus事件，避免没有任何反应
			if(selectArr[i].options.initLabel){
				$('#'+domArr[i]).find('.stm_select_initLable').unbind("click").bind("click",function(){
					$(this).parent().find('.stm_select_input').trigger('focus');
				});	
			}
		}
	},
	//处理边框--使之看起来为一个整体
	cssDiv:function(){
		var selectArr = this.selectArr;
		for(var i=0; i<selectArr.length; i++){
			if(i == 0){		//第一个select去掉右边框
				$('#'+selectArr[i].options.containerId).css({
					'border-right': 'none'
				});
			}else if(i == selectArr.length-1){		//最后一个select去掉左边框
				$('#'+selectArr[i].options.containerId).css({
					'border-left': 'none'
				});
			}else{		//中间的select去掉左右边框
				$('#'+selectArr[i].options.containerId).css({
					'border-left': 'none',
					'border-right': 'none'
				});				
			}
				
		}
	},
	//获取值，返回的是value数组
	getValue:function(){
		var value = [];

		var selectArr = this.selectArr;
		for(var i=0; i<selectArr.length; i++){
			value.push(selectArr[i].getValue());
		}

		return value;
	},
	readOnly:function(flag){
		var selectArr = this.selectArr;
		for(var i=0; i<selectArr.length; i++){
			selectArr[i].readOnly(flag);
		}
	},
	//设置值，其中value为数组
	setValue:function(value){
		var selectArr = this.selectArr;
		for(var i=0; i<selectArr.length; i++){
			selectArr[i].setValue(value[i]);
		}
	},
	disabled:function(){
		var selectArr = this.selectArr;
		for(var i=0; i<selectArr.length; i++){
			selectArr[i].disabled();
		}
	},
	enable:function(){
		var selectArr = this.selectArr;
		for(var i=0; i<selectArr.length; i++){
			selectArr[i].enable();
		}
	}
});
PJF.apply(PJF.ui.selectCombo.prototype,{ 
	//获取组件名称
	getClassName:function(){
		return "PJF.ui.selectCombo";
	},
	destroy:function(){
		var selectArr = this.selectArr;
		for(var i=0; i<selectArr.length; i++){
			selectArr[i].destroy();
		}
        PJF.ui.componentMgr.remove(this.id);
        this.com.remove();
        this.selectArr = null;
        this.domArr = null;
        this.options = null;
        this.com=null;
        this.id=null;
	}
});


/**
 * Framework JS Library 1.0
 * Copyright(c) 2013, China Construction Bank.
 * Author: bianhangying
 * Create on: 2015-06-02
 * Last Updated: 
 */
PJF.ui.date = PJF.extend(PJF.ui.component, {
	init : function(conf) {
		this.options={
			yearFlag: "年",
			monthFlag: "月",
			dayFlag: "日",
			startYear:'',
			width: 120,
			hideDay: false,
			nullOption: false
		};
		$.extend(this.options,conf);

		var width = this.options.width;
		this.options.width = [];
		if (width instanceof Array) {
			this.options.width = width;
		} else {
			this.options.width[0] = width;
			this.options.width[1] = width;
			this.options.width[2] = width;
		}
		var me=this;
		me.selectCombo = {};

		//初始化html
	 	me.initHtml();
	 	//绑定事件
	 	me.bindEvents();

	 	var initValue = (me.options.defaultValue ? me.options.defaultValue : null) || (me.options.minDate ? me.options.minDate : null) || new Date();
	 	if (initValue && !me.options.nullOption) {
	 		var year = initValue.getFullYear();
	 		var month = initValue.getMonth() + 1;
	 		month <  10 && (month = '0'+ month);
	 		var date = initValue.getDate();
	 		date <  10 && (date = '0'+ date);
	 		me.setValue('' + year + month +date);
	 	}
	},
	//初始化html
	initHtml:function(){
		var me = this;
		var confs = [
				{
					initLabel: '年',
					hideLabelForNull: true,
					textAlign: 'center',
					data: me.generateData((me.options.minDate ? me.options.minDate.getFullYear() : null) || me.options.startYear || new Date().getFullYear(),2200,me.options.yearFlag),
					defaultValue: !me.options.nullOption && (me.options.minDate ? me.options.minDate.getFullYear() : new Date().getFullYear()),
					selType: "date",
					nullOption: me.options.nullOption,
					width: me.options.width[0]
				},
				{
					initLabel: '月',
					hideLabelForNull: true,
					textAlign: 'center',
					data: me.generateData((me.options.minDate ? me.options.minDate.getMonth() + 1 : null) || 1,12,me.options.monthFlag),
					defaultValue: !me.options.nullOption && (me.options.minDate ? me.options.minDate.getMonth() + 1 : new Date().getMonth() + 1),
					selType: "date",
					nullOption: me.options.nullOption,
					width: me.options.width[1]
				}];
		if (!me.options.hideDay) {
			confs.push({
				initLabel: '日',
				hideLabelForNull: true,
				textAlign: 'center',
				data: me.generateData((me.options.minDate ? me.options.minDate.getDate() : null) || 1,31,me.options.dayFlag),
				defaultValue: !me.options.nullOption && (me.options.minDate ? me.options.minDate.getDate() : new Date().getDate()),
				nullOption: me.options.nullOption,
				selType: "date",
				width: me.options.width[2]
			});	
		}
		me.selectCombo = new PJF.ui.selectCombo({
			dom: me.options.dom,
			id: me.options.id,
			confs:confs
		});
	},
	bindEvents:function(){
		var me = this;
		var selectArr = me.selectCombo.selectArr;

		//给月select绑定change事件--生成不同的天数
		!me.options.hideDay && $("#"+selectArr[1].options.inputId).unbind('change').bind('change',function(){
			var dayFlag = me.options.dayFlag;
			var month = parseInt(me.selectCombo.getValue()[1]);
			var bigMonth = [1,3,5,7,8,10,12];	//拥有31天的月份
			var dayData = [];
			var monthData = [];
			var minDate = me.options.minDate;
			var year = parseInt(me.selectCombo.getValue()[0]);
			if(minDate){
				//2月份则判断是否是闰年
				if(month == 2){
					dayData = me.generateData((year==minDate.getFullYear() && month==minDate.getMonth()+1) ? minDate.getDate() : 1,(month==2 && me.isLeapYear()) ? 29 : 28,dayFlag);
				}else if(bigMonth.indexOf(month) > -1){
					dayData = me.generateData((year==minDate.getFullYear() && month==minDate.getMonth()+1) ? minDate.getDate() : 1,31,dayFlag);
				}else{
					dayData = me.generateData((year==minDate.getFullYear() && month==minDate.getMonth()+1) ? minDate.getDate() : 1,30,dayFlag);
				}
				var preValue = selectArr[2].getValue();
				selectArr[2].setData(dayData);
				selectArr[2].setValue((year==minDate.getFullYear() && month==minDate.getMonth()+1 && preValue<minDate.getDate() ? minDate.getDate() : preValue));
				//重绘了日select的div，调整边框
				me.selectCombo.cssDiv();
			}else{
				//2月份则判断是否是闰年
				if(month == 2){
					dayData = (me.isLeapYear()?me.generateData(1,29,dayFlag):me.generateData(1,28,dayFlag));
				}else if(bigMonth.indexOf(month) > -1){
					dayData = me.generateData(1,31,dayFlag);
				}else{
					dayData = me.generateData(1,30,dayFlag);
				}
				var preValue = selectArr[2].getValue();
				selectArr[2].setData(dayData);
				selectArr[2].setValue(preValue);
				//重绘了日select的div，调整边框
				me.selectCombo.cssDiv();
			}
		});
		//给年select绑定change事件--当月份为2月是，生成不同的天数
		$("#"+selectArr[0].options.inputId).unbind('change').bind('change',function(){
			var monthData = [];
			var year = parseInt(me.selectCombo.getValue()[0]);
			var minDate = me.options.minDate;
			//如果设置了minDate的话，月份要改变
			if(minDate){
				monthData = me.generateData((year == minDate.getFullYear()?minDate.getMonth()+1:1),12,me.options.monthFlag);
				var preValue = selectArr[1].getValue();
				selectArr[1].setData(monthData);
				selectArr[1].setValue((year==minDate.getFullYear() &&　preValue<minDate.getMonth()+1 ? minDate.getMonth()+1 : preValue));

			}
			!me.options.hideDay && $("#"+selectArr[1].options.inputId).trigger("change");
		});
	
	},
	//判断年份是否是闰年
	isLeapYear:function(){
		var me = this;

		var year = parseInt(me.selectCombo.getValue()[0]);
		if((year%4==0 && year%100!=0) || (year%100==0 && year%400==0)){
			return true;
		}else{
			return false;
		}
	},
	getValue:function(){
		var me = this;
		var valueArray = me.selectCombo.getValue();
		var year = (0<valueArray[0]&&valueArray[0]<10?"0"+valueArray[0]:valueArray[0])+"";
		var month = (0<valueArray[1]&&valueArray[1]<10?"0"+valueArray[1]:valueArray[1])+"";
		if (!me.options.hideDay) {
			var date = (0<valueArray[2]&&valueArray[2]<10?"0"+valueArray[2]:valueArray[2])+"";
			return year+month+date;
		}
		
		return year+month;
	},
	setValue:function(value){
		var me = this;
		var valueArray = [];
		var year = parseInt(value.substr(0,4));
		var month = parseInt(value.substr(4,2));
		var date =  1;
		if (!me.options.hideDay) {
			date = parseInt(value.substr(6,2));
			valueArray = [year,month,date];
		} else {
			valueArray = [year,month];
		}
		
		//判断值是否正确，并且若有最小日期的情况
		if(!this.isValidDate(year,month,date) || (me.options.minDate ? PJF.util.formatDate(me.options.minDate) > value : false)){
			return;
		}
		me.selectCombo.setValue(valueArray);
	},
	generateData:function(min,max,flag){
		var data = [];
		for(var i=min; i<max+1; i++){
			var obj = {};
			obj.name = i;
			obj.desc = i + flag;
			data.push(obj);
		}

		return data;		
	},
	readOnly:function(flag){
		if (flag) {
			this.disabled();
		} else {
			this.enable();
		}
	},
	disabled:function(){
		this.selectCombo.disabled();
	},
	enable:function(){
		this.selectCombo.enable();
	},
	isValidDate:function(year,month,day){
		var date = new Date(year,month -1,day);
		if(year != date.getFullYear() || (month -1) != date.getMonth() || day != date.getDate())
			return false;
		return true;
	}
});
PJF.apply(PJF.ui.date.prototype,{ 
	//获取组件名称
	getClassName:function(){
		return "PJF.ui.date";
	},
	validateParam : function(conf){
		if(conf.width instanceof Array && conf.width.length < 3){
			alert("Error: width 参数设置不正确")
			return false;
		}
		return true;
	},
	destroy:function(){
		this.selectCombo.destroy();

        PJF.ui.componentMgr.remove(this.id);
        this.com.remove();
        this.selectCombo = null;
        this.com=null;
        this.id=null;
	}
});

PJF.ui.checkbox = PJF.extend(PJF.ui.component, {
    init: function (conf) {
        this.options = {
            type: 'vertical', //默认样式为纵向排列，
            buttonStyle: false, //默认无按钮背景效果
            defaultChecked: {},
            singleSelect: false,
            classic: true,
            onClick: function () {
            }
        }
        $.extend(this.options, conf);
        var options = this.options;
        this.com.addClass('stm-checkbox');
        //创建dom结构
        var htmlStr = this.initHtml();
        this.com.append(htmlStr);

        //调整样式
        this.adjustStyle();

        //绑定事件
        this.bindEvent();
    },
    /**
     * 调整样式
     */
    adjustStyle: function () {
        var options = this.options;
        var type = this.options.type;
        if (type == "horizontal") {
            this.com.find('.list-item-checkbox').each(function () {
                $(this).addClass('list-item-checkbox-horizontal')
            })
        }
        this.com.find('.checkbox-text').each(function () {
            if ($(this).html().length > 40)
                $(this).css('position', 'relative').css('left', '50px').css('margin-left', '0px')

        })

        // zws add 2016-04-26 14:29:47 满足设置每行个数设置 ；
        if( options.colCount ){
            if( isNaN( Number( options.colCount ) )){
                return;
            }
            var _widthBuffer = 5; //∑width > total
            var $checkboxes = this.com.find(".list-item-checkbox");
            var _wholeWidth = this.com.find(".checkbox-container").innerWidth() - _widthBuffer ;
            var _unitWidth = _wholeWidth / options.colCount ;
            //如果当前单元大于n个单位，则升级一个单位
            $.each( $checkboxes , function( index , boxDom ){
                var _domWidth = $( boxDom).outerWidth();
                var _newWidth = Math.ceil( _domWidth / _unitWidth ) * _unitWidth ;
                $( boxDom).outerWidth( _newWidth );
            })
        }


    },
    /**
     * 绑定事件
     */
    bindEvent: function () {
        var me = this;
        var singleSelect = me.options.singleSelect;
        var isButtonStyle = me.options.buttonStyle;
        var jqItem = me.com.find('.list-item-checkbox');

        if (isButtonStyle) {
            me.com.find('.list-item-checkbox-button').bind('click', function (index) {
                //radio 事件
                PJF.communication.player.PlaySoundByUrl("devprompt/COMMON_click.wav");
                switch (singleSelect) {
                    case true:
                        if (!$(this).hasClass('checkbox-item-disabled')) {
                            me.options.defaultChecked = [];
                            me.com.find('.list-item-checkbox-button').each(function () {
                                $(this).removeClass('checkbox-icon-checked-button');
                            })
                            $(this).addClass('checkbox-icon-checked-button');
                            var value = $(this).children().text();
                            me.options.defaultChecked['' + value] = true;
                            //调用点击回调
                            me.options.onClick.call(this);
                        }
                        break;
                    //checkbox 事件
                    case false:
                        if (!$(this).hasClass('checkbox-item-disabled')) {
                            var value = $(this).children().text();
                            if ($(this).hasClass('checkbox-icon-checked-button')) {
                                $(this).removeClass("checkbox-icon-checked-button");
                                if (!me.options.classic)
                                    $(this).addClass('checkbox-icon-classicTip');
                                //attr('style','background:url(../css/stmimg/newCheckbox.gif) 10px center/0.4rem no-repeat');
                                me.options.defaultChecked['' + value] = false;
                            } else {

                                $(this).addClass("checkbox-icon-checked-button").removeClass('checkbox-icon-classicTip');
                                //$(this).attr('style','');

                                me.options.defaultChecked['' + value] = true;
                            }
                            //调用点击回调
                            me.options.onClick.call(this);
                        }
                        break;
                    default:
                        break;
                }
            })
        } else {
            me.com.find('.list-item-checkbox').bind('click', function (index) {
                //radio 事件
                PJF.communication.player.PlaySoundByUrl("devprompt/COMMON_click.wav");
                switch (singleSelect) {
                    case true:
                        if (!$(this).hasClass('checkbox-item-disabled')) {
                            me.options.defaultChecked = [];
                            me.com.find('.list-item-checkbox').each(function () {
                                $(this).removeClass('radio-icon-checked');
                            })
                            $(this).addClass('radio-icon-checked');
                            var value = $(this).children().text();
                            me.options.defaultChecked['' + value] = true;
                            //调用点击回调
                            me.options.onClick.call(this);
                        }
                        break;
                    //checkbox 事件
                    case false:
                        if (!$(this).hasClass('checkbox-item-disabled')) {
                            var value = $(this).children().text();
                            if ($(this).hasClass('checkbox-icon-checked')) {
                                $(this).removeClass("checkbox-icon-checked");
                                if (!me.options.classic)
                                    $(this).addClass('checkbox-icon-classicTip');//attr('style','background:url(../css/stmimg/newCheckbox.gif) 10px center/0.4rem no-repeat');
                                me.options.defaultChecked['' + value] = false;
                            } else {

                                $(this).addClass("checkbox-icon-checked").removeClass('checkbox-icon-classicTip');
                                //$(this).attr('style','');

                                me.options.defaultChecked['' + value] = true;
                            }
                            //调用点击回调
                            me.options.onClick.call(this);
                        }
                        break;
                    default:
                        break;
                }
            })
        }

    },

    /**
     * 初始化dom结构
     * @returns {string}
     */
    initHtml: function () {
        var data = this.options.data;
        var singleSelect = this.options.singleSelect;
        var isButtonStyle = this.options.buttonStyle;
        var htmlStr = [];
        htmlStr.push('<div class="checkbox-container">');

        //如果是选择的复选框有按钮背景效果,暂只有单选
        if (isButtonStyle) {
            var picClass = "checkbox-icon-unchecked-button";
        } else {
            picClass = singleSelect ? "radio-icon-unchecked" : "checkbox-icon-unchecked";
        }

        for (var i in data) {
            var item = data[i];
            // 如果传递的是JSON数组 采用 value
            if (typeof(item) == 'object') {
                // 标示数据格式 用于getValue返回数据格式 如果为true返回的将是 data-value的值
                this.options.dataMode = true;
                if (isButtonStyle) {
                    htmlStr.push('<div class="checkbox-btnStyle">' + '<div class="list-item-checkbox-button ' + picClass + '"><span class="checkbox-text-button" data-value="'
                        + (item.value) + '">' + (item.desc) + '</span></div></div>');
                } else {
                    if (this.options.classic || singleSelect)
                        htmlStr.push('<div class="list-item-checkbox ' + picClass + '"><span class="checkbox-text" data-value="'
                            + (item.value) + '">' + (item.desc) + '</span></div>')
                    else {
                        htmlStr.push('<div class="list-item-checkbox ' + picClass + ' checkbox-icon-classicTip" ><span class="checkbox-text" data-value="'
                            + (item.value) + '">' + (item.desc) + '</span></div>')
                    }
                }
            } else {
                if (isButtonStyle) {
                    htmlStr.push('<div class="checkbox-btnStyle">' + '<div class="list-item-checkbox-button ' + picClass + '"><span class="checkbox-text-button" data-value="'
                        + item + '">' + item + '</span></div></div>')
                } else {
                    if (this.options.classic || singleSelect)
                        htmlStr.push('<div class="list-item-checkbox ' + picClass + '"><span class="checkbox-text" data-value="'
                            + item + '">' + item + '</span></div>')
                    else {
                        htmlStr.push('<div class="list-item-checkbox ' + picClass + ' checkbox-icon-classicTip" ><span class="checkbox-text" data-value="'
                            + item + '">' + item + '</span></div>')
                    }
                }
            }

        }
        htmlStr.push('</div>')

        return htmlStr.join('');
    }
});

PJF.apply(PJF.ui.checkbox.prototype, {
    getClassName: function () {
        return 'PJF.ui.checkbox';
    },

    /**
     * 获取选中值
     * @returns {Array}
     */
    getValue: function () {
        var dataMode = this.options.dataMode;
        var checkedValues = [];
        var checked = this.options.defaultChecked;
        var isButtonStyle = this.options.buttonStyle;

        if (isButtonStyle) {
            if (dataMode) {
                var me = this;
                var doms = me.com.find('.checkbox-icon-checked-button');
                doms.each(function () {
                    var current = $(this).children('.checkbox-text-button');
                    checkedValues.push(current.attr('data-value'));
                });
            } else {
                for (var i in checked) {
                    checked[i] && checkedValues.push(i);
                }
            }
        } else {
            if (dataMode) {
                var me = this;
                var doms = me.options.singleSelect ? me.com.find('.radio-icon-checked') : me.com.find('.checkbox-icon-checked');
                doms.each(function () {
                    var current = $(this).children('.checkbox-text');
                    checkedValues.push(current.attr('data-value'));
                });
            } else {
                for (var i in checked) {
                    checked[i] && checkedValues.push(i);
                }
            }
        }

        return checkedValues;
    },

    /**
     * 设置默认值
     * @param data  为数组
     */
    setValue: function (data, isClick) {
        var me = this;
        var isButtonStyle = me.options.buttonStyle;
        var singleSelect = me.options.singleSelect;

        if (isButtonStyle) {
            me.com.find('.list-item-checkbox-button').each(function () {
                switch (singleSelect) {
                    case true:
                        var value = $(this).children('.checkbox-text-button').attr('data-value');
                        $(this).removeClass('checkbox-icon-checked-button');
                        var item = data[0];
                        if (typeof(item) == 'object') {
                            item = item.value;
                        }

                        if (value == item) {
                            me.options.defaultChecked = [];
                            $(this).addClass('checkbox-icon-checked-button');
                            me.options.defaultChecked['' + value] = true;
                        }

                        break;

                    case false:
                        var value = $(this).children('.checkbox-text-button').attr('data-value');
                        for (var i in data) {
                            var item = data[i];
                            if (typeof(item) == 'object') {
                                item = item.value;
                            }
                            if (value == item) {
                                $(this).addClass('checkbox-icon-checked-button');
                                if (!me.options.classic)
                                    $(this).removeClass('checkbox-icon-classicTip');
                                me.options.defaultChecked['' + value] = true;
                            }
                        }

                        break;

                    default:
                        break;
                }

            })
        } else {
            me.com.find('.list-item-checkbox').each(function () {
                switch (singleSelect) {
                    case true:
                        var value = $(this).children('.checkbox-text').attr('data-value');
                        $(this).removeClass('radio-icon-checked');
                        var item = data[0];
                        if (typeof(item) == 'object') {
                            item = item.value;
                        }

                        if (value == item) {
                            me.options.defaultChecked = [];
                            $(this).addClass('radio-icon-checked');
                            me.options.defaultChecked['' + value] = true;
                        }

                        break;

                    case false:
                        var value = $(this).children('.checkbox-text').attr('data-value');
                        for (var i in data) {
                            var item = data[i];
                            if (typeof(item) == 'object') {
                                item = item.value;
                            }
                            if (value == item) {
                                $(this).addClass('checkbox-icon-checked');
                                if (!me.options.classic)
                                    $(this).removeClass('checkbox-icon-classicTip');//attr('style','');
                                me.options.defaultChecked['' + value] = true;
                            }
                        }

                        break;

                    default:
                        break;
                }

            })
        }

        if (isClick && me.options.onClick()) {
            me.options.onClick.call(this);
        }
    },
    /**
     * 设置禁用
     * @param index  禁用索引
     */
    disabled: function (index) {
        var me = this;
        var singleSelect = me.options.singleSelect;
        var isButtonStyle = me.options.buttonStyle;

        if (typeof index == 'undefined') {
            if (isButtonStyle) {
                var check1 = me.com.find(".list-item-checkbox-button");
                for (var i = 0; i < check1.length; i++) {
                    me.disabled(i + 1);
                }
            } else {
                var check2 = me.com.find(".list-item-checkbox");
                for (var j = 0; j < check2.length; j++) {
                    me.disabled(j + 1);
                }
            }
        } else {
            if (isButtonStyle) {
                me.com.find(".list-item-checkbox-button").each(function (dataindex) {
                    if (parseInt(dataindex) + 1 == index) {
                        $(this).addClass("checkbox-item-disabled").attr("disabled", "disabled");
                        var isChecked = $(this).hasClass("checkbox-icon-checked-button");
                        //禁用同时 将复选框变成灰色
                        if (isChecked) {
                            $(this).addClass("checkbox-icon-checked-button-disabled");
                        } else {
                            $(this).addClass("checkbox-icon-unchecked-button-disabled");
                        }
                        if (singleSelect && isChecked) {
                            $(this).parent().siblings().children().addClass("checkbox-item-disabled").attr("disabled", "disabled");
                        }
                        if (!me.options.classic)
                            $(this).removeClass('checkbox-icon-classicTip');
                    }
                })
            } else {
                me.com.find(".list-item-checkbox").each(function (dataindex) {
                    if (parseInt(dataindex) + 1 == index) {
                        $(this).addClass("checkbox-item-disabled").attr("disabled", "disabled");
                        var isChecked = $(this).hasClass("radio-icon-checked");
                        if (singleSelect && isChecked) {
                            $(this).siblings().addClass("checkbox-item-disabled").attr("disabled", "disabled");
                        }
                        if (!me.options.classic)
                            $(this).removeClass('checkbox-icon-classicTip');//.attr('style','');
                    }
                })
            }
        }

    },

    /**
     * 设置启用
     * @param index 启用索引
     */
    enabled: function (index) {
        var me = this;
        var isButtonStyle = me.options.buttonStyle;

        if (typeof index == 'undefined') {
            if (isButtonStyle) {
                var check1 = me.com.find(".list-item-checkbox-button");
                for (var i = 0; i < check1.length; i++) {
                    me.enabled(i + 1);
                }
            } else {
                var check2 = me.com.find(".list-item-checkbox");
                for (var j = 0; j < check2.length; j++) {
                    me.enabled(j + 1);
                }
            }
        } else {
            if (isButtonStyle) {
                this.com.find(".list-item-checkbox-button").each(function (dataindex) {
                    if (parseInt(dataindex) + 1 == index) {
                        $(this).removeClass("checkbox-item-disabled").removeAttr("disabled");
                        // 启用同时 将复选框恢复原来颜色
                        $(this).removeClass("checkbox-icon-checked-button-disabled");
                        $(this).removeClass("checkbox-icon-unchecked-button-disabled");
                        if (!me.options.classic)
                            $(this).addClass('checkbox-icon-classicTip');
                    }
                })
            } else {
                this.com.find(".list-item-checkbox").each(function (dataindex) {
                    if (parseInt(dataindex) + 1 == index) {
                        $(this).removeClass("checkbox-item-disabled").removeAttr("disabled");
                        if (!me.options.classic)
                            $(this).addClass('checkbox-icon-classicTip');
                        //.attr('style','background:url(/bosWeb/css/stmimg/newCheckbox.gif) 10px center/0.4rem no-repeat');
                    }
                })
            }
        }

    },
    /**
     * 销毁方法
     */
    destroy: function () {
        PJF.ui.componentMgr.remove(this.id);
        this.com.remove();
        this.com=null;
        this.id=null;
    },

    /***
     * 撤销选中
     * @param index
     */
    cancelSelected: function (index) {
        var me = this;
        var singleSelect = me.options.singleSelect;
        var isButtonStyle = me.options.buttonStyle;
        var dataMode = this.options.dataMode;
        var checked = this.options.defaultChecked;

        if (typeof index == 'undefined') {
            if (isButtonStyle) {
                var checkBtn = me.com.find(".list-item-checkbox-button");
                for (var i = 0; i < checkBtn.length; i++) {
                    me.cancelSelected(i + 1);
                }
            } else {
                var check = me.com.find(".list-item-checkbox");
                for (var j = 0; j < check.length; j++) {
                    me.cancelSelected(j + 1);
                }
            }
        } else {
            if (isButtonStyle) {
                me.com.find(".list-item-checkbox-button").each(function (dataindex) {
                    if (parseInt(dataindex) + 1 == index) {
                        var isChecked = $(this).hasClass("checkbox-icon-checked-button");
                        if (isChecked) {
                            $(this).removeClass("checkbox-icon-checked-button");
                        }
                        if (!me.options.classic)
                            $(this).addClass('checkbox-icon-classicTip');

                        if(!dataMode){
                            var cancelItem = $(this).find("span").html();
                            delete checked[cancelItem];
                        }
                    }
                })
            } else {
                me.com.find(".list-item-checkbox").each(function (dataindex) {
                    if (parseInt(dataindex) + 1 == index) {
                        if (singleSelect) {
                            var isCheckedSin = $(this).hasClass("radio-icon-checked");
                            if (isCheckedSin) {
                                $(this).removeClass("radio-icon-checked");
                            }
                        } else {
                            var isCheckedMul = $(this).hasClass("checkbox-icon-checked");
                            if (isCheckedMul) {
                                $(this).removeClass("checkbox-icon-checked");
                            }
                        }

                        if (!me.options.classic)
                            $(this).addClass('checkbox-icon-classicTip');

                        if(!dataMode){
                            var cancelItem = $(this).find("span").html();
                            delete checked[cancelItem];
                        }
                    }

                })
            }
        }
    }

});
/**
 * Framework JS Library 1.0
 * Copyright(c) 2015, China Construction Bank.
 * Author: fenghao.ge
 * Create on: 2015-06-11
 * Last Updated:
 * 说明:icCardReader类外设组件封装
 */
PJF.ui.icCardReader = PJF.extend(PJF.ui.component, {
    init: function(conf) {
        this.params = {
            infoMsg: resource.ICCARD_INSERT_MSG,
            success: function(data) {},
            failure: function(data) {},
            icCardInfo: null,
            deviceHandler: null,
            otherBnkCard:null,
            timeout: 30,
            failureMsg: resource.ICCARD_READ_FAIL_MSG,
            interval: null,
            timeoutid: null
        }
        //持有父类引用
        $.extend(this.params, conf);
        var me = this;
        //初始化界面
        this.initUi(this.params);
        //同时刷卡折，新背景
        if(me.params.allowPassbook) $('.pjf_stm_content_left').css("background-image","url('../../../css/stmimg/stm_cardPassbookImg.gif')");
        //预填单刷卡折，新背景;PAD不变
        if(me.params.allowYTDPb && !PJF.util.deviceType.pad) $('.pjf_stm_content_left').css("background-image","url('../../../css/stmimg/ytd_cardPassbookImg.gif')");
        //中德
        if(PJF.orgInfo.instSvrlLgPsnID == 'DF001') $('.pjf_stm_content_left').css("background-image", "url('../../../css/stmimg/cardin_zd.gif')");
        //建亚
        if(PJF.orgInfo.instSvrlLgPsnID === 'DA003') $('.pjf_stm_content_left').css("background-image", "url('../../../css/stmimg/hw_cardBg.gif')");
        //无人银行根据设备型号换图
        if (PJF.otherInfo.isSelfBank && PJF.otherInfo.selfBizTp) $('.pjf_stm_content_left').css("background-image", "url('../../../css/stmimg/insertcard_mov_" + PJF.otherInfo.selfBizTp + ".gif')").css("background-size", "contain");

        me.params.timeoutid = setTimeout(function() {
            try {
                if (PJF.constants.IS_DEBUG) {
                    me.params.success(PJF.stm.IC_CARD_INFO);
                    return;
                }

                //STM
                if (PJF.util.deviceType.stm){
                    PJF.stm.ICMaker.getChannelStatus(function(result){
                        if(result.status == 1){
                            if(result.info.status != 0){
                                var messageBox = new PJF.ui.messageBox({
                                    title: "提示信息",
                                    content: PJF.i18n.getI18nResource('pjfI18n.popIcCardTip'),
                                    buttonConfs: [{
                                        bgColor: 'rgb(121,198,30)',
                                        name: PJF.i18n.getI18nResource('pjfI18n.popIcCardBtn'),
                                        style:'main',
                                        width: 200,
                                        height: 80,
                                        onClick: function() {
                                            PJF.stm.ICMaker.ejectCard(function(){
                                                template && (template.loadPage('homepage'));
                                            });
                                        }
                                    }]
                                });
                            }
                            else{
                                /*me.params.interval = setInterval(function() {
                                    me.params.timeout = me.params.timeout - 1;
                                    $("#timeout").text(me.params.timeout);
                                    if (me.params.timeout === 0) {
                                        //调用错误函数
                                        window.clearInterval(me.params.interval);
                                        window.clearTimeout(me.params.timeoutid);
                                    }
                                }, 1000);*/
                                var loading = new PJF.ui.loading({noLayer:true,noIcon:true,msg:'',timeout : me.params.timeout});
                                var loading2;
                                var flag1,flag2;
                                var stopCallback = function(){
                                    loading && loading.destroy();
                                };
                                var inhaleCallback = function(){
                                    loading.destroy();
                                    loading = null;
                                    loading2 = new PJF.ui.loading({msg: PJF.i18n.getI18nResource('pjfCommon.readCardTip'),opacity:0.1});
                                    flag1 = true;
                                    if(!flag2 && me.params.allowPassbook){
                                        PJF.ytd.COMMON.resetDev({pchType:'RDC', loadingConf:false},function () {
                                            console.log("插入IC卡，复位RDC完成");
                                        });
                                    }
                                };
                                PJF.event.onceSubscriber(PJF.stm.client.events.CDB_STOP,stopCallback);
                                PJF.event.onceSubscriber(PJF.stm.client.events.CDB_INHALED,inhaleCallback);
                                PJF.stm.ICMaker.readCard({cdbSound:me.params.cdbSound}, function(){
                                    PJF.event.removeSubscriber(PJF.stm.client.events.CDB_STOP, stopCallback);
                                    PJF.event.removeSubscriber(PJF.stm.client.events.CDB_INHALED, inhaleCallback);
                                    loading && loading.destroy();
                                    loading2 && loading2.destroy();
                                    me.callBack.apply(me, arguments);
                                });

                                //同时读折
                                if(me.params.allowPassbook){
                                    PJF.stm.CardReader.getCardNum({loadingConf:{timeout:30, noLayer:true}, rdcSound:'', readPassbook: true, timeout: 30}, function(result){
                                        //RDC模块不是被复位的，才停止进卡；超时也不执行回调
                                        flag2 = true;
                                        if((result.errorCode != 'DRV0000020') && (result.errorCode != 'DRV0000002') && !flag1){
                                            PJF.stm.ICMaker.stopInhale({loadingConf:false},function(){
                                                console.log('读折完成，停止进卡');
                                                if(result.status){
                                                    result.info.isRdcResult = true; //记录RDC读取的标志位
                                                }else{
                                                    result.pbError = true;
                                                }
                                                me.callBack(result);
                                            });
                                        }
                                    });
                                }
                            }
                        }
                        else{
                            var messageBox = new PJF.ui.messageBox({
                                    title: "提示信息",
                                    content: '获取卡槽状态失败',
                                    buttonConfs: [{
                                        bgColor: 'rgb(121,198,30)',
                                        name: '返回首页',
                                        style:'main',
                                        width: 200,
                                        height: 80,
                                        onClick: function() {
                                            template && (template.loadPage('homepage'));
                                        }
                                    }]
                            });
                            console.log('icCardReader获取卡通道错误:'+JSON.stringify(result));
                        }
                    });
                }

                //YTD
                if (PJF.util.deviceType.ytd){
                    var loading = new PJF.ui.loading({noLayer:true,noIcon:true,msg:'',timeout : me.params.timeout});
                    PJF.ytd.MLT.callThreeDevice({timeout:30, readPassbook: me.params.allowYTDPb},function(data){
                        //如果成功，有ARQC，是IC卡，再读取下ARQC
                        if(data.status == 1 && me.params.ARQC && (data.info.type == '1' || data.info.type == '2')){                            
                            PJF.ytd.ICC.genARQC({ARQC:me.params.ARQC},function(arqcRes){
                                var result = $.extend(true,{},data,arqcRes); //简单覆盖结果
                                result = $.extend(true,result,{info:{resInfo:arqcRes.info}}) //55域等放到resInfo里
                                cb(result);
                            })
                        }else if(data.status == 1 && data.info.type == '3'){
                            data.info.isRdcResult = true; //记录RDC读取的标志位
                            cb(data);
                        }else{
                            cb(data);
                        }
                        function cb(data1){                          
                            loading && loading.destroy();
                            if(data1.errorCode == 'DRV0000020'){
                                PJF.event.publish('MLT_Cancel');
                            }
                            me.callBack.apply(me,arguments);
                        }
                    });
                    /*PJF.ytd.ICC.getICCardInfo({loadingConf:false},function(data){
                        loading && loading.destroy();
                        if(data.errorCode == 'DRV0000020'){
                            PJF.event.publish('MLT_Cancel');
                        }
                        me.callBack.apply(me,arguments);
                    });*/
                }
                
            } catch (e) {
                //window.clearInterval(me.params.interval);
                $("#tradeMsg").text(me.params.failureMsg);
                console.log(e);
                me.params.failure("DEVICE00001");
            }
        }, 2);
    },
    initUi: function(conf) {
        // 隐藏了 pjf_stm_content_right 部分
        if(PJF.util.deviceType.stm) {
            var hwPrefix = '';
            if (PJF.orgInfo.instSvrlLgPsnID === 'DA003') {
                hwPrefix = '<img src="../../../css/stmimg/hw_tipLogo.png"><label style="color:#EC871D;font-size:0.35rem">' + PJF.i18n.getI18nResource('pjfCommon.templateInfoTip') +
                    '</label><label style="display:block;font-size: 0.2rem;width: 70%;margin:0 auto;">' + PJF.i18n.getI18nResource('pjfCommon.hwIcCardWarn') + '</label>';
            }
            var contentHtm = hwPrefix + '<div class="pjf_stm_content_left pjf_stm_icCardImg" '+(this.params.photoUrl ? 'style="background-image:url('+"'"+this.params.photoUrl+"'"+');"' : '')+'></div>';
            if(PJF.otherInfo.typeInfo == PJF.constants.ICM_NAME){
                contentHtm = '<div class="pjf_stm_content_left pjf_stm_icmicCardImg" '+'></div>';
            }else if(PJF.otherInfo.typeInfo == PJF.constants.TCR_NAME){
                contentHtm = '<div class="pjf_stm_content_left pjf_stm_tcricCardImg" '+'></div>';
            }
        }
        else if(PJF.util.deviceType.ytd) {
            var contentHtm = '<div class="pjf_stm_content_left ' + (PJF.util.deviceType.pad ? 'pjf_pad_icCardImg' : 'pjf_ytd_icCardImg') + '" '+(this.params.photoUrl ? 'style="background-image:url('+"'"+this.params.photoUrl+"'"+');"' : '')+'></div>';
        }
        $("#" + conf.dom).append(contentHtm);
    },
    callBack: function(result) {
        if(result.status == 0){
            if(result.errorCode != 'DRV0000020'){
               this.params.failure(result);
            }
        }
        else{
            this.params.success(result.info);
        }
    },
    getClassName: function() {
        return "PJF.ui.icCardReader";
    }
});
PJF.apply(PJF.ui.icCardReader.prototype, {

});
/**
 * Created by SergioCanales on 2017/1/4.
 */

PJF.ui.passbookReader = PJF.extend(PJF.ui.component, {
    init: function(conf) {
        this.params = {
            infoMsg: resource.ICCARD_INSERT_MSG,
            success: function(data) {},
            failure: function(data) {},
            timeout: 30,
            failureMsg: resource.ICCARD_READ_FAIL_MSG,
            interval: null,
            timeoutid: null
        };
        //持有父类引用
        $.extend(this.params, conf);
        var me = this;
        //初始化界面
        this.initUi(me.params);
        me.triggerRead();
    },
    initUi: function(conf) {
        // 隐藏了 pjf_stm_content_right 部分
        if(PJF.util.deviceType.stm) {
            var contentHtm = '<div class="pjf_stm_content_left pjf_stm_bankbookImg" '+(this.params.photoUrl ? 'style="background-image:url('+"'"+this.params.photoUrl+"'"+');"' : '')+'></div><div class="pjf_stm_content_right" style="display:none;"><div class="pjf_stm_bankbookMsg">' +
                '<ul><li><div class="pjf_stm_msg"><span class="stm_info_span"></span>' + resource.DEVICE_INFO_MSG + '</div></li><li><div class="pjf_stm_cardreader_msg">' + conf.infoMsg + '<span id="timeout"></span></div></li><li><div id="tradeMsg" class="pjf_stm_cardreader_msg"></div></li></ul></div></div>';
            if(PJF.otherInfo.typeInfo == PJF.constants.ICM_NAME){
                contentHtm = '<div class="pjf_stm_content_left pjf_stm_bankbookImg" '+'></div><div class="pjf_stm_content_right" style="display:none;"><div class="pjf_stm_bankbookMsg">' +
                    '<ul><li><div class="pjf_stm_msg"><span class="stm_info_span"></span>' + resource.DEVICE_INFO_MSG + '</div></li><li><div class="pjf_stm_cardreader_msg">' + conf.infoMsg + '<span id="timeout"></span></div></li><li><div id="tradeMsg" class="pjf_stm_cardreader_msg"></div></li></ul></div></div>';
            }else if(PJF.otherInfo.typeInfo == PJF.constants.TCR_NAME){
                contentHtm = '<div class="pjf_stm_content_left pjf_stm_bankbookImg" '+'></div><div class="pjf_stm_content_right" style="display:none;"><div class="pjf_stm_bankbookMsg">' +
                    '<ul><li><div class="pjf_stm_msg"><span class="stm_info_span"></span>' + resource.DEVICE_INFO_MSG + '</div></li><li><div class="pjf_stm_cardreader_msg">' + conf.infoMsg + '<span id="timeout"></span></div></li><li><div id="tradeMsg" class="pjf_stm_cardreader_msg"></div></li></ul></div></div>';
            }
        }
        else if(PJF.util.deviceType.ytd) {
            var contentHtm = '<div class="pjf_stm_content_left ' + (PJF.util.deviceType.pad ? 'pjf_pad_icCardImg' : 'pjf_ytd_icCardImg') + '" '+(this.params.photoUrl ? 'style="background-image:url('+"'"+this.params.photoUrl+"'"+');"' : '')+'></div><div class="pjf_stm_content_right" style="display:none;"><div class="pjf_stm_bankbookMsg">' +
                '<ul><li><div class="pjf_stm_msg"><span class="stm_info_span"></span>' + resource.DEVICE_INFO_MSG + '</div></li><li><div class="pjf_stm_cardreader_msg">' + conf.infoMsg + '<span id="timeout"></span></div></li><li><div id="tradeMsg" class="pjf_stm_cardreader_msg"></div></li></ul></div></div>';
        }
        $("#" + conf.dom).append(contentHtm);
    },
    triggerRead: function(){
        var me = this;
        me.params.timeoutid = setTimeout(function() {
            try {
                var loading = new PJF.ui.loading({noLayer:true,noIcon:true,msg:'',timeout : me.params.timeout});
                var stopCallback = function(){
                    loading && loading.destroy();
                };
                PJF.event.onceSubscriber(PJF.stm.client.events.PASSBOOK_STOP,stopCallback);

                function eventCb(data){
                    PJF.event.removeSubscriber(PJF.stm.client.events.PASSBOOK_STOP,stopCallback);
                    loading && loading.destroy();
                    if(data.errorCode == 'DRV0000020'){
                        PJF.event.publish('RDC_Cancel');
                    }
                }

                //STM
                if (PJF.util.deviceType.stm){
                    var temp = function () {
                        PJF.stm.CardReader.getCardNum({loadingConf: {timeout: 20, noLayer: true}, rdcSound: me.params.rdcSound, readPassbook: me.params.readPassbook, timeout: me.params.timeout}, function (data) {
                            eventCb(data);
                            me.callBack.apply(me, arguments);
                        });
                    };
                    if(PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).is('hasCard')){
                        console.log('卡槽有ic卡');
                        PJF.stm.ICMaker.ejectDev(function () {
                            temp();
                        });
                    }else{
                        temp();
                    }
                }

                //YTD
                if (PJF.util.deviceType.ytd){
                    PJF.ytd.RDC.getCardNum({loadingConf:{timeout:30, noLayer:true}, rdcSound:me.params.rdcSound, readPassbook:me.params.readPassbook, timeout: me.params.timeout},function(data){
                        eventCb(data);
                        me.callBack.apply(me,arguments);
                    });
                }
            } catch (e) {
                $("#tradeMsg").text(me.params.failureMsg);
                console.log(e);
                me.params.failure("DEVICE00001");
            }
        }, 2);
    },
    callBack: function(result) {
        var me = this;
        if(result.status == 0){
            if(result.errorCode != 'DRV0000020'){
                me.params.failure(result);
            }
        }
        else{
            me.params.success(result.info);
        }
    },
    getClassName: function() {
        return "PJF.ui.passbookReader";
    }
});
PJF.apply(PJF.ui.passbookReader.prototype, {

});
/**
 * Author: fenghao.ge
 * Create on: 2015-06-11
 * Last Updated:
 * 说明:PJF.ui.device类外设组件封装
 */
PJF.ui.password = PJF.extend(PJF.ui.component, {
    pwd:null,
    init: function(conf) {
        this.params={
            infoMsg:'',
            success:function(data){ 
            },
            failure:function(data){    
            },
            timeout:20,
            isCheckPwd:false,
            validateStr:'',
            encryptType:'P2', //默认转加密，可能有e2e
            firstInputPwd:"",
            secondInputPwd:"",
            pinSound:"PIN_inputPwd.wav",
            pinSound2:"PIN_inputPwd2.wav"
        };
        //持有父类引用
        $.extend(this.params,conf);
        var $this = this;
        var me = this;
        pwd=this;
        //初始化页面
        this.initUi($this.params);
        //无人银行根据设备型号换图
        if (PJF.otherInfo.isSelfBank && PJF.otherInfo.selfBizTp) $('.pjf_stm_passswordImg').css("background-image", "url('../../../css/stmimg/inputpassword_mov_" + PJF.otherInfo.selfBizTp + ".gif')");
        PJF.event.addSubscriber(PJF.stm.client.events.PIN_LENGTH,function(data){
            var time = data.split('|')[0];
            var length = data.split('|')[1];
            me.com.find('.stm_password_textfield_'+time).val(PJF.util.generateUUid().substr(0, length || -1));
        },window,true);
        this.triggerReadCard();
    },
    triggerReadCard:function(){     
        var me = this;        
        me.com.find('.stm_password_textfield_1').val("");
        me.com.find('.stm_password_textfield_2').val("");
        this.inputText1 && this.inputText1.focus();
        me.com.find("#passwordMsg").text("");
        setTimeout(function(){
            try {
                if(PJF.constants.IS_DEBUG){
                    me.params.success(PJF.debug.constants.PSWD.pchPassword);
                    return ;
                }
                var args = {
                    iTimes : 1,
                    pinSound : me.params.pinSound,
                    encryptType:me.params.encryptType,
                    timeout: me.params.timeout,
                    loadingConf: me.params.loadingConf
                };
                if(me.params.encryptType == 'e2e'){
                    $.extend(args,{
                        pPan:me.params.pPan,
                        nPanLength:me.params.pPan.length
                    })
                }
                PJF.stm.Pin.readPin(args, function() {
                    me.firstPinCallBack.apply(me, arguments);
                });
                //me.setIntervalPwdLen(1);
            } catch (e) {
                alert(e.message);
            }
        },2);
    },
    firstPinCallBack:function(result){
        var pwd = this;
        //pwd.clearIntervalPwdLen();

        if(result.status == 0){
            pwd.params.failure(result);
        }
        else{
            pwd.com.find('.stm_password_textfield_1').val('000000');
            //将密码保存到组件
            pwd.params.firstInputPwd=result.info.pchSecPassword;
            if(this.params.isCheckPwd) {
                var args = {
                    iTimes : 2,
                    pinSound : pwd.params.pinSound2,
                    encryptType:pwd.params.encryptType
                };
                if(pwd.params.encryptType == 'e2e'){
                    $.extend(args,{
                        pPan:pwd.params.pPan,
                        nPanLength:pwd.params.pPan.length
                    })
                }
                this.inputText2 && this.inputText2.focus();
                //要2次输入密码
                PJF.stm.Pin.readPin(args, function() {
                    pwd.secondPinCallBack.apply(pwd, arguments);
                });
            }else{
                 this.params.success(result.info.pchSecPassword);
            }
        }
    },
    secondPinCallBack:function(result){
        var pwd = this;
        //pwd.clearIntervalPwdLen();
        if(result.status == 0){
            this.params.failure(result);
        }
        else{
            pwd.com.find('.stm_password_textfield_2').val('000000');
            var $passwordMsg = $("#passwordMsg");
            //将密码保存到组件
            pwd.params.secondInputPwd=result.info.pchSecPassword;
            //判断两次密码是否一致，一致则返回密码，不一致则提示信息
            if(pwd.params.firstInputPwd == pwd.params.secondInputPwd){
                //校验简单密码
                if(pwd.isStrPwd(pwd.params.firstInputPwd,pwd.params.validateStr)){               
                    $passwordMsg.text("");
                    pwd.params.success(result.info.pchSecPassword);
                }
                else{
                    $passwordMsg.text("密码过于简单");                    
                    result.notStrPwd = true;
                    result.status = '0',
                    result.errorCode = 'PJF_PWD_ERR02';
                    result.errorMsg = '密码过于简单';
                    pwd.params.failure(result);
                }
            }else{
                $passwordMsg.text("两次密码输入不一致");
                result.wrongPwd = true;
                result.status = '0',
                result.errorCode = 'PJF_PWD_ERR01';
                result.errorMsg = '两次密码输入不一致'
                pwd.params.failure(result);
            }
        }
    },
    initUi:function(conf){
        var contentHtm='';
        var id1,id2;
        var imgClass = PJF.otherInfo.typeInfo == PJF.constants.ICM_NAME ? "pjf_stm_icmpassswordImg" : "pjf_stm_passswordImg";
        if(PJF.util.deviceType.pad){
            imgClass = "pjf_stm_icmpassswordImg"
        }else if(PJF.util.deviceType.tcr){
            imgClass = "pjf_stm_tcrpassswordImg"
        }
        //中德
        if(PJF.orgInfo.instSvrlLgPsnID == 'DF001') imgClass = "pjf_stm_passswordImg_zd";
        //建亚
        var hwPrefix = '';
        if (PJF.orgInfo.instSvrlLgPsnID === 'DA003') {
            imgClass = "pjf_stm_passswordImg_hw";
            hwPrefix = '<div style="text-align: center;"><img src="../../../css/stmimg/hw_tipLogo.png"><label style="color:#EC871D;font-size:0.35rem">' + PJF.i18n.getI18nResource('pjfCommon.templateInfoTip') +
                '</label><label style="display:block;font-size: 0.2rem;width: 60%;margin:0 auto;">' + PJF.i18n.getI18nResource('pjfCommon.hwPwdWarn') + '</label></div>';
        }
        if(conf.isCheckPwd){
            id1 = PJF.util.generateUUid();
            id2 = PJF.util.generateUUid();
            contentHtm= hwPrefix + '<div class="pjf_stm_content_left ' + imgClass + '"></div>' +
                        '<div class="pjf_stm_content_right">' +
                            '<div class="pjf_stm_passwordMsg">'+
                                '<ul>' +
                                    '<li class="pjf_stm_password_title">'+PJF.i18n.getI18nResource('pjfCommon.checkPwdTip1')+'</li>' +
                                    '<li><input id="' + id1 + '" class="stm_password_textfield stm_password_textfield_1" type="password" readonly=readonly/></li>' +
                                    '<li class="pjf_stm_password_title">'+PJF.i18n.getI18nResource('pjfCommon.checkPwdTip2')+'</li>' +
                                    '<li><input id="' + id2 + '"class="stm_password_textfield stm_password_textfield_2" type="password" readonly=readonly/></li>' +
                                    '<li id="passwordMsg" style="color:red;"></li>' +
                                '</ul>' +
                            '</div>' +
                        '</div>';
            
        }else{
            id1 = PJF.util.generateUUid();
            contentHtm = hwPrefix + '<div>' +
                            '<div class="pjf_stm_passwordMsg clear_float single_password">'+
                                '<ul>' +
                                    '<li><input id="' + id1 + '"class="stm_password_textfield stm_password_textfield_1" type="password" readonly=readonly/></li>' +
                                    '<li style="display: none"><div class="pjf_stm_msg"></div></li>' +  //zws display:none 因为暂时不会用到
                                    '<li style="display: none"><div class="pjf_stm_cardreader_msg">'+conf.infoMsg+'</div></li>' + //zws display:none 因为暂时不会用到
                                '</ul>' +
                            '</div>' +
                        '</div>' +
                        '<div class=" single_passwordImg">' +
                            '<div class="' + imgClass +' clear_float"></div>' +
                        '</div>';
        }
        $("#"+conf.dom).append(contentHtm);
        this.inputText1 = new PJF.ui.textfield({dom:id1})
        this.inputText1.readOnly(true);
        if(conf.isCheckPwd){
            this.inputText2 = new PJF.ui.textfield({dom:id2})
            this.inputText2.readOnly(true);
        }
    },
    getClassName: function() {
        return "PJF.ui.password";
    },
    /*
    * @param time 第几次输入密码
    */
    setIntervalPwdLen:function(time){
        var me = this;
        $("#passwordMsg").text('');
        this['intervalId'] = window.setInterval(function(){
            PJF.stm.Pin.getPinLength(function(result){                
                if(result.status == 0){
                    me.params.failure(result);
                }else{
                    me.com.find('.stm_password_textfield_' + time).val(PJF.util.generateUUid().substr(0,result.info.retvalue || -1));
                }
                
            });
        },200);
    },
    clearIntervalPwdLen:function(time){
        window.clearInterval(this['intervalId']);
    },
    //校验简单密码
    isStrPwd:function(str, param){
        var data = PJF.communication.Decrypt(str, PJF.otherInfo.devId, PJF.otherInfo.token, PJF.otherInfo.secNode);
        if(!data.success)
            return true;
        str = data.result;
        //校验器
        var validateDictionary = [];
        //需满足6位数字
        var sixNumLetter = function(str){
            return str.match(/^[0-9]{6}$/g);
        }
        validateDictionary.push(sixNumLetter);
        //不能6个相同的数字
        var sameCharacter = function(str){
            return !str.match(/^([0-9]{1})\1{5}$/g);
        }
        validateDictionary.push(sameCharacter);
        
        //等差数列
        var isEqualDifference = function(str){
            var desc = true;
            //降序
            for(var i = 0; i < str.length - 1; i++){
                if(str.charCodeAt(i) - str.charCodeAt(i + 1) != 1){
                    desc = false;
                    break;
                }
            }
            var asc = true
            //升序
            for(var i = 0; i < str.length - 1; i++){
                if(str.charCodeAt(i + 1) - str.charCodeAt(i) != 1){
                    asc = false;
                    break;
                }
            }
            return !desc && !asc;
        }
        validateDictionary.push(isEqualDifference);
        //不出现双重复、三重复(如112233,777888)
        var segment = function(str){
            if(str.match(/^([0-9]{1})\1{1}([0-9]{1})\2{1}([0-9]{1})\3{1}$/g))
                return false;
            else if(str.match(/^([0-9]{1})\1{2}([0-9]{1})\2{2}$/g))
                return false;
            return true;
        }
        validateDictionary.push(segment);
        //不来源于证件账号,且不能采用身份证号码中生日为单数月单数日的6位数字
        var isFromIdCard = function (str, param){
            // 18位数身份证正则表达式
            var idcard = /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$/;
            //只有当传入了证件号码才做验证
                //18位身份证号码中生日为单数月单数日的6位数字
            if(param.match(idcard) && param[10] == '0' && param[12] == '0' && str.substring(0,4) == param.substring(6,10) && str[4] == param[11] && str[5] == param[13]){
                return false;
            }
            if(param.indexOf(str) != -1)
                return false;                                           
            return true;
        }
        validateDictionary.push(isFromIdCard);  
        //判断所有的校验
        for(var index = 0; index < validateDictionary.length; index++) {  
            var result = validateDictionary[index].call(this, str, param);  
            if(!result)  
                return false;  
        }  
        return true;     
    }
});
PJF.apply(PJF.ui.password.prototype, {
    destroy:function(){
        this.clearIntervalPwdLen();
        PJF.ui.componentMgr.remove(this.id);        
        this.com.remove();
        this.com = null;
        this.params = null;
        this.id = null;
    }
});
PJF.ui.window=PJF.extend(PJF.ui.panel,{
    init:function(conf){
        this.options={
            id: null,   //面板的ID属性
            width: 800, //设置面板宽度
            height: 400,//设置面板高度
            left: null, //设置面板距离左边的位置（即X轴位置）,该属性禁止被使用，参考点均为window
            top: null,  //设置面板距离顶部的位置（即Y轴位置）,该属性禁止被使用，参考点均为window
            href: null, //从URL读取远程数据并且显示到面板。注意：内容将不会被载入，直到面板打开或扩大，在创建延迟加载面板时是非常有用的：
            cache: true,//如果为true，在超链接载入时缓存面板内容
            border: true,//定义是否显示面板边框
            content: null,//面板主体内容
            tools: null,///自定义工具菜单，可用值： 1) 数组，每个元素都包含'iconCls'和'handler'属性。2) 指向工具菜单的选择器。面板工具菜单可以声明在已经存在的<div>标签上
            loadingMessage: "Loading...",
            extractor: function(data) {//定义如何从ajax应答数据中提取内容，返回提取数据
                var pattern = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
                var matches = pattern.exec(data);
                if (matches) {
                    return matches[1];
                } else {
                    return data;
                }
            },
            onLoad: function() {},//在加载远程数据时触发
            isLoaded:false,
            domLoadedCallBack:function(){},
            initMargin:20,
            modal: true,
            zIndex: 9000,
            retainDom: true
        };

        $.extend(this.options,conf);

        if (this.options.retainDom) {
            this.copyComObj = this.com.clone(false,false).empty().insertAfter(this.com);
            this.copyComObj.attr('id','');//将this.copyComObj对象id设置为空
        }

        //create window
        var body = this.com.addClass("stmwindow");
        var pageArea= this.getPageArea();

        var width,
            height,
            initMargin;

        width = this.options.width;
        initMargin = this.options.initMargin;

        if( width ){    //  无论是和auto 还是 数值均走这步
            width  = this.options.width;
            height = this.options.height;
        }else{          //  仅当width传入为null,''，0 等 无效数值时执行
            width  = pageArea.width - 8*initMargin;
            height = pageArea.height- 3*initMargin;
        }

        //设置body宽度和高度
        this.com.css({
            width: isNaN(width)? 'auto' : width / PJF.constants.DEFAULT_FONTSIZE + 'rem',
            height:height / PJF.constants.DEFAULT_FONTSIZE + 'rem'
        });

        this.com.append('<div class="stmwindow-body"></div>');

        if (this.options.content){

            this.com.find(".stmwindow-body").
                append(this.options.content);

        }else if(this.options.htmlDomId){

            this.com.find(".stmwindow-body").
                html($("#"+this.options.htmlDomId).children().detach());

            this.options.domLoadedCallBack();
            //$("#"+this.options.htmlDomId).remove(); 不删除，否则销毁后使用回调创建时没有内容
        }

        this.com.css({
                        "overflow-x": "auto",
                        "overflow-y": "auto",
                        "padding-bottom": "0px",
                        "position":'absolute'
                    });

        if ( this.options.href ) {
            this.loadDataByUrl( this.options.href );
        }

        this.setLeft();
        this.setTop();
        //this.move();  //move panel 居中和绝对定位已经在 setLeft setTop 完成
        this.addMask();
        this.show()
    },

    /**
     * 通过url获取内容
     * @param url
     * @param isRefresh
     */
    loadDataByUrl: function (url, isRefresh) {//刷新面板来装载远程数据。如果'href'属性有了新配置，它将重写旧的'href'属性
        var me = this;
        if (me.options.href && (isRefresh || !me.options.isLoaded || !me.options.cache)) {
            me.options.isLoaded = false;
            var pbody = me.com.find('.stmwindow-body');
            pbody.html($('<div class="stmPanel-loading"></div>').html(me.options.loadingMessage));
            var target = pbody;
            $.ajax({
                url: url,
                cache: false,
                success: function (data) {
                    pbody.html(me.options.extractor.call(target, data));
                    if ($.parser) {
                        $.parser.parse(pbody);
                    }

                    pbody.parent().css({"overflow-x": "auto", "overflow-y": "auto"});

                    //判定onLoad是否为null
                    if (me.options.onLoad) {
                        me.options.onLoad.apply(target, arguments);
                    }
                    me.options.isLoaded = true;

                }
            });
        }
    },

    /**
     * 获取left坐标
     */
    setLeft:function() {//获取left 坐标
        var me = this;
        var windowContainer = me.com;
        var width = windowContainer.width();

        /**
         * 居中原理 ： 直接相对window 剧中
         * */
        me.com.offset({
            left:($(window).width() - width) / 2
        });

        /*
        * 屏蔽代码 ：window插件居中参考对象为全局window
        if (isNaN(width)) {
            width = windowContainer.width();
        }
        if (me.com.parents().hasClass("template_cntr")) {
            me.com.parents().each(function(){
                if($(this).hasClass("template_cntr")){
                    me.options.left = ( $(this).width() - width ) / 2;
                }
            })

        } else {
            me.options.left = ($(window).width() - width) / 2 + $(document).scrollLeft();
        }
        */



    },

    /**
     * 获取top坐标
     */
    setTop:function() {//获取top 坐标
        var me = this;
        var windowContainer = me.com;
        var top = windowContainer.height();
        var headerHeight = $('.template_top').height();

        me.com.offset({
            top:($(window).height() - top + headerHeight ) / 2
        })

        /*
        if (isNaN(top)) {
            top = windowContainer.height();
        }

        if(me.com.parents().hasClass("template_cntr")){
            me.com.parents().each(function(){
                if($(this).hasClass("template_cntr")){
                    me.options.top=($(this).height()-top)/2;
                }
            })
        }else{
            me.options.top = ($(window).height() - top) / 2 + $(document).scrollTop();
        }


        if(me.options.top<0){
            me.options.top=0;
        }*/

        /**
         * 居中原理 ： 直接相对window 剧中
         * */

    },

    /**
     * 移动window 位置 : 暂时不用
     */
    move:function () {//  move panel
        var me = this;
        this.com.css({
            position:'absolute',
            left: me.options.left,
            top: me.options.top
        });
    },

    getPageArea:function () {
        if (document.compatMode == 'BackCompat') {
            return {
                width: Math.max((document.body.scrollWidth, document.body.clientWidth)),
                height: Math.max((document.body.scrollHeight, document.body.clientHeight))
            }
        } else {
            return {
                width: Math.max((document.documentElement.scrollWidth, document.documentElement.clientWidth)),
                height: Math.max((document.documentElement.scrollHeight, document.documentElement.clientHeight))
            }
        }
    },

    /**
     * 添加遮罩
     */
    addMask:function(){
        var  windowContainer=this.com;
        if (windowContainer.mask) {
            windowContainer.mask.remove();
        }

        if (this.options.modal == true) {
            windowContainer.mask = $('<div class="window-mask"></div>').insertAfter($(windowContainer));
            if(windowContainer.parents().hasClass("template_cntr")){
                var width,height;
                windowContainer.parents().each(function(){
                    if($(this).hasClass("template_cntr")){
                        width= $(this).width();
                        height= $(this).height()
                    }
                });

                windowContainer.mask.css({
                    width:width,
                    height:height,
                    display: "none"
                });
            }else{
                windowContainer.mask.css({
                    width:this.getPageArea().width,
                    height:this.getPageArea().height,
                    display: "none"
                });
            }

        }

        //打开window 时，设置遮罩
        if(windowContainer.mask){
            windowContainer.mask.css({
                display: "block",
                zIndex: this.options.zIndex++
            });

            windowContainer.css("z-index", this.options.zIndex++);
        }
    },

    /**
     * 隐藏window
     */
    hide:function(){
        var stmWindow = this.com;
        if (stmWindow.next().hasClass('window-mask')) {
            stmWindow.next().hide();
            stmWindow.hide();
        }

    },

    /**
     * 显示window
     */
    show:function(){
        var stmWindow = this.com;
        if (stmWindow.next().hasClass('window-mask')) {
            stmWindow.next().show();
            stmWindow.show();
        }
    }

})

PJF.apply(PJF.ui.window.prototype,{
    getClassName:function(){
        return 'PJF.ui.window';
    },
    subComponentsDestroy:function(dom){
        if(dom.is('[componentid]')){
            var id = dom.attr('componentid');
            var com = PJF.ui.componentMgr.get(id);
            com.destroy();
            return;
        }
        var data =  dom.children();
        for(var i = 0; i < data.length;i++){
            this.subComponentsDestroy($(data[i]))
        }
    },
    /**
     * 销毁window对象
     */
    destroy:function(){
        if(this.com){
            this.subComponentsDestroy(this.com.find('.stmwindow-body'));
            this.com.next().remove()
            this.com.remove();

            //设置this.copyComObj对象的id为原有对象dom
            if (this.options.retainDom) {
                this.copyComObj.attr('id',this.options.dom);
            }            
            PJF.ui.componentMgr.remove(this.id);
            this.com = null;
            this.params = null;
            this.id = null;
        }

    }

})
/**
 * Framework JS Library 1.0
 * Copyright(c) 2015, China Construction Bank.
 * Author: fenghao.ge
 * Create on: 2015-06-11
 * Last Updated:
 * 说明:PJF.ui.device类外设组件封装
 */
PJF.ui.identityCard = PJF.extend(PJF.ui.component, {
    init: function (conf) {
        var $this = this;

        this.params = {
            infoMsg: resource.IDENTITY_INSERT_MSG,
            pchPhotoName: "",   //头像存储名称
            frontPhotoName: "",  //正面扫描存储名称
            backPhotoName: "",  //反面扫描存储名称
            success: function (data) {
            },
            failure: function (data) {
            },
            timeout: 60
        }
        //覆盖部分默认参数
        $.extend($this.params, conf);
        this.initUi(this.params);
        //中德
        if(PJF.orgInfo.instSvrlLgPsnID == 'DF001') $('.pjf_stm_content_left').css("background-image", "url('../../../css/stmimg/insertidcard_mov_zd.gif')");
        //无人银行根据设备型号换图
        if (PJF.otherInfo.isSelfBank && PJF.otherInfo.selfBizTp && !conf.supportEId) $('.pjf_stm_content_left').css("background-image", "url('../../../css/stmimg/insertidcard_mov_" + PJF.otherInfo.selfBizTp + ".gif')").css("background-size", "contain");
        if (conf.supportEId && ((PJF.otherInfo.selfBizTp == '2') || (PJF.otherInfo.selfBizTp == '3'))) $('.pjf_stm_content_left').css("background-image", "url('../../../css/stmimg/eIdImg_mov_" + PJF.otherInfo.selfBizTp + ".gif')").css("background-size", "contain");
        $this.idenHanlder();
    },
    idenHanlder: function(){
        var me = this;
        var identity = this;
        var conf = this.params;
        setTimeout(function () {
            try {
                if (PJF.constants.IS_DEBUG) {
                    identity.params.success(PJF.stm.idenAuth.custInfo);
                    return;
                }

                //STM
                if (PJF.util.deviceType.stm) {
                    var pchPhotoPath = PJF.stm.baseDir + "/identity/" + identity.params.pchPhotoName;
                    var frontPhotoPath = PJF.stm.baseDir + "/identity/" + identity.params.frontPhotoName;
                    var backPhotoPath = PJF.stm.baseDir + "/identity/" + identity.params.backPhotoName;
                    var args = {
                        pchPhotoPath: pchPhotoPath,
                        frontPhotoPath: frontPhotoPath,
                        backPhotoPath: backPhotoPath,
                        imageType: 2,
                        idcSound:conf.idcSound,
                        timeout: me.params.timeout
                    };
                    if (conf.supportEId) args.idcSound = "app/common/idAndEId.mp3";
                    PJF.stm.IdCard.getChannelStatus(function (staRes) {
                        if (staRes.status == 1) {
                            if (staRes.info.status == 0) {
                                var loading = new PJF.ui.loading({noLayer: true, noIcon: true, msg: '', timeout: me.params.timeout});
                                var loading2;
                                var stopCallback = function () {
                                    loading && loading.destroy();
                                };
                                var inhaleCallback = function(){
                                    loading.destroy();
                                    loading = null;
                                    loading2 = new PJF.ui.loading({msg: PJF.i18n.getI18nResource('pjfCommon.readIDCardTip'), opacity: 0.1});
                                };
                                PJF.event.onceSubscriber(PJF.stm.client.events.IDC_STOP,stopCallback);
                                PJF.event.onceSubscriber(PJF.stm.client.events.IDC_INHALED,inhaleCallback);
                                PJF.stm.IdCard.readCard(args, function () {
                                    PJF.event.removeSubscriber(PJF.stm.client.events.IDC_STOP,stopCallback);
                                    PJF.event.removeSubscriber(PJF.stm.client.events.IDC_INHALED,inhaleCallback);
                                    loading && loading.destroy();
                                    loading2 && loading2.destroy();
                                    me.callBack.apply(me, arguments);
                                });
                            }
                            else {
                                var messageBox = new PJF.ui.messageBox({
                                    title: "提示信息",
                                    content: '卡槽已经有身份证，请点弹出按钮取出身份证',
                                    buttonConfs: [
                                        {
                                            bgColor: 'rgb(121,198,30)',
                                            name: '弹身份证',
                                            style: 'main',
                                            width: 200,
                                            height: 80,
                                            onClick: function () {
                                                PJF.stm.IdCard.ejectDev(function(){
                                                    template && (template.loadPage('homepage'));
                                                });
                                            }
                                        }
                                    ]
                                });
                            }
                        } else {
                            var messageBox = new PJF.ui.messageBox({
                                title: "提示信息",
                                content: '获取身份证卡槽状态失败',
                                buttonConfs: [
                                    {
                                        bgColor: 'rgb(121,198,30)',
                                        name: '返回首页',
                                        style: 'main',
                                        width: 200,
                                        height: 80,
                                        onClick: function () {
                                            template && (template.loadPage('homepage'));
                                        }
                                    }
                                ]
                            });
                            console.log('icdentityCard获取卡通道错误:' + JSON.stringify(staRes));
                            PJF.event.publish('IDC_Channel_Fail');
                        }
                    })
                }

                //YTD
                if (PJF.util.deviceType.ytd) {
                    var ytd_args = {
                        pchPhotoName: identity.params.pchPhotoName,
                        frontPhotoName: identity.params.frontPhotoName,
                        backPhotoName: identity.params.backPhotoName,
                        iFlag: 1,
                        idcSound:conf.idcSound
                    };
                    var loading = new PJF.ui.loading({noLayer:true,noIcon:true,msg:'',timeout : me.params.timeout});
                    PJF.ytd.IDC.getIDCardInfo(ytd_args, function (data) {
                        loading && loading.destroy();
                        if(data.errorCode == 'DRV0000020'){
                            PJF.event.publish('IDC_Cancel');
                        }
                        me.callBack.apply(me, arguments);
                    });
                }
            } catch (e) {
                alert(e.message);
            }
        }, 0);
    },

    initUi: function (conf) {
        var contentHtm;
        if(PJF.util.deviceType.stm){
             contentHtm = '<div class="pjf_stm_content_left pjf_stm_identityStyle pjf_stm_identityCardImg">';
             if(PJF.otherInfo.typeInfo == PJF.constants.ICM_NAME){
                contentHtm = '<div class="pjf_stm_content_left pjf_stm_identityStyle pjf_stm_icmidentityCardImg">';
             }else if(PJF.otherInfo.typeInfo == PJF.constants.TCR_NAME){
                contentHtm = '<div class="pjf_stm_content_left pjf_stm_identityStyle pjf_stm_tcridentityCardImg">';
             }

             if (conf.supportEId) {
                 contentHtm = '<div class="pjf_stm_content_left pjf_stm_identityStyle pjf_stm_eIdImg">';
             }
        }
        if(PJF.util.deviceType.ytd){
             contentHtm = '<div class="pjf_stm_content_left pjf_ytd_identityCardImg">';
        }
        contentHtm += '</div><div class="pjf_stm_content_right" style="display:none;"><div class="pjf_stm_identityCardMsg">' +
            '<ul><li><div class="pjf_stm_msg"><span class="stm_info_span"></span>' + resource.DEVICE_INFO_MSG +
            '</div></li><li><div class="pjf_stm_cardreader_msg">' + conf.infoMsg + '</div></li></ul></div></div>';

        $("#" + conf.dom).append(contentHtm);
    },
    callBack: function (result) {
        if (result.status == 0) {
            if (result.errorCode != 'DRV0000020') {
                this.params.failure(result);
            }
        }
        else {
            this.params.success(result.info.pchInfo);
        }
    },
    getClassName: function () {
        return "PJF.ui.identityCard";
    }
});
PJF.apply(PJF.ui.identityCard.prototype, {

});
/**
 * Framework JS Library 1.0
 * Copyright(c) 2014, China Construction Bank.
 * Author: yh
 * Create on: 2014-07-07
 * Last Updated:
 * 说明:平板-Grid组件
 */

PJF.ui.grid = PJF.extend(PJF.ui.component, {
	// 初始化Grid
	init: function(conf) {
		// 表格dom
		this.gridDom = {};

		// 保存表格加载的数据 {total:int,rows:[{},{},...]}
		this.gridData = conf.data;
		// 表格当前页中 真正加载到的数据 <<只用于表示处理当前加载操作的数据，之后的所有数据操作 均在gridAllRows中处理>>
		this.gridCurrentLoadedRows = [];

		// 保存每次加载到表格中的数据 全量数据 包含所有页的数据
		this.gridAllRows = [];

		// 宏观上的配置参数 表格相关的可供访问、设置的所有参数
		// 分页栏相关的参数 则放在paginationOptions里面
		conf = this.params = this.conf = PJF.apply(conf, {
            //设计放大比例(用于内部px参数转化为换算后的px)
            scaleRate:parseInt($('html').css('fontSize'),10) / PJF.constants.DEFAULT_FONTSIZE, //$#$

            // 整个表格的宽度
            width: conf.width  || 860   , //$#$

			// 整个表格的高度
            height: conf.height   || 300 , //$#$

			// 是否自动调整表格的宽度 当表格外层容器宽度发生变化时且表格宽度为自适应时 是否自动调整表格的宽度
			autoResizeWidth: !! conf.autoResizeWidth,

			// 水平方向滚动条高度
			horizontalScrollBarHeight: conf.horizontalScrollBarHeight || 17,

			// 垂直方向滚动条高度
			verticalScrollBarHeight: conf.verticalScrollBarHeight || 17,

			// 整个表格显示位置设置 默认情况下 整个表格居中显示，可以设置 "left" "right" 则整个表格将靠左 或者 靠右
			gridLayoutClass: conf.gridLayoutClass,

			// 内容区最少显示行 高度为'auto' 时生效 当与maxShowRowCount冲突时，以minShowRowCount为准(也就是最小高度为准)
			minShowRowCount: conf.minShowRowCount,

			// 内容区最多显示行 高度为'auto' 时生效
			maxShowRowCount: conf.maxShowRowCount,

			// 内容区最小高度 默认值
			minContentHeight: conf.minContentHeight || conf.minShowRowCount * 67 || 67 * 3,

			// 最大自适应高度 默认情况下为10行高度 670px
			maxContentAutoSizeHeight: conf.maxContentAutoSizeHeight || conf.maxShowRowCount * 67 || 67 * 10,

			// 是否为单选 默认为单选 true
			singleSelect: !(conf.singleSelect === false),

			// 是否显示行号 默认显示
			rownumbers: conf.rownumbers,

			/***************数据加载相关**********************/
			// 请求目标地址
			url: conf.url,
			// 请求同步、异步 默认(true)为异步请求
			async: !(conf.async === false),
			// 请求数据类型 默认为 'json'
			type: conf.type,
			traditional: conf.traditional,
			// 请求参数
			queryParams: conf.queryParams || {},

			// 每页大小字段名称
			pageSizeParamName: conf.pageSizeParamName,
			// 页码字段名称
			pageNumberParamName: conf.pageNumberParamName,
			// 分页参数存放路径 默认为"_pagination" 如更改为. 则存放在queryParams根层
			paginationParamsLevelName: conf.paginationParamsLevelName,
			// total字段路径
			totalPath: conf.totalPath || "total",
			// 行数据数组的路径
			rowsPath: conf.rowsPath || "rows",
            //当前页码字段的路径
            currentPath:conf.currentPath || "PAGE_JUMP",

			// 是否显示表头 配置为false 将隐藏表头
			showHead: conf.showHead,

			showBorder: conf.showBorder, // 是否显示表格边框 默认不显示

			// 是否显示全选按钮 默认显示 如果设置为false将不会显示全选图片
			isShowCheckAllIcon: conf.isShowCheckAllIcon,
			// 列配置
			columns: conf.columns,
			// 默认的布局
			defaultAlign: conf.defaultAlign || 'left',

			// 在定宽的情况下,是否换行 默认不换行
			// nowrap 默认是true
			nowrap: typeof(conf.nowrap) != 'undefined' ? conf.nowrap : true,

			// 初始化情况下显示
			initMsg: conf.initMsg || '很抱歉，没有您所需要的数据',
			// 未查询到数据情况
			noDataMsg: conf.noDataMsg || '很抱歉，没有您所需要的数据',

			// 表格加载中信息提示
			loadingMsg: conf.loadingMsg || '加载中...',

			// 排序的列的名字
			sortName: conf.sortName,
			// 排序是升序、降序 'asc' 'desc' 具体的排序函数定义在列中 以此，可以通用到点击表头排序
			sortOrder: conf.sortOrder || 'asc',

			/*********************以下为回调函数接口*******************************/
			// 单击行
			onClickRow: conf.onClickRow,
			// 双击行
			onDblClickRow: conf.onDblClickRow,

			// 是否check checkbox or radio的时候 触发行点击事件  默认触发
			isClickRowOnCheck: conf.isClickRowOnCheck,

			// 是否点击行时 选中checkbox or radio 默认选中
			isCheckOnClickRow: conf.isCheckOnClickRow,

			// 选中行前回调
			onBeforeCheckRow: conf.onBeforeCheckRow,
			// 行被选中的回调
			onCheckRow: conf.onCheckRow,

			// 行被取消选中前的回调
			onBeforeUnCheckRow: conf.onBeforeUnCheckRow,

			// 行被取消选中时的回调
			onUnCheckRow: conf.onUnCheckRow,

			// 全选按钮被选中
			onCheckAll: conf.onCheckAll,
			// 全选按钮被取消选中
			onUnCheckAll: conf.onUnCheckAll,

			// 行样式接口
			rowStyler: conf.rowStyler,

			// 数据加载前
			onBeforeLoad: conf.onBeforeLoad || function() {},

			//  数据加载成功  整体流程完毕
			onLoadSuccess: conf.onLoadSuccess,

			//  通信成功、逻辑错误
			onLoadFailure: conf.onLoadFailure,

			// 通信失败
			onLoadError: conf.onLoadError
		});

		// 表格内部使用的参数 主要是一些标记变量
		this.gridOptions = {

			// 表格列className的前缀  如果同一个页面中存在列相同的表格 那么前一个表格调整列宽生成的样式会对下一个表格的列的样式有影响
			gridColumnClassPrefix: conf.dom + '-grid-cell-field-',

			// 是否存在checkbox or radio
			hasCheckOrRadio: false,

			// 是否需要调整行高
			isNeedAdjustRowHeight: false,

			// 是否已排序
			hasSorted: false,

			status: 1, // 初始状态为1 发送成功发送请求支持为2
			isRequesting: false, // 是否正在发送请求
			isTouched: false, // 是否处于触摸状态 只有处于触摸状态下 才能出发自动翻页
			hideScrollBarTimeout: null, // 定时器
			lastScrollTop: -1, // 前一次的scrollTop
			// 分页相关的参数 **重置参数**
			paginationOptions: {
				// 当前页码 默认为1
				currentPageNumber: 1,
				// 第几组 默认为 1
				currentPageGroupNumber: 1,
				// 总共几组
				totalPageGroupNumber: 1,
				// 总共多少页
				totalPageNumber: 1,
				// 是否支持本地分页
				isLocalPagination: !! conf.isLocalPagination,
				/*********以下为分页栏相关参数**********/

				// 请求类型  目前支持CCBS
				reqType: conf.reqType,
				// 默认情况下 为首次请求
				isFirstReq: true,
				// 分页大小
				pageSize: conf.pageSize || 10,
				// 分页栏数字按钮个数 默认值5
				showNumberSize: conf.showNumberSize || 6,
				// 是否显示分页数字按钮
				isShowPaginationNumber: conf.isShowPaginationNumber,
				// 是否分页 默认值为true 目前PAD版本都应该分页
				pagination: !(conf.pagination === false),
				// 默认情况下 翻页时数据都是追加到后面
				isAppendMode: !(conf.isAppendMode === false),
				/************分页相关回调************************/
				// 页码变更或者说点击了页码按钮
				pageChangeHandler: conf.pageChangeHandler,
				// 分页按钮 前一页 下一页 首页 末页 状态  ****重置**
				paginationBtnStatus: {
					first: false,
					prev: false,
					next: false,
					last: false
				},
				isShowLoading: false,

				// 上一页按钮
				prevBtn: null,
				// 下一页按钮
				nextBtn: null,
				// 页码描述信息
				paginationDesc: null,
				// 请求方向 true 为前一页 false 为下一页
				reqDirection: false,
				// 默认情况下 分页信息参数放在那一层 默认情况下下放在jsonData根层
				sendPath: conf.sendPath || '.',
				// 默认情况下 获取分页信息路径 用于获取CCBS等交易中的相关字段
				ccbsPath: conf.ccbsPath || "_COMMON.COMA",
				// CCBS 交易所用的第一页返回的PAGE_STA_KEY
				PAGE_STA_KEY: undefined,
				// CCBS 交易所用的标志信息
				OPM_ITI_ID: undefined,
				// 存储上一页的PAGE_STA_KEY
				PAGE_STA_KEY_ARRAY:[],
				// 上一页的PAG_STA_KEY
				lastPAG_STA_KEY:undefined
			},
			// 列相关的参数 如列宽样式配置、是否显示行号等
			columnOptions: {
				// 固定宽度总和
				fixedColumnWidth: 0,
				// 保存自适应列宽的列
				autoColumns: {}
			},
			// 一些默认值
			gridConstant: {
				// 表头的高度 目前只做一行表头支持
				GRID_HEAD_HEIGHT: 70,
				// 行左右边框总宽度
				BORDER_LR_TOTAL_WIDTH: 4,
				// scrollBar width .. 不一定为真实的宽度...
				GRID_SCROLL_BAR_WIDTH: this.getSrollBarWidth(),
				// checkbox or radio 列的固定宽度 30px
				ckColumnWidth: 25,
				// rownumber 列 固定宽度
				GRID_ROW_NUMBER_FIELD_WIDTH: 60,
				// 列最小宽度单位  实际上为一个字的宽度 与字体大小有关 同时宽度自适应返回的最大宽度应该包含padding
				GRID_COLUMN_WIDTH_SIZE: 24,
				// rowNumber 列 的field字段
				GRID_ROW_NUMBER_FIELD: 'GRID-ROWNUMBER'
			},
			// 关于选中相关参数、变量等  --重置--
			checkOptions: {

				// 保存当前页选中的行相关信息 格式如下
				// key: checkedRow_${index}  value index
				checkedRowIndexMap: new PJF.util.Collection(),
				// 所有页选中数据集合
				allPageCheckedRowIndexMap: new PJF.util.Collection(),

				// 是否添加或者删除了数据 则不再维护所有页选中的数据
				isAddOrRemoveData: false,
				// 最后一次选中的dom 节点
				lastCheckedRowDom: null
			}
		};

		// 过滤参数 针对一些配置 自动添加一些参数
		this.paramsFilter();

		// 生成grid界面
		this.renderGrid();

		// 相关事件绑定
		this.regEventHandler();
	},
	/**
	 * 用于对一些配置 做部分参数添加操作
	 * @return {[type]} [description]
	 */
	paramsFilter: function() {
		var conf = this.conf;
		// 是否显示行号 如果显示行号 则默认添加一列
		if (conf.rownumbers) {
			var gridConstant = this.gridOptions.gridConstant;
			conf.columns[0].splice(0, 0, {
				field: gridConstant.GRID_ROW_NUMBER_FIELD,
				width: gridConstant.GRID_ROW_NUMBER_FIELD_WIDTH,
				rowNumber: true,
				title: '序号',
				align: 'center'
			});
		}

		// 最小高度 要加上水平滚动条的高度 以免被遮挡
		conf.minContentHeight += conf.verticalScrollBarHeight;
		// 最大自适应高度
		conf.maxContentAutoSizeHeight += conf.verticalScrollBarHeight;
	},

	/**
	 * 生成grid界面 用来创建出整体的表格界面
	 * @return {[type]} [description]
	 */
	renderGrid: function() {

		// 创建表格的最基础dom结构
		this.createGridDom();
		// 根据columns配置生成表头
		this.createHeaderDom();

		// =========以上为固定的Dom框架=============
		// 需要变动部分
		this._loadData();

		// 调整表格基础样式  --- 此处取消表格调整 统一挪到表格加载完毕之后执行
		// this.adjustGridStyle();

	},
	/**
	 * 根据表格加载的数据 生成body、footer、paginationBar中的详细信息（外框架已在createGridDom中生成了）
	 * @return {[type]} [description]
	 */
	renderContent: function() {
		//后台分页，翻页时不记住选中状态 -add by hzz /2016.09.20
        var paginationOptions = this.gridOptions.paginationOptions;
        if (this.conf.url && !paginationOptions.isAppendMode) {
        	this.clearCheckedRowIndex();
        }
		this.createBodyDom(); // 根据可能有的本地数据 生成内容区

		this.createFooterDom();  // 生成页脚

		this.renderPagination(); // 生成分页栏
	},
	/*创建Grid基础dom结构*/
	createGridDom: function() {
		// 已经创建Grid基础结构 则直接返回
		if (this.com.hasClass("YTD-Grid")) {
			return;
		}
		// 最外层是用户提供的div节点
		this.com.addClass = "YTD-Grid";
		// 表格的基础dom结构
		var gridBaseDomArray = [
			'<!-- 表格最外层 -->',
			' <div class="grid-container">',
			'<style type="text/css"></style>',
			' <!-- 可能的表格title -->',
			' <div class="grid-title">grid-title</div>',
			' <div class="clear"></div>',
			' <!-- 可能的预留的按钮栏位 -->',
			'  <div class="grid-toolbar">grid-toolbar</div>',
			'   <div class="clear"></div>',
			'     <!-- 表格的内容显示区 -->',
			'       <div class="grid-content-scroll-mask-outer">',
			'<span class="grid-content-scroll-v-mask-scroll"></span>', // 垂直滚动条
		'<span class="grid-content-scroll-h-mask-scroll"></span>', // 水平滚动条 调整下位置
		'       <div class="grid-content-scroll-mask-inner">',
			'       <div class="grid-content">',
			'<!-- 表格表头 -->',
			'<div class="grid-header">',
			'     <div class="grid-header-left-container">',
			'     		<div class="grid-header-left"></div>',
			'     </div>',
			'     <div class="grid-header-right-container">',
			'          <div class="grid-header-right"></div>',
			'     </div>',
			'   </div>',
			'     <div class="clear"></div>',
			'     <!-- 表格内容区 -->',
			'     <div class="grid-body">',
			'        <div class="grid-body-left-container">',
			'          <div class="grid-body-left"></div>',
			'        </div>',
			'        <div class="grid-body-right-container">',
			'            <div class="grid-body-right"></div>',
			'        </div>',
			'        <!-- 表格提示信息-->',
			'        <div class="grid-notification-msg"></div>',
			'    </div>',
			'    <div class="clear"></div>',
			'    <!-- 表格页脚 -->',
			'    <div class="grid-footer">',
			'     <div class="grid-footer-left"></div>',
			'    <div class="grid-footer-right"></div>',
			'   </div>',
			' </div>',
			'</div>', // end of inner
		// '<span class="grid-content-scroll-v-mask-scroll"></span>', // 垂直滚动条
		// '<span class="grid-content-scroll-h-mask-scroll"></span>', // 水平滚动条
		'</div>', // end of outer
		'<div class="clear"></div>',
			' <!-- 分页栏 -->',
			'<div class="grid-pagination-bar"></div>',

		// 	'<span class="grid-content-scroll-v-mask-scroll"></span>', // 垂直滚动条
		// '<span class="grid-content-scroll-h-mask-scroll"></span>', // 水平滚动条 调整下位置
		'</div>'];

		$(gridBaseDomArray.join("")).appendTo(this.com);
		// 容器
		var container = $("div.grid-container", this.com);
		// 表格基础Dom对象 只有所有相关的操控 将基于以下对象 -- 初始化
		this.gridDom = {
			// grid最外层容器 (除了用户定义的div外)
			container: container,
			// 表格写入样式 Dom 对象 不是Jquery 对象
			style: container.children("style")[0],
			// 表格可能有的title
			title: $("div.grid-title", container),
			// 表格可能有的toolbar
			toolbar: $("div.grid-toolbar", container),
			// 表格滚动条遮罩
			contentScrollMaskOuter: $("div.grid-content-scroll-mask-outer", container),
			contentScrollMaskInner: $("div.grid-content-scroll-mask-inner", container),
			// 表格垂直滚动条
            contentScrollBarV: $("span.grid-content-scroll-v-mask-scroll", container),
			// 表格水平滚动条
			contentScrollBarH: $("span.grid-content-scroll-h-mask-scroll", container),

			// 表格的内容区 包含 header body footer
			content: $("div.grid-content", container),
			// header
			header: $("div.grid-header", container),
			// 可能有的左右header 用于列冻结功能
			headerLeft: $("div.grid-header-left", container),
			headerLeftContainer: $("div.grid-header-left-container", container),
			headerRight: $("div.grid-header-right", container),
			headerRightContainer: $("div.grid-header-right-container", container),
			// body
			body: $("div.grid-body", container),
			// 可能有的左右body 用于列冻结功能
			bodyLeftContainer: $("div.grid-body-left-container", container),
			bodyLeft: $("div.grid-body-left", container),
			bodyRightContainer: $("div.grid-body-right-container", container),
			bodyRight: $("div.grid-body-right", container),
			// footer
			footer: $("div.grid-footer", container),
			footerLeft: $("div.grid-footer-left", container),
			footerRight: $("div.grid-footer-right", container),
			// 提示信息
			notificationMsg: $("div.grid-notification-msg", container),
			// 分页栏
			paginationBar: $("div.grid-pagination-bar", container)
		};
	},
	/**
	 * 生成表头 目前只实现单层表头
	 * 该方法只会在表格初始化时被调用
	 * @return {[type]} [description]
	 */
	createHeaderDom: function() {

		if (this.conf.showHead === false) {
			this.gridDom.header.hide();
			return;
		}

		// 置为 true 假设全部为固定宽度 通过判断有一个不是固定的宽度的 则置为false
		// 且用户定义了表格全局宽度 那么此时应该忽略掉全局宽度
		var columnOptions = this.gridOptions.columnOptions;
		columnOptions.isAllFixedWidth = true;

		// 目前只支持单层表头
		var columns = this.conf.columns[0];
		// 表头dom结构
		var headerDomArray = [];
		headerDomArray.push('<div class="grid-head-row">');
		for (var i = 0, len = columns.length; i < len; i++) {
			headerDomArray.push(this.headerRender(columns[i]));
		}
		// 表格末尾增加一个占位单元格
		headerDomArray.push('<span class="grid-head-empty-cell">&nbsp;</span>');
		headerDomArray.push('</div>');
		// 填充表头
		this.gridDom.headerRight.html(headerDomArray.join(""));

		//  。。。。。 isAllFixedWidth = true ? 将表格整体宽度 置为最佳的固定宽度值:pass
	},
	/**
	 * 生成表头
	 * @return {[type]} [description]
	 */
	headerRender: function(column) {

		var cellDomStr = [];
		var style = "";
		if (column.width && column.width !== 'auto') {
			column.width = parseFloat(parseFloat(column.width, 10).toFixed(3));
			style += "width:" + column.width/ PJF.constants.DEFAULT_FONTSIZE + "rem;";
			// 算入固定总宽度
			this.gridOptions.columnOptions.fixedColumnWidth += column.width;
			// 是否使用用户自定义宽度
			column.isUserDefWidth = true;
		} else {
			// 至少有一列宽度不是固定的宽度
			this.gridOptions.columnOptions.isAllFixedWidth = false;
		}
		// 默认情况下 表头的布局首先可以自定义,之后则沿用列中内容的布局 ，最后采用defaultAlign指定布局
		column.headAlign = column.headAlign || column.align || this.conf.defaultAlign;
		style += "text-align:" + column.headAlign + ';';

		// 列title适配
		if (column.title === undefined) {
			column.title = "";
		}
		// 单元格结构
		cellDomStr.push('<div class="grid-cell grid-head-cell ' + this.gridOptions.gridColumnClassPrefix + column.field + (column.hidden ? " grid-hidden-cell" : "") + '" field="' + column.field + '" style="' + style + '">');
		// 包裹字符区域
		cellDomStr.push('<div class="grid-cell-container grid-head-cell-container" field="' + column.field + '">');
		// 如果是checkbox 或者  radio
		var checkOrRadio = this.isCheckOrRadio(column);
		if (checkOrRadio) {
			// 只有checkbox 类型 才在表头显示 checkbox 且 isShowCheckAllIcon 不能为false 如果为false则不显示checkbox
			cellDomStr.push('<div class="grid-ck ' + (column.isCheckbox && (this.conf.isShowCheckAllIcon !== false) ? ('grid-' + checkOrRadio) : "") + '" field="' + column.field + '"></div>');
			// 有checkbox or Radio 列 +66
			this.gridOptions.columnOptions.fixedColumnWidth += this.gridOptions.gridConstant.ckColumnWidth;
			// 表示是否存在checkbox or radio 方便点击选中行时 使用
			this.gridOptions.hasCheckOrRadio = true;
		} else {
			// 标题
			cellDomStr.push('<div class="cell-text header-cell-text" field="' + column.field + '">' + column.title + '</div>');
		}
		cellDomStr.push("</div></div>");
		return cellDomStr.join("");
	},

	/**
	 * 创建内容区 结构，如果传递了data属性，将根据data生成数据
	 * @param  {[Array or JSON]} data [JSON对象或者是JSON数组 ]
	 * @return {[type]}      [description]
	 */
	createBodyDom: function() {

		// 引用数据
		var data = this.gridData;

		// 没有数据
		if (data.rows.length === 0) {
			this.setNotificationMsg(true);
			return;
		}

		// 根据数据生成一行行数据
		this.bodyRender();
	},
	/**
	 * 生成内容区dom结构
	 * @return {[type]} [description]
	 */
	bodyRender: function() {
		// 当前要加载的行数据
		var currentLoadedData = this.gridCurrentLoadedRows;
		// 进入该方法的 必须是有数据的
		if (!currentLoadedData || !(currentLoadedData instanceof Array) || currentLoadedData.length === 0) {
			// 进入该方法的代码 数据应该是有的
			// alert('内部错误');
			return;
		}
		// 保存所有的行数据
		if (this.conf.isLocalPagination && !this.conf.url) {
			this.gridAllRows = this.gridData.rows;
		} else {
			this.gridAllRows = currentLoadedData;
		}
		
		var conf = this.conf;
		var columns = conf.columns[0];

		// 所有行dom
		var allRowsStr = [];

		// 当前页最后一次被选中的行
		var lastCheckedRowIndex = -1;
		// 选中状态
		var checkedFlag = false;
		// 判断当前行是否被选中了
		var checkOptions = this.gridOptions.checkOptions;
		var allPageCheckedRowIndexMap = checkOptions.allPageCheckedRowIndexMap;
		// 生成行数据结构
		for (var rowIndex = 0, len = currentLoadedData.length; rowIndex < len; rowIndex++) {
			// 由于所有页中 索引是绝对索引
			var absoluteRowIndex = this.getAbsoluteRowIndex(rowIndex);
			checkedFlag = allPageCheckedRowIndexMap.containsKey(absoluteRowIndex + '');
			// 保存一行的信息
			allRowsStr.push(this.rowRender(rowIndex, currentLoadedData[rowIndex], columns, checkedFlag));
			if (checkedFlag) {
				// 当前页最后一次选中索引
				lastCheckedRowIndex = rowIndex;
				// 添加到当前选中页里面去 ，不必重复添加到所有页选中中去
				this.addCheckedRowIndex(rowIndex, false);
			}
		}

		// 渲染具体内容前 将提示消息隐藏
		this.gridDom.notificationMsg.hide();

		// 将所有行的信息 放入到内容区中
		this.gridDom.bodyRight.html(allRowsStr.join(""));

		// 其它操作  处理翻页选择
		if (lastCheckedRowIndex != -1) {
			checkOptions.lastCheckedRowDom = this.getRowDom(lastCheckedRowIndex);
		}
	},

	/**
	 * 生成行数据结构 ,用于根据数据 生成一行的数据结构
	 * @param  {[type]} rowIndex [行索引]
	 * @param  {[type]} row      [当前行信息]
	 * @param  {[type]} columns  [列参数  只支持单行表头]
	 * @param  {[type]} checkedFlag  [当前行是否被选中]
	 * @return {[type]}          [description]
	 */
	rowRender: function(rowIndex, row, columns, checkedFlag) {

		var conf = this.conf;
		// 保存行dom
		var rowDomStr = [];
		// 行样式
		var rowStyle = this._rowStyler(rowIndex, row);

		// 添加奇偶行样式
		rowDomStr.push('<div class="grid-row' + ((rowIndex % 2 == 0) ? ' grid-row-odd' : "") + (checkedFlag ? ' grid-row-checked' : "") + '" rowIndex="' + rowIndex + '" style="' + rowStyle + '">');

		for (var i = 0, columnLen = columns.length; i < columnLen; i++) {
			var column = columns[i];
			// 默认的单元格样式（单元格最外层）
			var style = "";
			// 文字样式
			var cellTextStyle = "";

			// 根据列宽度 来定制具体的样式
			if (column.width && column.width !== 'auto') {
				column.width = parseFloat(parseFloat(column.width, 10).toFixed(3));
				style += "width:" + column.width/ PJF.constants.DEFAULT_FONTSIZE + "rem;";
				if (conf.nowrap === false) {
					cellTextStyle += "white-space:normal;";
					// 标识是否需要调整行高
					this.gridOptions.isNeedAdjustRowHeight = true;
				}
			}
			// 文字的对齐方式
			column.align = column.align || conf.defaultAlign;
			style += "text-align:" + column.align;

			// 一个单元格的最外层
			rowDomStr.push('<div class="grid-cell grid-body-cell ' + this.gridOptions.gridColumnClassPrefix + column.field + (column.hidden ? " grid-hidden-cell" : "") + '" field="' + column.field + '" style="' + style + '">');
			// 单元格包裹
			rowDomStr.push('<div class="grid-cell-container grid-body-cell-container" field="' + column.field + '">');
			// 如果是checkbox 或者  radio
			var checkOrRadio = this.isCheckOrRadio(column);
			if (checkOrRadio) {
				rowDomStr.push('<div class="grid-ck grid-' + checkOrRadio + (checkedFlag ? (' grid-' + checkOrRadio + '-checked') : "") + '" field="' + column.field + '"></div>');
			} else {
				// 单元格内容
				var cellText = row[column.field];
				if (column.formatter) {
					// value rowData rowIndex column
					cellText = column.formatter(cellText, row, rowIndex, column);
				}
				if (cellText == undefined) {
					cellText = "";
				}
				// 行号列
				if (column.rowNumber === true) {
					cellText = rowIndex + 1;
				}
				rowDomStr.push('<div class="cell-text body-cell-text" field="' + column.field + '" style="' + cellTextStyle + '">' + cellText + '</div>');
			}
			rowDomStr.push("</div></div>");
		}

		rowDomStr.push("</div>");

		return rowDomStr.join("");
	},

	/**
	 * 生成页脚
	 * @return {[type]} [description]
	 */
	createFooterDom: function() {
		// TODO
	},
	/*生成页脚*/
	footerRender: function() {
		// TODO
	},
	// *********************分页相关 *********************************
	/**
	 * 生成分页栏
	 * @return {[type]} []
	 */
	renderPagination: function() {
		// 创建基础的dom结构
		this.createPaginationDom();

		// 创建分页器 生成分页数字按钮等信息
		this.createPagination();

		// 注册事件等
		this.regPaginationBtnClickHandler();
	},

	/**
	 * 生成分页栏--或者说重置分页栏
	 * @return {[type]} [description]
	 */
	createPaginationDom: function() {
		// 不分页 直接返回
		if (!this.gridOptions.paginationOptions.pagination) {
			return;
		}

		// 分页栏的默认结构
		var paginationBarDomStr = [
			'<div class="grid-pagination-container">',
			'<span class="grid-pagination-btn grid-pagination-first"> </span>',
			'<span class="grid-pagination-btn grid-pagination-prev"> </span>',
			'<div class="grid-pagination-number-container"> </div>',
			'<span class="grid-pagination-btn grid-pagination-next"> </span>',
			'<span class="grid-pagination-btn grid-pagination-last"> </span>',
			'<span class="grid-pagination-btn grid-pagination-desc"> </span>', // 04/10
		'</div>'];

		// 生成基础结构
		var gridDom = this.gridDom;
		var paginationBar = this.gridDom.paginationBar;
		paginationBar.html(paginationBarDomStr.join(""));

		// 翻页按钮
		gridDom.paginationFirst = $("span.grid-pagination-first", paginationBar);
		gridDom.paginationPrev = $("span.grid-pagination-prev", paginationBar);
		gridDom.paginationNumber = $("div.grid-pagination-number-container", paginationBar);
		gridDom.paginationNext = $("span.grid-pagination-next", paginationBar);
		gridDom.paginationLast = $("span.grid-pagination-last", paginationBar);
		// 当前页/总页
		gridDom.paginationDesc = $("span.grid-pagination-desc", paginationBar);

		// 清空
		gridDom.paginationDesc.html("0/0");

	},
	/**
	 * 根据分页大小、总记录数 创建分页器
	 * @return {[type]} [description]
	 */
	createPagination: function() {
		// 表格数据
		var data = this.gridData || {};
		// 总记录数
		var total = data.total || 0;
        // 当前页码
        var current = Number( data[this.conf.currentPath] );

		// 小于0 直接pass
		if (total <= 0) {
			return;
		}

		// 分页参数
		var paginationOptions = this.gridOptions.paginationOptions;
		// 分页大小
		var pageSize = paginationOptions.pageSize;
        // 当前页码数字化
        if( isNaN( current )){
            current = null;
        }
		// *********************** 计算开始
        // 设置当前页码
        paginationOptions.currentPageNumber = current || paginationOptions.currentPageNumber ;

		// 总共多少页
		paginationOptions.totalPageNumber = Math.ceil(total / pageSize);
		// 总共分为多少组
		paginationOptions.totalPageGroupNumber = Math.ceil(paginationOptions.totalPageNumber / paginationOptions.showNumberSize);

		// 更新分页栏
		this.updatePagination();

		// 设置按钮启用、禁用功能
		this.updatePaginationBtnStatus();
	},
	/**
	 * 更新分页参数 如：当前第几页，每页显示多少条
	 * @param  {[int or Object]} pageSize [每页显示多少条，否则传JSON用于更新分页相关的其它参数]
	 * @param  {[type]} currentPageNumber          [当前第几页,如果为int表示第几页，**暂时不实现该功能***]
	 * @return {[type]}                   [description]
	 */
	updatePaginationParams: function(pageSize, currentPageNumber) {
		if (!arguments.length) {
			return;
		}
		// 分页参数
		var paginationOptions = this.gridOptions.paginationOptions;
		if (arguments.length == 1 && typeof(currentPageNumber) == 'Object') {
			$.extend(paginationOptions, currentPageNumber);
			return;
		}
		// 更新当前第几页 暂不实现
		// paginationOptions.currentPageNumber = currentPageNumber || paginationOptions.currentPageNumber;
		// 更新分页大小  每页请求多少条或者显示多少条
		paginationOptions.pageSize = pageSize || paginationOptions.pageSize;
	},

	/**
	 * 更新分页栏
	 * 根据页码 显示
	 * 页组显示
	 * @return {[type]} [description]
	 */
	updatePagination: function() {

		// 分页参数
		var paginationOptions = this.gridOptions.paginationOptions;

		// 如果是CCBS等交易 不做处理
		if(paginationOptions.reqType){
			return;
		}


		// 当前组
		var currentPageGroupNumber = paginationOptions.currentPageGroupNumber;

		// 显示多少个数字按钮
		var showNumberSize = paginationOptions.showNumberSize;
		// 当前页码
		var currentPageNumber = paginationOptions.currentPageNumber;
		// 总页数
		var totalPageNumber = paginationOptions.totalPageNumber;

		/**********传统数字分页  不做处理了 但依旧保留其dom结构 以最小修改***************/
		// 起始数字按钮
		// var startNumber = ((currentPageGroupNumber - 1) * showNumberSize) + 1;


		// // 末尾数字按钮
		// var endNumber = currentPageGroupNumber * showNumberSize

		// if (endNumber > totalPageNumber) {
		// 	endNumber = totalPageNumber;
		// }

		// // 数字按钮dom
		// var numberStrArray = [];
		// // 循环生成按钮
		// for (; startNumber <= endNumber; startNumber++) {
		// 	numberStrArray.push('<span class="grid-pagination-btn grid-pagination-number ' + (startNumber == currentPageNumber ? "grid-pagination-number-current" : "") + '" number="' + startNumber + '">' + (startNumber < 10 ? ('0' + startNumber) : startNumber) + '</span>');
		// 	numberStrArray.push('<span class="grid-pagination-btn grid-pagination-number grid-pagination-marginLine">|</span>');
		// }
		// // 移除最后一个 "|"
		// numberStrArray.pop();

		// // 更新到页面上
		// this.gridDom.paginationNumber&&this.gridDom.paginationNumber.html(numberStrArray.join(""));
		/*************结束*******************/

		// 更新分页按钮的状态
		this.updatePaginationBtnStatus();
	},
	/**
	 * 根据当前页码 设置翻页按钮的启用状态
	 * @return {[type]} [description]
	 */
	updatePaginationBtnStatus: function(firstStatus, prevStatus, nextStatus, lastStatus) {

		var gridDom = this.gridDom;

		// 默认情况下 全部禁用
		var first = false;
		var prev = false;
		var next = false;
		var last = false;


		// 根据当前页码、页组计算
		var paginationOptions = this.gridOptions.paginationOptions;
		// 页面
		var currentPageNumber = paginationOptions.currentPageNumber;
		var totalPageNumber = paginationOptions.totalPageNumber;
		// 当前至少为第二页 才启用首页
		if (currentPageNumber > 1) {
			first = true;
		}

		// 当前至少为第二页 才启用上一页
		if (currentPageNumber > 1) {
			prev = true;
		}

		// 当前不是末页才启用下一页
		if (currentPageNumber < totalPageNumber) {
			next = true;
		}

		// 当前不是末页才启用末页
		if (currentPageNumber < totalPageNumber) {
			last = true;
		}

		// ============================================
		// 最后根据 指定参数定制
		if (firstStatus != undefined) {
			first = firstStatus;
		}
		if (prevStatus != undefined) {
			prev = prevStatus;
		}
		if (nextStatus != undefined) {
			next = nextStatus;
		}
		if (lastStatus != undefined) {
			last = lastStatus;
		}



		// 设置首页、上页、下页、末页按钮状态
		// setBtnStatus(gridDom.paginationFirst, 'first', first);
		// setBtnStatus(gridDom.paginationPrev, 'prev', prev);
		// setBtnStatus(gridDom.paginationNext, 'next', next);
		// setBtnStatus(gridDom.paginationLast, 'last', last);

		// 更新变量状态
		paginationOptions.paginationBtnStatus = {
			first: first,
			prev: prev,
			next: next,
			last: last
		};

		// 当前页/总页
		currentPageNumber = currentPageNumber > 9 ? currentPageNumber : ("0" + currentPageNumber);
		totalPageNumber = totalPageNumber > 9 ? totalPageNumber : ("0" + totalPageNumber);
		gridDom.paginationDesc && gridDom.paginationDesc.html(currentPageNumber + "/" + totalPageNumber);


		// 设置分页信息
		/**********************/
		if (prev) {
			paginationOptions.prevBtn && paginationOptions.prevBtn.enable();
		} else {
			paginationOptions.prevBtn && paginationOptions.prevBtn.disable();
		}

		if (next) {
			paginationOptions.nextBtn && paginationOptions.nextBtn.enable();
		} else {
			paginationOptions.nextBtn && paginationOptions.nextBtn.disable();
		}
		paginationOptions.paginationDesc && paginationOptions.paginationDesc.html(currentPageNumber + "/" + totalPageNumber);

		// 发布表格页码变更事件
		PJF.event.publish(this.conf.dom + '_PageChange', {
			target: this, // 表格对象
			currentPageNumber: parseInt(currentPageNumber, 10), // 当前页码
			totalPageNumber: totalPageNumber, // 总页码
			prevBtnStatus: prev, // 上一页按钮状态
			nextBtnStatus: next // 下一页按钮状态
		});
		/**********************/
		// 设置按钮的状态
		// function setBtnStatus(btnDomObject, btnName, flag) {
		// 	var className = "grid-pagination-" + btnName + "-disable";
		// 	// 启用
		// 	if (flag) {
		// 		btnDomObject.removeClass(className);
		// 	} else {
		// 		btnDomObject.removeClass(className).addClass(className);
		// 	}
		// };
	},
	/**
	 * 注册分页按钮点击事件
	 * @return {[type]} [description]
	 */
	regPaginationBtnClickHandler: function() {

		var me = this;
		var gridDom = this.gridDom;
		var paginationOptions = this.gridOptions.paginationOptions;
		if (paginationOptions.pagination === false) {
			return;
		}
		// 事件绑定
		gridDom.paginationNumber.unbind().bind('click', function(event) {
			var target = $(event.target);
			// 点到 非 数字按钮 直接返回
			if (!target.hasClass('grid-pagination-number') || target.hasClass("grid-pagination-marginLine")) {
				return;
			}
			// 点到数字按钮
			var pageNumber = parseInt(target.attr('number'), 10);

			// 发送请求或者执行本地数据加载
			me.pageChangeHandler(pageNumber);
			event.stopPropagation();
		});
		// 首页
		gridDom.paginationFirst.unbind().bind('click', function(event) {
			if (!paginationOptions.paginationBtnStatus.first) {
				return;
			}
			me.pageChangeHandler(1, 1);
			event.stopPropagation();
		});
		// 上一页
		gridDom.paginationPrev.unbind().bind('click', function(event) {
			if (!paginationOptions.paginationBtnStatus.prev) {
				return;
			}
			// 请求上一页
			if(paginationOptions.reqType){
				me.specialPageChangeHandler(true);
				event.stopPropagation();
				return;
			}

			var currentPageNumber = paginationOptions.currentPageNumber;
			currentPageNumber -= 1;
			if (currentPageNumber < 1) {
				alert("Error: 内部逻辑错误 currentPageNumber =  " + currentPageNumber);
				return;
			}
			me.pageChangeHandler(currentPageNumber);
			event.stopPropagation();
		});
		// 下一页
		gridDom.paginationNext.unbind().bind('click', function(event) {
			if (!paginationOptions.paginationBtnStatus.next) {
				return;
			}
			// 请求上一页
			if(paginationOptions.reqType){
				me.specialPageChangeHandler(false);
				event.stopPropagation();
				return;
			}
			var currentPageNumber = paginationOptions.currentPageNumber;
			currentPageNumber += 1;
			if (currentPageNumber > paginationOptions.totalPageNumber) {
				alert("Error: 内部逻辑错误 currentPageNumber =  " + currentPageNumber + " > totalPageNumber(" + paginationOptions.totalPageNumber + ")");
				return;
			}
			me.pageChangeHandler(currentPageNumber);
			event.stopPropagation();
		});
		// 末页
		gridDom.paginationLast.unbind().bind('click', function(event) {
			if (!paginationOptions.paginationBtnStatus.last) {
				return;
			}
			me.pageChangeHandler(paginationOptions.totalPageNumber, paginationOptions.totalPageGroupNumber);
			event.stopPropagation();
		});

	},
	/**
	 * 处理页面、页组变更
	 * @param  {[type]} newPageNumber      [description]
	 * @param  {[type]} newPageGroupNumber [description]
	 * @return {[type]}                    [description]
	 */
	pageChangeHandler: function(newPageNumber, newPageGroupNumber) {
		// 用户监听
		if (this.conf.pageChangeHandler) {
			var flag = this.conf.pageChangeHandler(newPageNumber);
			if (flag === false) {
				return;
			}
		}
		// 默认处理逻辑
		var paginationOptions = this.gridOptions.paginationOptions;

		// keep the previous currentPageNumber for reset when reqFail....
		paginationOptions.preCurrentPageNumber = paginationOptions.currentPageNumber;

		// 还是点击的是当前页
		if (paginationOptions.currentPageNumber == newPageNumber) {
			return;
		}

		// 调整当前分页
		paginationOptions.currentPageNumber = newPageNumber;
		// 如果没有指定 新的页组， 根据当前页面 计算当前合适的页组
		if (!newPageGroupNumber) {
			newPageGroupNumber = Math.ceil(newPageNumber / paginationOptions.showNumberSize);
		}
		// 更新当前的页组
		paginationOptions.currentPageGroupNumber = newPageGroupNumber;

		// 只清空当前页选中
		if (paginationOptions.isAppendMode === false) {
			this.clearCheckedRowIndex(false);
		}

		// 更新分页栏
		this.updatePagination();

		// 1. 执行数据加载 -- 此处可能有重复执行加载的情况
		this._loadData();
		// 2. 调整样式  --- 此处取消表格调整 统一挪到表格加载完毕之后执行
		// this.adjustGridStyle();
	},
	/**
	 * [ 针对CCBS等交易 翻页操作 direction=true 前一页 ， false　下一页]
	 * @return {[type]} [description]
	 */
	specialPageChangeHandler:function  (direction) {
		// 用户监听
		if (this.conf.pageChangeHandler) {
			var flag = this.conf.pageChangeHandler(direction);
			if (flag === false) {
				return;
			}
		}
		// 请求上一页 还是下一页
		this.gridOptions.paginationOptions.reqDirection = direction;
		// 1. 执行数据加载 -- 此处可能有重复执行加载的情况
		this._loadData();
	},
	// when reqFail need reset the current page number ...
	pageChangeFailure: function() {
		// 如果当前不存在分页栏位 返回
		if (!this.gridDom.paginationNumber) {
			return;
		}
		var paginationOptions = this.gridOptions.paginationOptions;
		paginationOptions.currentPageNumber = paginationOptions.preCurrentPageNumber || 1;
		this.updatePagination();
	},
	/**
	 * 显示loading
	 * @return {[type]} [description]
	 */
	showLoading: function(isReset) {
		var gridDom = this.gridDom;
		if (this.gridOptions.paginationOptions.showLoading) {
			return;
		}
		if (!gridDom.loadingMask) {
			var loadingMask = '<div id="' + this.conf.dom + '_grid_loadding" class="grid-loading-mask"> </div>';
			var loadingMsg = '<div class="grid-loading-container"><div class="grid-loading-content">' + this.conf.loadingMsg + '</div></div>';
			gridDom.loadingMask = $(loadingMask).appendTo(gridDom.contentScrollMaskOuter);
			gridDom.loadingMsg = $(loadingMsg).appendTo(gridDom.contentScrollMaskOuter);
		}
		// 首先显示 以免后续获取提示信息高度、宽度信息失败
		gridDom.loadingMask.css("display", "block");
		gridDom.loadingMsg.css("display", "block");
		this.gridOptions.paginationOptions.showLoading = true;
	},
	/**
	 * 移除loading
	 * @return {[type]} [description]
	 */
	removeLoading: function() {
		var loadingMask = this.gridDom.loadingMask;
		var loadingMsg = this.gridDom.loadingMsg;
		if (loadingMask) {
			loadingMask.css("display", "none");
			loadingMsg.css("display", "none");
		}
		this.gridOptions.paginationOptions.showLoading = false;
	},
	/**
	 * 重置分页，包含重置分页相关的参数、内部变量、页面效果等
	 * @return {[type]} [description]
	 */
	resetPagination: function() {
		var paginationOptions = this.gridOptions.paginationOptions;
		// 重置分页相关的参数
		PJF.apply(paginationOptions, {
			// 当前页码 默认为1
			currentPageNumber: 1,
			// 第几组 默认为 1
			currentPageGroupNumber: 1,
			// 总共几组
			totalPageGroupNumber: 1,
			// 总共多少页
			totalPageNumber: 1,
			// 分页按钮 前一页 下一页 首页 末页 状态  ****重置**
			paginationBtnStatus: {
				first: false,
				prev: false,
				next: false,
				last: false
			}
		});

		// 重置滚动状态
		PJF.apply(this.gridOptions, {
			lastScrollTop: -1
		})

		// 刷新分页栏信息
		this.renderPagination();
	},
	// *********************分页相关结束 *********************************
	_generatePrependPageStyle: function() {
		var appendStyleArray = [];
		// 添加可能有的附加样式 如：内容padding等
		if (this.conf.customHeaderStyle) {
			// 使用当前的dom ID 作为查询条件
			var currentDomId = this.conf.dom;
			for (var x in this.conf.customHeaderStyle) {
				var styleText = this.conf.customHeaderStyle[x];
				if (styleText instanceof Array) {
					styleText = styleText.join(';');
				}
				// 为表头的内容添加自定义样式
				appendStyleArray.push('#' + currentDomId + ' div.header-cell-text[field="' + x + '"]{' + styleText + '}');
			}
		}
		return appendStyleArray.join('');
	},
	/**
	 * 添加前置样式
	 * @return {[type]} [description]
	 */
	addPrependPageStyle: function() {
		// 写入页面
		var prependPageStyle = this._generatePrependPageStyle();
		try {
			this.gridDom.style.innerHTML = this.gridDom.style.innerHTML + prependPageStyle;
		} catch (e) {
			this.gridDom.style.styleSheet.cssText = this.gridDom.style.innerHTML + prependPageStyle;
		}
	},
	/**
	 * 更新页面样式-用于控制列宽
	 * @return {[type]} [description]
	 */
	updatePageStyle: function(fixLen, lastOneAppend) {

		var gridOptions = this.gridOptions;

		// 只需要更新自适应列
		var columns = gridOptions.columnOptions.autoColumns;
		// 样式表
		var styleArray = [];

		// 添加可能有的附加样式 如：内容padding等
		styleArray.push(this._generatePrependPageStyle());

		for (var i = 0, len = columns.length; i < len; i++) {
			var column = columns[i];
			if (fixLen >= 0) {
	            //等比缩放 2015年10月23日15:31:09
				var columnNewWidth = column.currentColumnMaxWidth * (parseInt($('html').css('fontSize'))/100) + fixLen;
				if (i + 1 == len) {
					columnNewWidth += (lastOneAppend || 0);
				}
			} else {
				var columnNewWidth = column.currentColumnMaxWidth * (parseInt($('html').css('fontSize'))/100);
			}
			styleArray.push('.' + gridOptions.gridColumnClassPrefix + column.field + '{width:' + columnNewWidth + 'px;min-width:' + columnNewWidth + 'px;}');
		}

		// 写入页面
		try {
			this.gridDom.style.innerHTML = styleArray.join("");
		} catch (e) {
			this.gridDom.style.styleSheet.cssText = styleArray.join("");
		}
	},
	/**
	 * 内部对数据进行过滤
	 * @return {[type]} [description]
	 */
	_dataFilter: function(tempData) {

		if (this.gridOptions.paginationOptions.isAppendMode && this.gridOptions.status > 1) {
			return this._dataFormatter(tempData);
		}

		// 格式化加载的数据
		this._dataFormatter();


		// 当前要加载的数据 默认是所有
		var currentLoadedData = this.gridData.rows;

		// 保存索引位
		var startIndex = -1;
		var endIndex = -1;

		// 采用本地分页 才分段取数据可以
		var paginationOptions = this.gridOptions.paginationOptions;
		if (paginationOptions.isLocalPagination) {
			var currentPageNumber = paginationOptions.currentPageNumber;
			var pageSize = paginationOptions.pageSize;
			// 索引起始
			startIndex = (currentPageNumber - 1) * pageSize;
			// 索引结束
			endIndex = currentPageNumber * pageSize;
			// 当前要加载的数据
			currentLoadedData = currentLoadedData.slice(startIndex, endIndex);
		}
		// 当前行中 表格真正加载到当前表格中的数据
		this.gridCurrentLoadedRows = currentLoadedData;

		// 对数据进行排序 并使用排序后数据 替换原始数组中对应的数据
		this._dataSorter(startIndex, endIndex);

	},
	/**
	 * 数据格式化  格式化成以下格式
	 *  {
	 *  total:int,
	 *  rows:[]
	 * }
	 * @return {[type]} [description]
	 */
	_dataFormatter: function(tempData) {

		var isFromReq = !! tempData;

		this.gridData = this.gridData || {};

		// 说明是发交易请求回来的 此时gridData的格式应该为标准格式
		if (tempData) {
			this.tempData = tempData;
		} else {
			this.tempData = this.gridData || {};
		}
		// 加载空数据
		if (!this.tempData) {
			this.tempData = {
				total: 0,
				rows: []
			};

		} else if (this.tempData instanceof Array) {
			// 如果加载的数据是个数组 则组装成标准格式
			this.tempData = {
				total: this.tempData.length,
				rows: this.tempData
			};
		} else {
			// total字段
			// 如果没有rows属性
			if (this.tempData.rows === undefined) {
				try {
					var rowsExpress = 'this.tempData.' + this.conf.rowsPath;
					this.tempData.rows = eval('(' + rowsExpress + ')');
					if (!this.tempData.rows) {
						this.tempData.rows = [];
					}else{

                        //----------add(start)---------- 2015年11月11日20:52:07 zws 修复 data 为OBJECT 发生异常
                        if($.isPlainObject(this.tempData.rows)){
                            this.tempData.rows = [].concat( this.tempData.rows );
                        }
                        //----------add(end)----------

                    }
				} catch (e) {
					// eval失败
					this.tempData.rows = [];
				}
			} else {
				if (!(this.tempData.rows instanceof Array)) {

                    //----------add(start)---------- 2015年11月11日20:52:07 zws 修复 data 为OBJECT 发生异常
                    if($.isPlainObject(this.tempData.rows)){
                        this.tempData.rows = [].concat( this.tempData.rows );
                    }else{
                     //----------add(end)----------

                        alert("Error: 表格数据中 rows属性必须为数组或者对象object！");
                        this.tempData.rows = [];

                    //----------add(start)---------- 2015年11月11日20:52:07 zws 修复 data 为OBJECT 发生异常
                    }
                    //----------add(end)----------

				}
			}

			// 有total字段 就直接用已有total属性 ，不使用totalPath指定的
			// 没有total字段 则根据totalPath再取，如果取不到，最后根据rows取
			// 没有total字段
			if (this.tempData.total === undefined) {
				try {
					var totalExpress = 'this.tempData.' + this.conf.totalPath;
					this.tempData.total = eval('(' + totalExpress + ')');
				} catch (e) {
					this.tempData.total = 0;
				}
			}
			// 转成字符串
			try {
				this.tempData.total = parseInt(this.tempData.total, 10);
				if (!this.tempData.total) {
					this.tempData.total = 0;
				}
			} catch (e) {
				alert("Error: 表格数据中 total字段不是数字！");
				this.tempData.total = 0;
			}

			// 如果total字段依然为0 则尝试使用 数组的长度

			if (this.tempData.total === 0) {
				this.tempData.total = this.tempData.rows.length;
			}
		}
		// 发交易回来的数据 保存数据
		if (isFromReq) {
			this.gridData.rows = (this.gridData.rows || []).concat(this, this.tempData.rows);
			return this.tempData.rows;
		} else { // 本地加载的数据
			this.gridData = this.tempData;
		}
	},
	/**
	 * 对数据进行排序操作 默认情况下 只排序当前要加载的
	 * 1. 表格的默认排序 根据sortName参数指定列名
	 * 2. 排序函数首选column属性中sorter函数，否则默认进行字符串比较
	 * 3. 排序方式默认使用'asc'升序
	 * @return {[type]} [description]
	 */
	_dataSorter: function(startIndex, endIndex) {

		var sortName = this.conf.sortName;
		// 没有指定按哪列排序 则不排序
		if (!sortName) {
			return;
		}
		// 排序方式
		var sortOrder = this.conf.sortOrder;

		var column = this.getColumn(sortName);
		if (!column) {
			alert("Error: 参数sortName(" + sortName + ")指定的列不存在！");
			return;
		}

		// 首选列属性sorter 进行排序
		var sorterCallBack = column.sorter || function(prevValue, nextValue, prevRow, nextRow) {
				return prevValue > nextValue ? 1 : -1;
			};

		// 对当前要加载的数据进行排序
		this.gridCurrentLoadedRows.sort(function(prevRow, nextRow) {
			return sorterCallBack(prevRow[sortName], nextRow[sortName], prevRow, nextRow) * ((sortOrder == 'asc') ? 1 : -1);
		});

		// 本地分页 则替换rows中 从 startIndex 到 endIndex中的数据
		var paginationOptions = this.gridOptions.paginationOptions;
		if (paginationOptions.isLocalPagination) {
			this.gridData.rows.splice.apply(this.gridData.rows, [startIndex, paginationOptions.pageSize].concat(this.gridCurrentLoadedRows));
		} else {
			// 使用排序后的数据
			this.gridData.rows = this.gridCurrentLoadedRows;
		}
	},

	/**
	 * [[内部-与对外暴露方法重名]]数据加载流程
	 * @return {[type]} [description]
	 */
	_loadData: function() {

		var conf = this.conf;

		this.showLoading();

		// 如果传递了参数 则应该发送交易取数据
		if (conf.url) {
			this._doSendReq();
		} else {
			this._doLoadData();
		}
	},
	/**
	 * 更新请求参数
	 * 类似{url:'',queryParams:{jsonData:{'A':'1'},'other':'2'}}
	 * @return {[type]} [description]
	 */
	updateReqParams: function(params) {
		$.extend(this.conf, params);
	},
	/**
	 * 准备当前的请求参数
	 * @return {[type]} [description]
	 */
	_prepareReqParams: function() {
		var conf = this.conf;
		var paginationOptions = this.gridOptions.paginationOptions;
		var queryParams = conf.queryParams;

		if (!queryParams) {
			return;
		}
		queryParams.jsonData = queryParams.jsonData || {};
		var jsonData = queryParams.jsonData;
		if (typeof(queryParams.jsonData) == 'string') {
			try {
				queryParams.jsonData = eval('(' + queryParams.jsonData + ')');
			} catch (e) {
				alert("Error: queryParams属性jsonData不是标准的JSON字符串。");
			}
		}

		// 分页参数信息
		// 每页显示多少条的参数的key的名字
		var REC_IN_PAGE_Key = conf.pageSizeParamName || "REC_IN_PAGE";
		// 现在请求第几页的参数的key的名字
		var PAGE_JUMP_key = conf.pageNumberParamName || "PAGE_JUMP";
		var paginationParams = {};
		paginationParams[REC_IN_PAGE_Key] = paginationOptions.pageSize;
		paginationParams[PAGE_JUMP_key] = paginationOptions.currentPageNumber;

		// 分页参数存放位置
		var paginationParamsLevelName = conf.paginationParamsLevelName || "_pagination";
		// 放在根层
		if (paginationParamsLevelName == '.') {
			for (var x in paginationParams) {
				queryParams.jsonData[x] = paginationParams[x];
			}
		} else {
			queryParams.jsonData[paginationParamsLevelName] = paginationParams;
		}
		// 如果存在reqType 则另外再处理
		return this._handleReqTypeParams(paginationOptions, queryParams);
		// 转为String --- 修改为不需要转为String
		// queryParams.jsonData = PJF.util.json2str(queryParams.jsonData);
	},
	/**
	 * [ 根据reqType再做处理]
	 * @return {[type]} [description]
	 */
	_handleReqTypeParams: function(paginationOptions, queryParams) {
		var reqType = paginationOptions.reqType;
		switch (reqType) {
			case 'CCBS':
				return this._setCCBSReqParams(paginationOptions, queryParams);
				break;
            case 'P6':
                return this._setP6ReqParams(paginationOptions, queryParams);
                break;
            case 'P6_1': //与P6的差别在往前翻页还是用的当前页的PAGE_STA_KEY，而P6用的上一页的
                return this._setP6_1ReqParams(paginationOptions, queryParams);
                break;
            case 'CCMS':
                return this._setCCMSReqParams(paginationOptions, queryParams);
                break;
			default:
		}

	},
	/**
	 * 根据上一次的返回数据  获取到想要的数据 针对reqType为 CCBS等交易
	 * @param  {[type]}  key          [description]
	 * @param  {Boolean} isParseInt   [description]
	 * @param  {[type]}  defaultValue [description]
	 * @return {[type]}               [description]
	 */
	_getReqTypeValueByKey: function(key, isParseInt, defaultValue) {
		// var keyPath = "jd." + opts.ccbsPath + "." + key;
		// 修改获取数据在根层的问题
		var keyPath = "";
		var paginationOptions = this.gridOptions.paginationOptions;

		if (paginationOptions.ccbsPath == ".") {
			keyPath = "this.gridData." + key;
		} else {
			keyPath = "this.gridData." + paginationOptions.ccbsPath + "." + key;
		}

		var value = "";
		try {
			value = eval("(" + keyPath + ")");
			value = (value == undefined) ? "" : value;
		} catch (e) {
			value = "";
		}

		if (isParseInt) {
			try {
				value = parseInt(value);
				if (isNaN(value)) {
					value = (defaultValue ? defaultValue : 0);
				}
			} catch (e) {
				value = (defaultValue ? defaultValue : 0);
				if (typeof(console) != "undefined") {
					console.log("Error--> parse value(" + value + ") to int error!");
				}
			}
		}

		return value;
	},
	/**
	 * 设置CCBS请求参数
	 * @return {[type]} [description]
	 */
	_setCCBSReqParams: function(paginationOptions, queryParams) {
		var CCBS_Info = {};
		// 第一次发送请求
		if (paginationOptions.isFirstReq) {
			CCBS_Info["INM_MSG_STATUS"] = 32769;
			CCBS_Info["INM_PAGE_CTL"] = {};
			CCBS_Info.INM_PAGE_CTL["INM_PAGE_UP_DOWN"] = 0;
		} else {
			// 第二次请求
			// 取得信息
			var lastData = this.gridData;

			var PAGE_STA_KEY = this._getReqTypeValueByKey("OPM_PAGE_CTL.OPM_PAGE_STA_KEY");
			var PAGE_END_KEY = this._getReqTypeValueByKey("OPM_PAGE_CTL.OPM_PAGE_END_KEY");
			var CONV_NO_DATA = this._getReqTypeValueByKey("OPM_PAGE_CTL.OPM_PAGE_NO_DATA");



			/*如果之前还没有取到 再取一次 适配可能的中途添加修改*/
			// if (!paginationOptions.OPM_ITI_ID) {
				paginationOptions.OPM_ITI_ID = this._getReqTypeValueByKey("OPM_ITI_ID");
			// }
			/*上传INM_ITI_ID*/
			CCBS_Info["INM_ITI_ID"] = paginationOptions.OPM_ITI_ID;

			CCBS_Info["INM_MSG_STATUS"] = 36865;
			CCBS_Info["INM_PAGE_CTL"] = {};
			CCBS_Info.INM_PAGE_CTL["INM_PAGE_STA_KEY"] = '';
			CCBS_Info.INM_PAGE_CTL["INM_PAGE_END_KEY"] = '';

			if (paginationOptions.reqDirection) { // 上页
				if (PAGE_STA_KEY == paginationOptions.firstSTA_KEY) {
					return false;
				} else {
					CCBS_Info.INM_PAGE_CTL["INM_PAGE_UP_DOWN"] = 1;
				}
				var prev_page_sta_key = paginationOptions.PAGE_STA_KEY_ARRAY.pop();
				console.log('请求上页--->'+prev_page_sta_key);
				CCBS_Info.INM_PAGE_CTL["INM_PAGE_STA_KEY"] = prev_page_sta_key || "";

			} else { // 下页
				if (CONV_NO_DATA == "1") {
					return false;
				} else {
					CCBS_Info.INM_PAGE_CTL["INM_PAGE_UP_DOWN"] = 2;
				}
				CCBS_Info.INM_PAGE_CTL["INM_PAGE_END_KEY"] = PAGE_END_KEY;
			}


		}
		// jsonDataEx[opts.sendPath] = CCBS_Info;
		var jsonDataEx = queryParams.jsonData;
		if (paginationOptions.sendPath == ".") {
			for (var x in CCBS_Info) {
				jsonDataEx[x] = CCBS_Info[x];
			}
		} else {
			jsonDataEx[paginationOptions.sendPath] = CCBS_Info;
		}
	},
    _setP6ReqParams:function( paginationOptions, queryParams ){
        var P6_Info = {};
        if ( paginationOptions.isFirstReq ) {

            P6_Info["FLOW_STATUS"] = "00000000";

        }else{
            //KEY1 获取this.gridData中的 req 参数
            var FLOW_STATUS = this._getReqTypeValueByKey("FLOW_STATUS");

            if ( FLOW_STATUS == "00000000" ) {
                if ( typeof( console ) != "undefined" ) {
                    console.log("Error: 主机系统已经主动终止了本套会话，外围系统不可在继续交谈！");
                }
                return false;
            }

            var PAGE_STA_KEY = this._getReqTypeValueByKey( "PAGE_STA_KEY");
            var PAGE_END_KEY = this._getReqTypeValueByKey( "PAGE_END_KEY");
            var CONV_NO_DATA = this._getReqTypeValueByKey( "CONV_NO_DATA");
            var FLOW_ITI_ID  = this._getReqTypeValueByKey( "FLOW_ITI_ID" );

            P6_Info["FLOW_STATUS"]  = FLOW_STATUS;     //@param FLOW_STATUS
            P6_Info["FLOW_ITI_ID"]  = FLOW_ITI_ID;     //@param FLOW_ITI_ID
            P6_Info["PAGE_STA_KEY"] = PAGE_STA_KEY;    //@param PAGE_STA_KEY
            P6_Info["PAGE_END_KEY"] = PAGE_END_KEY;    //@param PAGE_END_KEY

            //KEY2 根据请求设置上下页参数
            if ( paginationOptions.reqDirection ) {

                var PREV_PAGE_STA_KEY= paginationOptions.PAGE_STA_KEY_ARRAY.pop();

                P6_Info["PAGE_UP_DOWN"] = 1;
                P6_Info["PAGE_STA_KEY"] = PREV_PAGE_STA_KEY || "";

            } else {
                if ( CONV_NO_DATA == "Y" ) {
                    return false;
                } else {
                    P6_Info["PAGE_UP_DOWN"] = 2;
                }

            }
        }
        var jsonDataEx = queryParams.jsonData;

        if ( paginationOptions.sendPath == ".") {
            for(var x in P6_Info){
                jsonDataEx[x]=P6_Info[x];
            }
        }else{
            jsonDataEx[paginationOptions.sendPath] = P6_Info ;
        }
    },
    _setP6_1ReqParams:function( paginationOptions, queryParams ){
        var P6_Info = {};
        if ( paginationOptions.isFirstReq ) {

            P6_Info["FLOW_STATUS"] = "00000000";

        }else{
            //KEY1 获取this.gridData中的 req 参数
            var FLOW_STATUS = this._getReqTypeValueByKey("FLOW_STATUS");

            if ( FLOW_STATUS == "00000000" ) {
                if ( typeof( console ) != "undefined" ) {
                    console.log("Error: 主机系统已经主动终止了本套会话，外围系统不可在继续交谈！");
                }
                return false;
            }

            var PAGE_STA_KEY = this._getReqTypeValueByKey( "PAGE_STA_KEY");
            var PAGE_END_KEY = this._getReqTypeValueByKey( "PAGE_END_KEY");
            var CONV_NO_DATA = this._getReqTypeValueByKey( "CONV_NO_DATA");
            var FLOW_ITI_ID  = this._getReqTypeValueByKey( "FLOW_ITI_ID" );

            P6_Info["FLOW_STATUS"]  = FLOW_STATUS;     //@param FLOW_STATUS
            P6_Info["FLOW_ITI_ID"]  = FLOW_ITI_ID;     //@param FLOW_ITI_ID
            P6_Info["PAGE_STA_KEY"] = PAGE_STA_KEY;    //@param PAGE_STA_KEY
            P6_Info["PAGE_END_KEY"] = PAGE_END_KEY;    //@param PAGE_END_KEY

            //KEY2 根据请求设置上下页参数
            if ( paginationOptions.reqDirection ) {

                var PREV_PAGE_STA_KEY= paginationOptions.PAGE_STA_KEY_ARRAY.pop();

                P6_Info["PAGE_UP_DOWN"] = 1;
                //P6_Info["PAGE_STA_KEY"] = PREV_PAGE_STA_KEY || "";

            } else {
                if ( CONV_NO_DATA == "Y" ) {
                    return false;
                } else {
                    P6_Info["PAGE_UP_DOWN"] = 2;
                }

            }
        }
        var jsonDataEx = queryParams.jsonData;

        if ( paginationOptions.sendPath == ".") {
            for(var x in P6_Info){
                jsonDataEx[x]=P6_Info[x];
            }
        }else{
            jsonDataEx[paginationOptions.sendPath] = P6_Info ;
        }
    },
    _setCCMSReqParams:function( paginationOptions, queryParams ){
        var CCMS_Info = {};
            CCMS_Info['INQUIRE_NUM'] = paginationOptions.pageSize;
        if ( paginationOptions.isFirstReq ) {
            CCMS_Info['PAGE_NO'] = 1 ;
        }else{
            var CUT_PAGE_NUM = parseInt( this._getReqTypeValueByKey( "PAGE_NO" ) );
            var TOT_PAGE_NUM = parseInt( this._getReqTypeValueByKey( "TOT_PAGE_NUM" ) );
            if( paginationOptions.reqDirection ){    //上一页
                if( CUT_PAGE_NUM == 1 ){ return false; }
                CCMS_Info['PAGE_NO'] = CUT_PAGE_NUM - 1;
            }else{                                  //下一页
                if( CUT_PAGE_NUM == TOT_PAGE_NUM || TOT_PAGE_NUM == 0 ){  return false; }
                CCMS_Info['PAGE_NO'] = CUT_PAGE_NUM + 1;
            }
        }
        var jsonDataEx = queryParams.jsonData;

        if( paginationOptions.sendPath === '.' ){
            for(var x in CCMS_Info){
                jsonDataEx[x]=CCMS_Info[x];
            }
        }else{
            jsonDataEx[ paginationOptions.sendPath ] = CCMS_Info ;
        }
    },
	/**
	 * 执行请求发送
	 * @return {[type]}                 [description]
	 */
	_doSendReq: function() {
		var conf = this.conf;
		var me = this;
		// 准备交易数据
		if (this._prepareReqParams() === false) {
			return;
		}

		// 发交易前回调
		if (conf.onBeforeLoad.call(this, conf.queryParams) === false) {
			// 执行空数据加载
			this._successCallBack();
			return;
		}

		// 执行数据请求操作
		//$.ajax({
		//	//请求地址
		//	url: conf.url,
		//	//默认为json格式
		//	dataType: conf.dataType || PJF.constants.AJAX_DATA_TYPE,
		//	//传递的数据
		//	data: conf.queryParams,
		//	//同步模式：默认为异步
		//	async: conf.async,
		//	//jquery的param()方法，为true则采用jquery1.4之前版本的解析方式
		//	traditional: conf.traditional,
		//	//默认为post
		//	type: conf.type || PJF.constants.AJAX_METHOD,
		//	//默认为10秒
		//	timeout: conf.timeOut || PJF.constants.AJAX_TIMEOUT,
		//	success: function(data, ts, jq) {
		//		me._successCallBack(data, ts, jq);
		//	},
		//	//通信失败回调函数
		//	error: function(jq, ts, error) {
		//		me._errorCallBack(jq, ts, error);
		//	},
		//	/*请求完成后回调函数*/
		//	complete: function() {
        //
		//	}
		//});
		PJF.communication.cpsJsonReq($.extend({}, conf.queryParams, {
			//请求地址
			url: conf.url,
			//默认为json格式
			dataType: conf.dataType || PJF.constants.AJAX_DATA_TYPE,
			//传递的数据
			data: conf.queryParams,
			// 不再显示全局的遮罩
			maskAll: false,
			//同步模式：默认为异步
			async: conf.async,
			//jquery的param()方法，为true则采用jquery1.4之前版本的解析方式
			traditional: conf.traditional,
			//默认为post
			type: conf.type || PJF.constants.AJAX_METHOD,
			//默认为15秒
			timeOut: conf.timeOut || PJF.constants.AJAX_TIMEOUT,
			//交易且业务成功回调函数
			success: function(data) {
				me._successCallBack(data);
			},
			//通讯成功但业务失败回调函数
			failure: function(data) {
				// 此处的failure为grid的交易业务逻辑失败(BK_CODE不满足情况)逻辑
				me._successCallBack(data);
			},
			//通信失败回调函数
			error: function(jq, ts, error) {
				me._errorCallBack(jq, ts, error);

			}
		}));
	},
	/**
	 * [成功(通信成功)时的回调]
	 * @return {[type]} [description]
	 */
	_successCallBack: function(data, ts, jq) {
		if (this.gridOptions.paginationOptions.isAppendMode && this.gridOptions.status > 1) {
			this._doAppendData(data, ts, jq);
			this.gridOptions.isRequesting = false;
			console.log('---------set isRequesting = fasle in success callback--------------------');
			return;
		}
		// 如果后端没有返回数据 则加载空数据
		this.gridData = data || {};
		// 执行数据加载
		this._doLoadData();
		// 执行样式调整 --- 此处取消表格调整 统一挪到表格加载完毕之后执行
		// this.adjustGridStyle();

		// 变更状态
		this.gridOptions.status++;
		this.gridOptions.isRequesting = false;
	},

	/**
	 * [失败(通信失败)时的回调]
	 * @return {[type]} [description]
	 */
	_errorCallBack: function(jq, ts, error) {
		// 默认处理错误
		if (this.conf.onLoadError) {
			this.conf.onLoadError(jq, ts, error);
		}

		// when pageChange fail , reset the pageNumber
		this.pageChangeFailure();

		if (this.gridOptions.paginationOptions.isAppendMode && this.gridOptions.status > 1) {
			this._doAppendData(jq, ts, error);
			console.log('---------set to false in error--------------------');
			this.gridOptions.isRequesting = false;

			return;
		}

		// 出错是加载空数据
		this.gridData = {};
		// 执行空数据加载
		this._doLoadData();
		// 执行样式调整  --- 此处取消表格调整 统一挪到表格加载完毕之后执行
		// this.adjustGridStyle();

		// 变更状态
		this.gridOptions.isRequesting = false;
	},
	/**
	 * 默认的错误处理逻辑---错误提示 有通讯逻辑处理
	 * @return {[type]} [description]
	 */
	_dataErrorHandler: function(tempData) {
		var data = tempData || this.gridData;
		// 通讯成功，但是逻辑处理失败情况
		if (data && data.BK_STATUS && data.BK_STATUS != PJF.constants.BK_CODE_SUCCESS) {
			// 如果实现了
			if (this.conf.onLoadFailure) {
				this.conf.onLoadFailure(data);
			}
		}
	},
	/**
	 * 针对可能的特殊交易 做后续处理
	 * @return {[type]} [description]
	 */
	_loadHandler: function() {
		var reqType = this.gridOptions.paginationOptions.reqType;
		switch (reqType) {
			case 'CCBS':
				this._CCBSLoadHandler();
				break;
            case 'P6':
            case 'P6_1':
                this._P6LoadHandler();
                break;
            case 'CCMS':
                this._CCMSLoadHandler();
                break;
			default:
		}
	},
	/**
	 * CCBS交易 数据加载后 做相应处理
	 * @return {[type]} [description]
	 */
	_CCBSLoadHandler: function() {
		var paginationOptions = this.gridOptions.paginationOptions;
        // 标示不再是第一次请求
		paginationOptions.isFirstReq = false;

		var CONV_NO_DATA = this._getReqTypeValueByKey("OPM_PAGE_CTL.OPM_PAGE_NO_DATA");
		var PAGE_STA_KEY = this._getReqTypeValueByKey("OPM_PAGE_CTL.OPM_PAGE_STA_KEY");

		if( paginationOptions.lastPAG_STA_KEY && !paginationOptions.reqDirection ){
			paginationOptions.PAGE_STA_KEY_ARRAY.push(paginationOptions.lastPAG_STA_KEY);
		}
		paginationOptions.lastPAG_STA_KEY = PAGE_STA_KEY;

		if (paginationOptions.PAGE_STA_KEY === undefined) {
			paginationOptions.PAGE_STA_KEY = PAGE_STA_KEY;
		}

		var preBtnStatus = false;
		var nextBtnStatus = false;

		// 是否为最后一页
		if (CONV_NO_DATA == "1") {
			nextBtnStatus = false;
		} else {
			nextBtnStatus = true;
		}
		// 是否为第一页
		if (paginationOptions.PAGE_STA_KEY == PAGE_STA_KEY) {
			preBtnStatus = false;
		} else {
			preBtnStatus = true;
		}

		// 设置按钮状态
		if (preBtnStatus) {
			paginationOptions.prevBtn && paginationOptions.prevBtn.enable();
		} else {
			paginationOptions.prevBtn && paginationOptions.prevBtn.disable();
		}

		if (nextBtnStatus) {
			paginationOptions.nextBtn && paginationOptions.nextBtn.enable();
		} else {
			paginationOptions.nextBtn && paginationOptions.nextBtn.disable();
		}
		// 保存按钮状态
		paginationOptions.paginationBtnStatus.prev = preBtnStatus;
		paginationOptions.paginationBtnStatus.next = nextBtnStatus;
	},
    /**
     * P6交易 数据加载后 做相应处理
     * @return {[type]} [description]
     * */
    _P6LoadHandler: function(){
        var paginationOptions = this.gridOptions.paginationOptions;
        // 标示不再是第一次请求
        paginationOptions.isFirstReq = false;

        var CONV_NO_DATA = this._getReqTypeValueByKey("CONV_NO_DATA");
        var PAGE_STA_KEY = this._getReqTypeValueByKey("PAGE_STA_KEY");

        if( paginationOptions.lastPAG_STA_KEY && !paginationOptions.reqDirection ){
            paginationOptions.PAGE_STA_KEY_ARRAY.push( paginationOptions.lastPAG_STA_KEY );
        }
        paginationOptions.lastPAG_STA_KEY = PAGE_STA_KEY;
        //存储唯一的PAGE_STA_KEY###
        if ( paginationOptions.PAGE_STA_KEY === undefined ) {
             paginationOptions.PAGE_STA_KEY = PAGE_STA_KEY ;
        }

        var preBtnStatus = false;
        var nextBtnStatus = false;

        // 是否为最后一页
        // zws 2015年11月30日10:54:42 增加PAGE_STA_KEY 判断，以修复P6只有一页时“下一页还能点的bug”
        if( CONV_NO_DATA == "Y" || PAGE_STA_KEY === "" ) {
            nextBtnStatus = false;
        } else {
            nextBtnStatus = true;
        }
        // 是否为第一页
        if( paginationOptions.PAGE_STA_KEY == PAGE_STA_KEY ) {
            preBtnStatus = false;
        } else {
            preBtnStatus = true;
        }

        // 设置按钮状态
        if (preBtnStatus) {
            paginationOptions.prevBtn && paginationOptions.prevBtn.enable();
        } else {
            paginationOptions.prevBtn && paginationOptions.prevBtn.disable();
        }

        if (nextBtnStatus) {
            paginationOptions.nextBtn && paginationOptions.nextBtn.enable();
        } else {
            paginationOptions.nextBtn && paginationOptions.nextBtn.disable();
        }

        // 保存按钮状态
        paginationOptions.paginationBtnStatus.prev = preBtnStatus;
        paginationOptions.paginationBtnStatus.next = nextBtnStatus;
    },
    _CCMSLoadHandler:function(){
        var paginationOptions = this.gridOptions.paginationOptions;
        // 标示不再是第一次请求
        paginationOptions.isFirstReq = false;

        var PAGE_NO = this._getReqTypeValueByKey("PAGE_NO");
        var TOT_PAGE_NUM = this._getReqTypeValueByKey("TOT_PAGE_NUM");

        var preBtnStatus = false;
        var nextBtnStatus = false;


        if( PAGE_NO == TOT_PAGE_NUM || TOT_PAGE_NUM == '0' ) { // 是否为最后一页
            nextBtnStatus = false;
        } else {
            nextBtnStatus = true;
        }

        if( PAGE_NO == 1 ) { // 是否为第一页
            preBtnStatus = false;
        } else {
            preBtnStatus = true;
        }

        // 设置按钮状态
        if (preBtnStatus) {
            paginationOptions.prevBtn && paginationOptions.prevBtn.enable();
        } else {
            paginationOptions.prevBtn && paginationOptions.prevBtn.disable();
        }

        if (nextBtnStatus) {
            paginationOptions.nextBtn && paginationOptions.nextBtn.enable();
        } else {
            paginationOptions.nextBtn && paginationOptions.nextBtn.disable();
        }

        // 保存按钮状态
        paginationOptions.paginationBtnStatus.prev = preBtnStatus;
        paginationOptions.paginationBtnStatus.next = nextBtnStatus;

        paginationOptions.paginationDesc.html( PAGE_NO + '/' + TOT_PAGE_NUM );
    },
	/**
	 * 表格加载成功 此方法内部执行
	 * 1. 等待整个加载new操作执行完毕 ,赋值给页面grid对象,
	 * 2. 如此页面onLoadSuccess方法中才可以使用grid对象
	 * @return {[type]} [description]
	 */
	_onLoadSuccess: function() {
		var me = this;
		// 数据加载完毕 对页面进行后续操作
		this._loadHandler();

		// 正常流程执行完毕
		if (me.conf.onLoadSuccess) {
			me.conf.onLoadSuccess.call(me);
		}
		me.removeLoading();
		// 加载完毕时 初始化滚动条
		me._refreshScrollBar();
		// 隐藏掉滚动条
		me._hideScrollBar({
			delay: 1500
		});
		// 添加表格样式调整逻辑 放到此处 方便在onLoadSuccess中执行完组件创建 样式调整等功能之后 再进行列宽调整
		me.adjustGridStyle();
	},
	/**
	 * 执行具体的数据加载
	 * @return {[type]} [description]
	 */
	_doLoadData: function() {
		// 加载数据前 调用过滤器 允许用户对数据进行操控 组装
		if (this.conf.loadFilter) {
			var filterData = this.conf.loadFilter(this.gridData);
			// 如果用户有返回 则使用返回的 否则还是使用原来的
			if (filterData) {
				this.gridData = filterData;
			}
		}

		// 数据异常统一错误
		this._dataErrorHandler();

		// 内部过滤 加载到grid里面的全部数据 并对数据进行格式处理
		this._dataFilter();

		// 生成内容区、包括可能的分页栏等
		this.renderContent();

		// 加载完成 此方法内部为异步操作
		this._onLoadSuccess();
	},
	/**
	 * 针对数据追加情况  对应数据追加模式 PAD版本
	 * @param  {[type]} data [description]
	 * @param  {[type]} ts   [description]
	 * @param  {[type]} jq   [description]
	 * @return {[type]}      [description]
	 */
	_doAppendData: function(data, ts, jq) {
		// 加载数据前 调用过滤器 允许用户对数据进行操控 组装
		if (this.conf.loadFilter) {
			var filterData = this.conf.loadFilter(data);
			// 如果用户有返回 则使用返回的 否则还是使用原来的
			if (filterData) {
				data = filterData;
			}
		}

		// 数据异常统一错误
		this._dataErrorHandler(data);

		// 内部过滤 加载到grid里面的全部数据 并对数据进行格式处理
		var rows = this._dataFilter(data || {});

		// 数据追加
		// this.renderContent();
		this.appendRows(rows);

		// 加载完成 此方法内部为异步操作
		this._onLoadSuccess();
	},
	/**
	 * 重置或者调整列宽
	 * @param  {[Array]} fields [需要调整的列宽]
	 * @return {[type]}        [description]
	 */
	resizeColumnWidth: function(fields) {
		var gridDom = this.gridDom;

		// 首先清除掉可能存在的宽度和高度 以便自适应调整时
		gridDom.contentScrollMaskInner.css('width', "");
		gridDom.contentScrollMaskInner.css('height', "");

		gridDom.contentScrollMaskOuter.css('width', "");
		gridDom.contentScrollMaskOuter.css('height', "");

		// 清空自适应宽度的样式 让其默认的自适应
		try {
			gridDom.style.innerHTML = "";
		} catch (e) {
			gridDom.style.styleSheet.cssText = "";
		}
		// 添加可能需要的前置样式
		this.addPrependPageStyle();

		// 首先先清除可能有的宽度 否则在原来隐藏的情况下 再显示时执行resize 导致bug
		gridDom.headerRight.css("width", "");
		gridDom.bodyRight.css("width", "");

		// container 最外层 不做事情 （除了设置整体的宽度 高度布局外）

		var gridConstant = this.gridOptions.gridConstant;

		// 内容区宽度  2014/09/03 整体宽度减去17px 为随时可能出现的body纵向滚动条 预留位置

		var gridContentWidth = (gridDom.content.innerWidth() - 17);

		// 用于显示内容的宽度 需要除去滚动条宽度  左右边框宽度(共4px)
//		var gridTotalWidth = gridContentWidth - gridConstant.BORDER_LR_TOTAL_WIDTH - gridConstant.GRID_SCROLL_BAR_WIDTH;
        var gridTotalWidth = gridDom.container.innerWidth() - 17 - gridConstant.BORDER_LR_TOTAL_WIDTH - gridConstant.GRID_SCROLL_BAR_WIDTH;

		// 内容区容器宽度 (减去滚动条宽度 如此显示的文字不会紧贴着边框)
		var containerWidth = gridContentWidth - gridConstant.GRID_SCROLL_BAR_WIDTH;

		// 当前已使用的宽度(默认已使用的宽度)
		// var usedWidth = this.gridOptions.columnOptions.fixedColumnWidth;
		var usedWidth = 0;

		// 所有列
		var columns = this.conf.columns[0];

		// 自适应宽度列 -- 清空
		this.gridOptions.columnOptions.autoColumns = [];
		// 自适应列数组
		var autoColumns = this.gridOptions.columnOptions.autoColumns;
		// 自适应列计数
		var autoColumnsLen = 0;
		// 实际显示的列计数
		var showColumnLen = 0;
		// 循环计算每一列自适应(包含自定义宽度)所用的宽度
		for (var i = 0, len = columns.length; i < len; i++) {

			// 当前列
			var column = columns[i];
			// 如果隐藏 则跳过
			if (column.hidden == true) {
				continue;
			}
			// 当前列最大宽度
			var currentColumnMaxWidth = this.getColumnMaxWidth(column);

			// 当前列的最大自适应宽度
			column.currentColumnMaxWidth = currentColumnMaxWidth;

			// 叠加
			usedWidth += currentColumnMaxWidth;

			// 统计显示的列
			showColumnLen++;

			// 如果是用户自定义 或者 checkbox or radio
			if (column.isUserDefWidth || column.isCheckOrRadio) {
				continue;
			}
			autoColumns.push(column);
			autoColumnsLen++;
		}

		// 每个单元格实际有左右间距4px 此处需要加上该宽度 , -4 是因为最后一个单元格margin-right设置为0px
		usedWidth += showColumnLen * 8 - 4;

		// 每列增加的、最后一列auto多加的
		var fixLen = 0,
			lastOneAppend = 0;

        usedWidth = usedWidth * parseInt($('html').css('fontSize'))/100 + 17;

		// 如果使用的最大宽度[不]超过了总范围
		if (gridTotalWidth >= usedWidth) {
			// 将多出的宽度 平均分配到非固定列上
			var overWidth = gridTotalWidth - usedWidth;

			// 每列增加的宽度
			fixLen = overWidth / autoColumnsLen;

			// ---- 保留两位小数
			fixLen = parseFloat(fixLen.toFixed(3));

			// 平均分配之后多余的
			// lastOneAppend = overWidth % autoColumnsLen;
			lastOneAppend = overWidth - autoColumnsLen * fixLen;

		} else {

			// 出现滚动条的情况下
			// 1px 真心不知道是什么情况(IE9 下测试时 总是少1px)
			usedWidth += 1 + gridConstant.GRID_SCROLL_BAR_WIDTH;
			// 表格目前宽度不够 出现横向滚动条
			// 表头设置
			// gridDom.headerRightContainer.width(gridContentWidth); // 表头容器与内容区宽度应该是一致的
			gridDom.headerRight.width((usedWidth + gridConstant.BORDER_LR_TOTAL_WIDTH + 17 ) + "px");
			// 内容设置 内容区容器的宽度包含的滚动条的宽度
			// gridDom.bodyRightContainer.width(gridContentWidth);
			// 内容区与表头相比 需要减去17px的表头占位宽度 加上行节点默认情况下占用的2px边框
			gridDom.bodyRight.width((usedWidth - gridConstant.GRID_SCROLL_BAR_WIDTH + gridConstant.BORDER_LR_TOTAL_WIDTH + 17 ) + "px");
		}
		// 写入样式
        if (gridTotalWidth >= usedWidth) {
            this.updatePageStyle(fixLen, lastOneAppend);
        } else {
        	 this.updatePageStyle(-1);
        }

	},
	/**
	 * 调整表格行高
	 * @return {[type]} [description]
	 */
	resizeRowHeight: function() {
		// 只有IE 不支持 最小高度 垂直居中
		if (!navigator.userAgent.toLowerCase().match(/msie ([\d.]+)/)) {
			return;
		}
		var gridDom = this.gridDom;
		$("div.grid-row", gridDom.bodyRight).each(function(item) {
			var rowDom = $(this);
			// var rowHeight = rowDom.height() / (100*PJF.constants.WINDOW_SIZE_RATE);
			// $("div.grid-cell-container", rowDom).height(rowHeight + "rem");
			$(this).height(rowDom.height() + 'px');
		});
	},

	/**
	 * 重置表格到初始状态
	 * @param  {[type]} isResetColumnWidth [是否重置表格列宽]
	 * @return {[type]}      [description]
	 */
	resetGridStatus: function(isResetColumnWidth) {

		var gridOptions = this.gridOptions;
		var paginationOptions = gridOptions.paginationOptions;

		// 重置首次请求
		paginationOptions.isFirstReq = true;
		paginationOptions.PAGE_STA_KEY = undefined;
		paginationOptions.PAGE_STA_KEY_ARRAY = [];
		// CCBS 交易所用的标志信息
		paginationOptions.OPM_ITI_ID = undefined;

		// 重置排序标示
		gridOptions.hasSorted = false;

		// 表格初始状态
		gridOptions.status = 1;

		// 重置是否需要

		// 内部数据重置
		this.gridData = null;
		this.gridData = {
			total: 0,
			rows: []
		};
		this.gridCurrentLoadedRows = null;
		this.gridCurrentLoadedRows = [];
		// 清空所有的行
		this.gridAllRows = [];

		// 清空选中行索引信息
		this.clearCheckedRowIndex();

		// ....
		// 情况内容区数据
		this.gridDom.bodyRight.html("");
		// 设置提示信息为初始化状态信息
		this.setNotificationMsg();

	},
	/**
	 * 设置内容区无数据或者初始状态下的提示信息
	 * @param  {[type]} noDataFlag [true 表示设置为查询无数据 否则设置为初始状态]
	 * @return {[type]}      [description]
	 */
	setNotificationMsg: function(noDataFlag) {
		var msg = noDataFlag ? this.conf.noDataMsg : this.conf.initMsg;
		// 设置内容区为空
		try{
			this.gridDom.bodyRight.html("");
		}catch(e){

		}
		// 设置提示消息
		this.gridDom.notificationMsg.html(msg);
		// 显示提示消息
		this.gridDom.notificationMsg.show();
	},

	/**
	 * 设置表格全局相关的样式 如高度、宽度等设置
	 * @param  {[boolean]} isMinContent [是否最小化内容区 默认为false ,当为true时 将设置内容区高度为auto]
	 * @return {[type]}      [description]
	 */
	adjustGridStyle: function(isMinContent) {
		var conf = this.conf;
		var gridDom = this.gridDom;

		// 是否显示边框
		if (conf.showBorder) {
			// gridDom.container.removeClass('grid-container-border').addClass('grid-container-border');
			gridDom.contentScrollMaskOuter.removeClass('grid-container-border').addClass('grid-container-border');
		}

		// 表格整体宽度设置
        if( isNaN( conf.width)){
            gridDom.container.css("width","auto");
        }else{
		    gridDom.container.css("width", conf.width / PJF.constants.DEFAULT_FONTSIZE  + "rem"); //$#$
        }
		// 表格高度设置
		gridDom.container.css("height", conf.height / PJF.constants.DEFAULT_FONTSIZE + "rem");//$#$


		// 设置最外层容器宽度、高度  (取消外层宽度设置)
		// this.com.css("width", conf.width);
		// this.com.css("height", conf.height);

		// 设置整个表格内容的布局
		if (conf.gridLayoutClass) {
			gridDom.container.removeClass(conf.gridLayoutClass).addClass(conf.gridLayoutClass);
		}

		// 设置body-right-container 高度为auto
		if (isMinContent) {

			gridDom.content.css("height", "");
			gridDom.bodyRightContainer.css("height", "");

		} else if (conf.height != 'auto') {

            var bodyHeight;             //数据列总高度
            var contentHeight;          //数据列总高度 + 表头列高度
            var headerHeight;           //表头列高度
            var paginationBarHeight;    //翻页导航高度

            // ****resizeColumnWidth 函数的顺序 与 获取表头高度有关*****
            if( conf.showHead === false ){
                headerHeight = 0;
            }else{
                headerHeight = this.gridOptions.gridConstant.GRID_HEAD_HEIGHT ; //目前固定为50px
            }

			paginationBarHeight = 0;
			if (this.gridOptions.paginationOptions.pagination) {
				// 10px 为间距  由于不显示分页栏 但是用到了分页功能 所以....
				// paginationBarHeight = gridDom.paginationBar.height() + 10;
			}

			// 内容区高度 #rem
            contentHeight = ( conf.height - paginationBarHeight ) / PJF.constants.DEFAULT_FONTSIZE ;

            //zws add 2015年12月28日11:02:38 满足陈旧设备显示滚动条
            if( PJF.util.deviceType.icm ){
                bodyHeight = ( conf.height  - headerHeight - 17/ conf.scaleRate  ) / PJF.constants.DEFAULT_FONTSIZE ;
            }else{
                bodyHeight = ( conf.height  - headerHeight - paginationBarHeight ) / PJF.constants.DEFAULT_FONTSIZE ;
            }

            gridDom.content.height( contentHeight + "rem" );            // 内容区高度(头部列 + 数据列总高度 )
			gridDom.bodyRightContainer.height( bodyHeight + "rem" );    // 表格行数据区域总高度 （ 数据列 ）

		} else if (conf.height === 'auto') {
			// 设置表格最大自适应高度
			// gridDom.bodyRight.css("max-height", conf.maxContentAutoSizeHeight);
			// gridDom.bodyRight.css("min-height", conf.minContentHeight);
			// 修改高度设置的元素
			gridDom.bodyRightContainer.css("max-height", conf.maxContentAutoSizeHeight / PJF.constants.DEFAULT_FONTSIZE + "rem"); //$#$
			gridDom.bodyRightContainer.css("min-height", conf.minContentHeight / PJF.constants.DEFAULT_FONTSIZE + "rem"); //$#$
		}

		// 调整列宽样式 ****resizeColumnWidth 函数的顺序 与 获取表头高度有关*****
		this.resizeColumnWidth();

		// 调整表格行高
		this.resizeRowHeight();
		// 加上此段代码  则表格最后一列的宽度不会再多出17PX 但是在body出现滚动条的时候 会看到整体的表格的左右移动
		// 取消此段代码 则最后一列会显的较宽(不是特别明显) 当body出现滚动条的时候 压缩表格外边框 不会影响到整体的移动
		// gridDom.container.css("width",gridDom.container.width()-17);

		// 滚动条遮罩实现---- 内层比外层高或者宽一个滚动条的位置
		this.gridContentWidth = gridDom.content.width() || this.gridContentWidth || 0;
		this.gridContentHeight = gridDom.content.height() || this.gridContentHeight || 0;

        //zws add 2015年12月28日11:02:38 满足陈旧设备显示滚动条
        if( PJF.util.deviceType.icm ){
            gridDom.contentScrollMaskInner.css('width', this.gridContentWidth - 17 + "px");
        }else{
            gridDom.contentScrollMaskInner.css('width', this.gridContentWidth + "px");
        }
        gridDom.contentScrollMaskInner.css('height', this.gridContentHeight + "px");
		gridDom.contentScrollMaskOuter.css('width', (this.gridContentWidth - conf.horizontalScrollBarHeight ) + "px"); //$#$

	},
	/**
	 * 对外暴露resize调整表格样式、列宽等，主要用于在隐藏情况下 再显示问题
	 * @return {[type]} [description]
	 */
	resize: function() {
		if (arguments.length) {
			alert("resize 暂时不支持任何参数！未免引起bug 请勿使用任何参数！");
			return;
		}
		this.adjustGridStyle();
	},
	/**
	 * 注册表格内部相关事件
	 * @return {[type]} [description]
	 */
	regEventHandler: function() {
		// return;
		var gridDom = this.gridDom;
		var gridOptions = this.gridOptions;
		var paginationOptions = gridOptions.paginationOptions;
		var conf = this.conf;
		var me = this;
		if (conf.url && paginationOptions.isAppendMode) {
			gridDom.bodyRightContainer.scroll(function(event) {
				 // 排除非手动滚动触发的情况
				if(event.isTrigger){
				 	return;
				}				
				var h1 = gridDom.bodyRightContainer.height() + gridDom.bodyRightContainer.scrollTop();
				var h2 = gridDom.bodyRight.height();
				if (h1<h2) {
					return;
				}
				if(paginationOptions.reqType){
					me.specialPageChangeHandler(false);
					event.stopPropagation();
					return;
				}
				var totalPageNumber = Math.ceil(paginationOptions.totalPageNumber / paginationOptions.pageSize);
				if(paginationOptions.currentPageNumber >= totalPageNumber){
				 	return;
				}
				me.pageChangeHandler(paginationOptions.currentPageNumber + 1);
			});	
		}
		// 内容区事件注册
		gridDom.bodyRight.unbind().bind("click", function(event) {

			var target = $(event.target);

			// 是否点击的是radio or checkbox
			var isClickCheckboxOrRadio = target.hasClass('grid-ck');

			// 获取点击的行
			var gridRow = target.closest("div.grid-row");
			// 点到空白的区域
			if (!gridRow.length) {
				return;
			}
			var rowIndex = gridRow.attr("rowindex");
			var field = target.attr('field');

			// 点击行时(没有点到checkbox) 不选中checkbox or radio  则只触发行点击事件
			if (conf.isCheckOnClickRow === false && !isClickCheckboxOrRadio) {
				// 单击事件
				me._onClickRow(rowIndex, field);
				return;
			}

			// 是否点击checkbox时  触发clickRow  默认都要触发  isClickRowOnCheck
			if (conf.isClickRowOnCheck === false && isClickCheckboxOrRadio) {
				// 直接过 不触发行点击事件
			} else {
				// 单击事件
				me._onClickRow(rowIndex, field);
			}

			// 取消、选中行
			// 如果当前行已经选中
			if (gridRow.hasClass("grid-row-checked")) {
				me.unCheckRow(rowIndex, gridRow);
			} else {
				me.checkRow(rowIndex, gridRow);
			}

			event.stopPropagation();
		}).bind("dblclick", function(event) {
			var target = $(event.target);
			// 获取点击的行
			var gridRow = target.closest("div.grid-row");
			// 点到空白的区域
			if (!gridRow.length) {
				return;
			}
			var rowIndex = gridRow.attr("rowindex");
			var field = target.attr('field');

			// 双击事件回调
			me._onDblClickRow(rowIndex, field);

			event.stopPropagation();
		});

		// 表头事件注册
		gridDom.headerRight.unbind().bind("click", function(event) {

			var target = $(event.target);
			// 获取单元格
			var headCell = target.closest("div.grid-cell");
			// 点到空白的区域
			if (!headCell.length) {
				return;
			}

			// 判断全选按钮逻辑
			if (me.conf.singleSelect === false) {
				var checkCell = $("div.grid-checkbox", headCell);
				// 点到了全选按钮
				if (checkCell.length == 1) {
					// 当前已经是全选了 则取消全选
					if (checkCell.hasClass("grid-checkbox-checked")) {
						me.unCheckAllRow();
					} else {
						// 全选
						me.checkAllRow();
					}
				}
			}
			event.stopPropagation();
		});


		// 外挂分页栏点击事件注册
		// gridDom.outerPaginationBar = $("#"+conf.dom+"_paginationBar");
		// if(gridDom.outerPaginationBar.length){
		// 	gridDom.outerPaginationBar.off().on('click','a.page',function(event){
		// 		var target = $(event.target);
		// 		if(target.hasClass('prev')){
		// 			gridDom.paginationPrev.trigger("click");
		// 		}else if(target.hasClass('next')){
		// 			gridDom.paginationNext.trigger("click");
		// 		}else{
		// 			console.warn('逻辑错误');
		// 			console.warn(target);
		// 		}

		// 	});
		// }

		// 直接滚动到0 firefox下滚动到末尾后，刷新页面，无法再滚动到0 , 所以先滚动1px 在滚动到0px
		gridDom.bodyRightContainer.scrollLeft(1);
		gridDom.bodyRightContainer.scrollLeft(0);

		gridDom.bodyRightContainer.scrollTop(0);
		gridDom.bodyRightContainer.scrollTop(1);
		gridDom.bodyRightContainer.scrollTop(0);

		// 滚动支持
		gridDom.bodyRightContainer.bind("scroll", function(event) {
			// 左右滚动 联动
			gridDom.headerRightContainer.scrollLeft($(this).scrollLeft());
			// 调用翻页回调
			jumpHandler(this);
		});

		gridDom.bodyRightContainer.bind('mousedown', function() {
			me._showScrollBar(); // 按下---显示滚动条
		});
		gridDom.bodyRightContainer.bind('mouseup', function() {
		});

		// 注册左侧栏监听
		/*conf.autoResizeWidth && PJF.event.addSubscriber(PJF.eventNames.showLeftMenu, this[PJF.eventNames.showLeftMenu] = function() {
			me.resize();
		});*/

		/**
		 * 翻页处理函数
		 * @return {[type]} [description]
		 */

		function jumpHandler(dom) {
			// 刷新滚动条
			me._refreshScrollBar();

			var scrollHeight = dom.scrollHeight;
			var clientHeight = dom.clientHeight;
			var scrollTop = dom.scrollTop;

			// 没有往下滚动
			if (scrollTop <= gridOptions.lastScrollTop) {
				gridOptions.lastScrollTop = scrollTop;
				return;
			}

			// 条件成立 说明是向下滚动
			var adx = 5;

			// 保存上一次的滚动位置
			gridOptions.lastScrollTop = scrollTop;

            //只有主动设置scrollToRefresh为true时，才出发滚动刷新
            if(!conf.scrollToRefresh){
                return;
            }

			if (!conf.url || gridOptions.isRequesting) {
				return;
			}

			if (paginationOptions.currentPageNumber >= paginationOptions.totalPageNumber) {
				return;
			}

            if(!paginationOptions.paginationBtnStatus.next){
                return ;
            }

			// 保存上一次的滚动位置
			gridOptions.lastScrollTop = scrollTop;

			// 没有url 或者 未滚动到底了  5px 作为缓冲
			if (scrollHeight > (clientHeight + scrollTop + adx)) {
				return;
			}

			// 显示滚动条
			me._showScrollBar();

			gridOptions.isRequesting = true;
			me.showLoading(); // 先显示遮罩 然后再发出发翻页
			gridDom.paginationNext.trigger("click");
		};

	},
	/**
	 * [ 为表格添加分页栏]
	 * @param  {[type]} prevBtn  [description]
	 * @param  {[type]} nextBtn  [description]
	 * @param  {[type]} paginationDesc [description]
	 * @return {[type]}          [description]
	 */
	addPaginationBar: function(prevBtn, nextBtn, paginationDesc) {
		var paginationOptions = this.gridOptions.paginationOptions;
		if (paginationOptions.pagination === false) {
			alert('error...当前grid pagination为false 不分页！');
			return;
		}
		var gridDom = this.gridDom;
		/*重新设置按钮的回调事件*/
		if (prevBtn && paginationOptions.prevBtn === prevBtn) {
			alert('重复绑定上一页按钮');
			return;
		}
		if (nextBtn && paginationOptions.nextBtn === nextBtn) {
			alert('重复绑定下一页按钮');
			return;
		}
		//这里有个小小的问题，本意是把原来按钮的handler保存了，然后重新注册按钮的点击事件，如此一来，当fn.call的时候，event没有传入,然后再调用
		if (prevBtn) {
			prevBtn.bindClickHandler((function prevBtnHandler(fn) {
				return function() {
					// 默认调用它自己的
					fn && fn.call(prevBtn); //这里就没有传入event了
					// 触发表格的上一页
					gridDom.paginationPrev && gridDom.paginationPrev.trigger("click");
				};
			})(prevBtn.p.originHandler));
			paginationOptions.prevBtn = prevBtn;
		}
		if (nextBtn) {
			nextBtn.bindClickHandler((function nextBtnHandler(fn) {
				return function() {
					// 默认调用它自己的
					fn && fn.call(nextBtn);
					// 触发表格的下一页
					gridDom.paginationNext && gridDom.paginationNext.trigger("click");
				};
			})(nextBtn.p.originHandler));
			paginationOptions.nextBtn = nextBtn;
		}

		if (paginationDesc) {
			paginationOptions.paginationDesc = $("#" + paginationDesc);
		}

		// 更新下
		// this.updatePagination();
	},
	/**
	 * [ description]
	 * @param  {[type]} scrollHeight [所有的内容的高度]
	 * @param  {[type]} clientHeight [内容展示区的高度---可视区域]
	 * @param  {[type]} scrollTop    [当前滚动了多高]
	 * @param  {[type]} scrollTop    [当前滚动了多高]
	 * @return {[type]}              [description]
	 */
	_refreshScrollBar: function() {
		// 后续计算涉及位置此处先转换为rem
		var bodyRightContainerDom = this.gridDom.bodyRightContainer.get(0);
		// 垂直
		var scrollHeight = bodyRightContainerDom.scrollHeight,
			clientHeight = bodyRightContainerDom.clientHeight,
			scrollTop = bodyRightContainerDom.scrollTop,
			// 水平
			scrollWidth = bodyRightContainerDom.scrollWidth,
			clientWidth = bodyRightContainerDom.clientWidth,
			scrollLeft = bodyRightContainerDom.scrollLeft;

		// 垂直方向滚动条
		var contentScrollBarV = this.gridDom.contentScrollBarV;
		// 水平方向滚动条
		var contentScrollBarH = this.gridDom.contentScrollBarH;

		// 滚动条高度

		var scrollBarHeight = (clientHeight / scrollHeight) * clientHeight;

		// 水平滚动条宽度
		var scrollBarWidth = (clientWidth / scrollWidth) * clientWidth;

		// 垂直最多滚动的距离
		var maxScrollHeight = scrollHeight - clientHeight;
		// 水平方向最多滚动的距离
		var maxScrollWidth = scrollWidth - clientWidth;

		// 垂直滚动的占能够滚动的最大高度的比例
		var rate = scrollTop / maxScrollHeight;
		// 水平滚动的占能够滚动的最大宽度的比例
		var rate2 = scrollLeft / maxScrollWidth;
		// 垂直滚动条 top 值
		var scrollBarTop = this.gridOptions.gridConstant.GRID_HEAD_HEIGHT * this.conf.scaleRate + rate * (clientHeight - scrollBarHeight);
		// 水平滚动条 left 值
		var scrollBarLeft = rate2 * (clientWidth - scrollBarWidth);

        //zws add 2015年12月28日11:09:50 满足老旧设备用滚动条滚动（非触摸）
        var ifIcm = PJF.util.deviceType.icm ;

		// 垂直滚动条
		contentScrollBarV.css({
			'height': scrollBarHeight + 'px',
			'top': scrollBarTop + 'px',
			'visibility': maxScrollHeight == 0 || ifIcm ? 'hidden' : 'visible'
		});
		// 横向滚动条
		contentScrollBarH.css({
			'width': scrollBarWidth + 'px',
			'left': scrollBarLeft + 'px',
			'visibility': maxScrollWidth == 0 || ifIcm ? 'hidden' : 'visible'
		});

		// 隐藏滚动条
		this._hideScrollBar({
			delay: 1500
		});
	},
	/**
	 * 显示滚动条
	 * @param  {[type]} conf [description]
	 * @return {[type]}      [description]
	 */
	_showScrollBar: function(conf) {
		conf = conf || {};
		// 取消可能的计时
		clearTimeout(this.gridOptions.hideScrollBarTimeout);

		this.gridDom.contentScrollBarH.fadeIn(conf.time || 500);
		this.gridDom.contentScrollBarV.fadeIn(conf.time || 500);
	},
	/**
	 * 隐藏滚动条
	 * @param  {[type]} conf [description]
	 * @return {[type]}      [description]
	 */
	_hideScrollBar: function(conf) {
		// 暂时始终显示滚动条
		return;
		clearTimeout(this.gridOptions.hideScrollBarTimeout);

		conf = conf || {};
		var me = this;

		if (conf.delay) {
			this.gridOptions.hideScrollBarTimeout = setTimeout(function() {
				me.gridDom.contentScrollBarV.fadeOut(conf.time || 500);
				me.gridDom.contentScrollBarH.fadeOut(conf.time || 500);
			}, conf.delay);
			return;
		}
		this.gridDom.contentScrollBarH.fadeOut(conf.time || 500);
		this.gridDom.contentScrollBarV.fadeOut(conf.time || 500);
	},
    /**
     * 获取当前表体中有多上行
     *@return {[type]}              [description] number
     */
    _getRowCountInBody:function(){
        var bodyRightContainer = this.gridDom.bodyRightContainer ;              //zws add
        var gridRowNumber = $("div.grid-row", bodyRightContainer).length;       //zws add
        return gridRowNumber;
    },
	/**
	 * 只执行选中一行的逻辑
	 * @param  {[type]} rowIndex [description]
	 * @param  {[type]} rowDom [description]
	 * @return {[type]}              [description]
	 */
	checkRow: function(rowIndex, rowDom) {

        //zws add
        var maxIndex = this._getRowCountInBody() - 1;

        if ( ( rowIndex === undefined && rowDom === undefined ) ||  rowIndex > maxIndex ) {
			alert("Error: rowIndex rowDom 不能全为空或超出索引域！");
			return false;
		}

		// 如果传递了dom对象
		if (!rowDom) {
			rowDom = this.getRowDom(rowIndex);
		}

		if (rowIndex === undefined) {
			rowIndex = rowDom.attr("rowindex");
		}

		rowIndex = parseInt(rowIndex, 10);

		// 选中前回调
		var flag = this._onBeforeCheckRow(rowIndex);
		// 如果取消选中  则不选
		if (flag === false) {
			return;
		}

		var checkOptions = this.gridOptions.checkOptions;
		// 单选状态下 取消掉之前的行的选中状态 ---add by hzz/ 2016.09.20
		if (this.conf.singleSelect) {
			// 取消掉之前的某一行的选中
			checkOptions.lastCheckedRowDom && this.unCheckRow(checkOptions.lastCheckedRowDom.attr("rowindex"));
		    //清楚其他页选中行索引
			this.clearCheckedRowIndex();
		}
		// 添加行选中样式
		rowDom.removeClass("grid-row-checked").addClass("grid-row-checked");

		// 添加checkbox or radio 样式
		// checkbox or radio 只有存在 才查找
		if (this.gridOptions.hasCheckOrRadio) {
			var columnField = this.conf.singleSelect ? 'radio' : 'checkbox';
			var className = 'grid-' + columnField + '-checked';
			$("div.grid-ck", rowDom).removeClass(className).addClass(className);
		}

		// 设置当前行 为最后一次选中的
		checkOptions.lastCheckedRowDom = rowDom;
		// 添加当前选中的索引
		this.addCheckedRowIndex(rowIndex);

		// 变更可能的全选按钮
		this._updateCheckAllStatus();

		// 回调一行数据被选中事件接口
		this._onCheckRow(rowIndex);
		// 处理其他逻辑

	},
	/**
	 * 选中所有行
	 * @return {[type]} [description]
	 */
	checkAllRow: function() {
		// 清空之前保存的选中索引
		this.clearCheckedRowIndex();

		var me = this;

		var gridDom = this.gridDom;

		// 查找某一列(不包含表头)
		var rowDoms = this.getRowDom();
		rowDoms.removeClass("grid-row-checked").addClass("grid-row-checked");
		// checkbox or radio 只有存在 才查找 并依此变更 checkbox 状态
		if (this.gridOptions.hasCheckOrRadio) {
			// 列的field名字 根据单选 多选不同 不一样
			var columnField = this.conf.singleSelect ? 'radio' : 'checkbox';
			var className = 'grid-' + columnField + '-checked';
			$.each(this.getColumnDom(columnField, null, false), function(index) {
				// 样式处理
				$("div.grid-ck", this).removeClass(className).addClass(className);
				// 保存选中
				me.addCheckedRowIndex(index);
			});
		} else {
			// 把当前行的索引 依此添加
			var len = this.gridAllRows.length;
			for (var i = 0; i < len; i++) {
				this.addCheckedRowIndex(i);
			}
		}
		// 变更可能的全选按钮
		this._updateCheckAllStatus();

		// 所有被选中的回调函数
		this._onCheckAll();

		// 处理其他逻辑
	},
	/**
	 * 取消选中一行
	 * @param  {[type]} rowIndex [description]
	 * @param  {[type]} rowDom [description]
	 */
	unCheckRow: function(rowIndex, rowDom) {

        //zws add
        var maxIndex = this._getRowCountInBody() - 1;

        if ( ( rowIndex === undefined && rowDom === undefined ) || rowIndex > maxIndex ) {
			alert("Error: rowIndex rowDom 不能全为空或超出索引域！");
			return false;
		}

		// 如果传递了dom对象
		if (!rowDom) {
			rowDom = this.getRowDom(rowIndex);
		}

		if (rowIndex === undefined) {
			rowIndex = rowDom.attr("rowindex");
		}

		rowIndex = parseInt(rowIndex, 10);

		// 取消选中前的回调 如果返回false将不会取消选中该行
		if (this._onBeforeUnCheckRow(rowIndex) === false) {
			return false;
		}

		// 移除选中样式
		rowDom.removeClass("grid-row-checked");

		// checkbox or radio 样式变更 只有存在 才查找 并变更checkbox 状态
		if (this.gridOptions.hasCheckOrRadio) {
			var columnField = this.conf.singleSelect ? 'radio' : 'checkbox';
			var className = 'grid-' + columnField + '-checked';
			$("div.grid-ck", rowDom).removeClass(className);
		}
		// 移除选中
		this.removeCheckedRowIndex(rowIndex);

		// 单选状态下 清空可能存在的最后一行
		if (this.conf.singleSelect !== false) {
			this.gridOptions.checkOptions.lastCheckedRowDom = null;
		}

		// 变更可能的全选按钮
		this._updateCheckAllStatus();

		// 行被取消选中的回调
		this._onUnCheckRow(rowIndex);

		// 处理其他逻辑
	},
	/**
	 * 取消选中所有行
	 * @return {[type]} [description]
	 */
	unCheckAllRow: function() {
		var gridDom = this.gridDom;

		// 查找某一列(不包含表头)
		var rowDoms = this.getRowDom();
		rowDoms.removeClass("grid-row-checked");

		// checkbox or radio 只有存在 才查找
		if (this.gridOptions.hasCheckOrRadio) {
			// 列的field名字 根据单选 多选不同 不一样
			var columnField = this.conf.singleSelect ? 'radio' : 'checkbox';
			var className = 'grid-' + columnField + '-checked';
			// 查找某一列(不包含表头)
			$.each(this.getColumnDom(columnField, null, false), function() {
				// 样式处理
				$("div.grid-ck", this).removeClass(className);
				// 处理其他逻辑
			});
		}

		// 清空选中集合
		this.clearCheckedRowIndex();

		// 变更可能的全选按钮
		this._updateCheckAllStatus();

		// (模拟)全选按钮被点击的回调
		this._onUnCheckAll();

		// 处理其他逻辑
	},
	/**
	 * 变更全选按钮的状态
	 * 判断当前页加载的行数 以及 选中的行数 是否相等(多选状态下)
	 * @return {[type]} [description]
	 */
	_updateCheckAllStatus: function() {
		// 没有check列(此处不细分check or radio) 或者  单选状态  直接返回
		if (!this.gridOptions.hasCheckOrRadio || this.conf.singleSelect) {
			return;
		}

		var checkedLen = this.getCurrentPageCheckedRowIndexs().length;
		//获取当前页面的行数据
        var gridAllRowsLength = this._getRowCountInBody();  //zws add

		var headerRight = this.gridDom.headerRight;
		// 设置全选状态按钮的状态---设置为全选
		if (checkedLen === gridAllRowsLength && checkedLen != 0) {
			$("div.grid-checkbox", headerRight).removeClass("grid-checkbox-checked").addClass("grid-checkbox-checked");
		} else {
			// 设置为非全选
			$("div.grid-checkbox", headerRight).removeClass("grid-checkbox-checked");
		}

	},
	/**
	 * 获取选中的行,单选状态下（update by hzz/2016.09.20）
	 * @param  {[type]} isAllFlag [默认false，true时返回所有页选中项]
	 * @return {[type]} [description]
	 */
	getSelectedRow: function(isAllFlag) {
		if (!this.conf.singleSelect) {
			alert("Error: 当前状态为多选，请使用 getSelectedRows 方法！");
			return null;
		}
		var currentCheckedIndex = this.gridOptions.checkOptions.checkedRowIndexMap;
		var paginationOptions = this.gridOptions.paginationOptions;
        var selectedRadio = null;
        if( !paginationOptions.isAppendMode && this.conf.url){
            selectedRadio = this.gridCurrentLoadedRows[currentCheckedIndex.keys[0]];
            if(!selectedRadio){
                selectedRadio = null;
            }
        }else{
            var selectedRows = isAllFlag ? this.getAllPageCheckedRows() :this.getCurrentPageCheckedRows();
            if( selectedRows.length > 0 ){
                selectedRadio = selectedRows[0];
            }else{
                selectedRadio = null;
            }
        }
        return selectedRadio;
	},
	/**
	 * 获取选中的行,多选状态下（update by hzz/2016.09.20）
	 * @param  {[type]} isAllFlag [默认false返回当前页的选中项，true时返回所有页选中项]
	 * @return {[type]} [description]
	 */
	getSelectedRows: function(isAllFlag) {
		var checkedRowArray = [];
		if (this.conf.singleSelect) {
			alert("Error: 当前状态为单选，请使用 getSelectedRow 方法！");
			return checkedRowArray;
		}

        var currentCheckedIndexKeys = this.gridOptions.checkOptions.checkedRowIndexMap.keys;
        var paginationOptions = this.gridOptions.paginationOptions;
        if( !paginationOptions.isAppendMode && this.conf.url){
            for( var i = 0,len = currentCheckedIndexKeys.length; i < len ; i++ ){
                checkedRowArray.push( this.gridCurrentLoadedRows[currentCheckedIndexKeys[i]]);
            }
        }else{
        	checkedRowArray = isAllFlag ? this.getAllPageCheckedRows() :this.getCurrentPageCheckedRows();
        }
        return checkedRowArray;
	},
	/**
	 * 获取行数据,pagFlag 为true 时 只有本地分页模式有效
	 *
	 * @param  {[type]} rowIndex [行索引 永远是一页之内的索引，不会加上(pageSize-1)*pageNumber ]
	 * @param  {[type]} pagFlag [默认值为false 如果为true 将根据当前当前页，rowIndex 进行计算 ]
	 * @return {[type]}         [description]
	 */
	getRowData: function(rowIndex, pagFlag) {
		if (pagFlag || this.gridOptions.paginationOptions.isLocalPagination) {
			rowIndex = this.getAbsoluteRowIndex(rowIndex);
			var paginationOptions = this.gridOptions.paginationOptions;
			// 如果是本地分页 直接返回加载的数据中 指定的行
			if (paginationOptions.isLocalPagination) {
				var allRows = this.gridAllRows;
				var maxLen = allRows.length;
				if (rowIndex >= maxLen) {
					alert("Error: getRowData方法，当前总计 " + maxLen + " 条数据 , rowIndex(" + rowIndex + ") 越界！");
					return null;
				}
				return allRows[rowIndex];
			} else {
				// 非本地分页 。。。。
				alert("Error: 分本地分页模式，无法获取其他页数据！");
				return null;
			}
		} else {
            var gridAllRows =  this.gridAllRows;
			var maxLen = gridAllRows.length;
			if (rowIndex >= maxLen) {
				alert("Error: getRowData方法，当前总计 " + maxLen + " 条数据 , rowIndex(" + rowIndex + ") 越界！");
				return null;
			}
			return gridAllRows[rowIndex];
		}

	},
	/**
	 * 获取加载到表格中的所有相关数据，包括行数据、其它相关数据
	 * @return {[type]} [description]
	 */
	getGridData: function() {
		return this.gridData;
	},
	/**
	 * 获取表格当前页、以及其它页的所有行数据，仅对本地加载方式有效
	 * @return {[type]} [description]
	 */
	getAllRows: function() {
		return this.gridAllRows;
	},
	/**
	 * 获取当前页加载的行数据  ------ 修改为所有数据
	 * @return {[type]} [description]
	 */
	getCurrentLoadedRows: function() {
		// return this.gridCurrentLoadedRows;
		return this.getAllRows();
	},

	/**
	 * 内部使用方法 设置列显示与隐藏
	 * @param  {[type]} fields [description]
	 * @param  {[type]} flag   [true 显示 false 隐藏]
	 * @return {[type]}        [description]
	 */
	_displayColumns: function(fields, flag) {
		flag = !! flag;
		var className = "grid-hidden-cell";
		// 循环查找 隐藏
		for (var i = 0, len = fields.length; i < len; i++) {
			var allColumn = this.getColumnDom(fields[i], null, true, false);
			$.each(allColumn, function() {
				if (flag) {
					this.removeClass(className);
				} else {
					this.removeClass(className).addClass(className);
				}
			});
			// 设置标示
			var column = this.getColumn(fields[i]);
			if (column) {
				// 如果flag 为true 表示显示  ，则hidden属性 应该设置为false ，所以此处取反
				column.hidden = !flag;
			}
		}
		// 调整表格样式
		this.adjustGridStyle();
	},
	/**
	 * 在当前表格末尾追加一行
	 * @param  {[type]} rowData     [行数据]
	 * @param  {[type]} checkedFlag [是否选中]
	 * @return {[type]}             [description]
	 */
	appendRow: function(rowData, checkedFlag) {
		var baseRowIndex = this.gridAllRows.length;
		checkedFlag = !! checkedFlag;
		this.insertRows([baseRowIndex], [rowData], [checkedFlag]);
	},
	appendRows: function(rowDataArray, checkedFlagArray) {
		if (!(rowDataArray instanceof Array)) {
			alert("Error: appendRows 参数 必须为数组！")
			return false;
		}
		var rowDataArrayLen = rowDataArray.length;
		var checkedFlagArrayLen = -1;

		if (checkedFlagArray != undefined) {
			if (!(checkedFlagArray instanceof Array)) {
				alert("Error: appendRows 参数 必须为数组！");
				return false;
			}

			checkedFlagArrayLen = checkedFlagArray.length;
			if (rowDataArrayLen != checkedFlagArrayLen) {
				alert("Error: appendRows 数组参数长度必须一致！");
				return false;
			}
		} else {
			checkedFlagArray = [];
		}
		// 行索引
		var rowIndexArray = [];
		var baseRowIndex = this.gridAllRows.length;

		for (var i = 0; i < rowDataArrayLen; i++) {
			rowIndexArray.push(baseRowIndex + i);
			if (checkedFlagArrayLen == -1) {
				checkedFlagArray.push(false);
			}
		}
		this.insertRows(rowIndexArray, rowDataArray, checkedFlagArray);
	},
	/**
	 * 插入一行数据 插入一行数据，则导致翻页选中失效
	 * @param  {[type]} rowIndex [行索引]
	 * @param  {[type]} rowData  [行数据]
	 * @param  {[type]} checkedFlag [是否选中 默认false]
	 * @return {[type]}          [description]
	 */
	insertRow: function(rowIndex, rowData, checkedFlag) {
		checkedFlag = !! checkedFlag;
		this.insertRows([rowIndex], [rowData], [checkedFlag]);
	},
	insertRows: function(rowIndexArray, rowDataArray, checkedFlagArray) {

		if (!(rowIndexArray instanceof Array) || !(rowIndexArray instanceof Array)) {
			alert("Error: insertRows 方法参数必须为数组!");
			return false;
		}
		var rowIndexArrayLen = rowIndexArray.length;
		var rowDataArrayLen = rowDataArray.length;
		var checkedFlagArrayLen = -1;
		// checkedFlagArray 可以不传，如果传了，则必须为数组
		if (checkedFlagArray != undefined) {
			if (!(rowIndexArray instanceof Array)) {
				alert("Error: insertRows 方法 参数必须全为数组！");
				return false;
			}
			checkedFlagArrayLen = checkedFlagArray.length;
			if ((rowIndexArrayLen != rowDataArrayLen) || (rowDataArrayLen != checkedFlagArrayLen)) {
				alert("Error: insertRows 方法 数据参数必须长度一致！");
				return false;
			}
		} else {
			if (rowIndexArrayLen != rowDataArrayLen) {
				alert("Error: insertRows 方法 数据参数必须长度一致！");
				return false;
			}
		}
		if (rowIndexArrayLen < 1) {
			return;
		}
		// 隐藏可能的无数据提示
		this.gridDom.notificationMsg.hide();
		// 当前行是否被选中 默认false
		var checkedFlag = false;
		// 缓存变量
		var columns = this.conf.columns[0];
		var bodyRight = this.gridDom.bodyRight;
		var checkOptions = this.gridOptions.checkOptions;
		var checkedRowIndexMap = checkOptions.checkedRowIndexMap;
		var allPageCheckedRowIndexMap = checkOptions.allPageCheckedRowIndexMap;
		var gridAllRows = this.gridAllRows;
		// 循环追加数据
		for (var i = 0; i < rowIndexArrayLen; i++) {
			if (checkedFlagArrayLen != -1) {
				checkedFlag = checkedFlagArray[i];
			}
			// 行数据结构
			var rowDom = this.rowRender(rowIndexArray[i], rowDataArray[i], columns, !! checkedFlag);

			// 获取当前表格中 rowIndex行指定的dom
			var currentRowDom = this.getRowDom(rowIndexArray[i]);
			// 当前表格中 没有指定行
			if (currentRowDom.length == 0) {
				// 在表格没有数据的情况下  使用html函数 以此清空表格内的描述信息
				if (gridAllRows.length == 0) {
					bodyRight.html(rowDom);
				} else {
					bodyRight.append(rowDom);
				}
				// 表格中没有指定行 则无需调整 选中行数据中的索引、也无需刷新页面索引
			} else {
				// 在当前行之前插入
				$(rowDom).insertBefore(currentRowDom);
				// 调整选中map(当前页、所有页)
				this.adjustCheckedRowIndexMaps(rowIndexArray[i], true);
				// 刷新行索引
				this.refreshRowIndex();
			}

			// 添加数据
			this.adjustRows(true, rowIndexArray[i], rowDataArray[i]);

			// 如果新加入的行为选中状态，则添加为选中
			if (checkedFlag) {
				checkedRowIndexMap.add(rowIndexArray[i] + '', rowDataArray[i]);
				var absoluteRowIndex = this.getAbsoluteRowIndex(rowIndexArray[i]);
				allPageCheckedRowIndexMap.add(absoluteRowIndex + '', rowDataArray[i]);
				checkOptions.lastCheckedRowDom = this.getRowDom(rowIndexArray[i]);
			}
		}

		// 修改全选按钮状态
		this._updateCheckAllStatus();

		// 调整表格样式
		this.adjustGridStyle();

		// 表示变更了数据
		checkOptions.isAddOrRemoveData = true;
	},
	/**
	 * 刷新表格的索引 更新行号
	 * @return {[type]} [description]
	 */
	refreshRowIndex: function() {
		var rowDoms = this.getRowDom();
		rowDoms.each(function(index) {
			var currentRowIndex = $(this).attr('rowindex');
			if (currentRowIndex != index) {
				$(this).attr('rowindex', index);
				$(".body-cell-text[field=GRID-ROWNUMBER]", $(this)).html(index + 1);
			}
			$(this).removeClass("grid-row-odd");
			if (index % 2 == 0) {
				$(this).addClass("grid-row-odd");
			}

		});
	},
	/**
	 * 删除一行数据
	 * @param  {[type]} rowIndex [description]
	 * @return {[type]}          [description]
	 */
	deleteRow: function(rowIndex) {
		if (rowIndex == undefined) {
			alert("Error: deleteRows 方法参数不能为空！");
			return false;
		}
		return this.deleteRows([rowIndex]);
	},
	/**
	 * 批量删除数据
	 * @param  {[type]} rowIndex [description]
	 * @return {[type]}          [description]
	 */
	deleteRows: function(rowIndexArray) {
		var me = this;
		if (!rowIndexArray) {
			alert("Error: deleteRows 方法参数不能为空！");
			return false;
		}
		// 是否有删除一行数据 默认为false
		var hasDeleteOne = false;

		if (this.gridOptions.checkOptions.lastCheckedRowDom){
			var checkIndex = this.gridOptions.checkOptions.lastCheckedRowDom.attr('rowindex');
			rowIndexArray.forEach(function(value){
				if(checkIndex == value){
					me.gridOptions.checkOptions.lastCheckedRowDom = null;
				}
			})
		}

		// 对要删除的索引进行排序 以便对数组索引进行操作
		rowIndexArray.sort();

		// 真正被删除的行索引
		var realDeleteRowIndexs = [];

		// 循环删除
		for (var i = 0, len = rowIndexArray.length; i < len; i++) {
			var rowIndex = rowIndexArray[i];
			var rowDom = this.getRowDom(rowIndex);
			if (!rowDom.length) {
				continue;
			}
			// 标示是否有删除一行数据
			hasDeleteOne = true;
			rowDom.remove();
			// 调整表格选中数据中的索引 存放在Map中索引 还是原来的
			this.adjustCheckedRowIndexMaps(rowIndex - i, false);
			// 放入到要删除的行索引数组中
			realDeleteRowIndexs.push(rowIndex);
		}
		// 没有没有做任何删除操作 则直接返回 不用刷新索引等
		if (hasDeleteOne === false) {
			return false;
		}
		// 调整表格内部数据 删除数组中对应的行数据
		for (var i = 0, len = realDeleteRowIndexs.length; i < len; i++) {
			// adjustRows方法将导致数组的索引发生变化 循环删除数组  数组索引在变化
			this.adjustRows(false, realDeleteRowIndexs[i] - i);
		}

		// 表示变更了数据
		this.gridOptions.checkOptions.isAddOrRemoveData = true;

		// 刷新表格索引
		this.refreshRowIndex();

		// 修改全选按钮
		this._updateCheckAllStatus();

		// 调整表格样式
		this.adjustGridStyle();

		return true;
	},

	/**********************表格内部接口函数 内部回调事件统一处理接口*********************************************/
	/**
	 * 单击行时回调
	 * @param  {[type]} rowIndex [description]
	 * @return {[type]}          [description]
	 */
	_onClickRow: function(rowIndex, field) {
		// 调用用户
		if (this.conf.onClickRow) {
			this.conf.onClickRow(rowIndex, field, this.getRowData(rowIndex));
		}
	},
	/**
	 * 双击时 回调
	 * @param  {[type]} rowIndex [description]
	 * @return {[type]}          [description]
	 */
	_onDblClickRow: function(rowIndex, field) {
		// 调用接口
		if (this.conf.onDblClickRow) {
			this.conf.onDblClickRow(rowIndex, field, this.getRowData(rowIndex));
		}
	},
	/**
	 * 行被选中前回调
	 * @param  {[type]} rowIndex [description]
	 * @return {[boolean]}          [返回false将不会勾选这一行]
	 */
	_onBeforeCheckRow: function(rowIndex) {
		var flag = true;
		if (this.conf.onBeforeCheckRow) {
			flag = this.conf.onBeforeCheckRow(rowIndex, this.getRowData(rowIndex));
		}
		return flag;
	},
	/**
	 * 行被选中前回调
	 * @param  {[type]} rowIndex [description]
	 * @return {[boolean]}          [返回false将不会取消勾选这一行]
	 */
	_onBeforeUnCheckRow: function(rowIndex) {
		var flag = true;
		if (this.conf.onBeforeUnCheckRow) {
			flag = this.conf.onBeforeUnCheckRow(rowIndex, this.getRowData(rowIndex));
		}
		return flag;
	},
	/**
	 * 行被选中时的回调
	 * @param  {[type]} rowIndex [description]
	 * @return {[type]}          [description]
	 */
	_onCheckRow: function(rowIndex) {
		this.conf.onCheckRow && this.conf.onCheckRow(rowIndex, this.getRowData(rowIndex));
	},
	/**
	 * 行被取消选中时的回调
	 * @param  {[type]} rowIndex [description]
	 * @return {[type]}          [description]
	 */
	_onUnCheckRow: function(rowIndex) {
		this.conf.onUnCheckRow && this.conf.onUnCheckRow(rowIndex, this.getRowData(rowIndex));
	},
	/**
	 * 全选按钮被点击
	 * @return {[type]} [description]
	 */
	_onCheckAll: function() {
		this.conf.onCheckAll && this.conf.onCheckAll();
	},
	/**
	 * 取消全选按钮被点击
	 * @return {[type]} [description]
	 */
	_onUnCheckAll: function() {
		this.conf.onUnCheckAll && this.conf.onUnCheckAll();
	},
	/**
	 * 行样式统一设置
	 * @param  {[type]} rowIndex [description]
	 * @return {[type]}          [description]
	 */
	_rowStyler: function(rowIndex, row) {
		var rowStyle = "";
		if (this.conf.rowStyler) {
			rowStyle = this.conf.rowStyler(rowIndex, row);
		}
		rowStyle = rowStyle || "";
		return rowStyle;
	},

	/**********************表格内部接口函数*********************************************/

	/*====================一些工具类函数===============================*/
	getBrowserVersion: function() {
		var browserName = "",
			browserVersion = "";
		//firefox
		if (/Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent)) {
			browserName = "firefox";

			var ffversion = new Number(RegExp.$1)
			browserVersion = Math.floor(ffversion);
		}

		//internet explorer
		if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) //test for MSIE x.x;
		{
			browserName = "ie";

			var ieversion = new Number(RegExp.$1)
			browserVersion = Math.floor(ieversion);
		}

		//opera
		if (/Opera[\/\s](\d+\.\d+)/.test(navigator.userAgent)) {
			browserName = "opera";

			var oprversion = new Number(RegExp.$1)
			browserVersion = Math.floor(oprversion);
		}

		//chrome
		if ((navigator.userAgent.toLowerCase().indexOf('chrome') > -1) && (navigator.userAgent.toLowerCase().indexOf('safari') != -1)) {
			browserName = "chrome";
			browserVersion = "";
		}

		//safari
		if ((navigator.userAgent.toLowerCase().indexOf('chrome') == -1) && (navigator.userAgent.toLowerCase().indexOf('safari') != -1)) {
			browserName = "safari";
			browserVersion = "";
		}

		return {
			browserName: browserName,
			browserVersion: browserVersion
		};

	},
	/**
	 * 获取适配浏览器的滚动条宽度(可能不是真实的滚动条宽度)
	 * @return {[type]} [description]
	 */
	getSrollBarWidth: function() {
		return 17;
		var browserConf = this.getBrowserVersion();
		if (browserConf.browserName == 'IE') {
			return 0;
		} else {
			return 17;
		}
	},
	/**
	 * 获取绝对的行号 --- 用于数据索引
	 * 用在使用本地分页、跨页取数据时，根据当前页码判断实际的数据索引位置
	 * 非次情况下，使用该方法将获得错误值
	 * @return {[type]} [description]
	 */
	/**
	 * 获取绝对的行号 --- 用于数据索引
	 * 用在使用本地分页、跨页取数据时，根据当前页码判断实际的数据索引位置
	 * 非次情况下，使用该方法将获得错误值
	 * @param  {[type]}  rowIndex           [description]
	 * @param  {Boolean} isAbsoluteRowIndex [如果该值为false 还是返回当前页的索引]
	 * @return {[type]}                     [description]
	 */
	getAbsoluteRowIndex: function(rowIndex, isAbsoluteRowIndex) {

		// 还是使用在当前页中的索引
		if (isAbsoluteRowIndex === false) {
			return rowIndex;
		}

		// 可能为str
		rowIndex = parseInt(rowIndex, 10);

		var paginationOptions = this.gridOptions.paginationOptions;
		if (paginationOptions.isLocalPagination) {
			// 只有在本地分页时 使用绝对值
			var currentPageNumber = paginationOptions.currentPageNumber;
			// 每页大小
			var pageSize = paginationOptions.pageSize;
			// 索引起始
			var startIndex = (currentPageNumber - 1) * pageSize;
			rowIndex = startIndex + rowIndex;
		}

		return rowIndex;

	},
	/**
	 * 添加被选中的行索引信息  注意rows影响到非本地分页的翻页数据
	 * @param  {[type]} rowIndex [当前页所在的行号]
	 * @param  {[type]} pagFlag  [是否影响分页保存数据 默认值为true]
	 * @return {[Boolean]}          [....]
	 */
	addCheckedRowIndex: function(rowIndex, pagFlag) {
		rowIndex = '' + rowIndex;
		var checkOptions = this.gridOptions.checkOptions;
		checkOptions.checkedRowIndexMap.add(rowIndex, this.getRowData(rowIndex));
		if (pagFlag === false) {
			return;
		}
		var absoluteRowIndex = this.getAbsoluteRowIndex(rowIndex);
		// 保存到所有页数据
		checkOptions.allPageCheckedRowIndexMap.add(absoluteRowIndex + '', this.getRowData(rowIndex));
	},
	/**
	 * 移除被选中的行
	 * @param  {[type]} rowIndex [当前页所在的行号]
	 * @param  {[type]} pagFlag  [是否影响分页保存数据 默认值为true]
	 * @return {[type]}          [description]
	 */
	removeCheckedRowIndex: function(rowIndex, pagFlag) {
		rowIndex = '' + rowIndex;
		var checkOptions = this.gridOptions.checkOptions;
		checkOptions.checkedRowIndexMap.removeKey(rowIndex);

		if (pagFlag === false) {
			return;
		}
		// 移除所有页数据中指定行
		var absoluteRowIndex = this.getAbsoluteRowIndex(rowIndex);
		checkOptions.allPageCheckedRowIndexMap.removeKey(absoluteRowIndex + '');
	},
	/**
	 * 移除被选中的行(当前页、所有页)
	 * @param  {[type]} rowIndex [当前页所在的行号]
	 * @param  {[type]} pagFlag  [是否影响分页保存数据 默认值为true]
	 * @return {[type]}          [description]
	 */
	clearCheckedRowIndex: function(pagFlag) {
		var checkOptions = this.gridOptions.checkOptions;
		// 清空当前页 所有选中
		checkOptions.checkedRowIndexMap.clear();
		// 清空保存的最后一次选中
		checkOptions.lastCheckedRowDom = null;

		// 重置是否添加或者删除数据
		checkOptions.isAddOrRemoveData = false;
		// 如果强制要求 不清空所有页保存的数据
		if (pagFlag === false) {
			return;
		}
		// 清空所有页保存的数据
		checkOptions.allPageCheckedRowIndexMap.clear();
	},
	/**
	 * 移除当前页被选中的行 ---add by hzz/2016.09.20
	 */	
	clearCurrentCheckedRowIndex: function() {
		this.clearCheckedRowIndex(false);
		var checkOptions = this.gridOptions.checkOptions;
		var paginationOptions = this.gridOptions.paginationOptions;
		var currentPageNumber = paginationOptions.currentPageNumber;
		var pageSize = paginationOptions.pageSize;
		// 索引起始
		var startIndex = (currentPageNumber - 1) * pageSize;
		// 索引结束
		var endIndex = currentPageNumber * pageSize;
		for (var i = startIndex; i < endIndex;i++) {
			checkOptions.allPageCheckedRowIndexMap.removeKey(i + '');
		}

	},
	/**
	 * 获取所有页被选中的行索引  对于非本地分页 ，此函数没有意义！！！
	 * @param  {[type]} pagFlag  [是否影响分页保存数据 默认值为true]
	 * @return {[Array]}          [ [int,int,...] ]
	 */
	getAllPageCheckedRowIndexs: function() {
		return this.gridOptions.checkOptions.allPageCheckedRowIndexMap.keys;
	},
	/**
	 * 获取所有页被选中的行数据
	 * @return {[Array]} [数组，每个元素都是一行数据]
	 */
	getAllPageCheckedRows: function() {
		return this.gridOptions.checkOptions.allPageCheckedRowIndexMap.items;
	},
	/**
	 * 获取当前页被选中的行索引信息
	 * @return {[Array]} [ [int,int,...] ]
	 */
	getCurrentPageCheckedRowIndexs: function() {
		return this.gridOptions.checkOptions.checkedRowIndexMap.keys;
	},
	/**
	 * [ 获取当前页被选中的行数据]
	 * @return {[Array]} [数组，每个元素都是一行数据]
	 */
	getCurrentPageCheckedRows: function() {
		return this.gridOptions.checkOptions.checkedRowIndexMap.items;
	},
	/**
	 * 更新行索引 --- add by hzz/2016.09.20
	 */
	_updateRowIndexMaps: function(rowIndex, rowIndexMaps, addOrRemove) {
		var items = rowIndexMaps.items;
		var keys = rowIndexMaps.keys;		
		var key = -1;
		rowIndexMaps.clear();
		for (var i = 0, len = keys.length; i < len; i++) {
			// 调整索引
			key = parseInt(keys[i], 10);
			if(key == rowIndex && !addOrRemove) {
				continue;
			}
			// 原来的位置以及之后的，索引递增1
			if (key >= rowIndex) {
				key += (addOrRemove ? 1 : -1);
			}

			// 对原来保存的数据 使用新的索引
			(key >= 0) && rowIndexMaps.add(key + '', items[i]);
		}
	},
	/**
	 * 增加或删除数据时更新选中行索引
	 * @param  {[type]} rowIndex    [新加入数据所在的行号]
	 * @param  {[type]} addOrRemove    [true 添加 false 删除]
	 * @return {[type]}             [description]
	 */
	adjustCheckedRowIndexMaps: function(rowIndex, addOrRemove) {
		var checkOptions = this.gridOptions.checkOptions;
		// 当前页的选中项
		var checkedRowIndexMap = checkOptions.checkedRowIndexMap;
		// 所有页的选中项
		var allPageCheckedRowIndexMap = checkOptions.allPageCheckedRowIndexMap;
		var absoluteRowIndex = this.getAbsoluteRowIndex(rowIndex);
		
		this._updateRowIndexMaps(rowIndex, checkedRowIndexMap, addOrRemove);
		this._updateRowIndexMaps(absoluteRowIndex, allPageCheckedRowIndexMap, addOrRemove);
	},
	/**
	 * 变更添加删除数据时  表格内部保存的数据
	 * @param  {[type]} addOrRemove [添加或者删除 true 为添加，false为删除]
	 * @param  {[type]} rowIndex    [行索引]
	 * @param  {[type]} rowData     [行数据]
	 * @return {[type]}             [description]
	 */
	adjustRows: function(addOrRemove, rowIndex, rowData) {
		// 当前表格中的所有数据
		var rows = this.gridAllRows;
		var paginationOptions = this.gridOptions.paginationOptions;
		// 本地分页时 获取绝对索引位 ,否则依旧使用当前页索引
		var absoluteRowIndex = this.getAbsoluteRowIndex(rowIndex, !! paginationOptions.isLocalPagination);

		// 添加数据
		if (addOrRemove) {
			rows.splice(absoluteRowIndex, 0, rowData);
			// gridCurrentLoadedRows.splice(rowIndex, 0, rowData);
			// 调整总记录数
			this.gridData.total += 1;
		} else {
			// 删除数据
			rows.splice(absoluteRowIndex, 1);
			// gridCurrentLoadedRows.splice(rowIndex, 1);
			// 调整总记录数
			this.gridData.total -= 1;
		}
	},

	/**
	 * 判断某列是否为checkbox 或者 radio
	 * @return {[type]} [description]
	 */
	isCheckOrRadio: function(column) {
		if (column.field == 'checkbox' || column.field == "radio") {
			// 弥补使用者错误 单选状态下 却 填成 checkbox
			if (this.conf.singleSelect) {
				column.field = 'radio';
			} else {
				column.field = 'checkbox';
			}
			// 标示checkbox 还是 radio
			column.isCheckbox = !! (column.field == 'checkbox');
			// 标示该列为checkbox 或者 radio
			column.isCheckOrRadio = true;
			return column.field;
		} else {
			return false;
		}
	},
	/**
	 * 获取分页参数
	 * @return {[type]} [description]
	 */
	getPaginationOptions: function() {
		return this.gridOptions.paginationOptions;
	},
	/**
	 * 获取某一列的最大宽度
	 * @return {[type]} [description]
	 */
	getColumnMaxWidth: function(column) {
		// 隐藏列 返回 0
		if (column.hidden === true) {
			return 0;
		}
		// 默认是checkbox 或者 radio 列 返回默认的宽度即可
		if (this.isCheckOrRadio(column)) {
			return this.gridOptions.gridConstant.ckColumnWidth;
		}
		// 如果指定列宽 则返回指定列宽
		if (column.width && column.width !== 'auto') {
			return column.width;
		}
		// 获取表头、body 内容区该列的宽度
		var columnsDom = this.getColumnDom(column.field, null, true);
		// 默认情况下列最小宽度
		var maxWidth = column.title.length * this.gridOptions.gridConstant.GRID_COLUMN_WIDTH_SIZE;

		if (columnsDom.length) {
			$.each(columnsDom, filter);
		} else {
			alert("Error: 未查找到指定列(" + column.field + ") dom");
		}

		// 单元格的左右外间距为 4px
		return maxWidth + 8;

		/**
		 * 计算宽度
		 * @param  {[type]} item [description]
		 * @return {[type]}      [description]
		 */

		function filter(item) {
			var tempWidth = $(this).width() / 1;
			if (maxWidth < tempWidth) {
				maxWidth = tempWidth;
			}
		};
	},

	/**
	 * [ 获取行 某列的dom 返回的是某个单元格的最外层div]
	 * @param  {[type]}  field             [description]
	 * @param  {[type]}  rowIndex          [From 0, 如果isContainerHeader 则 From -1]
	 * @param  {Boolean} isContainHeader [是否包含表头,默认值false]
	 * @param  {Boolean} isOnlyHeader      [是否只包含表头 默认值false]
	 * @return {[Jquery Object Array]}                    [description]
	 */
	getColumnDom: function(field, rowIndex, isContainHeader, isOnlyHeader) {

		// 唯一的class
		var columnClass = this.gridOptions.gridColumnClassPrefix + field;

		var gridDom = this.gridDom;

		var columnDoms = [];
		// 查找表头
		if (isContainHeader) {
			columnDoms.push($("div." + columnClass, gridDom.headerRight));
		}
		// 查找内容区
		if (!isOnlyHeader) {
			$("div." + columnClass, gridDom.bodyRight).each(function() {
				columnDoms.push($(this));
			});
		}
		// 如果指定了行号
		if (rowIndex != undefined) {
			rowIndex = parseInt(rowIndex, 10);
			if (isContainHeader) {
				rowIndex += 1;
			}
			return [columnDoms[rowIndex]];
		}

		return columnDoms;
	},
	/**
	 * 获取指定列参数对象
	 * @param  {[type]} field [description]
	 * @return {[type]}       [description]
	 */
	getColumn: function(field) {
		if (!field) {
			alert("Error: getColumn 参数 field 参数不能为空");
			return null;
		}

		var columns = this.conf.columns[0];
		for (var i = 0, len = columns.length; i < len; i++) {
			var column = columns[i];
			if (column.field === field) {
				return column;
			}
		}
		return false;
	},
	/**
	 * 获取行dom结构
	 * @param  {[type]} rowIndex [获取指定行的dom结构，如果不传 则获取所有行]
	 * @return {[type]}          [description]
	 */
	getRowDom: function(rowIndex) {
		var gridDom = this.gridDom;
		if (rowIndex != undefined) {
			return $("div.grid-row[rowindex=" + rowIndex + "]", gridDom.bodyRight);
		}
		return $("div.grid-row", gridDom.bodyRight);
	},
	/*=================================================================*/
	/**
	 * 校验表格参数 dom 、 columns 等必须的参数
	 * @param  {[type]} conf [description]
	 * @return {[type]}      [description]
	 */
	validateParam: function(conf) {
		//检测dom结构是否存在页面上
		var gridDom = document.getElementById(conf.dom);
		if (!gridDom) {
			alert("Error: dom 属性不能为空且指定dom节点必须存在！");
			return false;
		}

		if (!conf.columns || (conf.columns.length !== 1) || !(conf.columns[0] instanceof Array)) {
			alert("Error: columns 参数必须为二维数组!");
			return false;
		}

		// 列参数field字段不能重复、不能为空(含0)
		var fieldsMap = {};
		var field = "";
		for (var i = 0, len = conf.columns[0].length; i < len; i++) {
			field = conf.columns[0][i].field;
			if (!field) {
				alert("Error: 第 " + (i + 1) + " 列的field属性不能为空或者空字符串或者0！");
				return false;
			}
			if (field == 'checkbox' && conf.singleSelect !== false) {
				alert("Error: 单选状态下，不能存在field为checkbox的列，请使用radio！");
				return false;
			}
			if (field == 'radio' && conf.singleSelect === false) {
				alert("Error: 多选状态下，不能存在field为radio的列，请使用checkbox！");
				return false;
			}
			if (fieldsMap[field]) {
				alert("Error: 列的field属性不能重复！重复字段名:[" + field + "]！");
				return false;
			}
			fieldsMap[field] = 1;
		}
		return true;
	},
	// 销毁组件
	destroy: function() {
		// 事件移除 移除对左侧栏伸缩的监听
		//PJF.event.removeSubscriber(PJF.eventNames.showLeftMenu, this[PJF.eventNames.showLeftMenu]);
		this.com.remove();
		PJF.ui.componentMgr.remove(this.id);
		// 变量清空

	},
	getClassName: function() {
		return "PJF.ui.grid";
	}
});
/**
 * 添加Grid相关的方法
 */
PJF.apply(PJF.ui.grid.prototype, {
	/**
	 * 执行本地数据加载
	 * @param  {[type]} data [JSON对象或者数组，如果是JSON对象，
	 * 则应该包含total和rows参数 分别为int和数组类型，如果data为数组，则每个参数为JSON对象，包含一行的数据]
	 * @return {[type]}      [description]
	 */
	loadData: function(data) {

		// 重置表格到初始状态
		this.clearData(false);

        // ------------add(start)---------- 2015年11月11日20:52:07 zws 修复 data 为OBJECT 发生异常
        if($.isPlainObject(data)){
            data = [].concat(data);
        }
        // ------------add(end)----------

		this.gridData = data;
		// 执行数据加载
		this._loadData();
		// 调整样式 --- 此处取消表格调整 统一挪到表格加载完毕之后执行
		// this.adjustGridStyle();
	},
	/**
	 * 清空表格 重置表格到初始状态
	 * @return {[type]} [description]
	 */
	clearData: function(isAdjustGridStyle) {
		// 页面内容区重置
		this.resetGridStatus();
		// 分页数据重置
		this.resetPagination();
		// 调整表格样式
		if (isAdjustGridStyle !== false) {
			this.adjustGridStyle(true);
		}
	},
	/**
	 * 发送请求，且请求的默认是第一页
	 * 如果没有配置URL 会提示错误
	 * 默认都是请求第一页
	 * @return {[type]} [description]
	 */
	sendReq: function() {
		if (!this.conf.url) {
			alert("Error: 无请求地址 , url　属性为空！");
			return;
		}
		// 清空数据 并重新加载数据
		this.clearData();
		// 重置分页参数
		// this.resetPagination();
		// 执行数据加载
		this._loadData();
	},
	/**
	 * 刷新表格数据 ---- update by hzz/2016.09.20
	 * 1.如果没有配置URL，不分页，重新加载所有数据
	 * 2.如果没有配置URL，本地分页的，将重新加载当前页	 
	 * 3.如果配置了URL，isAppendMode为false，将会按照当前的页码，请求后端，重新加载当前页
	 * 4.如果配置了URL，isAppendMode为true, 重新加载第一页数据
	 * @return {[type]} [description]
	 */
	refresh: function() {
		var paginationOptions = this.gridOptions.paginationOptions;
		if (!this.conf.url) {
			if (paginationOptions.isLocalPagination) {
				//清空当前页选中项
				this.clearCurrentCheckedRowIndex();
			} else {
				this.clearCheckedRowIndex();
			}
		} else if (paginationOptions.isAppendMode) {
			this.clearData();
		}
		// 执行数据加载
		this._loadData();
	},
	/**
	 * 执行事件绑定或者覆盖
	 * @return {[type]} [description]
	 */
	bindEventAction: function(eventName, action) {

	},
	/**
	 * 隐藏列
	 * @param  {[type]} field [description]
	 * @return {[type]}       [description]
	 */
	hideColumn: function(field) {
		if (!field) {
			alert("Error: field 参数不能为空！");
			return false;
		}
		return this.hideColumns([field]);
	},
	/**
	 * [ 显示列]
	 * @param  {[type]} field [description]
	 * @return {[type]}       [description]
	 */
	showColumn: function(field) {
		if (!field) {
			alert("Error: field 参数不能为空！");
			return false;
		}
		return this.showColumns([field]);
	},
	/**
	 * [ 隐藏表格列]
	 * @param  {[Array]} fields [ ["username","password"]]
	 * @return {[type]}        [description]
	 */
	hideColumns: function(fields) {

		// 如果参数不是数组 直接返回
		if (!(fields instanceof Array)) {
			alert("Error: hideColumns 参数必须是数组")
			return false;
		}
		this._displayColumns(fields, false);
		return true;
	},
	/**
	 * 显示表格列
	 * @param  {[Array]} fields [ ["username","password"]]
	 * @return {[type]}        [description]
	 */
	showColumns: function(fields) {
		// 如果参数不是数组 直接返回
		if (!(fields instanceof Array)) {
			alert("Error: hideColumns 参数必须是数组")
			return false;
		}
		this._displayColumns(fields, true);
		return true;
	},
	/**
	 * 显示表格 在表格本身隐藏的情况下
	 * @return {[type]} [description]
	 */
	/**
	 * [ 显示表格 在表格本身隐藏的情况下]
	 * @param  {[type]} conf [包含可能的附加参数 {resize:true} 用于重新调整列宽]
	 * @return {[type]}      [description]
	 */
	show: function(conf) {
		this.com.css('display', '');
		if (conf.resize === true) {
			this.resize();
		}
	},
	/**
	 * 隐藏表格 在表格本身显示的情况下
	 * @return {[type]} [description]
	 */
	hide: function() {
		this.com.css('display', 'none');
	}
});
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * Author: huangzhezhe
 * Create on: 2016-06-28
 * 说明:tip组件，主要说明文本框所填信息
 */
PJF.ui.tip=PJF.extend(PJF.ui.component,{
	init:function(conf){
        //设置默认值
        this.options = {
            width: 450,
            tipMessage: ''
        };
        $.extend(this.options, conf);
        //创建html
        this.initHtml();
        var $container =  this.com.find('.stm_tip_text');
        //设置组件外框宽度
        $container.css({
            'width': this.options.width / PJF.constants.DEFAULT_FONTSIZE + 'rem'
        });
	},
	//初始化html代码
	initHtml:function(){
        var me = this;
        var options = me.options;
        var htmlStr = '<div class="stm_tip_container">'
                        +'<span class="stm_tip_arrow"></span>'
                        +'<span class="stm_tip_text">'+options.tipMessage+'</span>'
                        +'<div>';
        this.com.append(htmlStr);
	}
});
PJF.apply(PJF.ui.tip.prototype,{
    //获取组件名称
    getClassName:function(){
        return "PJF.ui.tip";
    },
    //销毁组件
    destroy:function(){
        PJF.ui.componentMgr.remove(this.id);
        this.com.remove();
        this.com = null;
        this.id = null;
    }
});
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * Author: chenyue
 * Create on: 2015-06-01
 * Last Updated:
 * 说明:info 键值对组件
 */

PJF.ui.info = PJF.extend(PJF.ui.component, {
	init: function(conf) {
		var me = this;
		var dfconf = {
			width:600
		}

		me.conf = $.extend(dfconf,conf);

		me.com.append('<ul class="pjf_stm_info"></ul>');
		me.cntr = me.com.find('ul');
		me.com.width(me.conf.width);
		me.setData(me.conf.data);
	},
	setData:function(data){
		var me = this;
		me.cntr.html('');
		me.addData(data);
	},
	addData:function(data){
		var me = this;
		for(var a in data){
			var list = $('<li class="pjf_stm_info_list"><span>'+data[a].name+'：</span><span>'+data[a].desc+'</span></li>').data('key',data[a].key);
			me.cntr.append(list);
		}
	},
	editList:function(data){
		var me = this;
		var lists = me.com.find('li');

		for(var b in data){
			lists.each(function(){
				var li = $(this)
				if(li.data('key')==data[b].key){
					li.html('<span>'+data[b].name+'：</span><span>'+data[b].desc+'</span>').data('key',data[b].key);
				}
			})
		}
	},
	destroy: function() {
		PJF.ui.componentMgr.remove(this.id);
		this.com.remove();
		this.com = null;
		this.id = null;
	}
})
PJF.ui.table=PJF.extend(PJF.ui.component,{
    init:function(conf){
        this.options={
            columnWidths:['25%','65%','8%']
        }
        $.extend(this.options,conf);
        //创建dom结构
        var htmStr=this.initHtml();
        this.com.append(htmStr);
        this.tablecontainer = $("div.table-container", this.com);
        //加载数据
        this.loadData(this.options.data);

        //绑定事件
        this.bindEvent();

    },
    bindEvent:function(){
        var me = this;
        var data=me.options.data;
        me.com.find('.list-item-table').each(function(index){
            var value = $(this).find('.item-operation').children().text();
            var that=$(this);
            if (value != "") {
                that.find('.item-operation').bind('click',function(){
                    console.log("index:", index)
                    var dataindex=that.attr('dataindex');
                    if(dataindex==index){
                        console.log(value)
                        me.options.onclick.call(me, data[dataindex]);
                    }
                })


            }



        })
//        this.com.find('.list-item-table').bind('click', function (index) {
//
//        });

    },

    initHtml:function(){
        var data=this.options.data;
        var htmlDom=[];
        htmlDom.push('<div class="table-container">');

        htmlDom.push('</div>');

        return htmlDom.join('');
    }
})

PJF.apply(PJF.ui.table.prototype,{
    getClassName:function(){
        return 'PJF.ui.table'
    },

    loadData:function(data){
        if(data==undefined||data==null){
            return;
        }
        var contentDom=[];
        var width = this.options.columnWidths;
        for(var i in data){
            contentDom.push('<div  dataindex="'+i+'" class="list-item-table">' +
                '<div class="item-key"  style="width:'+width[0]+'">'+data[i].key+':</div>' +
                '<div class="item-value" style="width:'+width[1]+'">'+data[i].value+'</div>' +
                '<div class="item-operation" style="width:'+width[2]+'"><span style="color:red">'+data[i].operation+'</span></div>' +
                '</div>')
        }

        this.tablecontainer.append(contentDom.join(''));
    }
})

/**
 * Author: fenghao.ge
 * Create on: 2015-06-22
 * Last Updated:
 * 说明:stm指纹读取组件
 */
PJF.ui.fingerReader = PJF.extend(PJF.ui.component, {
    init: function(conf) {
    	var $this=this;
    	this.params={
    			width:200,
    			height:80,
    			winWidth:800,
    			winHeight:500,
    			okBtn:null,
    			cancelBtn:null,
    			success:function(data){
    			},
    			failure:function(data){			
    			},
    			Auth_Post:'G00000000001,G00000000002,G00000000003,G00000000004,G00000000005,G00000000006,G00000000007,G00000000008',
    			infoMsg:resource.FINGERREADER_INFO_MSG,
                timeout:20,
                parentDom: window.template && template.newpage, // 添加window dom的位置
                windowRetainDom: true // 弹出window组件的参数
    	}
        this.constants={
            'USERNAME_PWD_NOT_INLEGE': '用户名或密码不合法！',
            'USERNAME_PWD_NOT_NULL': '用户名和密码不能为空！',
            'USERNAME_PWD_NOT_CORRECT': '用户名和密码不正确！',
            'NETWORK_ERR': '网络通信错误，请稍后再试！'
        }
        // 登录用基准数据
        this.loginBaseData={
            "addrtype": "",
            "channelType": '12999990',
            // "userCode": userCodeValue,
            // "userPwd": userPwdValue,
            "orglevel": "",
            "outBean": null,
            "loginMode": "11",
            "strServId": "",
            "fingerInfo": "",
            "postId": "",
            "magId": "",
            "updateVersion": "1.0",
            "singleloginmode": "0",
            "serviceId": "commonLoginCheckService",
            "update_file_list": null,
            "branchId": "",
            "ccbsId": "",
            // "orgCode": orgCodeValue,
            // "userId": userCodeValue,
            "terminalParam": {
                "logicTerminalNo": "350896600ECP003",
                // "channelType": channelTypeValue,
                "terminalStat": "",
                // "terminalMACAddr": macAddr
            },
            "adapterId": "ecpJson2Bean",
            // "clientIp": clientIp,
            "clientVersion": "1.0",
            "roleId": ""
        };
        //中德的岗位编号不一样
        if (PJF.orgInfo.instSvrlLgPsnID == "DF001") {
            this.params.Auth_Post = 'G000ZD000001,G000ZD000002,G000ZD000003,G000ZD000004,G000ZD000005,G000ZD000006,G000ZD000007,G000ZD000008,GX09Z0000004';
        }
    	$.extend(this.params,conf);

        $this.params.successHandler = function(data){
            //若要检查同一人，为非同一人时执行成功回调
            if($this.params.checkSamePer){
                var checkPerId;
                if(PJF.util.isExist("PJF.stm.idenAuth.custInfo")){
                    checkPerId = PJF.stm.idenAuth.custInfo['identity'];
                }else if(PJF.util.isExist("PJF.stm.CUSTOM_INFO") && PJF.stm.CUSTOM_INFO['Crdt_TpCd'] == '1010'){
                    checkPerId = PJF.stm.CUSTOM_INFO['Crdt_No'];
                }else{
                    $this.params.success(data);
                    return;
                }

                function isSamePer(empeid,crdt_No,fnHandler) {
                    var jsonReq = {
                        CCB_EMPID: empeid, //建行员工编号
                        Crdt_TpCd: '1010', //证件类型代码，身份证 1010
                        Crdt_No: crdt_No, //证件号码
                        _pagination:{
                            REC_IN_PAGE: 10,
                            PAGE_JUMP: 1
                        }
                    };
                    console.log('检测是否同一人请求参数为' + JSON.stringify(jsonReq));
                    PJF.communication.cpsJsonReq({
                        jsonData: JSON.stringify(jsonReq),
                        fwServiceId: 'simpleTransaction',
                        fwTranId: 'A0861e030-stm',
                        success: function (data) {
                            console.log('检测是否同一人成功，返回结果为'+JSON.stringify(data.EMPE_VDO));
                            //EMPE_VDO为[null]时，不为同一人，执行后续逻辑；不为空时，视为同一人
                            if(data.EMPE_VDO && data.EMPE_VDO[0]){
                                $this.params.failure('授权不成功，无法对自办业务授权');
                            }else{
                                fnHandler && fnHandler();
                            }
                        },
                        failure: function (data) {
                            console.log('检测是否同一人失败，返回结果为'+JSON.stringify(data));
                            $this.params.failure('检测授权人员和客户是否同一人交易失败');
                        }
                    });
                }

                var info = eval("("+data.AUTH_INFO+")");
                isSamePer(info.empeid, checkPerId, function(){
                    //如果有代办的场景，再进行户主与授权人是否为同一人检查
                    if(conf.checkMasId){
                        console.log('存在checkMasId，进行户主与授权人是否为同一人检查');
                        isSamePer(info.empeid, conf.checkMasId, function(){
                            $this.params.success(data);
                        });
                    }else{
                        //否则，即不存在代办场景时，直接进行指纹验证成功处理逻辑
                        $this.params.success(data);
                    }
                });
            }else{
                $this.params.success(data);
            }
        };

        console.log("******************1.before*******************");
        console.log("******************PJF.constants.IS_DEBUG*******************"+PJF.constants.IS_DEBUG);
        if((PJF.otherInfo.typeInfo == PJF.constants.ICM_NAME) || $this.params.padFlag || (PJF.orgInfo.instSvrlLgPsnID == 'DA003')){
            console.log("******************2.ICM*******************");
            console.log("是否为特殊PAD业务：" + $this.params.padFlag);
            console.log("建亚："+(PJF.orgInfo.instSvrlLgPsnID == 'DA003'));
            $this.initUiICM($this.params); 
        }else{
            console.log("******************3.NOT ICM*******************");
            if($this.params.dom){
                $this.initUi($this.params);   
                //调用外设读取指纹
                setTimeout(function(){
                    try{
                        if(PJF.constants.IS_DEBUG){
                            conf.success(PJF.debug.constants.FINGER);
                            return;
                        }
                        var args = {timeout:$this.params.timeout};
                        //读取指纹
                        PJF.stm.Finger.readFinger(args,function(){$this.readFingerCallBack.apply($this,arguments)});
                    }catch(e){
                        alert("读取指纹失败");
                    }
                },0)
            }else{
                //调用外设读取指纹
                setTimeout(function(){
                    try{
                        if(PJF.constants.IS_DEBUG){
                            conf.success(PJF.debug.constants.FINGER);
                            return;
                        }
                        var args = {timeout:$this.params.timeout};
                        //读取指纹
                        PJF.stm.Finger.readFinger(args,function(){$this.readFingerCallBack2.apply($this,arguments)});
                    }catch(e){
                        alert("读取指纹失败");
                    }
                },0)
            }

        }
    },
    //读取指纹回调函数
    readFingerCallBack:function(result){
    	var me = this;
        console.log("读取指纹回调result:"+JSON.stringify(result));
    	if(result.status){
    		var fingerInfo=result.info.pchFeature;
            //fingerInfo.pchFeature实例：";?4557000000000000000000000340600801?404>0>30110:600450?85270694?15>2924=4?1=62>:994?1683816=4=3=>399=94>>68402014>5>84<92=4:1>=5=8454>;7062:194>3>>631<=4>:74671954;?046>0?54>502700614?17:7089=4?100719454>7>?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
			//fingerReader.params.pchFeature=fingerInfo.pchFeature;
			//fingerReader.params.success(fingerInfo.pchFeature);
               
            //授权校验处理
            //var fingerInfo = fingerInfo.pchFeature;
            var authInfo = {
                Auth_Type : "2",
                //Auth_ID : '',
                Auth_PW : fingerInfo
            };
            //添加授权公共参数
            PJF.apply(authInfo, {
                OPER_CODE : (PJF.userInfo && PJF.userInfo.userCode) ? PJF.userInfo.userCode : "",
                Auth_Org : (PJF.roleInfo && PJF.roleInfo.orgCode) ? PJF.roleInfo.orgCode : "",
                Auth_Post : this.params.Auth_Post, //白名单
                Illegal_Post : (PJF.otherInfo && PJF.otherInfo.auditPos && PJF.otherInfo.MENU_ID) ? PJF.otherInfo.auditPos[PJF.otherInfo.MENU_ID] :'', //黑名单
                //Auth_Role : "",
                //insFTUInd : (PJF.roleInfo && PJF.roleInfo.insFTUInd) ? PJF.roleInfo.insFTUInd :"",
                Uaap_Ip : (PJF.otherInfo && PJF.otherInfo.IPS) ? PJF.otherInfo.IPS[0] : "127.0.0.1"
            });
            console.log('指纹验证请求参数:'+JSON.stringify(authInfo));
            PJF.communication.ajax({
                url : "/bosWeb/ecpJson.action",
                async : false,
                //safe : true,
                data : {
                    '_fw_service_id' : 'doStmAuthCheck',
                    'jsonData' : PJF.util.json2str(authInfo)
                },
                success : function(data) {
                    if (data.TX_STATUS == "00"&&data.RSP_CODE == "0000000000") {
                        if(me.params.dom){
                       	 	me.clearMessage();
                       	 	me.pop.destroy();
                            me.com.find('#pjf_stm_fr').remove();
                        }
                        data.fingerInfo = fingerInfo;
                        //专门为AUTH_INFO去掉"/"
                        data.AUTH_INFO = data.AUTH_INFO.replace(/\\/g,"");
                        console.log("fingerReader 为AUTH_INFO去掉/后的数据为:" + data.AUTH_INFO);
                        me.params.successHandler(data);
                        console.log('指纹验证成功');
                    }
                    else{
                        console.log('指纹验证失败data:'+JSON.stringify(data));
                        if(me.params.dom){
                        	me.setMessage('指纹验证失败')
                        	me.btn2.enable();
                        }else{
                            me.params.failure('指纹验证失败:'+data.ERROR_MSG);
                        }
                    }
                },
                failure : function(jq,ts,error) {
                    console.log('指纹验证失败ts:'+JSON.stringify(ts));
                    if(me.params.dom){
                    	me.setMessage('指纹验证失败')
                    	me.btn2.enable();
                    }else{
                        me.params.failure('指纹验证失败:'+ts);
                    }
                }
            });
    	}else{
            console.log("指纹读取失败");
            if(me.params.dom){
        		me.setMessage('指纹读取失败')
        		me.btn2.enable();
            }else{
                me.params.failure("指纹读取失败:"+result.errorMsg);
            }            
        }
    },
    /*******************************弹框登录部分    开始****************************************/
    //读取指纹回调函数
    readFingerCallBack2:function(result){
        var me = this;
        console.log("读取指纹回调result:"+JSON.stringify(result));
        if(result.status){
            var fingerInfo=result.info.pchFeature;
            //fingerInfo.pchFeature实例：";?4557000000000000000000000340600801?404>0>30110:600450?85270694?15>2924=4?1=62>:994?1683816=4=3=>399=94>>68402014>5>84<92=4:1>=5=8454>;7062:194>3>>631<=4>:74671954;?046>0?54>502700614?17:7089=4?100719454>7>?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
            //fingerReader.params.pchFeature=fingerInfo.pchFeature;
            //fingerReader.params.success(fingerInfo.pchFeature);
               
            //授权校验处理
            //var fingerInfo = fingerInfo.pchFeature;
            var authInfo = {
                Auth_Type : "2",
                //Auth_ID : '',
                Auth_PW : fingerInfo
            };
            //添加授权公共参数
            PJF.apply(authInfo, {
                OPER_CODE : (PJF.userInfo && PJF.userInfo.userCode) ? PJF.userInfo.userCode : "",
                Auth_Org : (PJF.roleInfo && PJF.roleInfo.orgCode) ? PJF.roleInfo.orgCode : "",
                Auth_Post : this.params.Auth_Post,
                Illegal_Post : (PJF.otherInfo && PJF.otherInfo.auditPos && PJF.otherInfo.MENU_ID) ? PJF.otherInfo.auditPos[PJF.otherInfo.MENU_ID] :'', //黑名单
                //Auth_Role : "",
                //insFTUInd : (PJF.roleInfo && PJF.roleInfo.insFTUInd) ? PJF.roleInfo.insFTUInd :"",
                Uaap_Ip : (PJF.otherInfo && PJF.otherInfo.IPS) ? PJF.otherInfo.IPS[0] : "127.0.0.1"
            });
            console.log('指纹验证请求参数:'+JSON.stringify(authInfo));
            PJF.communication.ajax({
                url : "/bosWeb/ecpJson.action",
                async : false,
                //safe : true,
                data : {
                    '_fw_service_id' : 'doStmAuthCheck',
                    'jsonData' : PJF.util.json2str(authInfo)
                },
                success : function(data) {
                    me.fingerReaderBtn && me.fingerReaderBtn.enable();
                    if (data.TX_STATUS == "00"&&data.RSP_CODE == "0000000000") {
                        me.destroyLoginWin();
                        data.fingerInfo = fingerInfo;
                        //专门为AUTH_INFO去掉"/"
                        data.AUTH_INFO = data.AUTH_INFO.replace(/\\/g,"");
                        console.log("fingerReader 为AUTH_INFO去掉/后的数据为:" + data.AUTH_INFO);
                        me.params.successHandler(data);
                        console.log('指纹验证成功');
                    }
                    else{
                        console.log('指纹验证失败data:'+JSON.stringify(data));
                        me.params.failure('指纹验证失败:'+data.ERROR_MSG);
                        if(PJF.otherInfo.typeInfo == PJF.constants.ICM_NAME){
                            me.setErrorTip('指纹验证失败:'+data.ERROR_MSG, 'fr_fingerErrMsg');
                        }
                    }
                },
                failure : function(jq,ts,error) {
                    console.log('指纹验证失败ts:'+JSON.stringify(ts));
                    me.fingerReaderBtn && me.fingerReaderBtn.enable();
                    me.params.failure('指纹验证失败:'+ts);
                    if(PJF.otherInfo.typeInfo == PJF.constants.ICM_NAME){
                        me.setErrorTip('指纹验证失败:'+ts, 'fr_fingerErrMsg');
                    }
                }
            });
        }else{
            console.log("指纹读取失败");
            me.fingerReaderBtn && me.fingerReaderBtn.enable();
            me.params.failure("指纹读取失败:"+result.errorMsg);
            if(PJF.otherInfo.typeInfo == PJF.constants.ICM_NAME){
                me.setErrorTip("指纹读取失败:"+result.errorMsg, 'fr_fingerErrMsg');
            } 
        }
    },
    destroyLoginWin:function(){
        if(this.pop){
            this.pop.destroy();
        }
        $('body').find('.fr_login_mask').remove(); 
        $("#"+this.windowId).remove(); 
    },
    //初始化页面-ICM
    initUiICM:function(conf){
        var me = this;

        // 填充下
        this.prepareLoginData();


        //先加一层遮罩
        $('body').find('.fr_login_mask').remove();
        $('body').append("<div class='fr_login_mask'></div>");
        var contentHtm =    '<div class="fr_login-page-container">'
                                +'<!-- 登录界面title -->'
                                +'<p class="fr_login-form-title">用户登录</p>'

                                +'<!-- 登录界面Tab -->'
                                +'<div id="fr_loginFormTab"></div>'

                                +'<!-- 指纹登录 -->'
                                +'<div id="fr_fingerLogin" style="display:none;">'
                                    +'<p class="fr_error-msg" id="fr_fingerErrMsg"></p>'
                                    +'<form class="fr_login-form" id="fr_fingerLoginForm">'
                                        // +'<ul>'
                                        //     +'<li >'
                                        //         +'<label class="pjf_stm_login_label">用户编号/用户名:</label>'
                                        //         +'<input type="text" id="fingerUsernameDom"></li>'
                                        // +'</ul>'
                                    +'</form>'
                                    +'<div class="fr_login-form-btns2">'
                                        +'<a id="fr_fingerReaderBtnDom"></a>'
                                        +'<a id="fr_fingerCancelBtnDom"></a>'
                                    +'</div>'
                                +'</div>'

                                +'<!-- 用户编号or 用户名 -->'
                                +'<div id="fr_usernameLogin" style="display:none;">'
                                    +'<p class="fr_error-msg" id="fr_userErrMsg"></p>'
                                    +'<form class="fr_login-form" id="fr_usernameLoginForm">'
                                        +'<ul>'
                                            +'<li >'
                                                +'<label class="fr_pjf_stm_login_label">用户编号/用户名:</label>'
                                                +'<input type="text" id="fr_usernameDom"></li>'

                                            +'<li >'
                                                +'<label class="fr_pjf_stm_login_label">密码:</label>'
                                                +'<input type="password" id="fr_passwordDom"></li>'
                                        +'</ul>'
                                    +'</form>'

                                    +'<div class="fr_login-form-btns">'
                                        +'<a id="fr_cancelBtnDom"></a>'
                                        +'<a id="fr_loginBtnDom"></a>'
                                    +'</div>'
                                +'</div>'
                            +'</div>';
        //me.com.append(contentHtm);
        //window
        me.windowId = PJF.util.generateUUid();
        me.params.parentDom.append("<div id ='"+me.windowId+"' style='z-index:9999;';></div>")
        me.pop = new PJF.ui.window({
            dom:me.windowId,
            content:contentHtm,
            width:700,
            height:500,
            retainDom: me.params.windowRetainDom
        });
        //tab
        var tab1 = new PJF.ui.tab({
            dom: 'fr_loginFormTab',
            titles: ["指纹", "密码"],
            backgroundColors: ['rgb(20,130,201)', 'rgb(20,130,201)'],
            iconUrl: ["stm/update.png", "stm/insert.png"],
            htmlDomIds: ['fr_fingerLogin', 'fr_usernameLogin'],
            height: '600px',
            width: '800px',
            domLoadedCallBack: function() {
                me.initFingerForm();
                me.initUserNameForm();
            }
        });

        $("#"+me.windowId).css({"z-index":"99999"});
        $("#"+me.windowId+">.stmwindow-body").css({"height":"100%"});
    },
    /**
     * 填充登录用数据
     * @return {[type]} [description]
     */
    prepareLoginData: function() {

        var loginBaseData = this.loginBaseData;
        try {
            var ipInfo = PJF.communication.GetIp();
            if (ipInfo.success) {
                loginBaseData.clientIp = ipInfo.result;
            } else {
                loginBaseData.clientIp = '192.168.1.1';
            }

        } catch (e) {
            loginBaseData.clientIp = '192.168.1.1';
        }

        try {
            var macInfo = PJF.communication.GetMac();
            if (macInfo.success) {
                loginBaseData.terminalParam.terminalMACAddr = macInfo.result;
            } else {
                loginBaseData.terminalParam.terminalMACAddr = '11-11-11-11-11-11';
            }

        } catch (e) {
            loginBaseData.terminalParam.terminalMACAddr = '11-11-11-11-11-11';
        }
        // 420000000
        loginBaseData.orgCode = PJF.roleInfo.orgCode || '350635037';

        // 临时设置
        loginBaseData.terminalParam.channelType = '20170029';
    },
    /**
     * 初始化指纹form
     * @return {[type]} [description]
     */
    initFingerForm: function() {
        var me = this;

        me.fingerReaderBtn = new PJF.ui.linkButton({
            dom: 'fr_fingerReaderBtnDom',
            style: 'main',
            bgColor: 'rgb(190,94,165)',
            name: '读取指纹',
            // width: 600,
            onClick: function() {
                me.setErrorTip('', 'fr_fingerErrMsg');
                me.fingerReaderBtn.disable();
                // // 调用外设读取指纹
                // PJF.stm.Finger.readFinger({
                //     timeout: 30
                // }, function(result) {
                // });

                //调用外设读取指纹
                setTimeout(function(){
                    try{
                        if(PJF.constants.IS_DEBUG){
                            conf.success(PJF.debug.constants.FINGER);
                            return;
                        }
                        var args = {timeout:me.params.timeout};
                        //读取指纹
                        PJF.stm.Finger.readFinger(args,function(){me.readFingerCallBack2.apply(me,arguments)});
                    }catch(e){
                        alert("读取指纹失败");
                    }
                },0);

            }
        });

        this.fingerReaderCancelBtn = new PJF.ui.linkButton({
            dom: 'fr_fingerCancelBtnDom',
            style: 'main',
            bgColor: 'rgb(20,147,214)',
            name: '取消',
            // width: 600,
            onClick: function() {
                //关闭窗口
                me.destroyLoginWin();
            }
        });

    },
    /**
     * 初始化用户名form
     * @return {[type]} [description]
     */
    initUserNameForm: function() {
        var me = this;
        this.username = new PJF.ui.textfield({
            dom: 'fr_usernameDom'
        });
        this.password = new PJF.ui.textfield({
            dom: 'fr_passwordDom'
        });

        this.cancelBtn = new PJF.ui.linkButton({
            dom: 'fr_cancelBtnDom',
            style: 'main',
            bgColor: 'rgb(20,147,214)',
            name: '取消',
            // width: 600,
            onClick: function() {
                //关闭窗口
                me.destroyLoginWin();
            }
        });

        this.loginBtn = new PJF.ui.linkButton({
            dom: 'fr_loginBtnDom',
            style: 'main',
            bgColor: 'rgb(190,94,165)',
            name: '验证',
            // width: 600,
            onClick: function() {
                if (!me.validateUserNameForm()) {
                    return;
                }
                // 清空登录错误信息
                me.setErrorTip('', 'fr_userErrMsg');
                // 执行用户名登录
                me.usernameFormLogin(me.combinateUserNameLoginData(), function(data) {
                    console.log('登录成功');
                    console.log(JSON.stringify(data));
                    //关闭窗口
                    me.destroyLoginWin();
                    //成功回调
                    me.params.successHandler(data);
                });

            }
        });
    },
    /**
     * 组装用户名登录模式 登录所用数据
     * @return {[type]} [description]
     */
    combinateUserNameLoginData: function() {

        var jsonData = PJF.apply({}, this.loginBaseData);

        jsonData.userCode = this.userCode;
        // this.userCode = '';

        jsonData.userPwd = this.userPwd;
        this.userPwd = '';

        jsonData.userId = jsonData.userCode;

        var param = {};
        param._fw_service_id = 'commonLoginCheckService';
        param.jsonClass = 'com.ccb.model.InputLoginBean';
        param.jsonData = PJF.util.json2str(jsonData);
        return param;
    },
    /**
     * 执行用户名登录操作
     * @param  {[type]} param [description]
     * @return {[type]}       [description]
     */
    usernameFormLogin: function(param, successCallback) {
        var me = this;
        // var url = '/bosWeb/ecpJson2BeanRaw.action';
        // // url = "ecpJson2BeanRaw.json";
        // PJF.communication.ajax({
        //     //请求地址
        //     url: url,
        //     timeOut: 30000,
        //     //默认为json格式
        //     dataType: 'json',
        //     //传递的数据
        //     data: param,
        //     //同步模式：默认为异步
        //     async: true,
        //     //默认为post
        //     type: 'post',
        //     /*ajax通信成功 但需要判断返回数据*/
        //     success: function(data) {
        //         /*存在错误*/
        //         if (data.errorCode) {
        //             if (data.errorCode == 'ZBLUAASI0001') {
        //                 /*用户登陆失败*/
        //                 me.setErrorTip(me.constants.USERNAME_PWD_NOT_CORRECT, 'userErrMsg');
        //             } else {
        //                 /*其他错误*/
        //                 // new PJF.ui.messageBox({
        //                 //  style: 'warning',
        //                 //  title: '登陆失败',
        //                 //  content: data.errorMsg
        //                 // });
        //                 me.setErrorTip(data.errorMsg || '登录失败，未知错误', 'userErrMsg');
        //             }
        //             //失败回调
        //             me.params.failure();
        //         } else {
        //             //这里要先判断登陆用户是否在网点机构下有岗位信息
        //             if(data.userPositions && data.userPositions.length > 0){
        //                 for(var i = 0; i < data.userPositions.length; i++){
        //                     if(data.userPositions[i].orgCode == PJF.roleInfo.orgCode){                              
        //                         //只要有一个岗位在该机构下即可
        //                         successCallback && successCallback(data);
        //                         break;
        //                     }
        //                 }       
        //                 //没有任何匹配，提示错误信息             
        //                 if(i == data.userPositions.length){
        //                     me.setErrorTip('该用户在此设备机构下没有岗位信息', 'userErrMsg');
        //                     //失败回调
        //                     me.params.failure();
        //                 }
        //             }
        //         }
        //     },
        //     //通信失败回调函数
        //     failure: function() {
        //         me.setErrorTip(me.constants.NETWORK_ERR, 'userErrMsg');
        //         //失败回调
        //         me.params.failure();
        //     }
        // });
        var pswEncrypt = PJF.util.encrypt(PJF.util.trim(this.password.getValue()));
        if(!pswEncrypt){
           me.setErrorTip('加密出错，请重试', 'fr_userErrMsg');
           return; 
        }
        var authInfo = {
            Auth_Type : "1",
            Auth_ID : PJF.util.trim(this.username.getValue()),
            Auth_PW : pswEncrypt
        };
        //添加授权公共参数
        PJF.apply(authInfo, {
            OPER_CODE : (PJF.otherInfo && PJF.otherInfo.devId) ? PJF.otherInfo.devId : "",
            Auth_Org : (PJF.roleInfo && PJF.roleInfo.orgCode) ? PJF.roleInfo.orgCode : "",
            Auth_Post : this.params.Auth_Post,
            Illegal_Post : (PJF.otherInfo && PJF.otherInfo.auditPos && PJF.otherInfo.MENU_ID) ? PJF.otherInfo.auditPos[PJF.otherInfo.MENU_ID] :'', //黑名单
            //Auth_Role : "",
            //insFTUInd : (PJF.roleInfo && PJF.roleInfo.insFTUInd) ? PJF.roleInfo.insFTUInd :"",
            Uaap_Ip : (PJF.otherInfo && PJF.otherInfo.IPS) ? PJF.otherInfo.IPS[0] : "127.0.0.1"
        });
        console.log('密码登录请求参数:'+JSON.stringify(authInfo));
        PJF.communication.ajax({
            url : "/bosWeb/ecpJson.action",
            async : false,
            //safe : true,
            data : {
                '_fw_service_id' : 'doStmAuthCheck',
                'jsonData' : PJF.util.json2str(authInfo)
            },
            success : function(data) {
                if (data.TX_STATUS == "00"&&data.RSP_CODE == "0000000000") {
                    successCallback && successCallback(data);
                    console.log('密码验证成功');
                }
                else{
                    console.log('密码验证失败data:'+JSON.stringify(data));
                    me.params.failure(data.ERROR_MSG);
                    me.setErrorTip(data.ERROR_MSG || '登录失败，未知错误', 'fr_userErrMsg');
                }
            },
            failure : function(jq,ts,error) {
                console.log('密码验证失败ts:'+JSON.stringify(ts));
                me.params.failure('密码验证失败:'+ts);
            }
        });
    },
    /**
     * 校验输入form
     * @return {[type]} [description]
     */
    validateUserNameForm: function() {
        var userCode = PJF.util.trim(this.username.getValue());
        var userPwd = PJF.util.trim(this.password.getValue());

        if (!userCode || !userPwd) {
            this.setErrorTip(this.constants.USERNAME_PWD_NOT_NULL, 'fr_userErrMsg');
            return false;
        }

        // 校验用户名  密码 规则

        this.userCode = userCode;
        this.userPwd = userPwd;

        return true;
    },
    /**
     * 显示错误提示信息
     * @param  {[type]} msg [description]
     * @param  {[type]} pos [description]
     * @return {[type]}     [description]
     */
    setErrorTip: function(msg, pos) {
        $("#" + pos).html(msg);
    },
    /*******************************弹框登录部分    结束****************************************/
    //初始化页面
	initUi:function(conf){
		// var contentHtm='<div class="pjf_stm_content_left pjf_stm_fingerReader_img"></div><div class="pjf_stm_content_right"><div class="pjf_stm_fingerreader_msg">'+
  //       '<ul><li><div class="pjf_stm_cardreader_msg">'+conf.infoMsg+'</div></li></ul></div></div>';

	   // this.com.append(contentHtm);
        var authTip = conf.authTip || '请工作人员按指纹';
	   	var contentHtm = $("<div id='pjf_stm_fr'><div class='pjf_stm_title pjf_stm_fr_title'>指纹审核</div><div class='pjf_stm_fr_window'><div class='pjf_stm_fr_left'></div><div class='pjf_stm_fr_right'>"+authTip+"<div class='pjf_stm_fr_msg'></div></div></div><div class='pjf_stm_fr_btn'><div id='pjf_stm_fr_btn1'></div><div id='pjf_stm_fr_btn2'></div></div></div>");
		var me = this;
		me.com.append(contentHtm);
        me.windowId = PJF.util.generateUUid();
        template.newpage.append("<div id ='"+me.windowId+"'></div>")
		me.pop = new PJF.ui.window({
			dom:me.windowId,
			htmlDomId:'pjf_stm_fr',
			width:1070,
			height:590,
			domLoadedCallBack:function(){
				me.btn1 = new PJF.ui.linkButton({
					dom:'pjf_stm_fr_btn1',
					name:'取消审核',
					style:'main',
					onClick:function(){
                        me.com.find('#pjf_stm_fr').remove();
						me.pop.destroy();
                        //在取消审核的时候，若有外设回调，直接删除
                        if(me.readFingerResult && me.readFingerResult.eventId){
                            PJF.event.removeSubscriber(me.readFingerResult.eventId);
                        }
                        (typeof(conf.cancelAuth) == "function") && conf.cancelAuth();
					}
				})

				me.btn2 = new PJF.ui.linkButton({
					dom:'pjf_stm_fr_btn2',
					name:'重新审核',
					style:'main',
					disabled:true,
					onClick:function(){
						setTimeout(function(){
				    		try{
				    			if(PJF.constants.IS_DEBUG){
				    				conf.success(PJF.debug.constants.FINGER);
				    				return;
				    	    	}
				    	    	me.clearMessage();
				                var args = {timeout:me.params.timeout};
				    			//读取指纹
				    			me.readFingerResult = PJF.stm.Finger.readFinger(args,function(){me.readFingerCallBack.apply(me,arguments)});
				    			me.btn2.disable();
				    		}catch(e){
				    			alert("读取指纹失败");
				    		}
				    	},0)
					}
				})
			}
		})
	},
	setMessage:function(msg){
		var me= this;
		$('#'+me.windowId).find('.pjf_stm_fr_msg').text(msg);
	},
	clearMessage:function(){
		this.setMessage('');
	},
    getClassName: function() {
        return "PJF.ui.fingerReader";
    },
    destroy:function(){
        this.destroyLoginWin();
        this.com && this.com.remove();
        PJF.ui.componentMgr.remove(this.id);
    },
});
PJF.ui.signature = PJF.extend(PJF.ui.component, {
    init: function(conf) {
    	var $this=this;
    	this.params={
    			width:200,
    			height:125,
    			winWidth:800,
    			winHeight:500,
    			okBtn:null,
    			cancelBtn:null,
    			signatureWin:null,
					noSign:false,
					localSign:false, // 针对外设不支持的情况
    			success: function(data){},
    			failure: function(data){}
    	}
    	$.extend(this.params,conf);
    	$this.initUi($this.params);
		
    },
    
	initUi:function(conf){
		var $this=this;
		if(conf.dom){
			var html="<div class='pjf_stm_signaturecontent'></div>";
			$this.com.append(html);
		
			$(".pjf_stm_signaturecontent").css({
				width:$this.params.width / PJF.constants.DEFAULT_FONTSIZE + 'rem' ,
				height:$this.params.height / PJF.constants.DEFAULT_FONTSIZE + 'rem'
			}).unbind("click").bind("click",function(){
				if($this.params.noSign){
					$this.params.success();
					return;
				}
				$this.openWin();
                $this.zdStyle();
				var $stmcontent=$(".pjf_stm_signature_content");
				var offset=$stmcontent.offset();
				var width=$stmcontent.width();
				var height=$stmcontent.height();
				PJF.communication.player.SpeekText('已为您呼叫工作人员前来确认,请稍候', 100);		
				if (conf.localSign) {
					var canvas = $("<canvas width = '" + width + "' height = '" + height + "'></canvas>").appendTo($stmcontent)
					$this.canvasSign = new PJF.ui.sign({canvas: canvas[0]})
				}	else {
					PJF.stm.eSign.startSignature({x:offset.left,y:offset.top,w:width,h:height},function(e){});		
				}					
			});
		}else{
			$this.openWin();	
			//重新定位位置
			$("#stm_signature_window_div").css({
				"top":"3.7rem",
				"left":"0rem",
				"width":"12.36rem"
			});
			$("#stm_signature_window_div .pjf_stm_signature_bottom").css({
				"width":"12rem"
			});

			if(conf.photoContent){
				$(".stmwindow-body").css({
					"width":"70%"
				});
				$("#stm_signature_window_div .pjf_stm_signature_bottom").css({
					"width":"70%"
				});
				//新增照片
				$("#stm_signature_window_div").append("<div class='stm_signature_window_pic'><img src='data:image/jpg;base64,"+conf.photoContent+"' /></div>");				
			}
            $this.zdStyle();
			var $stmcontent=$(".pjf_stm_signature_content");
			var offset=$stmcontent.offset();
			var width=$stmcontent.width();
			var height=$stmcontent.width()/2; //$stmcontent.height();
			if (conf.localSign) {
				var canvas = $("<canvas width = '" + width + "' height = '" + $stmcontent.height() + "'></canvas>").appendTo($stmcontent)
				this.canvasSign = new PJF.ui.sign({canvas: canvas[0]})
				// this.canvasSign = new PJF.ui.sign({left:offset.left,top:offset.top,w:width,h:height})
			} else {
				PJF.stm.eSign.startSignature({x:offset.left,y:offset.top,w:width,h:height},function(e){});
			}			
		}
	},
	zdStyle: function(){
        var me = this;
        if (!me.params.localSign) return;
        //中德想大一点
        if (me.params.dom) {
            $("#stm_signature_window_div").css({
                "width": "100%",
                "height": "100%",
                "top": "0rem",
                "left": "0rem"
            });
            $("#stm_signature_window_div .pjf_stm_signature_bottom").css({
                "width": "100%"
            });
            $(".pjf_stm_signature_content").css({
                "width": "100%",
                "height": "7.3rem"
            });
        } else {
            if (me.params.photoContent) {
                //有照片，无dom
                $("#stm_signature_window_div").css({
                    "height": "100%",
                    "top": "0rem"
                });
                $(".pjf_stm_signature_content").css({
                    "width": "8rem",
                    "height": "7rem"
                });
            } else {
                //无照片，无dom
                $("#stm_signature_window_div").css({
                    "height": "100%",
                    "top": "0rem"
                });
                $(".pjf_stm_signature_content").css({
                    "width": "12rem",
                    "height": "7rem"
                });
            }
        }
    },
	openWin:function(){
		var $this=this;
		if($this.params.signatureWin){
			$this.params.signatureWin.show();
			return;
		}
		// var openHtml='<div id="stm_signature_window_div"></div><div class="stm_signature_openwin" id="stm_signature_win" ><div class="pjf_stm_signature_title">请您使用电磁笔以正楷字体 确认</div><div class="pjf_stm_signature_content"></div>'+
		//              '<div class="pjf_stm_signature_bottom"><a id="stm_signature_cancel"></a><a id="stm_signature_okbtn"></a></div>';
        var _tip = $this.params.sigTips ? ('<div class="stm_signature_signTip">'+ $this.params.sigTips + '</div>') : "";
		var openHtml =	'<div class="stm_signature_openwin" id="stm_signature_win" style="display:none;">'
					 +		'<div class="pjf_stm_signature_title">'+($this.params.staffOperation ? "请您使用电磁笔以正楷字体 确认" : "客户签名：请您使用电磁笔以正楷字体签名确认")+'</div>'
			         +      _tip
					 +		'<div class="pjf_stm_signature_content"></div>'
					 +	    '<div class="pjf_stm_signature_bottom">'
					 +	    	'<a id="stm_signature_cancel"></a>'
					 +	    	'<a id="stm_signature_okbtn"></a>'
					 +	    '</div>'
					 +	'</div>'
					 +	'<div id="stm_signature_window_div"></div>';
		template.newpage.append(openHtml);
		//$(document.body).append(openHtml);
		//this.com.append(openHtml);
		$(".pjf_stm_signature_content").css({
			width:($this.params.winWidth-200) / PJF.constants.DEFAULT_FONTSIZE + 'rem',
		    height:($this.params.winHeight-200) / PJF.constants.DEFAULT_FONTSIZE + 'rem'
		});
		$(".pjf_stm_signature_bottom").css({
			width:($this.params.winWidth-30) / PJF.constants.DEFAULT_FONTSIZE + 'rem'
		});
		
		$this.params.signatureWin=new PJF.ui.window({
			dom:"stm_signature_window_div",
			htmlDomId:"stm_signature_win",
			width:$this.params.winWidth,
			height:$this.params.winHeight,
			domLoadedCallBack:function(){
				$this.params.cancelBtn=new PJF.ui.linkButton({
					dom: 'stm_signature_cancel',
					bgColor: 'rgb(215, 98, 183)',
					style:"smaller",
					name: '重签',
					onClick: function() {
						if ($this.params.localSign) {
							$this.canvasSign.clear()
						} else {
							PJF.stm.eSign.clearSignature();
						}
						
					}

				});
				
				$this.params.okBtn=new PJF.ui.linkButton({
					dom: 'stm_signature_okbtn',
					bgColor: 'rgb(215, 98, 183)',
					style:"smaller",
					name: '确认',
					onClick: function() {
				    	// if($this.params.notCloseWin === true){
				    	// 	$this.params.success();
				    	// }else{
							$this.params.signatureWin.hide();
							$("#stm_signature_window_div").hide();
							$("#stm_signature_win").hide();
							
							//PJF.stm.eSign.endSign();
							$this.showSignature();
				    	// }
				    	if(PJF.constants.IS_DEBUG){
							$this.params.success(PJF.debug.constants.SIGNATURE);
				    	}
					}

				});
				}
		});
		
		
		
	},
	showSignature: function (flag, cb) {
		var me = this;
		var $pjf_stm_signaturecontent = $(".pjf_stm_signaturecontent");
		$pjf_stm_signaturecontent.empty();
		var path = "";
        if (this.params.localSign) {
            if(!(flag === true)){
                var base64 = this.canvasSign.getSign();
                PJF.communication.saveBase64Image(base64, PJF.stm.baseDir + '/sign/' + PJF.otherInfo.SVC_ID + '.jpg');
                this.params.success(base64, '') // 木有轨迹数据
                $pjf_stm_signaturecontent.append("<img style='width:2rem;height:1.25rem' src='data:image/jpg;base64," + base64 + "' />");
            }else{
                cb && cb();
            }
        } else {
            PJF.stm.eSign.getSignature(function(result){
                if(!(flag === true)){
                    if(result.status == 0){
                        me.params.failure(result.errorCode, result);
                    }
                    else{
                        me.params.success(result.info.photoContent,result.info.pchSignData);
                        $pjf_stm_signaturecontent.append("<img style='width:2rem;height:1.25rem' src='data:image/jpg;base64,"+result.info.photoContent+"' />");

                    }
                }else{
                    cb && cb();
                }
            });
        }
        //$pjf_stm_signaturecontent.append("<div class='pjf_stm_signature_img_debug'></div>");
	},
	// callBack : function(result){
 //        if(result.status == 0){
 //            this.params.failure(result);
 //        }
 //        else{
 //            this.params.success(result.info.photoContent);
 //        }
 //    },
    getClassName: function() {
        return "PJF.ui.signature";
    }
});
PJF.apply(PJF.ui.signature.prototype, {
    destroy:function(cb){
        var me = this;
        if(me.hasDestroyed) return;
    	me.showSignature(true, function(){
            me.hasDestroyed = true;
            cb && cb();
            me.params.signatureWin.destroy();
            $("#stm_signature_win").remove();
            $("#stm_signature_window_div").remove();
        });
    }
});
/**
 * Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * Author: famingyuan
 * Create on: 2015-07-03
 * Last Updated:
 * 说明:消息提示框 按钮组件
*/

PJF.ui.messageBox=PJF.extend(PJF.ui.component,{
	init : function(conf){
        var me = this;
        me.errorMessageBox = new PJF.ui.errorMessageBox({
            showIcon: false,
            content: conf.content,
            buttonConfs: conf.buttonConfs
        });
	}
});

PJF.apply(PJF.ui.messageBox.prototype,{
	destroy:function(){		
        this.errorMessageBox.destroy();
	},
    newDestroy:function(){
        this.errorMessageBox.destroy();
        PJF.ui.componentMgr.remove(this.id);
        this.com && this.com.remove();
        this.errorMessageBox = null;
        this.com = null;
        this.id = null;   
    }
});
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * @Author wangsheng.chou
 * Create on: 2015-06-30
 * Last Updated:
 * 说明:个人银行信息;
 */
PJF.ui.multiInfo = PJF.extend( PJF.ui.component ,{
    init:function( conf ){
        this.options = {
            units : [],
            width: 1074,
            height:600
        };
        this.trimData( conf );
        this.createDom();
        this.adjustCss();
    },
    trimData:function( conf ){
        $.extend( this.options, conf );
    },
    createDom:function(){
        var me = this ;
        var units = me.options.units ;

        var htmlStr = ['<div class="pjf-mInfo-frame">' +
            '<ul class="pjf-mInfo-ul">'];

        $.each( units , function(index ,unit ){
            try{
                htmlStr.push( me._createLiUnit( unit ) );
            }catch(e){
                console.error( e.message );
            }
        });

        htmlStr.push(['</ul></div>']);
        me.com.append( htmlStr.join('') );
        me.frame = me.com.find('.pjf-mInfo-frame');
        me.ul = me.com.find('.pjf-mInfo-ul');
    },
    adjustCss:function(){
        var me = this ;
        var opts = me.options ;
        var ratio = PJF.constants.DEFAULT_FONTSIZE ;
        me.frame.css({
            width: ( opts.width ==='auto' )? opts.width : ( opts.width / ratio + 'rem'),
            height:'inherit'
        })

        //zws add 2016年1月12日18:04:41 满足部分设备不能滑动时出现滚动条的需求
        if( PJF.util.deviceType.icm ){
            me.ul.css({'overflow-y':'initial','padding-right': '0'});
        }
    },
    /**
     * 用途：渲染 pjf-mInfo-unit 内容
     * @param  type : 区别msg cell tel bank
     * @param  detail：数据单元
     */
    _createLiUnit:function(  unit ){
        var unitStr = [];
        unitStr.push('<li class="pjf-mInfo-unit">' +

            '<div class="pjf-mInfo-icon"><div class="pjf-mInfo-icon-inner">' +
                '<div class="pif-mInfo-icon-combine">' +
                    '<div class="pjf-mInfo-img" style="background-image: url(' + unit['iconUrl'] + ')">' +
                    '</div>' +
                    '<p class="pjf-mInfo-instr">' + unit['title'] + '</p>' +
                '</div>' +
            '</div></div>' +
            '<div class="pjf-mInfo-detail">');

        $.each( unit['content'],function( index , data ){
                unitStr.push( fillContent( data ) );
        });
        unitStr.push('</div></li>');
        return unitStr.join('');

        /**
         * 用途：渲染 pjf-mInfo-detail 的内容
         * @param dUnit : 数据单元
         * */
        function fillContent( dUnit ){
            var detailStr = [];
            var name = dUnit.name ;
            var cont = dUnit.desc ;

            if( typeof cont === 'string' ){
                cont = [].concat( cont );
            }

            detailStr.push('<table>');

            $.each( cont , function(index ,str ){
                var title = ( index === 0 ? ( name + ' :' ) : '') ;
                detailStr.push('<tr>' +
                    '<td style="white-space: nowrap;vertical-align: top">' + title +'</td>' +
                    '<td style="padding-left: .15rem ; word-break: break-all;-ms-word-break: break-all;">' + str  +'</td>' +
                    '</tr>');
            });

            detailStr.push('</table>');
            return detailStr.join('');
        }

    }
});
PJF.apply(PJF.ui.multiInfo.prototype,{
    getClassName:function(){
        return "PJF.ui.multiInfo" ;
    },
    destroy:function(){
        PJF.ui.componentMgr.remove(this.id);
        this.com.remove();
        this.com = null;
    }
});
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * @Author chenyue
 * Create on: 2015-06-30
 * Last Updated: 
 * 说明:页面遮罩组件;
 */

PJF.ui.loading = PJF.extend(PJF.ui.component, {
	init:function(conf){
		var arr = PJF.ui.loading.object;
		for (var x in arr) {
			arr[x].css('display','none');
		}
		var me = this;
		conf.msg = conf.text || conf.msg;
        var msg;
        try {
            msg = PJF.i18n.getI18nResource('pjfI18n.loadingMsg');
		} catch(e) {
			msg = '业务正在处理中，请稍候……'
		}
		var dfconf = {
			msg: msg,
			opacity:'0.5',
			target:'body'
		}
		me.conf = $.extend(dfconf,conf);
		var target = $(me.conf.target).css('position','relative');
		me.cntr = $('<div id="pjf_laoding_'+this.generateId()+'" componentId="'+this.id+'"></div>');
		target.append(me.cntr);
		if(me.conf.noIcon)
			me.msgBox = $('</div><div class="pjf_laoding_msg">'+me.conf.msg+'</div>');
		else
			me.msgBox = $('</div><div class="pjf_laoding_msg"><div class="pjf_laoding_ico"></div>'+me.conf.msg+'</div>');
		if(!me.conf.noLayer){
			me.layer = $('<div class="pjf_loading_layer"></div>');
			me.cntr.append(me.layer).append(me.msgBox);
			me.layer.css('opacity',me.conf.opacity);
		}
		me.countDown = $('<div class="pjf_laoding_countDown"></div>');
		if(me.conf.timeout){
			me.cntr.append(me.countDown);
			me.countDown.css('width','2rem');
			me.countDown.css('height','2rem');
			me.countDown.css('background-size','2rem 2rem');
            if (PJF.orgInfo.instSvrlLgPsnID === 'DA003') {
                me.countDown.css('background-image', 'url(../../../css/stmimg/newLoading_fan.gif)');
			}
			//me.countDown.text(me.conf.timeout);
			if(me.conf.timeout<10)
				me.countDown.text("0"+(me.conf.timeout));
			else
				me.countDown.text(me.conf.timeout);
			if (me.conf.timeout >= 100)
                me.countDown.css('font-size', "0.45rem")
			me.interval = setInterval(function(){
                me.conf.timeout--;
				if(me.conf.timeout<10)
					me.countDown.text("0"+(me.conf.timeout));
				else
					me.countDown.text(me.conf.timeout);

				if (me.conf.timeout < 100)
                    me.countDown.css('font-size', "0.6rem")

				if(me.conf.timeout == 0){
					me.countDown.css('background-image','');
					clearInterval(me.interval);
					me.destroy();
					if(me.conf.afterCountDown)
						me.conf.afterCountDown();
				}
			},1000)
		}

		me.msgBox.css({ 
			lineHeight:me.msgBox.height()+'px',
			left:(me.cntr.width()-me.msgBox.width())/2+'px'
		});
		if(window.parent!=window && !me.conf.noLayer)
			template.disableNavbar(true)
        me.zdStyle();
		PJF.event.publish("PJF_STM_LOCK");
		PJF.ui.loading.count++;
		PJF.ui.loading.object.push(me.cntr);
	},
	setMessage:function(str){
		var me = this;
		me.msgBox.text(str);
        if(!me.conf.noIcon)
            me.msgBox.prepend('<div class="pjf_laoding_ico">');
        me.zdStyle();
		me.msgBox.css({
			lineHeight:me.msgBox.height()+'px',
			left:(me.cntr.width()-me.msgBox.width())/2+'px'
		});
	},
    zdStyle: function () {
        //中德
        if (PJF.orgInfo && PJF.orgInfo.instSvrlLgPsnID == 'DF001')
            $('.pjf_laoding_ico').css({
                'background-image': 'url(icon/zd_loading.png)',
                'width': '1.6rem'
            });
    },
	destroy:function(){
		var arr = PJF.ui.loading.object;
		var index = '';
		for (var i=0; i<arr.length; i++) {
			if (arr[i] == this.cntr) {
				index = i;
				break;
			}
		}
		PJF.ui.componentMgr.remove(this.id);
		var me = this;
		clearInterval(me.interval);
		me.cntr && me.cntr.remove();
		me.layer && me.layer.remove();
		me.msgBox.remove();
		me.countDown.remove();
		if(window.parent!=window)
			template.disableNavbar(false)		
		if(!this.hasDestroy){
			PJF.event.publish("PJF_STM_UNLOCK");
			PJF.ui.loading.count--;
			PJF.ui.loading.object.splice(index, 1);
			var length = PJF.ui.loading.object.length;
			length && PJF.ui.loading.object[length -1].css('display','block');
		} 
		this.hasDestroy = true;
	},
	getClassName:function(){
		return 'PJF.ui.loading'
	}
});
//记录下有多少个loading
PJF.ui.loading.count = 0;
PJF.ui.loading.object = [];
/**
 * Framework JS YTD Library 1.0
 * Copyright(c) 2014, China Construction Bank.
 * Author: Shen Ye
 * Create on: 2014-07-08
 * Last Updated:
 * 说明:Cover Flow(取名自苹果)组件
 */

 PJF.ui.coverFlow = PJF.extend(PJF.ui.component,{

 	//配置项
 	defaultSettings : {
 		//当前9种样式，最多显示7个图片
 		liClassArray : ['pos_0','pos_1','pos_2','pos_3','pos_4','pos_5','pos_6','pos_7','pos_8'],
 		//class前缀
		liClassPrefix : 'pos_',
		//text css
		textClassArray : ['imgInfo_0','imgInfo_1','imgInfo_2','imgInfo_3','imgInfo_4','imgInfo_5','imgInfo_6','imgInfo_7','imgInfo_8'],

		textClassPrefix : 'imgInfo_',

		textCss : [['20px','14px'],['20px','14px'],['30px','23px'],['20px','14px'],['35px','27px']]
 	},
 	
 	//内部通用属性
 	elements : {
 		//整个组件宽度960
 		componentWidth : 960,
 		textHeight : [40,35,35,30,30,20,20]
 	},

 	init : function(conf){
 		//引用
 		var me = this;
 		var settings = this.defaultSettings;
 		this.conf = conf;
 		//按照从左到右的顺序储存图片对应的data信息
 		this.data = [];
 		this.onChoose = conf.onChoose;
 		this.com.addClass('ytd_coverFlow');
 		this.ulId = this.generateId();
 		$("<ul id='" + this.ulId + "'></ul>").appendTo(this.com);
 		this.ulDom = this.com.find('#' + this.ulId);
 		//初始化图片排列
 		for(var i = 0; i < conf.data.length; i++){
 			var j = i < settings.liClassArray.length ? i : (i % 2 == 0 ? settings.liClassArray.length - 1 : settings.liClassArray.length - 2);
 			var liDomString = "<li class ='" + settings.liClassPrefix + j + "'><img src = '" + conf.data[i].url+ "' ></img>";
 			if(conf.data[i].text)
 				liDomString += "<div class = '" + settings.textClassPrefix + j + "'><span class = 'imgInfoFont'>" + (conf.data[i].text? conf.data[i].text : '') + "</span></div>";
 			liDomString +="</li>";
 			var liDom = $(liDomString);
 			j % 2 == 0 ? liDom.appendTo(this.ulDom) && this.data.push(conf.data[i]) : liDom.prependTo(this.ulDom) && this.data.unshift(conf.data[i]);			
 		}

 		//储存现有li的style格式，用于动画效果
 		this.liAttrs = [];
 		this.liDoms = this.com.find('li');
 		this.com.find('li').each(function(){
 			me.liAttrs.push([ $(this).css('left'), $(this).css('top'), 
 				$(this).css('opacity'), $(this).css('zIndex'), $(this).css('width'),$(this).attr('class') ]);
 		});

 		//储存字体块的dom
 		this.textAttrs = [];
 		this.textDoms = this.com.find('div');
 		this.fontResize();
 		//初始化绑定事件
 		this.initEvent();

 	},
 	//绑定点击、拖拽事件
 	initEvent : function(){
 		var me = this;
 		var settings = this.defaultSettings;
 		var conf = this.conf;
 		//绑定点击事件
 		this.com.delegate('li','click',function(){
 			var liClass = $(this).attr('class');
 			//获取class后端序号
 			var index = liClass.substring(settings.liClassPrefix.length);
 			//移动步数(js里整数除以整数居然是浮点你敢信?!)
 			var moveNum = parseInt((parseInt(index) + 1) / 2);
 			//移动方向
 			if(index == 0)
 				me.chooseMiddle();
 			else if(index % 2 != 0)
 				me.moveRight(moveNum, 'normal');
 			else
 				me.moveLeft(moveNum, 'normal');

 			if(conf.chooseAfterClick && me.onChoose){
 				me.chooseMiddle();
 			}
 		});

 		//滑动事件，记录鼠标初始位置
 		this.com.delegate('li','mousedown',function(e){
 			me.startXY = {
 				x : e.clientX,
 				y : e.clientY
 			};
 			me.startMoveNum = 0;
 			me.startMove = true;
 			
			return false;
 		});

 		//鼠标移出事件
		this.com.bind('mouseleave',function(e){
			me.startMove = false;
			me.startXY = null;			
			return false;
		})
		//mouse up
		this.com.bind('mouseup',function(e){
			me.startMove = false;
			me.startXY = null;
			return false;
		})
		//鼠标移动事件
 		this.com.delegate('li','mousemove',function(e){
 			//是鼠标点击拖拽的情况才转动图片
 			if(me.startXY){
 				//位移量
 				var moveMent = e.clientX - me.startXY.x;
 				var rate = moveMent / me.elements.componentWidth * (settings.liClassArray.length - 2);
 				var moveNum = parseInt(rate);
 				var interval = moveNum - me.startMoveNum;
 				//检查动画是否结束,添加Math.abs(interval)>0是因为在触摸屏下手点击也触发了mousemove事件
 				if(!me.checkAnimated && conf.chooseAfterDrag && Math.abs(interval) > 0)
 					me.checkAnimated = setInterval(function(){					
						var flag = true;
						for(var i = 0; i < me.liDoms.length; i++){
							if($(me.liDoms[i]).is(':animated')){
								flag = false;
								break;
						}
					}
					if(flag){
						clearInterval(me.checkAnimated);
						me.checkAnimated = null
						me.chooseMiddle();
					}
				},400);
 				if(interval < 0){
					me.moveLeft(-interval, 100);
 				}
 				else if(interval > 0){
					me.moveRight(interval, 100);
 				}
 				me.startMoveNum = moveNum;				
 			}
 		})
 	},

 	//右移
 	moveRight : function(moveNum, speed){

 		for(var i = 0; i < moveNum; i++){
 			this.liAttrs.push(this.liAttrs[0]);
			this.liAttrs.shift();

			this.data.unshift(this.data[this.data.length-1]);
			this.data.pop();		
		}
		this.shift(speed);
 	},

 	//左移
 	moveLeft : function(moveNum, speed){

 		for(var i = 0; i < moveNum; i++){
			this.liAttrs.unshift(this.liAttrs[this.liAttrs.length-1]);
			this.liAttrs.pop();

			this.data.push(this.data[0]);
			this.data.shift();
		}
		this.shift(speed);
 	},
 	//模拟图片移动动画
 	shift : function(speed){
 		var me = this;
 		//模拟图片移动
 		for(var i = 0; i < this.liDoms.length; i++){			
				this.liDoms[i].style.zIndex = this.liAttrs[i][3];		
				$(this.liDoms[i]).animate( {left: this.liAttrs[i][0], top: this.liAttrs[i][1], 
					opacity: this.liAttrs[i][2],  width: this.liAttrs[i][4]}, speed);
				$(this.liDoms[i]).attr('class',this.liAttrs[i][5]);					
		}
		//若有字体显示，也改变大小
		for(var i = 0; i < this.textDoms.length; i++){
			var parentClassName = $(this.textDoms[i]).parent().attr('class');
			var divClassName = this.defaultSettings.textClassPrefix + parentClassName.substring(4);
			$(this.textDoms[i]).attr('class', divClassName);
		}		
 		this.fontResize();
 	},
 	//重设字体大小
 	fontResize : function(){
 		for(var i = 0; i < this.textDoms.length; i++){
 			$(this.textDoms[i]).removeAttr('style');
 			var text = $(this.textDoms[i]).find('span').text();
 			if(text.length > 7 && text.length <= 14){
 				var fontSize = $(this.textDoms[i]).css('fontSize').match(/\d+/)[0] * 7 / (text.length + 2) + 'px';
 				$(this.textDoms[i]).css('fontSize', fontSize);
 			}
 			else if(text.length > 14){
 				var fontSize = $(this.textDoms[i]).css('fontSize').match(/\d+/)[0] / 2 + 'px';
 				var lineHeight =  $(this.textDoms[i]).css('line-height').match(/\d+/)[0] / 2 + 'px';
 				$(this.textDoms[i]).css('fontSize', fontSize);
 				$(this.textDoms[i]).css('line-height', lineHeight);
 			} 				
 		}
 	},
 	//选择中间图片后触发
 	chooseMiddle : function(){		
 		if(this.onChoose)
 			this.onChoose(this.getSelected());
 	},

 	//获取当前值(已排序)
 	getValues : function(){

 	},
 	//根据值选择某一个图片
 	choosePic : function(obj){
 		if(!obj)
 			return;
 		for(var i = 0; i < this.liDoms.length; i++){
 			var url = $(this.liDoms[i]).find('img').attr('src');
 			if(url == obj.url){
 				$(this.liDoms[i]).trigger('click');				
 				break;
 			}
 		}	
 	},
 	//获取中间图片对应数据信息
 	getSelected : function(){
 		return this.data[parseInt(this.data.length / 2)];
 	},

	//获取组件名称
	getClassName:function(){
		return "PJF.ui.coverFlow";
	},

	//重写destroy方法
	destroy:function(){
		 this.com.children().remove();
		 this.com.removeClass("ytd_coverFlow");
		 PJF.ui.componentMgr.remove(this.id);
		 this.com = null;
		 this.id = null;
	},
	//禁用
	disable : function(){
		this.com.undelegate('click').undelegate('mousedown').undelegate('mousemove');
		this.com.unbind('mouseup').unbind('mouseleave');
		this.com.css('background-color','#F0F0F0').css('opacity',0.6);
	},
	//启用
	enable : function(){
		this.initEvent();
		this.com.css('background-color','transparent').css('opacity',1);
	}

 })
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2012, China Construction Bank.
 * Author: bianhangying
 * Create on: 2015-05-29
 * Last Updated:
 * 说明:错误信息提示
 *
 * 待改进：
 */
PJF.ui.errorMessageBox = PJF.extend(PJF.ui.component, {
	init: function(conf) {
		var me = this;
		//设置默认值
		this.options = {
			btnConf:{			//默认的按钮样式
				style: "main",
				bgColor: 'rgb(20,149.214)',
				name: "确定",
				onClick: function(){
                    me.disableBtn();
                    me.destroy();
				}
			},
			buttonConfs:[],
			content: "" ,
			showIcon: true, 	//是否显示左边的图标，默认为是
			detailMsg: "", 		//详细信息
			data:null  //P2S返回的
		};
		$.extend(this.options, conf);		
		this.initData();
        me.linkBtns = [];//保存新建的linkButton
		var options = this.options;
		PJF.event.publish(PJF.stmEvent.INIT_ERR_MSG_BOX, this.options.content, this.options.detailMsg);
		//创建html
		this.initHtml();
		//设置样式
		this.initCss();
		//绑定事件
		this.bindEvents();
	},
	initData:function(){
		//通过P2S返回信息来展示错误提示框，必须至少有BK_DESC
		if(this.options.data && this.options.data.BK_DESC){
			if(this.options.data.BK_DESC == "系统错误，请稍后再试"){
				this.options.data.BK_DESC = "暂时未能处理您的请求，请联系大堂经理。"
			}
			var bkDesc = this.options.data.BK_DESC || '';
			var code = this.options.data.BK_CODE ? "错误代码：" + (this.options.data.BK_CODE || '') : '';
			var traceId = PJF.i18n.getI18nResource('pjfI18n.errorSerNum') + (this.options.data._COMMON ? this.options.data._COMMON.SYS_EVT_TRACE_ID : '');
			var descRaw = this.options.data.BK_DESC_RAW || '';
			this.options.content = bkDesc;
			var keyWord = '暂时未能处理您的请求，请联系大堂经理。<br>';
			//默认转义的
			if(bkDesc.indexOf(keyWord) == 0){
                this.options.content = PJF.i18n.getI18nResource('pjfI18n.errorKeyword');
				bkDesc = bkDesc.substr(keyWord.length + 9);//略去 后台返回错误信息： 这9个字
			}
			else{
				bkDesc = descRaw;
			}
			bkDesc = bkDesc ? "错误描述：" + bkDesc : bkDesc
			this.options.content += '<br>' + traceId;
			if(PJF.util.deviceType.pad){
				this.options.content = this.options.content.replace('暂时未能处理您的请求，请联系大堂经理','暂时未处理您的请求，具体请点击详细信息');
			}
			if(code || bkDesc)
				this.options.detailMsg = [code, bkDesc].join("<br>");
		}

        if (PJF.otherInfo.isSelfBank) {
            if (this.options.detailMsg)
            	this.options.detailMsg = this.options.detailMsg.replace("大堂经理", "工作人员")
            if (this.options.content)
                this.options.content = this.options.content.replace("大堂经理", "工作人员")
        }
	},
	//初始化html代码
	initHtml:function(){
		var me = this;
		var options = me.options;
		var htmlStr = "";
        var detailMsg;
        try {
            detailMsg = PJF.i18n.getI18nResource('pjfI18n.detailMsg');
        } catch(e) {
            detailMsg = '详细信息'
        }
        console.log('content:'+options.content + ',detailMsg:'+ options.detailMsg); //打印content和detailMsg
		this.com = $('<div class="errorMsgbox_container"></div>');
		htmlStr = 	'<div class="errorMsgbox_mask"></div>'
					+'<div class="errorMsgbox_main">'
						+'<div class="errorMsgbox_content">'
							+'<div class="errorMsgbox_content_icon"></div>'
							+'<div class="errorMsgbox_content_text errorMsgbox_vertical-center">'
							+	'<span class="errorMsgbox_content_text_content">'+options.content
							+(options.detailMsg!=""?
								'<br/><span class="errorMsgbox_content_text_detail">'
								    +'<span class="errorMsgbox_content_text_detail_text">'
				                    + detailMsg + '</span>'
								    +'<span class="errorMsgbox_content_text_detail_icon_down"></span>'
								    +'<br/>'
								    +'<span class="errorMsgbox_content_text_detail_content">'
										+options.detailMsg
								    +'</span>'
								+'</span>':''
							)
							+	'</span>'
							+'</div>'
						+'</div>'
						+'<div class="errorMsgbox_buttons">'
							+ '<span class="errorMsgbox_buttons_spans"></span>'
						+'</div>'
					+'</div>';

	    $('body').append(this.com);
	    this.com.append(htmlStr);

	    if(options.buttonConfs === false) {
	    	return;
	    }
	    //按钮部分--默认
	    if(options.buttonConfs.length == 0){
	    	var domId = me.generateId();
	    	var conf = options.btnConf;
	    	conf.dom = domId;
	    	conf.noDestroy = true;
	    	me.com.find('.errorMsgbox_buttons_spans').append('<span class="errorMsgbox_buttons_btn" id="'+domId+'"></span>');
	    	var btn = new PJF.ui.linkButton(conf);
            me.linkBtns.push(btn);
	    }
	    //按钮部分--自定义
	    for(var i in options.buttonConfs){
	    	(function(i){		    	
					var conf = options.buttonConfs[i];
					var domId = conf.dom || ('errmsgbox' + me.generateId());
		    	conf.dom = domId;
		    	conf.noDestroy = true;
		    	var tempFunc = conf.onClick;
		    	conf.onClick = function(){
                    !(conf.isClose === false) && me.disableBtn();
		            if(tempFunc)
		                //为了不影响messagebox关闭
		                try{
		                    tempFunc();
		                }catch(e){
		                    console.log('errorMessagebox执行回调出错:' + e.message);
		                }
		            if (!(conf.isClose === false)) {
									setTimeout(function(){
										me.destroy();
									}, 0)
								} 
		    	};
		    	me.com.find('.errorMsgbox_buttons_spans').append('<span class="errorMsgbox_buttons_btn" id="'+domId+'"></span>');
		    	var btn = new PJF.ui.linkButton(conf);
                me.linkBtns.push(btn);
	    	})(i)   	    	
	    }
	    
	},
	initCss:function(){
		var me = this;
		var options = this.options;

		//内容的位置
		if(options.detailMsg!=""){
			//初始化隐藏内容
			me.com.find('.errorMsgbox_content_text_detail_content').hide();
		}
		//隐藏图标
		if(options.showIcon === false){
			me.com.find('.errorMsgbox_content_text').css({
				'width': '100%'
			});
			me.com.find('.errorMsgbox_content_icon').css({
				'display': 'none'
			});
			me.com.find('.errorMsgbox_content_text_content').css({
				'text-align': 'center'
			});
		}
	},
	bindEvents:function(){
		var me = this;
		var options = this.options;
		if(options.detailMsg!=""){
			var $detailContent = me.com.find('.errorMsgbox_content_text_detail_content');
			var $detailIcon = me.com.find('.errorMsgbox_content_text_detail_icon_down');
			me.com.find(".errorMsgbox_content_text_detail").unbind("click").bind("click",function(){
				var display = $detailContent.css('display');
				if(display == "none"){
					$detailContent.slideDown("slows",function(){
						$detailIcon.addClass("errorMsgbox_content_text_detail_icon_up");	
					});			
				}else{
					$detailContent.slideUp("slows",function(){
						$detailIcon.removeClass("errorMsgbox_content_text_detail_icon_up");	
					});			
				}
			});			
		}

	}
});
PJF.apply(PJF.ui.errorMessageBox.prototype, {
	//返回类名
	getClassName: function() {
		return "PJF.ui.errorMessageBox";
	},
	//销毁组件
	destroy:function(){
		if(this.hasDestroy) return;
		try{
	        var btns = this.linkBtns;
	        for(var i in btns){
	            btns[i].destroy();
	        }
    	}catch(e){
    		console.log('errorMessageBox destroy btn error :' + e.message);
    	}
		this.com && this.com.fadeOut("slow",function(){
			$(this).remove();
		});
		PJF.ui.componentMgr.remove(this.id);
        this.com = null;
        this.params = null;
        this.id = null;
        this.hasDestroy = true;
	},
    //点击linkButton后，先disable，再执行onClick
    disableBtn:function(){
        var me = this;
        var btns = me.linkBtns;
        for(var i in btns){
            btns[i].disable();
        }

    }

});
/**
 * Framework JS Library 1.0
 * Copyright(c) 2013, China Construction Bank.
 * Author: huangzhezhe
 * Create on: 2016-04-29
 * Last Updated: 
 */
PJF.ui.btnTextfield = PJF.extend(PJF.ui.component, {
	init : function(conf) {
        var me = this;
		this.options={
			textfieldDomId:this.generateId(),
			buttonDomId:this.generateId()
		};
        if(conf.pwdSupport){
            //持有父类引用
            $.extend(me.options,{
                infoMsg:'',
                success:function(data){
                },
                failure:function(data){
                },
                timeout:20,
                isCheckPwd:false,
                validateStr:'',
                encryptType:'P2', //默认转加密，可能有e2e
                firstInputPwd:"",
                secondInputPwd:"",
                pinSound:"PIN_inputPwd.wav",
                pinSound2:"PIN_inputPwd2.wav",
                iTimes : 1
            });
        }

		$.extend(me.options,conf);
		$("#"+me.options.dom).append('<div class="stm_as_container"></div>');
		var $container = me.com.find('.stm_as_container');
		var options = me.options;
		$container.append("<input id='"+options.textfieldDomId+(conf.pwdSupport? "' type='password" : '') +"'>");
		var textfieldConf = {
			dom : options.textfieldDomId
		};
		$.extend(textfieldConf,conf.textfieldConf);
        //如果是读取密码
        if(me.options.pwdSupport){
            $.extend(textfieldConf,{
                readOnly: true,
                width: me.options.tfWidth || 240,
                height: me.options.tfHeight || 80,
                defaultValue: me.options.defaultValue
            });
        }
		options.textfield = new PJF.ui.textfield(textfieldConf);
		$container.append("<span id='"+options.buttonDomId+"'></span>");
		var buttonConf = {
			dom : options.buttonDomId,
			style:"textfield"
		};
		$.extend(buttonConf,conf.buttonConf);
        //如果是读取密码
        if(me.options.pwdSupport){
            $.extend(buttonConf,{
                appendStyle: 'confirm',
                style: "main",
                btnBgColor: me.options.btnBgColor || 'rgb(65,159,245)',
                textColor: me.options.btnTextColor || 'rgb(255,255,255)',
                name: me.options.btnName || '读取密码',
                width: me.options.btnWidth || 100,
                height: me.options.btnHeight || 80,
                onClick: function(){
                    if(me.options.pwdSupport){
                        PJF.event.addSubscriber(PJF.stm.client.events.PIN_LENGTH,function(data){
                            var time = data.split('|')[0];
                            var length = data.split('|')[1];
                            me.com.find('.pjf_stmtextfield').val(PJF.util.generateUUid().substr(0, length || -1));
                        },window,true);
                        me.triggerReadCard();
                        me.options.button.disable();
                    }
                }
            });
        }
		options.button = new PJF.ui.linkButton(buttonConf);
	},
    triggerReadCard: function(){
        var me = this;
        me.com.find('.pjf_stmtextfield').val('');
        me.options.textfield && me.options.textfield.focus();
        setTimeout(function(){
            try {
                PJF.stm.Pin.readPin(me.options, function() {
                    me.firstPinCallBack.apply(me, arguments);
                });
            } catch (e) {
                alert(e.message);
            }
        },2);
    },
    firstPinCallBack:function(result){
        var me = this;
        if(result.status == 0){
            if(me.options.enableFlag) me.options.button.enable();
            me.options.textfield.setValue('');
            me.options.failure(result);
        }
        else{
            //将密码保存到组件
            me.options.firstInputPwd = result.info.pchSecPassword;
            me.options.pwdValue = result.info.pchSecPassword;
            if(me.options.isCheckPwd) {
                me.options.textfield && me.options.textfield.focus();
                me.options.iTimes = 2;
                //要2次输入密码
                PJF.stm.Pin.readPin(me.options, function() {
                    me.secondPinCallBack.apply(me, arguments);
                });
            }else{
                if(me.options.enableFlag) me.options.button.enable();
                me.options.success(result.info.pchSecPassword);
            }
        }
    },
    secondPinCallBack:function(result){
        var me = this;
        me.options.button.disable();
        if(result.status == 0){
            me.options.failure(result);
        }
        else{
            me.com.find('.pjf_stmtextfield').val('');
            //将密码保存到组件
            me.options.secondInputPwd = result.info.pchSecPassword;
            me.options.pwdValue = result.info.pchSecPassword;
            //判断两次密码是否一致，一致则返回密码，不一致则提示信息
            if(me.options.firstInputPwd == me.options.secondInputPwd){
                //校验简单密码
                if(me.isStrPwd(me.options.firstInputPwd, me.options.validateStr)){
                    me.options.success(result.info.pchSecPassword);
                }
                else{
                    result.notStrPwd = true;
                    result.status = '0';
                    result.errorCode = 'PJF_PWD_ERR02';
                    result.errorMsg = '密码过于简单';
                    me.options.failure(result);
                }
            }else{
                result.wrongPwd = true;
                result.status = '0';
                result.errorCode = 'PJF_PWD_ERR01';
                result.errorMsg = '两次密码输入不一致';
                me.options.failure(result);
            }
        }
    },
    //校验简单密码
    isStrPwd:function(str, param){
        var data = PJF.communication.Decrypt(str, PJF.otherInfo.devId, PJF.otherInfo.token, PJF.otherInfo.secNode);
        if(!data.success)
            return true;
        str = data.result;
        //校验器
        var validateDictionary = [];
        //需满足6位数字
        var sixNumLetter = function(str){
            return str.match(/^[0-9]{6}$/g);
        }
        validateDictionary.push(sixNumLetter);
        //不能6个相同的数字
        var sameCharacter = function(str){
            return !str.match(/^([0-9]{1})\1{5}$/g);
        }
        validateDictionary.push(sameCharacter);

        //等差数列
        var isEqualDifference = function(str){
            var desc = true;
            //降序
            for(var i = 0; i < str.length - 1; i++){
                if(str.charCodeAt(i) - str.charCodeAt(i + 1) != 1){
                    desc = false;
                    break;
                }
            }
            var asc = true
            //升序
            for(var i = 0; i < str.length - 1; i++){
                if(str.charCodeAt(i + 1) - str.charCodeAt(i) != 1){
                    asc = false;
                    break;
                }
            }
            return !desc && !asc;
        }
        validateDictionary.push(isEqualDifference);
        //不出现双重复、三重复(如112233,777888)
        var segment = function(str){
            if(str.match(/^([0-9]{1})\1{1}([0-9]{1})\2{1}([0-9]{1})\3{1}$/g))
                return false;
            else if(str.match(/^([0-9]{1})\1{2}([0-9]{1})\2{2}$/g))
                return false;
            return true;
        }
        validateDictionary.push(segment);
        //不来源于证件账号,且不能采用身份证号码中生日为单数月单数日的6位数字
        var isFromIdCard = function (str, param){
            // 18位数身份证正则表达式
            var idcard = /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$/;
            //只有当传入了证件号码才做验证
            //18位身份证号码中生日为单数月单数日的6位数字
            if(param.match(idcard) && param[10] == '0' && param[12] == '0' && str.substring(0,4) == param.substring(6,10) && str[4] == param[11] && str[5] == param[13]){
                return false;
            }
            if(param.indexOf(str) != -1)
                return false;
            return true;
        }
        validateDictionary.push(isFromIdCard);
        //判断所有的校验
        for(var index = 0; index < validateDictionary.length; index++) {
            var result = validateDictionary[index].call(this, str, param);
            if(!result)
                return false;
        }
        return true;
    },
    clearIntervalPwdLen:function(time){
        window.clearInterval(this['intervalId']);
    },
	getTextfieldObject: function() {
		return this.options.textfield;
	},
	getButtonObject: function() {
		return this.options.button;
	},
	readOnly:function(flag){
		this.options.textfield.readOnly(flag);
		this.options.button.readOnly(flag);
	},
    setValue:function(val){
        var me = this;
        me.options.pwdValue = val;
        me.options.textfield.setValue(val.substr(0,6));
    },
    getValue:function(){
        var me = this;
        return me.options.pwdValue;
    },
	//销毁
	destroy:function(){
		this.options.textfield.destroy();
		this.options.button.destroy();
	    this.com.remove();
		PJF.ui.componentMgr.remove(this.id);
		this.options=null;
		this.com = null;
		this.params = null;
		this.id = null;
	}
});
/**
 * P2 Framework JS Library 1.0
 * Copyright(c) 2013, China Construction Bank.
 * Author: Huang zhe zhe
 * Create on: 2014-7-16
 * Last Updated: 
 * 说明:电话号码组件
 */
 PJF.ui.phoneNumber = PJF.extend(PJF.ui.component,{

 	init : function(conf){
 		this.initProperties();
 		var me = this;
 		conf.type = conf.type || 'interMobile';
 		var properties = this.properties[conf.type];
 		conf.inputIds = conf.inputIds || properties.inputIds;
 		properties.inputIds = conf.inputIds;
 		conf.width = conf.width || properties.width;
 		properties.width = conf.width;
 		conf.tips = conf.tips || properties.tips;
 		properties.tips = conf.tips;
 		properties.layout = conf.layout || 'horizontal';
 		this.settings = properties;
		$("#"+conf.dom).append('<div class="stm_phoneNumber_container"></div>');
		var $container = this.com.find('.stm_phoneNumber_container');
 		var inputDom = '';
 		for(var i = 0; i < conf.inputIds.length; i++){
 			inputDom += '<input id ="' + conf.inputIds[i] + '" type = "text"></input>';
			if (conf.type == "interTele" && conf.layout == "vertical" && i=='1') {
				inputDom += "<div class='stm_blank_content'></div>";
			} else {
				if(i < conf.inputIds.length - 1) inputDom += "<span class='pjf_dateSpan_separate'></span>";
			}
 		}
 		$container.append(inputDom);
 		for(var i = 0; i < conf.inputIds.length; i++){
 			var textConf = {
 				dom : conf.inputIds[i],
 				width : conf.width[i],
 				placeHolder: properties.tips[i]
 			};

 			conf.textfieldConf && $.extend(textConf, conf.textfieldConf[i]);
 			this.textFieldObjs[i] = new PJF.ui.textfield(textConf);
 		}
 		if (conf.defaultValue) {
 			this.setValue(conf.defaultValue);
 		}
 	},

 	initProperties : function(){
 		//输入框属性集合
 		this.properties = {
 			interTele : {
 				inputIds : ['TelCtcMod_Itnl_DstcNo','TelCtcMod_Dmst_DstcNo','TelCtcMod_No','TelCtcMod_Exn_No'],
 				tips : ['国际区号','国内区号','电话号码','分机号'],
 				width : [150,150,250,150]
 			},
 			interMobile : {
 				inputIds : ['TelCtcMod_Itnl_DstcNo','TelCtcMod_No'],
 				tips : ['国际区号','移动电话号码'],
 				width : [150,250]
 			}
 		};
 		//输入框对象集合
 		this.textFieldObjs = [];
 		//所生成组件属性
 		this.settings = {};
 	},
	getPhoneNumberObject: function() {
		return this.textFieldObjs;
	},
 	/***
 	 * 返回输入的值,id-value形式储存在一个object中
 	 * @return 输入的值
 	 * @type Object
	 */
 	getValue : function(){
 		var result = {};
 		for(var i = 0; i < this.textFieldObjs.length; i++){
 			var val = this.textFieldObjs[i].getValue();

 			result[this.settings.inputIds[i]] = val;
 		}
 		return result;
 	},
 	/***
 	 * 设置值
 	 * @param obj 设置的值,id-value形式储存在一个object中
	 */
 	setValue : function(obj){
 		for(var i in obj){
 			var index = PJF.util.array.indexOf(this.settings.inputIds,i);
 			if(index >= 0){
 				this.textFieldObjs[index].com.val(obj[i]);
 				//触发onblur事件
 				this.textFieldObjs[index].com.triggerHandler('blur');
 			}
 		}
 	},
	readOnly:function(flag){
 		for(var i = 0; i < this.textFieldObjs.length; i++){
 			this.textFieldObjs[i].readOnly(flag);
 		}
	},
	disabled: function(flag){
 		for(var i = 0; i < this.textFieldObjs.length; i++){
 			this.textFieldObjs[i].disabled(flag);
 		}
	}
 });

PJF.apply(PJF.ui.phoneNumber.prototype,{
	
	getClassName : function(){
		return "PJF.ui.phoneNumber";
	},

	validateParam : function(conf){
		if(!conf.dom){
			return false;
		}
		return true;
	},
	destroy:function(){
 		for(var i = 0; i < this.textFieldObjs.length; i++){
 			this.textFieldObjs[i].destroy();
 		}
		PJF.ui.componentMgr.remove(this.id);
	    this.com.remove();
 		this.textFieldObjs = null;
 		this.settings = null;
		this.com = null;
		this.id = null;
	}
	
});
/**
 * Framework JS Library 1.0
 * Copyright(c) 2013, China Construction Bank.
 * Author: huangzhezhe
 * Create on: 2016-05-04
 * Last Updated: 
 */
PJF.ui.address = PJF.extend(PJF.ui.component, {
	init: function (conf) {
		this.options = {
			layout: 'horizontal',
			stateDomId: this.generateId(),
			areaDomId: this.generateId(),
			detailDomId: this.generateId()
		};
		
		$.extend(this.options,conf);
		var me = this;

		//初始化html
	 	me.initHtml();
	},
	//初始化html
	initHtml: function () {
		var me = this;
		var options = me.options;

		$("#"+options.dom).append('<div class="stm_address_container"></div>');
		var $container = this.com.find('.stm_address_container');
		$container.append("<span id='" + options.stateDomId + "'></span><span class='stm_as_prelabel'></span>");	
		var stateConf = {
			dom: options.stateDomId,
			data: options.data,
			nullOption: options.nullOption,
			defaultValue: options.defaultValue,
			textAlign: "center",
			width: (options.width && options.width[0]) || 160,
			onChange: function() {
				me.stateOnChange();
			}
		};
		options.stateOtherConf && $.extend(stateConf, options.stateOtherConf);
		options.stateSelect = new PJF.ui.select(stateConf);
		if (options.layout == "vertical") {
			$container.append("<div class='stm_blank_content'></div>");
		}
		$container.append("<span id='" + options.areaDomId + "'></span>");
		var areaConf = {
			dom: options.areaDomId,
			width: (options.width && options.width[1]) || 160,
			cityName: options.cityName,
			countyName: options.countyName,  
			nullOption: options.nullOption,
			nullLabel: true
		};
		options.areaSelect = new PJF.ui.areaSelector(areaConf);
		if (options.layout == "vertical") {
			$container.append("<div class='stm_blank_content'></div>");
		}
		$container.append("<input id='" +  options.detailDomId + "'>");
		var detailConf = {
			dom: options.detailDomId,
			width: (options.width && options.width[2]) || 320
		};
		options.textfieldConf && $.extend(detailConf, options.textfieldConf);
		options.detail = new PJF.ui.textfield(detailConf);
		me.stateOnChange();
	},
	stateOnChange: function() {
		var me = this;
		var options = me.options;
		var stateValue = options.stateSelect.getValue();

		if (stateValue != "") {
			if (stateValue == options.chinaValue) {
				options.layout == "vertical" && $(me.com.find('.stm_blank_content')[1]).css("display","block");
				options.areaSelect.com.css("display","inline-block");
			} else {
				options.areaSelect.com.css("display","none");
				options.layout == "vertical" && $(me.com.find('.stm_blank_content')[1]).css("display","none");
			}
		}
	},
	getStateObject: function () {
		return this.options.stateSelect;
	},
	getAreaObject: function () {
		return this.options.areaSelect;
	},
	getDetailObject: function () {
		return this.options.detail;
	},
	setValue: function (data) {
		var me = this;
		var options = me.options;
		var stateValue = data['state'];
		options.stateSelect.setValue(stateValue);
		me.stateOnChange();
		if (stateValue == options.chinaValue) {
			options.areaSelect.setProvinceValue(data['province']);
			options.areaSelect.setCityValue(data['city']);
			options.areaSelect.setCountyValue(data['country']);
		}
		options.detail.setValue(data['address']);
	},
	getValue: function () {
		var me = this;
		var options = me.options;
		var stateValue = options.stateSelect.getValue();
 		var result = {};
 		result['state'] = stateValue;
 		if (stateValue == options.chinaValue) {
 			result['province'] = options.areaSelect.getProvinceValue();
 			result['city'] = options.areaSelect.getCityValue();
 			result['country'] = options.areaSelect.getCountyValue();
 		}
 		result['address'] = options.detail.getValue();

 		return result;		
	},
	getText: function () {
		var me = this;
		var options = me.options;
		var stateValue = options.stateSelect.getValue();
 		var result = [];
 		result.push(options.stateSelect.getText());
 		if (stateValue == options.chinaValue) {
 			result.push(options.areaSelect.getProvinceText());
 			result.push(options.areaSelect.getCityText());
 			result.push(options.areaSelect.getCountyText());
 		}
 		result.push(options.detail.getValue());

 		return result;
	},
	readOnly:function(flag){
		this.options.stateSelect.readOnly(flag);
		this.options.areaSelect.readOnly(flag);
		this.options.detail.readOnly(flag);
	}
});
PJF.apply(PJF.ui.address.prototype,{
	
	getClassName : function(){
		return "PJF.ui.address";
	},

	validateParam : function(conf){
		if(!conf.dom || !conf.chinaValue){
			return false;
		}
		return true;
	},
	destroy:function(){
		this.options.stateSelect.destroy();
		this.options.areaSelect.destroy();
		this.options.detail.destroy();
		PJF.ui.componentMgr.remove(this.id);
	    this.com.remove();
 		this.options = null;
		this.com = null;
		this.id = null;
	}
});
/**
 * Framework JS Library 1.0
 * Copyright(c) 2013, China Construction Bank.
 * Author: bianhangying
 * Create on: 2016-02-26
 * Last Updated: 
 */
PJF.ui.calendar = PJF.extend(PJF.ui.component, {
	init : function(conf) {
		this.options={
			width: '',
			optionAlign: 'left',
			yearTextDomId:this.generateId(),
			defaultDate:new Date()    //默认为当前时间
		};
		$.extend(this.options,conf);
		//储存旧值
	 	this.oldYearValue = this.options.defaultDate.getFullYear();
		this.oldMonthValue = this.options.defaultDate.getMonth()+1;
		this.oldDayValue = this.options.defaultDate.getDate();
		var me=this;
		//初始化html
	 	me.initHtml();
	 	//绘制日历展示板
	 	me.drawCalendar(me.options.defaultDate);
	 	//绑定事件
	 	me.bindEvents();
	 	//显示年月日数据
	 	me.drawYearText();
	 	me.setMonthValue();
	 	me.setInputValue();
	},
	//初始化html
	initHtml:function(){
		var me = this;

		var htmlStr = '<div class="calendar_main">'
						+ '<div class="calendar_top">'		/**顶部*/
							+ '<input class="calendar_input" type="text" readonly="readonly" />'		/**输入框*/	
							+ '<span class="calendar_top_icon"></span>'		/**图标*/	
						+ '</div>'

						+ '<div class="calendar_body" style="display:none;'+(me.options.optionAlign=='right'?'right:0':'')+'">'		/**日历展示*/
							+ '<div class="calendar_body_bar">'		/**日历展示年、月选择工具栏*/
								+ '<span class="yearpick_left calendar_pickicon_left"></span>'
								+'<span class="year_text"></span>'
								+ '<span class="yearpick_right calendar_pickicon_right"></span>'
								+ '<span class="monthpick_left calendar_pickicon_left"></span>'
								+ '<span class="month_text calendar_pickicon_text"></span>'
								+ '<span class="monthpick_right calendar_pickicon_right"></span>'
							+ '</div>'

							+ '<div class="calendar_body_content">'		/**日历展示内容*/
							+ '</div>'
						+ '</div>'
					+ '</div>';

		this.com.append(htmlStr);
		if (me.options.width) {
			var $container =  me.com.find('.calendar_top');
			$container.css({
				'width': me.options.width / PJF.constants.DEFAULT_FONTSIZE + 'rem'
			});
			var $input = me.com.find('.calendar_input');
			$input.css({
				'width': (me.options.width / PJF.constants.DEFAULT_FONTSIZE - 0.5) + 'rem'
			});
		}
	},
	//根据年月日绘制日历面板
	drawCalendar:function(date){
		var me = this;

		//清除已存在的
		me.com.find(".calendar_body_content").children().remove();
		//绘制星期栏
		var weekbarStr = '<span class="calendar_specialweek">日</span>'
						+ '<span>一</span>'
						+ '<span>二</span>'
						+ '<span>三</span>'
						+ '<span>四</span>'
						+ '<span>五</span>'
						+ '<span class="calendar_specialweek">六</span>';
		me.com.find(".calendar_body_content").append(weekbarStr);

		//获取年月日
		var yearValue = date.getFullYear();
		var monthValue = date.getMonth()+1;
		var dayValue = date.getDate();
		//计算该月有多少天
		var curDate = date;
		curDate.setMonth(monthValue);
		curDate.setDate(0);
		var dayCnt = new Date(curDate).getDate();

		//拼装日历面板html
		var htmlStr = "";
		//计算该年月第一天是星期几
		curDate = date;
		var weekCnt = new Date(curDate.setDate(1)).getDay();	
		//该年月第一天前空出的部分
		for(var i=0; i<weekCnt; i++){
			htmlStr += '<span></span>';
		}
		//该年月应该显示的部分
		for(var j=1; j<=dayCnt; j++){
			htmlStr += ('<span class="day_text'+((weekCnt+j)%7==0 || (weekCnt+j)%7==1 ? " calendar_specialweek" : "")+(j==dayValue ? " calendar_day_picked" : "")+'">'+(j<10 ? "0"+j : j)+'</span>');
		}

		me.com.find(".calendar_body_content").append(htmlStr);
		//储存旧值
		me.oldYearValue = me.yearValue || me.oldYearValue
		me.oldMonthValue = me.monthValue || me.oldMonthValue
		me.oldDayValue = me.dayValue || me.oldDayValue
		//存储年月日的值
		me.yearValue = yearValue;
		me.monthValue = monthValue;
		me.dayValue = dayValue;
		//绑定选中事件
		me.bindDateEvent();
		me.com.find('.calendar_body').focus();
	},
	//绑定基础事件
	bindEvents:function(){
		var me = this;

		var $calendar_body = this.$calendar_body = me.com.find('.calendar_body');
		//给图标绑定事件--显示/隐藏日历展示板
		me.com.find('.calendar_top_icon').unbind("click").bind("click",function(){
			if($calendar_body.css('display') == "none"){
				$calendar_body.slideDown();
				$calendar_body.focus(); //focus下面的div
			}else{
				me.hideCalendarDrop();
			}
		});
		//让他可以blur
		$calendar_body.attr('tabIndex','-1').on('blur',function(){
			//IE下，这种方式不具有传导性，也就是说....子元素的点击，也会触发父元素的blur，所以做了如下处理
			if($calendar_body.find($(document.activeElement)).length > 0){
				return;
			}
			me.validated();
			me.hideCalendarDrop();
		})	
	},
	drawYearText: function () {
		var me = this;

		me.com.find('.year_text').children().remove();
		me.com.find('.year_text').append('<input class="calendar_pickicon_text" id="'+me.options.yearTextDomId+'">');

		var textfieldConf = {
			dom : me.options.yearTextDomId,
			hmode: 4,
			width: 80
		};
		var $year = me.options.yearTextfield = new PJF.ui.textfield(textfieldConf);
		me.setYearValue();
		$year.com.bind("blur",function(){
			var yearText = $year.getValue();
			var data = new Number(yearText);
			if (!($.isNumeric(data) && data >= 1900 && yearText.length == 4)) {
				return;
			}
			var inCalendar = false;
			if(me.$calendar_body.find($(document.activeElement)).length > 0) {
				inCalendar = true;
			}
			//获取当前年份
			var date = new Date(yearText,me.monthValue-1,me.dayValue);
			//重绘日历展示面板
			me.drawCalendar(date);
			//给年份、input框设置
			me.setYearValue();
			me.setInputValue();
			if (!inCalendar) {
				me.validated();
				me.hideCalendarDrop();
			}
		});
	},
	//收起下拉框
	hideCalendarDrop:function(){
		this.$calendar_body.slideUp();
		if(this.options.onChange && (this.yearValue != this.oldYearValue || this.monthValue != this.oldMonthValue || this.dayValue != this.oldDayValue)){
			this.options.onChange();
		}
	},
	//给日历面板的日期绑定点击事件
	bindDateEvent:function(){
		var me = this;

		//给天绑定点击事件
		me.com.find('.day_text').unbind("click").bind("click",function(){
			//选中的日期先去掉选中class
			me.com.find(".calendar_day_picked").removeClass("calendar_day_picked");
			//当前选中项增加选中class
			$(this).addClass("calendar_day_picked");
			me.oldDayValue = me.dayValue
			//给input框赋值
			me.dayValue = Number($(this).text());
			me.setInputValue();
			me.$calendar_body.focus();
			
		});
		//给年份左边的按钮绑定点击事件
		me.com.find('.yearpick_left').unbind("click").bind("click",function(){
			//获取当前年份的前一年
			var date = new Date(me.yearValue-1,me.monthValue-1,me.dayValue);
			//重绘日历展示面板
			me.drawCalendar(date);
			//给年份、input框设置
			me.setYearValue();
			me.setInputValue();
		});
		//给年份右边的按钮绑定点击事件
		me.com.find('.yearpick_right').unbind("click").bind("click",function(){
			//获取当前年份的前一年
			var date = new Date(me.yearValue+1,me.monthValue-1,me.dayValue);
			//重绘日历展示面板
			me.drawCalendar(date);
			//给年份、input框设置
			me.setYearValue();
			me.setInputValue();
		});
		//给月份左边的按钮绑定点击事件
		me.com.find('.monthpick_left').unbind("click").bind("click",function(){
			//年份不能小于1
			if(me.monthValue-1<1) return;
			//获取当前年份的前一年
			var date = new Date(me.yearValue,me.monthValue-2,me.dayValue);
			//重绘日历展示面板
			me.drawCalendar(date);
			//给年份、input框设置
			me.setMonthValue();
			me.setInputValue();
		});
		//给月份右边的按钮绑定点击事件
		me.com.find('.monthpick_right').unbind("click").bind("click",function(){
			//年份不能大于12
			if(me.monthValue+1>12) return;
			//获取当前年份的前一年
			var date = new Date(me.yearValue,me.monthValue,me.dayValue);
			//重绘日历展示面板
			me.drawCalendar(date);
			//给年份、input框设置
			me.setMonthValue();
			me.setInputValue();
		});
	},
	readOnly:function(flag){
		var me = this;
		var $container = me.com.find('.calendar_top')
		if(flag){		
			me.overlayer = $('<div class="pjf_stmtextfield_overlayer"></div>');
			me.overlayer.bind('click',function(e){
				me.overlayer.focus();
				return false;
			});

			$container.append(me.overlayer);
		}else{
			$container.find(".pjf_stmtextfield_overlayer").remove();
		}
	},
	validated:function(){
        //如果没有验证条件则直接返回
        if (this.options.validType == undefined) {
            return;
        }
        var me = this;
        var options = me.options;
        var value = me.getValue();
        var $container = me.com.find('.calendar_main');
        var $input =  me.com.find('.calendar_top');
        var $tip = $container.find('.pjf_stmtextfield_msg');
        var msgArray = [];
        if (options.validType) {
            if (!(options.validType instanceof Array)) {
                options.validType = [options.validType];
                options.invalidMessage = [options.invalidMessage];
            }
            if (options.validType instanceof Array) {
                for (var i in options.validType) {
                    //错误信息
                    var msg = options.invalidMessage[i];
                    var typeParam = /([a-zA-Z0-9_]+)(.*)/.exec(options.validType[i]);
                    //根据校验类型获取校验方法
                    var rule = PJF.validator.rules()[typeParam[1]];
                    //调用校验方法---根据获取值、参数
                    var status = rule(value, eval(typeParam[2]));
                    //校验不通过
                    if(!status){
                        msgArray.push(msg);
                    }
                }
            }
        }
        var msgStr = msgArray.join('、');
        $tip.remove();
        if (msgStr!="") {
            $('<span class="pjf_stmtextfield_msg">'+msgArray.join('、')+'</span>').appendTo($container);
            $input.addClass("calendar_error");
            $container.find('.pjf_stmtextfield_msg').css({'top': $input.height()});
        } else {
            $input.removeClass("calendar_error");
        }
        return msgStr;
	},	
	//给年份赋值
	setYearValue:function(){
		var options = this.options;
		options.yearTextfield.setValue(this.yearValue);
	},
	//给月份赋值
	setMonthValue:function(){
		this.com.find(".month_text").text((this.monthValue<10 ? "0"+this.monthValue : this.monthValue));
	},
	//给input框赋值
	setInputValue:function(){
		var value = this.yearValue + "-" + (this.monthValue<10 ? "0"+this.monthValue : this.monthValue) + "-" + (this.dayValue<10 ? "0"+this.dayValue : this.dayValue);
		this.com.find(".calendar_input").val(value);
	},
	getValue:function(){
		var date = new Date(this.yearValue,this.monthValue-1,this.dayValue);
		return date;
	},
	setValue:function(date){
		var me = this;
	 	//绘制日历展示板
	 	me.drawCalendar(date);
	 	//显示年月日数据
	 	me.setYearValue();
	 	me.setMonthValue();
	 	me.setInputValue();
	 	me.validated();
	 }
});
PJF.apply(PJF.ui.calendar.prototype,{ 
	//获取组件名称
	getClassName:function(){
		return "PJF.ui.calendar";
	},
    destroy:function(){
    	this.options.yearTextfield.destroy();
        PJF.ui.componentMgr.remove(this.id);
        this.com.remove();
        this.options = null;
        this.com = null;
        this.id = null;
    }
});


/**
 * Framework JS Library 1.0
 * Copyright(c) 2013, China Construction Bank.
 * Author: huangzhezhe
 * Create on: 2016-06-12
 * Last Updated: 
 */
PJF.ui.tree = PJF.extend(PJF.ui.component, {
	init: function(conf) {
		this.options={
			dom: null,
			url: '',
			cpsReq: null,
			ajaxParam: null,
			params: null,
			data: null,
			enableExpandAsync: false,
			multiple: false,
			onlyChild: false,
			onBeforeExpand: null,
			onCheck: null
		};
		$.extend(this.options,conf);

		var me = this;
		var options = me.options;
		$("#"+options.dom).append('<div class="stm_tree_container"></div>');
	 	//初始化数据
	 	me.initTree();
		me.bindEvents();
	},
	sendRequest: function (fnSuccess) {
		var me = this;
		if (me.options.url) {
			if (me.options.cpsReq) {
				PJF.roleInfo.noRepeatRoleAuthInfoList = [];
				PJF.communication.cpsJsonReq({
					url: me.options.url,
					async: false,
					fwServiceId: me.options.cpsReq.fwServiceId,
					fwTranId: me.options.cpsReq.fwTranId,
					jsonData: me.options.cpsReq.jsonData,
					sqlId: me.options.cpsReq.sqlId,
					success: function(data1) {
						var data = data1;
						if (typeof(me.options.cpsReq.convertData) == "function") {
							data = me.options.cpsReq.convertData(data1);
						}
						if(fnSuccess instanceof Function){
							fnSuccess(data);
						}
					},
					failure: function(data3) {
						if(typeof(me.options.fnFailure) == "function"){
							me.options.fnFailure(data3);
						}
					}
				});
			} else if (me.options.ajaxReq) {
				PJF.communication.ajax({
					url: me.options.url,
					type: 'get',
					dataType: 'json',
					data: me.options.ajaxReq.data,
					async: false,
					success: function(data1) {
						var data = data1;
						if (typeof(me.options.ajaxReq.convertData) == "function") {
							data = me.options.ajaxReq.convertData(data1);
						}
						if(fnSuccess instanceof Function){
							fnSuccess(data);
						}
					},
					failure: function(data3) {
						if(typeof(me.options.fnFailure) == "function"){
							me.options.fnFailure(data3);
						}
					}
				});
			}
		}
	},
	//初始化数据
	initTree: function() {
		var me = this;

		if(me.options.url){
			var fnSuccess = function(data){
				me.data = data;
			};
			me.sendRequest(fnSuccess);
		} else {
			me.data = me.options.data;
		}
		var $container = me.com.find('.stm_tree_container');
		$container.append(me.createTree(me.data, true, ''));
	},
	initSubTree: function (parent, pIndex, pData) {
		var me = this;
		if (!me.options.url) {return};
		var otherParam = me.options.onBeforeExpand(pData);

		if (me.options.cpsReq) {
			$.extend(me.options.cpsReq.jsonData, otherParam);
		} else if (me.options.ajaxReq) {
			$.extend(me.options.ajaxReq.data, otherParam);
		}
		
		var sData = me.data;
		var indexArr = pIndex.split('_');
		var fnSuccess = function(data){
			var item = '';
			for (var i = 0; i < indexArr.length; i++) {
				i == 0 ? (item = sData[indexArr[0]]) : (item = item.children[indexArr[i]]);
				if (!item.children) {
					item.children = data;
				}
			}
			parent.append(me.createTree(data, true, pIndex + '_'));
		};
		me.sendRequest(fnSuccess);
	},
	getDataByIndex: function (index) {
		if (index!=0 && !index) { return; }
		var me = this;
		var data = me.data;
		var indexArr = index.split('_');
		var item = '';

		for (var i = 0; i < indexArr.length; i++) {
			i == 0 ? (item = data[indexArr[0]]) : (item = item.children[indexArr[i]]);
		}
		return item;
	},
	createTree: function(data, open, parentIndex) {
		var me = this;

		if (!data) {
			return '';
		}
		var html = '<ul style="display:' + (open ? 'block': 'none') + '">';
		for (var i = 0; i < data.length; i++){
			var item = data[i];
			var index = parentIndex + i;
			html += '<li id="treeItem_' + item.id + '" data-index=' + index + ' data-value=' + item.value + '>';
			html += '<span class="icon fold stm_treeItem_' + (item.open ? 'open' : 'close') + '"></span>';
			if (!me.options.onlyChild || (!item.isParent && !item.children)) {
				html += '<span class="check ' + (item.checked ? 'curSelectedNode' : '') + '">';
				html += '<span class="icon stm_treeItem_' + (me.options.multiple ? 'checkbox' : 'radio') + '"></span>';
				html += '<a target="_blank">' + item.name +'</a>';
				html += '</span>';
			} else {
				html += '<a target="_blank">' + item.name +'</a>';
			}

			html += me.createTree(item.children, item.open, index + '_');
			html += '</li>';
		}
		html += '</ul>';
		return html;

	},
	bindEvents: function () {
		var me = this;
		var data = me.data;
		var $container = this.com.find('.stm_tree_container');
		$container.on("click", "ul li span.fold", function(){
			var target = $(this);
			var index = $(this.parentNode).attr('data-index');
			var item = me.getDataByIndex(index);
			if (target.hasClass('stm_treeItem_open')) {
				item.open = false;
				target.removeClass('stm_treeItem_open').addClass('stm_treeItem_close');
				$(this.parentNode).children("ul").slideUp("fast");
			} else if (target.hasClass('stm_treeItem_close')) {
				item.open = true;
				if (me.options.url && me.options.enableExpandAsync) {
					me.initSubTree($(this.parentNode), index, item);
				}
				target.removeClass('stm_treeItem_close').addClass('stm_treeItem_open');
				$(this.parentNode).children("ul").slideDown("fast");
			}
		});
		$container.on("click", ".check", function(){
			var target = $(this);
			var index = $(this.parentNode).attr('data-index');
			var item = me.getDataByIndex(index);
			var curSelectedNode = $container.find('.curSelectedNode');

			if (target.hasClass('curSelectedNode')) {
				item.checked = false;
				target.removeClass('curSelectedNode');
			} else {
				if (!me.options.multiple && curSelectedNode && curSelectedNode.length) {
					me.getDataByIndex(curSelectedNode.parent('li').attr('data-index')).checked = false;
					curSelectedNode.removeClass('curSelectedNode');
				}
				item.checked = true;
				target.addClass('curSelectedNode');
			}
			if (me.options.onCheck instanceof Function) {
				me.options.onCheck(item);
			}
		});
	},
	setCheckedNode: function (value) {
		if(!$.isArray(value)){
			value = [value];
		}
		var me = this;
		var $container = this.com.find('.stm_tree_container');
		var curSelectedNode = $container.find('.curSelectedNode');
		$container.find('.curSelectedNode').each(function(i) {
			var target = $(this);
			me.getDataByIndex(target.parent('li').attr('data-index')).checked = false;
			target.removeClass('curSelectedNode');
		});
		var items = [];
		for(var i in value){
			var node = '';
			value[i] && (node = $container.find('ul li[data-value='+value[i]+']'));
			if (node && node.length) {
				var item = me.getDataByIndex(node.attr('data-index'));
				item.checked = true;
				items.push(item);
				$(node.find('.check')[0]).addClass('curSelectedNode');
			}
			if (!me.options.multiple) {
				break;
			}
		}
		if (me.options.onCheck instanceof Function) {
			me.options.onCheck(items);
		}
	},
	getCheckedNode: function () {
		var me = this;
		var $container = this.com.find('.stm_tree_container');
		var items = [];
		var indexs = [];
		var node = {};

		$container.find('.curSelectedNode').each(function(i) {
			var index = $(this).parent('li').attr('data-index');
			indexs.push(index);
			items.push(me.getDataByIndex(index));
		});
		node['item'] = items;
		node['index'] = indexs;
		return node;
	},
	//销毁
	destroy: function() {
		PJF.ui.componentMgr.remove(this.id);
		this.com.remove();
		this.com = null;
		this.id = null;
	}
});

/**
 * Framework JS Library 1.0
 * Copyright(c) 2013, China Construction Bank.
 * Author: huangzhezhe
 * Create on: 2016-06-14
 * Last Updated: 
 */
PJF.ui.treeSelect = PJF.extend(PJF.ui.component, {
	init: function(conf) {
		this.options={
			inputId: this.generateId(),
			containerId: this.generateId(),
			url: '',
			cpsReq: null,
			ajaxReq: null,
			data: null,
			multiple: false,
			tree: null,
			treeContainer: null,
			enableExpandAsync: false,
			currentSelectedItems: [],
			onlyChild: false,
			width: 400,
			maxHeight: 350,
			onChange: null,
			onBeforeExpand: null
		};
		$.extend(this.options,conf);

		var me = this;

		//初始化html
		me.initHtml();
		//绑定事件
		me.bindEvents();
	},
	//初始化html
	initHtml: function() {
		var me = this;
		var options = me.options;

		$("#"+options.dom).append('<div class="stm_treeSelect_container"></div>');
		var $container = me.com.find('.stm_treeSelect_container');
		$container.append('<input id="'+options.inputId+'" readonly="readonly" class="stm_select_input stm_select_input_bg" style="padding-right:0.25rem" />');
		$container.css({
				'width': options.width / PJF.constants.DEFAULT_FONTSIZE + 'rem'
		});	
		//设置组件外框宽度
		if (!options.treeContainer) {
			options.treeContainer = $("<div id='"+options.containerId+"' class='stm_treeSelect_treeContainer'></div>");
			options.treeContainer.appendTo($container);
			//选项展示div的宽度
			$('#'+options.containerId).css({
				'top':  $("#"+options.inputId).innerHeight() + 'px',
				'width': options.width / PJF.constants.DEFAULT_FONTSIZE + 'rem',
				'max-Height': options.maxHeight / PJF.constants.DEFAULT_FONTSIZE + 'rem'
			});			
		}
		me.createTree();
	},
	//生成树
	createTree:function(){
		var me = this;
		var options = me.options;

		options.tree = new PJF.ui.tree({
			dom: options.containerId,
			multiple: options.multiple,
			onlyChild: options.onlyChild,
			url: options.url,
			cpsReq: options.cpsReq,
			ajaxReq: options.ajaxReq,
			data: options.data,
			enableExpandAsync: options.enableExpandAsync,
			onBeforeExpand: options.onBeforeExpand,
			onCheck: function(treeNode) {
				var node = options.tree.getCheckedNode();
				var results = node['item'];
				var resulttxts = [];
				options.currentSelectedItems = results;
				options.currentSelectedIndexs = node['index'];
				var preText=$("#"+options.inputId).val();
				$("#"+options.inputId).val("");
				for (var i in results) {
					resulttxts.push(results[i].name);
				}
				$("#"+options.inputId).val(resulttxts.toString());
				if (!options.multiple) {
					me.hideDiv();
				}
				if(options.onChange && preText != resulttxts.toString()){
					me.options.onChange(treeNode);
				}
			}
		});
	},
	hideDiv:function(){
		$("#"+this.options.containerId).css('display', 'none');
	},
	//绑定事件
	bindEvents: function() {
		var me = this;
		$("#"+me.options.inputId).unbind("click").bind("click",function() {
			$("#"+me.options.containerId).css('display', 'block');
		});
		me.com.find('.stm_treeSelect_container').unbind("mouseleave").bind("mouseleave", function() {
			me.hideDiv();
		});
	},
	getText: function() {
		var inputValue = $("#"+this.options.inputId).val();
		return inputValue;
	},
	getSelectedPath: function() {
		var me = this;
		var selectIndexs = me.options.currentSelectedIndexs;
		if (!selectIndexs) {
			return '';
		} else {
			return (me.options.multiple ? selectIndexs : selectIndexs[0]);
		}
	},
	getValueByIndex: function(index) {
		return this.options.tree.getDataByIndex(index);
	},
	getValue: function() {
		var me = this;
		var options = me.options;
		var inputValue = $("#"+this.options.inputId).val();

		if(inputValue === "") {
			return "";
		} else {
			var selectItems = options.currentSelectedItems;
			var d = new Array();
			for (var i  in selectItems) {
				d.push(selectItems[i].value);
			}
			return (options.multiple ? d : d[0]);
		}
	},
	setValue: function(value) {
		this.options.tree.setCheckedNode(value);
	},
	setText: function(text) {
		$("#"+this.options.inputId).val(text);
	},
	readOnly: function(flag) {
		var me = this;
		var $container =  this.com.find('.stm_treeSelect_container');

		if (flag) {
			me.overlayer = $('<div class="pjf_stmtextfield_overlayer"></div>');
			me.overlayer.bind('click',function(e){
				me.overlayer.focus();
				return false;
			});
			$container.append(me.overlayer);
		} else {
			$container.find(".pjf_stmtextfield_overlayer").remove();
		}
	},
	disabled: function() {
		var $inputId = $("#"+this.options.inputId);
		$inputId.attr("disabled","disabled");
	},
	enable:function(){
		var $inputId = $("#"+this.options.inputId);
		$inputId.removeAttr("disabled");	
	}
});
PJF.apply(PJF.ui.treeSelect.prototype,{ 
	//获取组件名称
	getClassName:function(){
		return "PJF.ui.treeSelect";
	},
	validateParam : function(conf){
		if(conf.data && conf.url){
			return false;
		}
		return true;
	},
	//销毁组件
	destroy:function(){
		this.options.tree.destroy();
		PJF.ui.componentMgr.remove(this.id);
		this.com.remove();
		this.options = null;
		this.com = null;
		this.id = null;
	}
});
;

(function () {
    var _duration = 5000; // 默认持续时间
    var _tipqueue = []; // 展示队列
    var _tipInstance; // 实例
    var _nextTimeout; // timeout引用对象
    var _msgDom; // 右上角提示消息的dom引用
    var _guideDoms = []; // 提示框dom引用
    var _showParams; // 回调函数参数

    // 提示右上角消息
    var _showMsg = function(msg){
        if(!_msgDom){
            _msgDom = $('<div class="pjf_smartTip_msg" style=""><span></span><div class = "pjf_smartTip_xiaozhi"></div></div>').appendTo(document.body);
            _msgDom = _msgDom.find('span');
        }        
        _msgDom.html(msg)
    }

    // 关闭
    var _closeMsg = function(){
        if(_msgDom)
            _msgDom.parent().remove();
        _msgDom = null;   
    }
    // 提示框(frame, finger)
    var _showGuide = function(guide){
        guide = guide.split(";");
        guide.forEach(function(element) {
            var domAndType = element.split('@');
            if(document.getElementById(domAndType[0])){
                var rect = document.getElementById(domAndType[0]).getBoundingClientRect();
                var jqdom = $('<div/>').appendTo(document.body);
                _guideDoms.push(jqdom);
                if(domAndType[1] == 'frame'){                    
                    jqdom.css({
                        position:'absolute',
                        left:rect.left - 6,
                        top:rect.top - 6,
                        height:rect.height + 12,
                        width:rect.width + 12,
                        'z-index':9999999
                    })
                    jqdom.addClass('pjf_smartTip_frame_blink');                    
                }
                else if(domAndType[1] == 'finger'){
                    jqdom.css({
                        position:'absolute',
                        left:rect.left + rect.width,
                        top:rect.top + rect.height / 2 - 25,
                        'z-index':9999999
                        /* height:rect.height + 12,
                        width:rect.width + 12, */
                    })
                    jqdom.addClass('pjf_smartTip_finger');  
                }
            }
        });
    }
    // 关闭
    var _closeGuide = function(){
        _guideDoms.forEach(function(jq){
            jq.remove();
        })
        _guideDoms = [];
    }

    var tipObj = function(){};
    tipObj.prototype = {
        // 开始
        begin: function(cfgori, showParams){
            this.stop();
            _showParams = showParams;
            var me = this;
            var cfg = this.cfg = $.extend(true,{},cfgori);
            if(cfg.entry)
                _tipqueue = _tipqueue.concat(cfg.entry);
            if(cfg.process){
                for(var key in cfg.process){
                    if(cfg.process[key].ele){
                        var domAndEvent = cfg.process[key].ele.split('@');
                        var bindFunc = cfg.process[key].once === false ? 'on' : 'one';
                        (function(tip){
                            // $('#' + domAndEvent[0])[bindFunc](domAndEvent[1],function(){
                            var eventName = domAndEvent[1] === 'click' ? PJF.stmEvent.LINKBTN_CLICK + ' ' : ''
                            eventName += domAndEvent[1] + '.stmGuide';
                            $(document.body)[bindFunc](eventName, '#' + domAndEvent[0], function(){
                                var addtionQueue = [], tmpTip = tip;
                                while(tmpTip.next && cfg.process[tmpTip.next]){
                                    addtionQueue.push(cfg.process[tmpTip.next]);
                                    tmpTip = cfg.process[tmpTip.next];
                                }
                                if(tip.immediately === false){
                                    _tipqueue = _tipqueue.concat([tip]).concat(addtionQueue);
                                    !_nextTimeout && me.next(); 
                                }
                                else{
                                    _tipqueue = [tip].concat(addtionQueue);
                                    me.next();
                                }
                            })
                        })(cfg.process[key]);
                        
                    }                
                }
            }
            this.next();
        },
        // 执行下一个tip
        next: function(){
            this.stop(false, false)
            var tip =  _tipqueue.shift();
            if(tip){
                if(tip.show){
                    var result = tip.show.apply(tip, _showParams);
                    if(result === false){
                        return this.next();
                    }
                    $.extend(tip, result);
                }
                if(tip.sound)
                    PJF.communication.player.PlaySoundByUrl(tip.sound);
                if(tip.msg)
                    _showMsg(tip.msg);
                if(tip.guide){
                    _showGuide(tip.guide);
                }
                var me = this;
                _nextTimeout = setTimeout(function(){
                    me.next();
                }, tip.duration || _duration)
            }
        },
        // 停止
        stop: function(cleanQueue, cleanEvent){
            cleanQueue = typeof(cleanQueue) === 'undefined' ? true : cleanQueue
            cleanEvent = typeof(cleanEvent) === 'undefined' ? true : cleanEvent
            clearTimeout(_nextTimeout);
            _nextTimeout = null
            cleanQueue && (_tipqueue = []);
            _closeGuide();
            _closeMsg();
            cleanEvent && $(document.body).off('.stmGuide')
        },

        // 直接触发
        triggerGuide: function (key) {
          this.stop(true, false)
          if (this.cfg.process && this.cfg.process[key]) {
            var tip = this.cfg.process[key]
            _tipqueue = [tip]
            this.next()
          }
        }
    };


    PJF.ui.guide = function () {
        if (!_tipInstance) {
            _tipInstance = new tipObj();
        }
        return _tipInstance;
    }




})();
/**
 * 
 */
;
(function() {

  /** 
   * 用三次bezier来让签名更平滑，不然全是线条
   * @pArr 4个触摸点, 用来确定两个控制点
  */
  var _getBezierCtrl = function (pArr) {
    i = 1
    var a = b = 0.25
    var x1 = pArr[i].x + (pArr[i+1].x-pArr[i-1].x)*a;
    var y1 = pArr[i].y + (pArr[i+1].y-pArr[i-1].y)*a;
    var x2 = pArr[i+1].x - (pArr[i+2].x-pArr[i].x)*b;
    var y2 = pArr[i+1].y - (pArr[i+2].y-pArr[i].y)*b;
    return {
      x1: x1,
      y1: y1,
      x2: x2,
      y2: y2
    }
  }

  var _onmove = function (e) {
    console.log('move', e)
    var coord = this._getCoord(e)    
    this.ctx.lineTo(coord.x, coord.y)
    this.ctx.stroke();
    this.ctx.beginPath()
    this._lastCoord = coord
    this.ctx.moveTo(coord.x, coord.y)
  }

  var _onend = function (e) {
    console.log('end', e)
    this.$canvas.off('mousemove.sign touchmove.sign', this._onmove)
    this.$canvas.off('mouseup.sign touchend.sign', this._onend)
  }

  var _onstart = function (e) {
    console.log('start', e)    
    this.ctx.beginPath()
    var coord = this._lastCoord = this._getCoord(e)
    // this.ctx.moveTo(coord.x, coord.y)
    // 开始了以后，再监听move和end, 注意, touch事件就算move离开了元素依然会继续触发
    this.$canvas.on('mousemove.sign touchmove.sign', this._onmove)
    this.$canvas.on('mouseup.sign touchend.sign', this._onend)
  }

  PJF.ui.sign = function (conf) {
    var canvas
    if (conf.canvas) {
      canvas = conf.canvas
      this.outer = true
    } else {
      var canvas = document.createElement('canvas')
      canvas.width = conf.w
      canvas.height = conf.h
      canvas.classList = 'pjf_canvas_sign'
      canvas.style.left = conf.left + 'px'
      canvas.style.top = conf.top + 'px'
      document.body.appendChild(canvas)
    }
    
    var ctx = canvas.getContext('2d')
    ctx.fillStyle = "#fff"
    ctx.fillRect(0, 0, canvas.width, canvas.height)
    ctx.strokeStyle = "#444";
	  ctx.lineWidth = 3;
    this.canvas = canvas
    this.ctx = ctx
    this.$canvas = $(this.canvas)
    // 绑定事件
    this.bindEvent()
  }

  PJF.apply(PJF.ui.sign.prototype, {
    /**
     * 
     */
    bindEvent: function () {
      this._onmove = _onmove.bind(this)
      this._onstart = _onstart.bind(this)
      this._onend = _onend.bind(this)
      this.$canvas.on('mousedown.sign touchstart.sign', this._onstart)
    },
    _getCoord: function (e) {
      e = e.originalEvent
      var x, y
      // touch, 且只考虑单手指
      if (e.changedTouches && e.changedTouches[0]) {
        var rect = this.canvas.getBoundingClientRect()
        x = e.changedTouches[0].pageX - rect.left
        y = e.changedTouches[0].pageY - rect.top
      } else if (e.offsetX) { // 应该没别的情况了吧...
        x = e.offsetX
        y = e.offsetY
      }
      console.log('pointer at:', x, y)
      return {x: x, y: y}
    },
    /**
     * 清除面板
     */
    clear: function () {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)
    },
    /**
     * 获取base64
     */
    getSign: function (type, close) {
      type = type || 'image/jpeg'
      var base64 = this.canvas.toDataURL(type).replace('data:image/jpeg;base64,', '');
      if (close) {
        this.destroy()
      }
      return base64
    },

    destroy: function () {
      this.$canvas.off('.sign')
      /* if (!this.outer) {
        document.body.removeChild(this.canvas)
      } */
    }

  })

})();
/**
 * Created by SergioCanales on 2018/6/26.
 */

PJF.ui.nonIdentityCard = PJF.extend(PJF.ui.component, {
    init: function (conf) {
        var me = this;
        me.params = {
            infoMsg: resource.IDENTITY_INSERT_MSG,
            pchPhotoName: "",   //头像名称
            frontPhotoName: "",  //正面扫描名称
            backPhotoName: "",  //反面扫描名称
            success: function (data) {
            },
            failure: function (data) {
            },
            timeout: 60
        };
        //覆盖部分默认参数
        $.extend(me.params, conf);
        me.initUi(this.params);
        me.triggerRead();
    },
    triggerRead: function (extra) {
        var me = this;
        setTimeout(function () {
            var pchPhotoPath = PJF.stm.baseDir + "/identity/" + me.params.pchPhotoName;
            var frontPhotoPath = PJF.stm.baseDir + "/identity/" + me.params.frontPhotoName;
            var backPhotoPath = PJF.stm.baseDir + "/identity/" + me.params.backPhotoName;
            var args = {
                timeout: me.params.timeout,
                pchCredTypes: me.params.pchCredTypes,
                pchOperateTypes: me.params.pchOperateTypes,
                pchPhotoPath: pchPhotoPath,
                pchFrontPhotoPath: frontPhotoPath,
                pchBackPhotoPath: backPhotoPath,
                loadingConf: me.params.loadingConf
            };
            var loading = new PJF.ui.loading({noLayer: true, noIcon: true, msg: '', timeout: me.params.timeout});
            //二次扫描时重新赋值输入参数
            extra && $.extend(args, extra);

            PJF.stm.PSR.scanAndReadAllInfo(args, function(){
                loading && loading.destroy();
                me.callBack.apply(me, arguments);
            });
        }, 0);
    },

    initUi: function (conf) {
        var contentHtm = '<div class="pjf_stm_content_left pjf_stm_nonIdentityImg"></div>';

        $("#" + conf.dom).append(contentHtm);
    },
    callBack: function (result) {
        if (result.status == 0) {
            if (result.errorCode != 'DRV0000020') {
                this.params.failure(result);
            }
        }
        else {
            this.params.success(result.info.pchInfo);
        }
    },
    getClassName: function () {
        return "PJF.ui.nonIdentityCard";
    }
});
PJF.apply(PJF.ui.nonIdentityCard.prototype, {

});
/**
 * P2 Framework JS Library 1.0 Copyright(c) 2012, China Construction Bank.
 * 
 * @Author zhangpeng, shenye Create on: 2013-07-25 Last Updated:
 *         说明:debug.constants模式下采用debug.constants常量赋值用户信息 Last Updated:
 *         添加了userinfo的ccbsid信息 2014.03.17
 */
PJF.namespace('PJF.debug.constants');

PJF.debug = {
	/**
	 * debug.constants模式下创建客户端用户信息
	 */
	createClientInfo: function() {

		PJF.userInfo = {
			'terminalId': '',
			'orgCode': '110378300',
			'userId': '77976569',
			'userName': '董杰',
			'rightWidgets': [],
			'userCode': '77976569',
			'ccbinsChnShrtnm': '北京银地支行',
			'usrNmCpaFullnm': 'dongjie',
			'operLevel': '',
			'userCcbssState': '',
			'empeIdLandNm': 'dongjie1.bj',
			'blngInsid': '110378300',
			'ccbsId': '110378300021',
			'ccbEmpid': '77976569',
			'hmnrscEmpid': '110372001040008'
		};
		PJF.otherInfo = {
			'topId': '',
			'txnList': [],
			'topPort': '',
			'logicTerminalNo': '110378300A01003',
			'token': 'ticket-1-MFWqLjUShceoi9vgRDmWjWNiCMj9e0Bbbll',
			'macAddress': 'shenye.zh',
			'chaTypeId': '002911037830000        ',
			'clientIP': '128.160.216.133',
			'chaType': '20170029'
		};
		PJF.orgInfo = {
			'orgType': '104030100',
			'orgInstRgonIdCd': 'BJ',
			'orgState': '2',
			'loginModeName': '',
			'acCrTpCdSet': 'B01',
			'orgPropertyName': '',
			'provinceCode': '',
			'prefLngCd': 'zh',
			'parentOrgCode': '110005300',
			'ctyRgonCd': '156',
			'orgPhysicClass': '',
			'orgCode': '110378300',
			'preBusiDay': '',
			'ancestorOrgCode': '110005300',
			'instSvrlLgPsnNm': '建行总行',
			'adivCd': '110106',
			'orgShortCName': '北京银地支行',
			'orgEName': 'BEIJING YINDI OFFICE',
			'postCode': '',
			'loginMode': '',
			'hrMns': '8',
			'parentOrgLevel': '3',
			'instSvrlLgPsnID': 'CN000',
			'lclCcyCd': '156',
			'dccOrgCode': '',
			'instLevel1BranchId': '110000000',
			'tmzonCd': '29',
			'instLevel1BranchChnFullNm': '中国建设银行股份有限公司北京市分行',
			'orgCName': '中国建设银行股份有限公司北京银地支行',
			'orgEAdd': '',
			'orgLocationInfo': {
				'bldNm': '',
				'cntyanddstcTpcd': '',
				'strNm': '',
				'urbnAtnmsdstcTpcd': '',
				'ltt': '',
				'provAtnmSrgonTpcd': '',
				'rskCtyInd': '',
				'ccbinsId': '110378300',
				'floorNum': '',
				'gergSptlCordDsc': '',
				'rsdncCommNm': '',
				'provAtnmsrgonCd': '',
				'zipecd': '100070',
				'unitNo': '',
				'ccbinsandloreledTm': null,
				'lgt': '',
				'ccbinsandlorelstTm': null,
				'dtlAdr': '银地家园1号楼首层04北侧',
				'cntyanddstcCd': '',
				'gergTpcd': '',
				'roomNo': '',
				'ccbinsandlorelmdfDsc': '',
				'gergDsc': '',
				'bdno': '',
				'loId': '',
				'urbnAtnmsdstcCd': '',
				'ctyCd': '156',
				'ccbinsAndLoRetpcd': '',
				'provAtnmsrgonTpcd': '',
				'mlbxNo': ''
			},
			'orgShortEName': '',
			'orgCAdd': '',
			'curBusiDay': '',
			'orgClass': '4',
			'orgProperty': '',
			'levOne_code': '110000',
			'levTwo_code': '110000'
		};
		PJF.roleInfo = {
			'positionPriority': '',
			'signControls': [],
			'noRepeatRoleAuthInfoList': [],
			'authRolesMap': {},
			'id': 'G00000000006_110378300',
			'positionTypeCode': '',
			'roleAuthInfos': '',
			'expNode2': '',
			'pstMgrDepId': '010230000',
			'pstMgrDeptNm': '总行渠道与运营管理部',
			'expNode1': '110378300_G00000000006=G00000000006|110378300_G00000000007=G00000000007',
			'orgCode': '110378300',
			'positionId': 'G00000000006',
			'roleAuthInfoList': [{
				'ahrNm': '注销账户或解除协议',
				'pstRlId': 'J000000048',
				'aplId': 'Y0000000000000000033',
				'pstRlNm': '财富交易员',
				'avyId': 'n22.002.050.010',
				'ahrId': '85'
			}],
			'positionDesc': '高级柜员',
			'systemId': '',
			'positionName': '高级柜员',
			'insFTUInd': '0'
		};

		PJF.userInfo.userName = PJF.debug.constants.USER_NAME || PJF.userInfo.userName;
		PJF.userInfo.userCode = PJF.debug.constants.USER_CODE || PJF.userInfo.userCode;
		PJF.userInfo.orgCode = PJF.debug.constants.ORG_CODE || PJF.userInfo.orgCode;
		PJF.userInfo.ccbsId = PJF.debug.constants.CCBS_ID || PJF.userInfo.ccbsId;

		PJF.otherInfo.token = PJF.debug.constants.TOKEN || PJF.otherInfo.token;
		PJF.otherInfo.transSerNo = PJF.debug.constants.TRANS_SER_NO || PJF.otherInfo.transSerNo;
		PJF.otherInfo.macAddress = PJF.debug.constants.MAC_ADDRESS || PJF.otherInfo.macAddress;
		PJF.otherInfo.clientIP = PJF.debug.constants.CLIENT_IP || PJF.otherInfo.clientIP;
		PJF.otherInfo.logicTerminalNo = PJF.debug.constants.LOGIC_TERMINAL_NO || PJF.otherInfo.logicTerminalNo;

		PJF.orgInfo.orgShortCName = PJF.debug.constants.ORG_SHORT_CNAME || PJF.orgInfo.orgShortCName;
		PJF.orgInfo.orgClass = PJF.debug.constants.ORG_CLASS || PJF.orgInfo.orgClass;

		PJF.roleInfo.positionId = PJF.debug.constants.POSITION_ID || PJF.roleInfo.positionId;
		PJF.roleInfo.noRepeatRoleAuthInfoList = PJF.debug.constants.NO_REPEAT_ROLE_AUTH_INFO_LIST || PJF.roleInfo.noRepeatRoleAuthInfoList;
		PJF.roleInfo.orgCode = PJF.debug.constants.ORG_CODE || PJF.roleInfo.orgCode;

	}

}
/*
*stm-js日志
*
*/
;
(function() {
    if (PJF.communication.isInClient() && !PJF.util.isKylinSTM()) {
        function getLocation() {
            var curl = window.location.href;
            var upos = curl.search('#!');
            if (upos > 0) {
                return curl.slice(upos + 2);
            } else {
                return "unknown pageid";
            }
        }

        var longWord = PJF.constants.ON_PROD ? 1000 : Number.MAX_VALUE;

        /*
        * 判断是否为json字符串
        */
        function isJsonStr(str){
            return typeof(str) == 'string' && str != PJF.util.safeParse(str);
        }

        /*
        * @param value 应该是json字符串
        */
        function deleteLongValue(value) {
            value = PJF.util.safeParse(value); //如果不是json字符串，后面就直接返回吧
            if (typeof(value) == 'object') {
                for(var key in value){
                    value[key] = PJF.util.safeParse(value[key]); //如果是JSON字符串就转了，不是就还是用原来的
                    //如果是字符串且不是JSON字符串, 才判断是不是单个字段过长
                    if(typeof(value[key]) == 'string' && value[key].length > longWord){
                        //value instanceof Array ? value.splice(key, 1) : (delete value[key])
                        value[key] = '该字段值过长，已省略';
                    }
                    else if(typeof(value[key]) == 'object'){
                        arguments.callee(value[key]); //递归继续搞, 应该不会超过最大堆栈。。。
                    }
                    else{
                        //按理不可能到这里来了
                    }
                }
            }
            return value;
        }
        console.log = function() {
            try {
                var logs = [];
                Array.prototype.forEach.call(arguments, function(value){
                    //是字符串才去处理
                    if(typeof(value) == 'string'){
                        value = deleteLongValue(value);
                        //避免是非JSON字符串调用，会多出转义
                        if(typeof(value) == 'object'){
                            value = JSON.stringify(value);
                        }
                    }
                    logs.push(value);
                })
                
                var ifLog = PJF.util.getValue(PJF, 'otherInfo.sysParam.STM_LOG_DEVICES')
                if(!PJF.constants.ON_PROD) 
                    PJF.communication.log.WriteLog([getLocation(), ',', logs.join(' ')].join(''));
                else if(ifLog != '1'){ // 为1代表关闭
                    var logMsg = PJF.util.stringToHex(PJF.util.des('stmencry', PJF.util.string16ToHex(logs.join(' ')), 1))
                    PJF.communication.log.WriteLog([getLocation(), ',encrypted,', logMsg].join(''));
                }
                else 
                    PJF.communication.log.WriteLog(' ');
            } catch (e) {
                PJF.communication.log.WriteLog('stm记录日志出错:' + e.message);
            }
        }
        if(!PJF.constants.ON_PROD){
            console.debug = console.log
        }
    }
})();
PJF.stm.log = function(content,tag){
    if(!PJF.util.deviceType.tcr){
        if (PJF.communication.isInClient()) PJF.communication.log.WriteAppMonLog(' ');
        return;
    }
    try {
        if (tag) {
            if (PJF.logTag[tag]) {
                if (content) {
                    if (PJF.communication.isInClient())
                        PJF.communication.log.WriteAppMonLog([PJF.logTag[tag], ':', content].join(''));
                } else {
                    if (PJF.communication.isInClient())
                        PJF.communication.log.WriteAppMonLog(PJF.logTag[tag]);
                }
            } else {
                if (PJF.communication.isInClient())
                    PJF.communication.log.WriteAppMonLog('stm记录日志出错，无对应标签：' + tag);
            }
        } else {
            if (PJF.communication.isInClient())
                PJF.communication.log.WriteAppMonLog(content);
        }
    }
    catch(e){
        PJF.communication.log.WriteAppMonLog('stm记录日志出错:' + e.message);
    }
}

//监听window的错误信息
window.onerror = function(msg, url, line) {
    console.log(['js执行出错:', msg, '. 地址为:', url, '. 行号为:', line].join(''));
    alert(['执行出错:', msg, '. 地址为:', url, '. 行号为:', line].join(''));
}
/*
 * by shenye
 * stm标签化处理
 */

;
(function(exports) {

	var _compTagList = Object.keys(PJF.ui).reduce(function(map, value, index) {
		map[value.toUpperCase()] = value;
		return map;
	}, {});
	var _ctx, _compsContaniner; //用来存传入的两个参数，就是不想在各个函数之前来回传递 - - 
	//某些组件比较特殊，目前就tab
	var _createtor = {
		TAB: tabCreator
	};
	var _domContainerTemplate = "<{{:domTag}} id='{{:domId}}' {{:attributes}} ></{{:domTag}}>";
	//组件对应的父容器
	var _domContainer = {
			textfield: "input",
			DEFAULT: "div",
			linkButton: 'a',
			label:'a'
		}
	//有的组件名和html自带标签重合了...
	var _tagTransform = {
		STMTABLE : 'table', //这个是ui.table
		TABLE: 'none', //这个就让他是原生的table
		STMLABEL : 'label',
		LABEL: 'none'
	}
	//是否是PJF.ui.xxx中的xxx，没有返回空串
	function getCompPostfix(tagName){
		var uiName =  _tagTransform[tagName] || tagName || ""; //也可能tagname为undefined
		return _compTagList[uiName.toUpperCase()];
	}

	//获取tag实际对应的dom的容器tag，没有返回undefined
	function getCompDomTag(tagName){
		var postFix = getCompPostfix(tagName);
		return _domContainer[postFix] || _domContainer.DEFAULT;
	}
		/**
		 * @param dom 将生成组件的标签dom
		 * @param data 标签的data-xxx数据
		 * @param parent 生成组件所需容器的父元素，为了判断插入位置的
		 */
	function genDomContainer(dom, data, parent) {

		var containerAttr = "";
		for (var i = 0; i < dom.attributes.length; i++) { //拷贝标签节点属性
			containerAttr += [dom.attributes[i].nodeName,"='",dom.attributes[i].nodeValue,"' "].join('');

		}
		if (!data.dom) { //如果没有定义dom,那么就随机生成一个
			data.dom = "x" + PJF.util.generateUUid(); //因为某些组件可能根据dom id拼接字符串作为class名，若第一位出现数字则不符合css class命名规范(i.e : grid)
		}
		//生成组件容器
		var container = PJF.html.template(_domContainerTemplate, {
			domTag: getCompDomTag(dom.tagName),
			attributes: containerAttr,
			domId: data.dom
		});
		
		$(parent).append(container) //插入生成的组件容器
	}
	/**
	 * tab专属的构造器
	 * @param conf 组件配置
	 * @param dom 标签dom
	 */
	function tabCreator(conf, dom) {
		//重定义tab的domLoadedCallBack回调
		var temp = conf.domLoadedCallBack;
		conf.domLoadedCallBack = function(parents) { //这个parents是tab组件的每一页的父元素			
			//在tab生成后，针对每一个子页tab-nav，单独再进行dfs搜索，并且parent重定义为各自对应tab-panels
			$(dom).children('tab-nav').each(function(index) {
				//一个tab-nav下可能有多个标签				
				var len = this.childNodes.length; //这里之所以不直接用jquery的children是因为children不会获得textNode之类的节点....
				for (var i = 0; i < len; i++) {
					dfs(this.childNodes[i], parents[index])
				}
			})
			temp && temp.apply(this, arguments);
		}
		var pjfCom = new PJF.ui[_compTagList[dom.tagName]](conf);
		return {
			stop: true,
			pjfCom: pjfCom
		}
	}
	/**
	 * 通用的构造器
	 * @param conf 组件配置
	 * @param dom 标签dom
	 */
	function commonCreator(conf, dom) {
		var pjfCom = new PJF.ui[getCompPostfix(dom.tagName)](conf);
		return {
			stop: true,
			pjfCom: pjfCom
		}
	}
	/*
	 * 创建组件
	 * @param dom 标签dom
	 * @param parent 创建组件的父节点
	 */
	function createComp(dom, parent) {
		//获取data开头的数据
		var data = $(dom).data();
		//data.dom = data.dom || $(dom).attr('id'); //为了兼容习惯吧，写data-dom或者id都可以
		genDomContainer(dom, data, parent); //生成组件容器
		//是否有不通用的creator
		var creator = _createtor[dom.tagName] || commonCreator;
		var conf = $.extend({}, data); //组件配置，或许还有pjf打头的属性
		for (var key in conf) {
			if (typeof conf[key] != 'string') //或许是数组  注意这里如果在html标签里写data-data="['haha']" 是字符串, '["haha"]'是数组
				continue;
			//从ctx配置的参数,比如data-on-click="ctx.buttonConf.onClick"
			else if (conf[key].substr(0, 4) == 'ctx.') {
				conf[key] = PJF.util.getValue(_ctx, conf[key].substr(4));
			}
			//直接解析，比如data-default-date="19880530";
			else {
				conf[key] = PJF.util.safeParse(conf[key]);
			}
		}
		var extendConf = $(dom).attr('pjf-extendConf'); //额外的配置
		if (extendConf) $.extend(conf, PJF.util.getValue(_ctx, extendConf));
		var result = creator(conf, dom);
		var referName = $(dom).attr('pjf-name'); //需要引用
		if (referName) _compsContaniner[referName] = result.pjfCom;
		return result;
	}

	/**
	 * 深度优先搜索
	 * @param rootDom 搜索的根节点dom
	 * @parent parent 将要创建新的组件的父节点
	 */
	function dfs(rootDom, parent) {
		parent = parent || rootDom.parentNode; //若没有指定，就是根节点的父节点
		var clone
		if (getCompPostfix(rootDom.tagName)) { //是组件
			var res = createComp(rootDom, parent);
			if (res.stop) return; //停止搜索
		} else { //不是组件，比如<div>什么的			
			clone = rootDom.cloneNode(false); //克隆
			parent.appendChild(clone); //添加克隆的节点
		}
		//这里之所以不直接用jquery的children是因为children不会获得textNode之类的节点....
		var len = rootDom.childNodes.length;
		for(var i = 0; i < len; i++){
			dfs(rootDom.childNodes[i], clone ? clone : rootDom)
		}
	}
	/**
	 * @param root 扫描根节点 dom的id，或者jquery对象,dom节点
	 * @param ctx 上下文
	 * @param compsContaniner 储存组件的引用
	 */
	exports.tagScan = function(root, ctx, compsContaniner) {
		if (typeof root === 'string') {
			root = '#' + root;
		}
		_ctx = ctx || {};
		_compsContaniner = compsContaniner || {};
		$(root).each(function(i, dom) {
			dfs(dom)
		})
		$(root).remove(); //删除被扫描过的片段
		return _compsContaniner;
	};


})(PJF.html)
/**
 * 自助设备一些监听，到时候发布事件给订阅者
 * 目前已监听:
 *  1. 超过60秒未操作,即点击事件，若被阻止冒泡了则GG思密达
 *     例外情况:loading的生成、外设的调用将停止计时; 输入框正在输入也重新计时
 特殊情况:STM首页一直读卡这种，到底算不算长时间未操作呢? 目前没算
 */
PJF.namespace("PJF.monitor")

;(function (exports) {

    var _clickInterval;
    var _clickInterval_30s;
    var _clickInterval_20s_selfBank;

    var _loadingCount = 0;
    var _callDeviceCount = 0;
    var _supportCapture = document.addEventListener ? true : false; //是否支持捕获阶段

    _eventEnd = function () {
        if (window.template && template.getLocation && (template.getLocation() === 'homepage')) {
            _restartMonitor();
            return;
        }
        if (_callDeviceCount != 0 || _loadingCount != 0) {
            _stopClickMonitor();
        }
        else {
            _startClickMonitor();
        }
    }

    var _clickEvtCb = function () {
        _restartMonitor();
    }
    var _timeout = 90000;
    var _currentPageId
    _startClickMonitor = function () {
        _clickInterval = setInterval(function () {
            console.log('over ' + _timeout + ' no reaction')
            PJF.event.publish(PJF.stmEvent.OVER_60_NO_REACTION, _timeout / 1000);
        }, _timeout)
        _clickInterval_30s = setInterval(function () {
            console.log('over 30s no reaction')
            PJF.event.publish("OVER_30_NO_REACTION", 30);
        }, 30000)
        _clickInterval_20s_selfBank = setInterval(function () {
            if (PJF.otherInfo.isSelfBank && PJF.otherInfo.hasDoor) {
                console.log('over 20s no reaction selfbank')
                var pageId = template.getLocation()
                if (PJF.constants.NO_SELF_SMART.indexOf(pageId) === -1 && !PJF.ui.componentMgr.get('stm_monitor_selfbank_20s_errmsgbox')) {
                    if (_currentPageId != pageId) {
                        _currentPageId = pageId
                    } else { // 同一个页面停留再久也只弹一次
                        return
                    }
                    PJF.communication.player.SpeekText('如果您有问题可以点工作人员', 100);
                    new PJF.ui.errorMessageBox({
                        id: 'stm_monitor_selfbank_20s_errmsgbox',
                        content: '尊敬的客户, 若您需要帮助您可以点击屏幕上红色"工作人员"按钮, 将有远程工作人员视频为您指导',
                        buttonConfs: [{
                            appendStyle: 'confirm',
                            style: "main",
                            bgColor: 'rgb(20,149,214)',
                            name: '我知道了',
                            onClick: function() {
                            }
                        }]
                    })
                }
            }
        }, 20000)
        //input的应该还没有阻止事件冒泡...
        $(document).on('input.stmMonitor', function (e) {
            _restartMonitor();
        })
        //。。。好些组件阻止事件冒泡了(grid,button)，免得改太多了，在捕获阶段去捕获事件吧
        if (_supportCapture) {
            document.addEventListener('click', _clickEvtCb, true)
        }
        //这个姿势就爱莫能助了...如果被阻止冒泡了那就捕获不到了
        else {
            $(document).on('click.stmMonitor', _clickEvtCb)
        }
    }
    _stopClickMonitor = function () {
        clearInterval(_clickInterval);
        clearInterval(_clickInterval_30s);
        clearInterval(_clickInterval_20s_selfBank)
        $(document).off('.stmMonitor');
        if (_supportCapture) {
            document.removeEventListener('click', _clickEvtCb, true);
        }
    }

    _restartMonitor = function () {
        _stopClickMonitor();
        _startClickMonitor();
    }

    exports.startClickMonitor = function () {
        PJF.event.addSubscriber(PJF.stmEvent.PJF_STM_CALL_DEVICE, function () {
            _callDeviceCount++;
            _eventEnd();
        })
        PJF.event.addSubscriber(PJF.stmEvent.PJF_STM_CALL_DEVICE_BACK, function () {
            _callDeviceCount--;
            _eventEnd();
        })
        PJF.event.addSubscriber(PJF.stmEvent.PJF_STM_LOCK, function () {
            _loadingCount++;
            _eventEnd();
        })
        PJF.event.addSubscriber(PJF.stmEvent.PJF_STM_UNLOCK, function () {
            _loadingCount--;
            _eventEnd();
        })
        _startClickMonitor();
    }

    exports.startDeviceEventMonitor = function () {
        /**
         * 外设事件订阅
         */
        PJF.event.addSubscriber(PJF.PadClientEvents.device.genDeviceEvent, function () {
            console.log('外设返回事件:' + JSON.stringify(arguments));
            PJF.stm.client.eventHandler.apply(window, arguments);
        })
        /**
         * 删除回调
         */
        PJF.event.addSubscriber("STM_PAGE_CHANGE", function () {
            /*while(PJF.stm.client.callbackList.length > 0){
                PJF.event.removeSubscriber(PJF.stm.client.callbackList.shift());
            }*/
        })

        /*
         * SP版本的强制退证按钮也有事件了~
         */
        PJF.event.addSubscriber(PJF.stm.client.events.IDC_TAKEN, function () {
            PJF.stm.util.clearAuthInfo();
            PJF.fsm.get(PJF.fsm.fmIds.STM_IDCARD).takeId();
        });

        //在IC卡插入时，进行状态转换
        PJF.event.addSubscriber(PJF.stm.client.events.CDB_INHALED, function () {
            PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).inhaleCard();
            PJF.stm.util.devIdleLog();//智慧银行设备忙碌
        });

        //在身份证插入时，进行状态转换
        PJF.event.addSubscriber(PJF.stm.client.events.IDC_INHALED, function () {
            PJF.fsm.get(PJF.fsm.fmIds.STM_IDCARD).inhaleId();
            PJF.stm.util.devIdleLog();//智慧银行设备忙碌
        });

        //在IC卡取走时，进行状态转换，并清代办和卡信息
        PJF.event.addSubscriber(PJF.stm.client.events.CDB_TAKEN, function () {
            PJF.stm.util.clearAuthInfo(true);
            PJF.stm.util.clearCardInfo();
            PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).takeCard();
            PJF.stm.util.modSmartMenus();
        });

        PJF.event.addSubscriber(PJF.stm.client.events.HMI_CHANGE, function (data) {
            if (PJF.otherInfo && PJF.fsm.get(PJF.fsm.fmIds.STM_ICCARD).is('noCard') && template.getLocation && (template.getLocation() == 'homepage')) {
                var randomId = PJF.util.generateUUid();
                $('body').append('<div id="' + randomId + '_smart"></div>').append('<div id="' + randomId + '_self"></div>');
                //智慧银行HMI
                if (PJF.otherInfo.smartBank && !PJF.otherInfo.isSelfBank) {
                    // 0-无客户 1-有客户
                    if (data == '0') {
                        PJF.stm.util.modSmartMenus();
                    } else {
                        var take = function () {
                            var takePhoto = {
                                iIndex: 1,
                                imageType: 2,
                                iExpRate: 70,
                                timeout: 30,
                                pchPhotoPath: PJF.stm.baseDir + '/identity/' + randomId + '_smart.JPG',
                                loadingConf: false
                            };
                            PJF.stm.SXT.takePhoto(takePhoto, function (result) {
                                if (result.status == 1) {
                                    console.log('take photo success');
                                    close(true);
                                } else {
                                    console.log("take photo failure");
                                    close();
                                    defaultFn();
                                }
                            });
                        };
                        var close = function (flag) {
                            var closePram = {//关闭摄像头参数
                                iIndex: 1,
                                loadingConf: false
                            };
                            PJF.stm.SXT.closeCamera(closePram, function (result) {
                                if (result.status == 1) {
                                    console.log("close success");
                                    $('#' + randomId + '_smart').remove();
                                    if (!flag) return;
                                    var faceData = PJF.util.getPic('/identity/' + randomId + '_smart.JPG');
                                    var obj = {
                                        Eqmt_ID: PJF.otherInfo.devId,
                                        BO_ID: PJF.roleInfo.orgCode,
                                        serviceName: 'receivePic',
                                        JID: PJF.otherInfo.devId + 'stm',
                                        src: faceData,
                                        Scn_Idr: '007',
                                        Ovrlsttn_Trck_No: PJF.roleInfo.orgCode + PJF.otherInfo.devId + Math.random().toString().substr(2, 15)
                                    };
                                    PJF.stm.util.sendSocketReq(JSON.stringify(obj), null, null);
                                } else {
                                    console.log("close failure");
                                    defaultFn();
                                }
                            });
                        };
                        var defaultFn = function () {
                            $('#' + randomId + '_smart').remove();
                            //个人开户（ACC10001）、开通电子银行（SIG20001）、活期转账（TRM20001）、存款查询（ZHC20001）、信用卡查询（CRD20003）
                            PJF.stm.util.getSmartMenus('ACC10001|SIG20001|TRM20001|ZHC20001|CRD20003');
                        };
                        PJF.stm.SXT.openCamera({
                            domId: randomId + '_smart',
                            timeout: 30,
                            iIndex: 1,
                            loadingConf: false
                        }, function (result) {
                            if (result.status == 1) {
                                console.log("open camera success");
                                take();
                            } else {
                                console.log("open camera failure");
                                close();
                                defaultFn();
                            }
                        });
                    }
                }
                //无人银行HMT
                if (PJF.otherInfo.isSelfBank && PJF.constants.lhaDebug) {
                    if (data == '1') {
                        var detectFn = function () {
                            PJF.stm.LHA.startDetect({
                                motion: 0,
                                photoPath: PJF.stm.baseDir + '/identity/' + randomId + '_self.JPG',
                                timeout: 10,
                                loadingConf: false,
                                noSound: true,
                                detectWidth: 100, //裁剪人像
                                detectHeight: 100,
                                saveFaceOnly: 1
                            }, function (res) {
                                if (res.status) {
                                    endFn();
                                } else {
                                    console.log("detect fail:" + JSON.stringify(res));
                                    closeFn();
                                }
                            });
                        };
                        var endFn = function () {
                            PJF.stm.LHA.endDetect(function (res) {
                                if (res.status) {
                                    closeFn(true);
                                } else {
                                    console.log('end fail:' + JSON.stringify(res));
                                    closeFn();
                                }
                            }, {loadingConf: false});
                        };
                        var closeFn = function (normal) {
                            PJF.stm.LHA.closeCamera(function (result) {
                                if (result.status) {
                                    console.log("close success");
                                    $('#' + randomId + '_self').remove();
                                    if (!normal) return;
                                    var reqData = {
                                        Eqmt_ID: PJF.otherInfo.devId,
                                        Stm_Chnl_ID: "2019",
                                        Stm_Chnl_Txn_CD: "2019-NALL",
                                        Br_ID: PJF.orgInfo.instLevel1BranchId,
                                        Br_ID_Inf: PJF.roleInfo.orgCode,
                                        base64_Ecrp_Txn_Inf: PJF.util.getPic('/identity/' + randomId + '_self.JPG')
                                    };
                                    PJF.communication.cpsJsonReq({
                                        jsonData: JSON.stringify(reqData),
                                        fwServiceId: 'simpleTransaction',
                                        fwTranId: 'A0161W608-stm',
                                        success: function (data) {
                                            console.log('A0161W608 success:' + JSON.stringify(data));
                                            if (data.MEDM_AU_SET) {
                                                PJF.stm.util.getQRQM(data.MEDM_AU_SET.Cst_ID); //千人千面菜单
                                                //组装相关变量
                                                PJF.otherInfo.snInfo = {};
                                                PJF.otherInfo.snInfo.cstId = data.MEDM_AU_SET.Cst_ID;
                                                PJF.otherInfo.snInfo.name = data.MEDM_AU_SET.Cst_Nm;
                                                PJF.otherInfo.snInfo.identity = data.MEDM_AU_SET.Crdt_No;
                                                PJF.otherInfo.snInfo.tpCd = data.MEDM_AU_SET.CrdTp_Cd;
                                            }
                                        },
                                        failure: function (data) {
                                            console.log('A0161W608 failure:' + JSON.stringify(data));
                                        }
                                    });
                                } else {
                                    console.log("close failure");
                                }
                            }, {loadingConf: false});
                        };

                        PJF.stm.LHA.openCamera({
                                domId: randomId + '_self',
                                left: '0',
                                top: '0',
                                width: '0',
                                height: '0',
                                loadingConf: false
                            },
                            function (res) {
                                if (res.status) {
                                    detectFn();
                                } else {
                                    console.log('open fail:' + JSON.stringify(res));
                                    closeFn();
                                }
                            });
                    } else {
                        //离开关闭
                        PJF.stm.LHA.closeCamera(function (res) {
                            console.log('homepage close camera:' + JSON.stringify(res))
                        }, {loadingConf: false});
                    }
                }
            }
        });
    }

    exports.startFsm = function () {
        //目前为摄像头和签名添加状态机
        PJF.fsm.create({
            id: PJF.fsm.fmIds.STM_CAMERA,
            initial: 'close',
            done: 'close',
            actions: [{
                name: 'openCamera',
                from: 'close',
                to: 'open'
            }, {
                name: 'closeCamera',
                from: 'open',
                to: 'close'
            }]
        });

        PJF.fsm.create({
            id: PJF.fsm.fmIds.STM_SIGNATURE,
            initial: 'close',
            done: 'close',
            actions: [{
                name: 'openSignature',
                from: 'close',
                to: 'open'
            }, {
                name: 'closeSignature',
                from: 'open',
                to: 'close'
            }]
        });

        PJF.fsm.create({
            id: PJF.fsm.fmIds.STM_ICCARD,
            initial: 'noCard',
            done: 'noCard',
            actions: [{
                name: 'inhaleCard',
                from: 'noCard',
                to: 'hasCard'
            }, {
                name: 'takeCard',
                from: 'hasCard',
                to: 'noCard'
            }]
        });


        PJF.fsm.create({
            id: PJF.fsm.fmIds.STM_IDCARD,
            initial: 'noId',
            done: 'noId',
            actions: [{
                name: 'inhaleId',
                from: 'noId',
                to: 'hasId'
            }, {
                name: 'takeId',
                from: 'hasId',
                to: 'noId'
            }]
        });

        PJF.fsm.create({
            id: PJF.fsm.fmIds.STM_PRT,
            initial: 'noPassbook',
            done: 'noPassbook',
            actions: [{
                name: 'inhalePassbook',
                from: 'noPassbook',
                to: 'hasPassbook'
            }, {
                name: 'ejectPassbook',
                from: 'hasPassbook',
                to: 'noPassbook'
            }]
        });
    }

})(PJF.monitor);

PJF.namespace('PJF.stmRemoteControl');
//STM设备远程控管
PJF.stmRemoteControl = {
    enableMonitor: function () {
        var me = this;
        var intervalTime = 20 * 60 * 1000;//轮询间隔时间 20分钟
        var timeout = 3 * 60 * 1000; //延迟检测时间 3分钟
        var intervalFunc = function () {
            var reqJsonOfDealSta = {
                dev_ID: PJF.otherInfo.devId
            };
            console.log("接收远程指令请求参数为" + JSON.stringify(reqJsonOfDealSta));
            var url = PJF.constants.AUTH_SERVER + '/bosWeb/ecpJson.action';
            var reqData = 'jsonData=' + JSON.stringify(reqJsonOfDealSta) + '&_fw_service_id=getSTMDevCnConfDB';
            //跨域
            PJF.communication.Http.SendCrossDomainRequest(url, reqData, 30000, function (status, responseData) {
                console.log('跨域返回结果,status:' + status + ';responseData:' + responseData);
                status = JSON.parse(status);
                if (status.success && responseData) {
                    responseData = JSON.parse(responseData);
                    if (responseData && responseData.BK_STATUS && (responseData.BK_STATUS == PJF.constants.BK_CODE_SUCCESS)) {
                        console.log('接收远程指令成功');
                        if (responseData.cmd === '0') {
                            console.log('等待远程控管状态');
                        } else {
                            clearInterval(intervalId); //清除轮询，准备执行指令
                            function checkID() {
                                //2.检测是否有证，最多检测两次，第二次无论是否有证，均进入提示框
                                if (PJF.fsm.get([PJF.fsm.fmIds.STM_IDCARD]).is('noId')) {
                                    me.errMsgHandler(responseData.cmd);
                                } else {
                                    setTimeout(function () {
                                        me.errMsgHandler(responseData.cmd);
                                    }, timeout);
                                }
                            }

                            //无身份证且无IC卡， 直接执行指令状态
                            //1.检测是否有卡，最多检测两次，第二次无论是否有卡，均进入检测证
                            if (PJF.fsm.get([PJF.fsm.fmIds.STM_ICCARD]).is('noCard')) {
                                checkID();
                            } else {
                                setTimeout(function () {
                                    checkID();
                                }, timeout);
                            }
                        }
                    } else {
                        console.log('接收远程指令失败');
                    }
                } else {
                    console.log('通信失败，接收远程指令');
                }
            });
        };
        var intervalId = setInterval(intervalFunc, intervalTime);
    },
    errMsgHandler: function (state, flag) {
        var me = this;
        //监听提示框的超时时间为20秒
        var cancelTimeout = 20;
        //第二次提示框出现时间 3分钟
        var timeout = 3 * 60 * 1000;
        var errorMsgBox = new PJF.ui.errorMessageBox({
            content: '尊敬的客户，因设备出现异常状态，需要重启或退出应用，如您还有业务未完成，请选择“我还未完成业务”，并请在完成后选择其他设备继续您的业务，如您已结束交易，则选择“我已完成业务”，谢谢您的配合。',
            buttonConfs: [
                {
                    name: '我还未完成业务',
                    style: 'main',
                    btnBgColor: 'rgb(65,159,245)',
                    onClick: function () {
                        //三分钟后再出提示框和超时监听；如果仍选择还未完成，三分钟后执行指令
                        clearTimeout(timeoutHandler);
                        //第一次出现超时提示框时
                        if (!flag) {
                            setTimeout(function () {
                                me.errMsgHandler(state, true);
                            }, timeout);
                        } else {
                            setTimeout(function () {
                                me.cmdHandler(state);
                            }, timeout);
                        }
                    }
                },
                {
                    name: '我已完成业务',
                    style: 'main',
                    btnBgColor: 'rgb(65,159,245)',
                    onClick: function () {
                        clearTimeout(timeoutHandler);
                        me.cmdHandler(state);
                    }
                }
            ]
        });

        var timeoutHandler = setTimeout(function () {
            errorMsgBox.destroy();
            me.cmdHandler(state);
        }, cancelTimeout * 1000);
    },
    cmdHandler: function (state) {
        //1：设备重启；2：设备关闭；3：客户端重启；4：客户端关闭
        switch (state) {
            case '1':
                PJF.communication.fileSystem.runWinCmd('shutdown -r');
                break;

            case '2':
                PJF.communication.fileSystem.runWinCmd('shutdown -s');
                break;

            case '3':
                PJF.communication.AppRestart();
                break;

            case '4':
                PJF.communication.AppExit();
                break;

            //非正常远程指令码
            default :
                console.log('远程控管指令错误,cmd为' + state);
                break;
        }
    }
};
PJF.namespace('PJF.sm4Auth');

(function() {

  var _authPageTpl = '<div class="login-page-container">' +
    '<!-- 登录界面title -->' +
    '<p class="login-form-title">注册设备密钥</p>' +
    '<p class="error-msg" id="fingerErrMsg"></p>' +
    '<div class = "sm4Form" id = "sm4InputForm">' +
    '<label class = "inputTokenClass">短信口令:</label>' +
    '<input type = "text" id = "sm4InputToken"></input>' +
    '</div>' +
    '<div class="sm4BtnContainer">' +
    '<a id="sm4GetToken"></a>' +
    '<a id="sm4RegisterDevice"></a>' +
    '</div>' +
    ' </div>' +
    '<style type="text/css">' +
    '.inputTokenClass {' +
    'font-size: .24rem;' +
    'display: inline-block;' +
    '}' +
    '.sm4Form {' +
    'text-align: center;' +
    '}' +
    '.sm4BtnContainer {' +
    'text-align: center;' +
    'margin-top: .5rem;' +
    '}' +
    '#pjf_sm4AuthWindowDom {' +
    'background-color: rgba(215, 228, 233, 0.85);' +
    'border: 2px solid #fff;' +
    'border-radius: 5px;' +
    '}' +

    '#pjf_sm4AuthWindowDom .stmwindow-body {' +
    'height: 100%;' +
    'overflow: hidden;' +
    'padding: .15rem;' +
    '}' +

    '.login-page-container {' +
    'height: 100%;' +
    'overflow: hidden;' +
    'background-color: rgba(231, 233, 234, 0.75);' +
    'border: 2px solid #fff;' +
    'border-radius: 5px;' +
    'position: relative;' +
    '}' +

    '.login-form-title {' +
    'font-size: .28rem;' +
    'line-height: .70rem;' +
    'text-align: center;' +

    'background: -ms-linear-gradient(top, rgb(242, 242, 243), rgb(208, 209, 209));' +
    'color: rgb(21, 138, 203);' +
    '}' +
    '.error-msg {word-break: break-all;color: red;font-size: .20rem;text-align: center;max-height: 1.50rem;min-height: .5rem;line-height: .50rem;}' +
    '</style>'

  var _registerDateKey = '_pjf_stm_registersm4_date' // 存注册日期的key
  var _dateToday = PJF.communication.getServerTime() || PJF.util.formatDate(new Date()) // 当天日期
  var modelList = ['VTM600S-Z','BST808C','ZT2189','ZT2190','CASHWAY35AG-JR1','CASHWAY35AG-JR2','SCM750','CTM900']
  var needSm4
  /**
   * 对外暴露方法，判断sm4是否可用，若不可用，则开启注册流程
   * @param cb 成功后调用
   */
  PJF.sm4Auth.register = function(cb) {
    var sm4DeviceList = PJF.util.getValue(window, 'PJF.otherInfo.sysParam.SM4_DEVICE_LIST') || ''
    // var needSm4 = PJF.util.compareClientVersion('1.17.2.0') && PJF.util.deviceType.stm && !PJF.util.deviceType.tcr && !PJF.util.deviceType.icm && sm4DeviceList.split(',').indexOf(PJF.otherInfo.devId) != -1
    if (!PJF.util.deviceType.stm || PJF.util.deviceType.tcr || PJF.util.deviceType.icm || modelList.indexOf(PJF.otherInfo.modelCode) == -1) { // 只有stm才搞, 并且得是总行的, 所以要判断型号
      needSm4 = false
    }
    if (needSm4 === undefined) { // 只获取一次开关
      $.ajax({
        url: 'ecpJson.action',
        timeout: 5000,
        async: false,
        dataType: 'json',
        data: {
          _fw_service_id: 'stm.queryApplicationParam',
          jsonData: JSON.stringify({
            param_id: 'STM_TERM_KEYT',
            device_id: PJF.otherInfo.devId,
            BRANCH_ID: PJF.roleInfo.orgCode,
            ins_id: PJF.roleInfo.orgCode,
            OPER_CODE: PJF.otherInfo.devId
          })
        },
        success: function (data) {
          if (data && data.RESULT_DATA && data.RESULT_DATA[0] && data.RESULT_DATA[0].KeytSwitch == '1') {
            needSm4 = true
          }
        }
      })
      needSm4 = !!needSm4
    }

    if (needSm4) {
      var registerTime = PJF.communication.localStorage.getValue(_registerDateKey)
      // 获取到了注册日期
      if (registerTime.success && registerTime.result) {
        registerTime = registerTime.result
        console.log('成功获取SM4主密钥注册日期', registerTime)
        // 暂且当做主密钥已经灌注OK, 然后去做认证
        _sm4Authentication({
          registerTime: registerTime,
          success: function(data) {
            PJF.otherInfo.sm4Auth = true
            cb && cb()
          },
          failure: function(data) {
            // 现在所有失败都直接重新注册
            console.log('sm4认证失败:', JSON.stringify(data))
            new PJF.ui.errorMessageBox({
              content: 'sm4认证失败, 请重新注册',
              detailMsg: data.BK_DESC,
              buttonConfs: [{
                style: "main",
                bgColor: 'rgb(20,149,214)',
                name: '注册',
                onClick: function() {
                  _registerSm4NoAuth(function() {
                    PJF.sm4Auth.register(cb)
                  })
                }
              },{
                style: "main",
                bgColor: 'rgb(20,149,214)',
                name: '退出',
                onClick: function() {
                  PJF.communication.AppExit()
                }
              }]
            })
          }
        })
      } else { // 直接当做没有注册成功的
        _registerSm4NoAuth(function() {
          PJF.sm4Auth.register(cb)
        })
      }
    } else {
      cb()
    }
  }

  /**
   * 灌注主密钥, 不需要用户验证....
   */
  var _registerSm4NoAuth = function(cb) {
    var firstEmpPwd, firstEmpToken // 短信口令和主密钥
    var reqData = JSON.stringify({
      destNodeId: '120000',
      deviceId: PJF.otherInfo.devId,
      macAddr: PJF.otherInfo.MACS && PJF.otherInfo.MACS[0],
      registerTime: _dateToday,
      stmGI: PJF.constants.SM4_MAINKEY_INDEX, // 主密钥索引 
      stmAlg: '4',
      phoneNumber: '11111111111'
    });
    console.log('请求主密钥参数为:', reqData)
    // 用设备号和手机号注册设备获取口令
    PJF.communication.cpsJsonReq({
      url: 'ecpJson',
      fwServiceId: 'getStmDeriveKey',
      maskAll: true,
      jsonData: reqData,
      fwTranId: 'getStmDeriveKey',
      success: function(data) {
        console.log('获取主密钥结果为:', JSON.stringify(data))
        firstEmpToken = data.key
        firstEmpPwd = data.password
        PJF.stm.Pin.setSM4PrimaryKey({
          pchPassword: firstEmpPwd,
          pchKey: firstEmpToken,
        }, function(data) {
          if (data.status == 0) {
            new PJF.ui.errorMessageBox({
              content: 'sm4灌注密钥失败',
              detailMsg: data.errorCode + ',' + data.errorMsg,
              buttonConfs: [{
                style: "main",
                bgColor: 'rgb(20,149,214)',
                name: '重新注册',
                onClick: function() {
                  _registerSm4NoAuth(cb) // 重新开始
                }
              },{
                style: "main",
                bgColor: 'rgb(20,149,214)',
                name: '退出',
                onClick: function() {
                  PJF.communication.AppExit()
                }
              }]
            })
          } else { // 注册ok
            PJF.communication.localStorage.setValue(_registerDateKey, _dateToday)
            cb()
          }
        })        
      },
      failure: function(data) {
        console.log(JSON.stringify(data))
        new PJF.ui.errorMessageBox({
          data: data,
          buttonConfs: [{
            style: "main",
            bgColor: 'rgb(20,149,214)',
            name: '重试',
            onClick: function() {
              _registerSm4NoAuth(cb)
            }
          },{
            style: "main",
            bgColor: 'rgb(20,149,214)',
            name: '退出',
            onClick: function() {
              PJF.communication.AppExit()
            }
          }]
        })        
      }
    })
  }

  /**
   * 注册设备主密钥，只有成功才会调用回调
   */
  var _registerSm4 = function(cb) {
    // 弹框
    var domId = 'pjf_sm4AuthWindowDom'
    $(document.body).append("<div id = 'pjf_sm4AuthWindowDom'></div>")
    var win = new PJF.ui.window({
      dom: 'pjf_sm4AuthWindowDom',
      retainDom: false,
      // id: "sm4Auth_window",
      width: 700,
      height: 500,
      top: 10,
      content: _authPageTpl,
      // href: "sm4Auth.html", // page/stm/common下面
      domLoadedCallBack: function() {

      }
    })

    var firstEmpId, firstEmpMobile, firstEmpToken // 获取口令的员工号、手机号、短信口令
    var errJq = $('#fingerErrMsg') // 操作信息提示区
    errJq.html('请先获取短信口令')
    var getTokenBtn = new PJF.ui.linkButton({
      dom: 'sm4GetToken',
      style: 'main',
      bgColor: 'rgb(20,147,214)',
      name: '获取短信口令',
      onClick: function() {
        // 先授权再获取口令
        authFunc(function(authData) {
          // 获取用户编号
          firstEmpId = JSON.parse(authData.AUTH_INFO).empeid

          var jsonReq = {
            CCB_EMPID: firstEmpId, //建行员工编号
            _pagination: {
              REC_IN_PAGE: 10,
              PAGE_JUMP: 1
            }
          };

          PJF.communication.cpsJsonReq({
            jsonData: JSON.stringify(jsonReq),
            fwServiceId: 'simpleTransaction',
            fwTranId: 'A0861e030-stm',
            maskAll: true,
            success: function(data) {

              if (data.EMPE_VDO && data.EMPE_VDO[0] && data.EMPE_VDO[0].TELCTCMOD_MBLPH_NO) {
                firstEmpMobile = data.EMPE_VDO[0].TELCTCMOD_MBLPH_NO
                var reqData = JSON.stringify({
                  destNodeId: '120000',
                  deviceId: PJF.otherInfo.devId,
                  macAddr: PJF.otherInfo.MACS && PJF.otherInfo.MACS[0],
                  registerTime: _dateToday,
                  stmGI: PJF.constants.SM4_MAINKEY_INDEX, // 主密钥索引 
                  stmAlg: '4',
                  phoneNumber: firstEmpMobile
                });
                console.log('请求主密钥参数为:', reqData)
                // 用设备号和手机号注册设备获取口令
                PJF.communication.cpsJsonReq({
                  url: 'ecpJson',
                  fwServiceId: 'getStmDeriveKey',
                  maskAll: true,
                  userCode: firstEmpId,
                  jsonData: reqData,
                  fwTranId: 'getStmDeriveKey',
                  success: function(data) {
                    console.log('获取主密钥结果为:', JSON.stringify(data))
                    // 获取被加密的密钥
                    firstEmpToken = data.key
                    errJq.html('请输入手机号后4位为' + firstEmpMobile.substr(7) + '收到的短信口令，并换另一个员工授权注册')
                    _registerSm4Step2()
                  },
                  failure: function(data) {
                    console.log(JSON.stringify(data))
                    errJq.html('获取短信口令失败,请重新获取')
                  }
                })
              } else {
                errJq.html('员工没有绑定手机,请换用户')
              }
            },
            failure: function(data) {
              errJq.html('获取员工手机号失败,请重试')
            }
          });


        })
      }
    });
    // 注册获取设备密钥
    var registerBtn = new PJF.ui.linkButton({
      dom: 'sm4RegisterDevice',
      style: 'main',
      bgColor: 'rgb(190,94,165)',
      name: '注册',
      onClick: function() {
        if (!firstEmpToken) {
          errJq.html('请先获取短信口令')
          _registerSm4Step1()
        } else if (!tokenInput.getValue()) {
          errJq.html('请输入收到的短信口令')
        } else {
          // 换另一个员工授权注册
          authFunc(function(authData) {
            // 不能是同一个人
            if (JSON.parse(authData.AUTH_INFO).empeid == firstEmpId) {
              errJq.html('授权员工和获取口令员工不能为同一人')
            } else {
              // 灌注密钥
              PJF.stm.Pin.setSM4PrimaryKey({
                pchPassword: tokenInput.getValue(),
                pchKey: firstEmpToken,
              }, function(data) {
                if (data.status == 0) {
                  errJq.html('灌注密钥失败')
                  new PJF.ui.errorMessageBox({
                    content: 'sm4灌注密钥失败',
                    detailMsg: data.errorCode + ',' + data.errorMsg,
                    buttonConfs: [{
                      style: "main",
                      bgColor: 'rgb(20,149,214)',
                      name: '重新注册',
                      onClick: function() {
                        _registerSm4Step1() // 重新开始
                      }
                    }]
                  })
                } else { // 注册ok
                  win.destroy()
                  PJF.communication.localStorage.setValue(_registerDateKey, _dateToday)
                  cb && cb()
                }
              })

            }
          })
        }

      }
    });

    var tokenInput = new PJF.ui.textfield({
      dom: 'sm4InputToken',
      hmode: 2
    })

    var authFunc = function(success, failure) {
      new PJF.ui.fingerReader({
        padFlag: true,
        parentDom: $(document.body),
        windowRetainDom: false,
        success: function(data) {
          success && success(data)
        },
        failure: function(err) {
          errJq.html(err)
          failure && failure(err)
        }
      })
    }


    var _registerSm4Step1 = function() {
      $('#sm4InputForm').hide()
      registerBtn.hide()
      getTokenBtn.show()
    }

    var _registerSm4Step2 = function() {
      $('#sm4InputForm').show()
      registerBtn.show()
      getTokenBtn.hide()
    }
    _registerSm4Step1()
  }
  /**
   * 获取工作密钥灌注, 然灌注后做sm4认证
   * @param {*} conf
   * async
   * success
   * failure
   */
  var _sm4Authentication = function(conf) {

    // 先获取工作密钥，然后灌注工作密钥, 最后再获取加密数据去P2S认证
    var reqData = JSON.stringify({
      destNodeId: '120000',
      deviceId: PJF.otherInfo.devId,
      macAddr: PJF.otherInfo.MACS && PJF.otherInfo.MACS[0],
      deviceRegisterTime: conf.registerTime,
      wkRegisterTime: _dateToday,
      keyType: '1', // 1用于认证  2用于交易
      IMKGI: PJF.constants.SM4_MAINKEY_INDEX, // 主密钥索引
      WKGI: PJF.constants.SM4_WORKKEY_INDEX,
      stmAlg: '4'
    });
    console.log('获取工作密钥参数为:', reqData)
    PJF.communication.cpsJsonReq({
      async: conf.async,
      url: 'ecpJson',
      fwServiceId: 'getStmDeriveKeyForWk',
      maskAll: true,
      jsonData: reqData,
      fwTranId: 'getStmDeriveKeyForWk',
      success: function(workKeyData) {
        console.log('获取工作密钥结果为:', JSON.stringify(workKeyData))
        // 注册工作密钥
        PJF.stm.Pin.setSM4WorkKey({
          pchKey: workKeyData.key
        }, function(setKeyRst) {
          if (setKeyRst.status == '0') {
            conf.failure && conf.failure({
              BK_STATUS: '01',
              BK_DESC: setKeyRst.errorMsg,
              BK_CODE: setKeyRst.errorCode
            })
          } else {
            var sm4Data = PJF.stm.Pin.getEncryptedData({}) // 获取加密数据
            // 失败
            if (sm4Data.status == 0) {
              conf.failure && conf.failure({
                BK_STATUS: '01',
                BK_DESC: sm4Data.errorMsg,
                BK_CODE: sm4Data.errorCode
              })
            } else {
              var reqData = JSON.stringify({
                destNodeId: '120000',
                deviceId: PJF.otherInfo.devId,
                macAddr: PJF.otherInfo.MACS && PJF.otherInfo.MACS[0],
                registerTime: _dateToday,
                keyType: '1', // 1用于认证  2用于交易
                ARQC: btoa(PJF.util.hexToString(sm4Data.info.pchEncryptedData)), // 密文
                plain: btoa(sm4Data.info.pchData), // 8位认证码+16字节随机字符串
                IMKGI: PJF.constants.SM4_WORKKEY_INDEX, // 工作密钥索引
                stmAlg: '4'
              })
              console.log('认证SM4参数为:', reqData)
              PJF.communication.cpsJsonReq({
                async: conf.async,
                url: 'ecpJson',
                fwServiceId: 'verifyStmARQC',
                maskAll: true,
                jsonData: reqData,
                fwTranId: 'verifyStmARQC',
                // 成功里还要先判断sm4Data.responseCode与verifyStmARQC返回的响应码一致
                success: function(data) {
                  console.log('验证sm4:', JSON.stringify(data))
                  if (data.code === btoa(PJF.util.hexToString(sm4Data.info.pchResponseData))) {
                    conf.success && conf.success(data)
                  } else {
                    conf.failure && conf.failure($.extend(
                    data, {
                      BK_STATUS: '01',
                      BK_DESC: '响应码不匹配，注册失败'
                    }))
                  }
                },
                failure: conf.failure
              })
            }
          }
        })
      },
      failure: conf.failure
    })

  }

  PJF.sm4Auth.sm4Authentication = _sm4Authentication

})();
(function(r){r.fn.qrcode=function(h){var s;function u(a){this.mode=s;this.data=a}function o(a,c){this.typeNumber=a;this.errorCorrectLevel=c;this.modules=null;this.moduleCount=0;this.dataCache=null;this.dataList=[]}function q(a,c){if(void 0==a.length)throw Error(a.length+"/"+c);for(var d=0;d<a.length&&0==a[d];)d++;this.num=Array(a.length-d+c);for(var b=0;b<a.length-d;b++)this.num[b]=a[b+d]}function p(a,c){this.totalCount=a;this.dataCount=c}function t(){this.buffer=[];this.length=0}u.prototype={getLength:function(){return this.data.length},
write:function(a){for(var c=0;c<this.data.length;c++)a.put(this.data.charCodeAt(c),8)}};o.prototype={addData:function(a){this.dataList.push(new u(a));this.dataCache=null},isDark:function(a,c){if(0>a||this.moduleCount<=a||0>c||this.moduleCount<=c)throw Error(a+","+c);return this.modules[a][c]},getModuleCount:function(){return this.moduleCount},make:function(){if(1>this.typeNumber){for(var a=1,a=1;40>a;a++){for(var c=p.getRSBlocks(a,this.errorCorrectLevel),d=new t,b=0,e=0;e<c.length;e++)b+=c[e].dataCount;
for(e=0;e<this.dataList.length;e++)c=this.dataList[e],d.put(c.mode,4),d.put(c.getLength(),j.getLengthInBits(c.mode,a)),c.write(d);if(d.getLengthInBits()<=8*b)break}this.typeNumber=a}this.makeImpl(!1,this.getBestMaskPattern())},makeImpl:function(a,c){this.moduleCount=4*this.typeNumber+17;this.modules=Array(this.moduleCount);for(var d=0;d<this.moduleCount;d++){this.modules[d]=Array(this.moduleCount);for(var b=0;b<this.moduleCount;b++)this.modules[d][b]=null}this.setupPositionProbePattern(0,0);this.setupPositionProbePattern(this.moduleCount-
7,0);this.setupPositionProbePattern(0,this.moduleCount-7);this.setupPositionAdjustPattern();this.setupTimingPattern();this.setupTypeInfo(a,c);7<=this.typeNumber&&this.setupTypeNumber(a);null==this.dataCache&&(this.dataCache=o.createData(this.typeNumber,this.errorCorrectLevel,this.dataList));this.mapData(this.dataCache,c)},setupPositionProbePattern:function(a,c){for(var d=-1;7>=d;d++)if(!(-1>=a+d||this.moduleCount<=a+d))for(var b=-1;7>=b;b++)-1>=c+b||this.moduleCount<=c+b||(this.modules[a+d][c+b]=
0<=d&&6>=d&&(0==b||6==b)||0<=b&&6>=b&&(0==d||6==d)||2<=d&&4>=d&&2<=b&&4>=b?!0:!1)},getBestMaskPattern:function(){for(var a=0,c=0,d=0;8>d;d++){this.makeImpl(!0,d);var b=j.getLostPoint(this);if(0==d||a>b)a=b,c=d}return c},createMovieClip:function(a,c,d){a=a.createEmptyMovieClip(c,d);this.make();for(c=0;c<this.modules.length;c++)for(var d=1*c,b=0;b<this.modules[c].length;b++){var e=1*b;this.modules[c][b]&&(a.beginFill(0,100),a.moveTo(e,d),a.lineTo(e+1,d),a.lineTo(e+1,d+1),a.lineTo(e,d+1),a.endFill())}return a},
setupTimingPattern:function(){for(var a=8;a<this.moduleCount-8;a++)null==this.modules[a][6]&&(this.modules[a][6]=0==a%2);for(a=8;a<this.moduleCount-8;a++)null==this.modules[6][a]&&(this.modules[6][a]=0==a%2)},setupPositionAdjustPattern:function(){for(var a=j.getPatternPosition(this.typeNumber),c=0;c<a.length;c++)for(var d=0;d<a.length;d++){var b=a[c],e=a[d];if(null==this.modules[b][e])for(var f=-2;2>=f;f++)for(var i=-2;2>=i;i++)this.modules[b+f][e+i]=-2==f||2==f||-2==i||2==i||0==f&&0==i?!0:!1}},setupTypeNumber:function(a){for(var c=
j.getBCHTypeNumber(this.typeNumber),d=0;18>d;d++){var b=!a&&1==(c>>d&1);this.modules[Math.floor(d/3)][d%3+this.moduleCount-8-3]=b}for(d=0;18>d;d++)b=!a&&1==(c>>d&1),this.modules[d%3+this.moduleCount-8-3][Math.floor(d/3)]=b},setupTypeInfo:function(a,c){for(var d=j.getBCHTypeInfo(this.errorCorrectLevel<<3|c),b=0;15>b;b++){var e=!a&&1==(d>>b&1);6>b?this.modules[b][8]=e:8>b?this.modules[b+1][8]=e:this.modules[this.moduleCount-15+b][8]=e}for(b=0;15>b;b++)e=!a&&1==(d>>b&1),8>b?this.modules[8][this.moduleCount-
b-1]=e:9>b?this.modules[8][15-b-1+1]=e:this.modules[8][15-b-1]=e;this.modules[this.moduleCount-8][8]=!a},mapData:function(a,c){for(var d=-1,b=this.moduleCount-1,e=7,f=0,i=this.moduleCount-1;0<i;i-=2)for(6==i&&i--;;){for(var g=0;2>g;g++)if(null==this.modules[b][i-g]){var n=!1;f<a.length&&(n=1==(a[f]>>>e&1));j.getMask(c,b,i-g)&&(n=!n);this.modules[b][i-g]=n;e--; -1==e&&(f++,e=7)}b+=d;if(0>b||this.moduleCount<=b){b-=d;d=-d;break}}}};o.PAD0=236;o.PAD1=17;o.createData=function(a,c,d){for(var c=p.getRSBlocks(a,
c),b=new t,e=0;e<d.length;e++){var f=d[e];b.put(f.mode,4);b.put(f.getLength(),j.getLengthInBits(f.mode,a));f.write(b)}for(e=a=0;e<c.length;e++)a+=c[e].dataCount;if(b.getLengthInBits()>8*a)throw Error("code length overflow. ("+b.getLengthInBits()+">"+8*a+")");for(b.getLengthInBits()+4<=8*a&&b.put(0,4);0!=b.getLengthInBits()%8;)b.putBit(!1);for(;!(b.getLengthInBits()>=8*a);){b.put(o.PAD0,8);if(b.getLengthInBits()>=8*a)break;b.put(o.PAD1,8)}return o.createBytes(b,c)};o.createBytes=function(a,c){for(var d=
0,b=0,e=0,f=Array(c.length),i=Array(c.length),g=0;g<c.length;g++){var n=c[g].dataCount,h=c[g].totalCount-n,b=Math.max(b,n),e=Math.max(e,h);f[g]=Array(n);for(var k=0;k<f[g].length;k++)f[g][k]=255&a.buffer[k+d];d+=n;k=j.getErrorCorrectPolynomial(h);n=(new q(f[g],k.getLength()-1)).mod(k);i[g]=Array(k.getLength()-1);for(k=0;k<i[g].length;k++)h=k+n.getLength()-i[g].length,i[g][k]=0<=h?n.get(h):0}for(k=g=0;k<c.length;k++)g+=c[k].totalCount;d=Array(g);for(k=n=0;k<b;k++)for(g=0;g<c.length;g++)k<f[g].length&&
(d[n++]=f[g][k]);for(k=0;k<e;k++)for(g=0;g<c.length;g++)k<i[g].length&&(d[n++]=i[g][k]);return d};s=4;for(var j={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,
78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1335,G18:7973,G15_MASK:21522,getBCHTypeInfo:function(a){for(var c=a<<10;0<=j.getBCHDigit(c)-j.getBCHDigit(j.G15);)c^=j.G15<<j.getBCHDigit(c)-j.getBCHDigit(j.G15);return(a<<10|c)^j.G15_MASK},getBCHTypeNumber:function(a){for(var c=a<<12;0<=j.getBCHDigit(c)-
j.getBCHDigit(j.G18);)c^=j.G18<<j.getBCHDigit(c)-j.getBCHDigit(j.G18);return a<<12|c},getBCHDigit:function(a){for(var c=0;0!=a;)c++,a>>>=1;return c},getPatternPosition:function(a){return j.PATTERN_POSITION_TABLE[a-1]},getMask:function(a,c,d){switch(a){case 0:return 0==(c+d)%2;case 1:return 0==c%2;case 2:return 0==d%3;case 3:return 0==(c+d)%3;case 4:return 0==(Math.floor(c/2)+Math.floor(d/3))%2;case 5:return 0==c*d%2+c*d%3;case 6:return 0==(c*d%2+c*d%3)%2;case 7:return 0==(c*d%3+(c+d)%2)%2;default:throw Error("bad maskPattern:"+
a);}},getErrorCorrectPolynomial:function(a){for(var c=new q([1],0),d=0;d<a;d++)c=c.multiply(new q([1,l.gexp(d)],0));return c},getLengthInBits:function(a,c){if(1<=c&&10>c)switch(a){case 1:return 10;case 2:return 9;case s:return 8;case 8:return 8;default:throw Error("mode:"+a);}else if(27>c)switch(a){case 1:return 12;case 2:return 11;case s:return 16;case 8:return 10;default:throw Error("mode:"+a);}else if(41>c)switch(a){case 1:return 14;case 2:return 13;case s:return 16;case 8:return 12;default:throw Error("mode:"+
a);}else throw Error("type:"+c);},getLostPoint:function(a){for(var c=a.getModuleCount(),d=0,b=0;b<c;b++)for(var e=0;e<c;e++){for(var f=0,i=a.isDark(b,e),g=-1;1>=g;g++)if(!(0>b+g||c<=b+g))for(var h=-1;1>=h;h++)0>e+h||c<=e+h||0==g&&0==h||i==a.isDark(b+g,e+h)&&f++;5<f&&(d+=3+f-5)}for(b=0;b<c-1;b++)for(e=0;e<c-1;e++)if(f=0,a.isDark(b,e)&&f++,a.isDark(b+1,e)&&f++,a.isDark(b,e+1)&&f++,a.isDark(b+1,e+1)&&f++,0==f||4==f)d+=3;for(b=0;b<c;b++)for(e=0;e<c-6;e++)a.isDark(b,e)&&!a.isDark(b,e+1)&&a.isDark(b,e+
2)&&a.isDark(b,e+3)&&a.isDark(b,e+4)&&!a.isDark(b,e+5)&&a.isDark(b,e+6)&&(d+=40);for(e=0;e<c;e++)for(b=0;b<c-6;b++)a.isDark(b,e)&&!a.isDark(b+1,e)&&a.isDark(b+2,e)&&a.isDark(b+3,e)&&a.isDark(b+4,e)&&!a.isDark(b+5,e)&&a.isDark(b+6,e)&&(d+=40);for(e=f=0;e<c;e++)for(b=0;b<c;b++)a.isDark(b,e)&&f++;a=Math.abs(100*f/c/c-50)/5;return d+10*a}},l={glog:function(a){if(1>a)throw Error("glog("+a+")");return l.LOG_TABLE[a]},gexp:function(a){for(;0>a;)a+=255;for(;256<=a;)a-=255;return l.EXP_TABLE[a]},EXP_TABLE:Array(256),
LOG_TABLE:Array(256)},m=0;8>m;m++)l.EXP_TABLE[m]=1<<m;for(m=8;256>m;m++)l.EXP_TABLE[m]=l.EXP_TABLE[m-4]^l.EXP_TABLE[m-5]^l.EXP_TABLE[m-6]^l.EXP_TABLE[m-8];for(m=0;255>m;m++)l.LOG_TABLE[l.EXP_TABLE[m]]=m;q.prototype={get:function(a){return this.num[a]},getLength:function(){return this.num.length},multiply:function(a){for(var c=Array(this.getLength()+a.getLength()-1),d=0;d<this.getLength();d++)for(var b=0;b<a.getLength();b++)c[d+b]^=l.gexp(l.glog(this.get(d))+l.glog(a.get(b)));return new q(c,0)},mod:function(a){if(0>
this.getLength()-a.getLength())return this;for(var c=l.glog(this.get(0))-l.glog(a.get(0)),d=Array(this.getLength()),b=0;b<this.getLength();b++)d[b]=this.get(b);for(b=0;b<a.getLength();b++)d[b]^=l.gexp(l.glog(a.get(b))+c);return(new q(d,0)).mod(a)}};p.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],
[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,
116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,
43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,
3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,
55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,
45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]];p.getRSBlocks=function(a,c){var d=p.getRsBlockTable(a,c);if(void 0==d)throw Error("bad rs block @ typeNumber:"+a+"/errorCorrectLevel:"+c);for(var b=d.length/3,e=[],f=0;f<b;f++)for(var h=d[3*f+0],g=d[3*f+1],j=d[3*f+2],l=0;l<h;l++)e.push(new p(g,j));return e};p.getRsBlockTable=function(a,c){switch(c){case 1:return p.RS_BLOCK_TABLE[4*(a-1)+0];case 0:return p.RS_BLOCK_TABLE[4*(a-1)+1];case 3:return p.RS_BLOCK_TABLE[4*
(a-1)+2];case 2:return p.RS_BLOCK_TABLE[4*(a-1)+3]}};t.prototype={get:function(a){return 1==(this.buffer[Math.floor(a/8)]>>>7-a%8&1)},put:function(a,c){for(var d=0;d<c;d++)this.putBit(1==(a>>>c-d-1&1))},getLengthInBits:function(){return this.length},putBit:function(a){var c=Math.floor(this.length/8);this.buffer.length<=c&&this.buffer.push(0);a&&(this.buffer[c]|=128>>>this.length%8);this.length++}};"string"===typeof h&&(h={text:h});h=r.extend({},{render:"canvas",width:256,height:256,typeNumber:-1,
correctLevel:2,background:"#ffffff",foreground:"#000000"},h);return this.each(function(){var a;if("canvas"==h.render){a=new o(h.typeNumber,h.correctLevel);a.addData(h.text);a.make();var c=document.createElement("canvas");c.width=h.width;c.height=h.height;for(var d=c.getContext("2d"),b=h.width/a.getModuleCount(),e=h.height/a.getModuleCount(),f=0;f<a.getModuleCount();f++)for(var i=0;i<a.getModuleCount();i++){d.fillStyle=a.isDark(f,i)?h.foreground:h.background;var g=Math.ceil((i+1)*b)-Math.floor(i*b),
j=Math.ceil((f+1)*b)-Math.floor(f*b);d.fillRect(Math.round(i*b),Math.round(f*e),g,j)}}else{a=new o(h.typeNumber,h.correctLevel);a.addData(h.text);a.make();c=r("<table></table>").css("width",h.width+"px").css("height",h.height+"px").css("border","0px").css("border-collapse","collapse").css("background-color",h.background);d=h.width/a.getModuleCount();b=h.height/a.getModuleCount();for(e=0;e<a.getModuleCount();e++){f=r("<tr></tr>").css("height",b+"px").appendTo(c);for(i=0;i<a.getModuleCount();i++)r("<td></td>").css("width",
d+"px").css("background-color",a.isDark(e,i)?h.foreground:h.background).appendTo(f)}}a=c;jQuery(a).appendTo(this)})}})(jQuery);

/*! JsBarcode v3.8.0 | (c) Johan Lindell | MIT license */
!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=12)}([function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}Object.defineProperty(e,"__esModule",{value:!0});var o,i=e.SET_A=0,a=e.SET_B=1,u=e.SET_C=2,s=(e.SHIFT=98,e.START_A=103),f=e.START_B=104,c=e.START_C=105;e.MODULO=103,e.STOP=106,e.SET_BY_CODE=(o={},r(o,s,i),r(o,f,a),r(o,c,u),o),e.SWAP={101:i,100:a,99:u},e.A_START_CHAR=String.fromCharCode(208),e.B_START_CHAR=String.fromCharCode(209),e.C_START_CHAR=String.fromCharCode(210),e.A_CHARS="[\0-_È-Ï]",e.B_CHARS="[ -È-Ï]",e.C_CHARS="(Ï*[0-9]{2}Ï*)",e.BARS=[11011001100,11001101100,11001100110,10010011e3,10010001100,10001001100,10011001e3,10011000100,10001100100,11001001e3,11001000100,11000100100,10110011100,10011011100,10011001110,10111001100,10011101100,10011100110,11001110010,11001011100,11001001110,11011100100,11001110100,11101101110,11101001100,11100101100,11100100110,11101100100,11100110100,11100110010,11011011e3,11011000110,11000110110,10100011e3,10001011e3,10001000110,10110001e3,10001101e3,10001100010,11010001e3,11000101e3,11000100010,10110111e3,10110001110,10001101110,10111011e3,10111000110,10001110110,11101110110,11010001110,11000101110,11011101e3,11011100010,11011101110,11101011e3,11101000110,11100010110,11101101e3,11101100010,11100011010,11101111010,11001000010,11110001010,1010011e4,10100001100,1001011e4,10010000110,10000101100,10000100110,1011001e4,10110000100,1001101e4,10011000010,10000110100,10000110010,11000010010,1100101e4,11110111010,11000010100,10001111010,10100111100,10010111100,10010011110,10111100100,10011110100,10011110010,11110100100,11110010100,11110010010,11011011110,11011110110,11110110110,10101111e3,10100011110,10001011110,10111101e3,10111100010,11110101e3,11110100010,10111011110,10111101110,11101011110,11110101110,11010000100,1101001e4,11010011100,1100011101011]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};e.default=function(t,e){return r({},t,e)}},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=n(13),s=function(t){return t&&t.__esModule?t:{default:t}}(u),f=n(0),c=function(t){function e(t,n){r(this,e);var i=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t.substring(1),n));return i.bytes=t.split("").map(function(t){return t.charCodeAt(0)}),i}return i(e,t),a(e,[{key:"valid",value:function(){return/^[\x00-\x7F\xC8-\xD3]+$/.test(this.data)}},{key:"encode",value:function(){var t=this.bytes,n=t.shift()-105,r=f.SET_BY_CODE[n];if(void 0===r)throw new RangeError("The encoding does not start with a start character.");var o=e.next(t,1,r);return{text:this.text===this.data?this.text.replace(/[^\x20-\x7E]/g,""):this.text,data:e.getBar(n)+o.result+e.getBar((o.checksum+n)%f.MODULO)+e.getBar(f.STOP)}}}],[{key:"getBar",value:function(t){return f.BARS[t]?f.BARS[t].toString():""}},{key:"correctIndex",value:function(t,e){if(e===f.SET_A){var n=t.shift();return n<32?n+64:n-32}return e===f.SET_B?t.shift()-32:10*(t.shift()-48)+t.shift()-48}},{key:"next",value:function(t,n,r){if(!t.length)return{result:"",checksum:0};var o=void 0,i=void 0;if(t[0]>=200){i=t.shift()-105;var a=f.SWAP[i];void 0!==a?o=e.next(t,n+1,a):(r!==f.SET_A&&r!==f.SET_B||i!==f.SHIFT||(t[0]=r===f.SET_A?t[0]>95?t[0]-96:t[0]:t[0]<32?t[0]+96:t[0]),o=e.next(t,n+1,r))}else i=e.correctIndex(t,r),o=e.next(t,n+1,r);var u=e.getBar(i),s=i*n;return{result:u+o.result,checksum:s+o.checksum}}}]),e}(s.default);e.default=c},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){function e(t,n){r(this,e);var i=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return i.name="InvalidInputException",i.symbology=t,i.input=n,i.message='"'+i.input+'" is not a valid input for '+i.symbology,i}return i(e,t),e}(Error),u=function(t){function e(){r(this,e);var t=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t.name="InvalidElementException",t.message="Not supported type to render on",t}return i(e,t),e}(Error),s=function(t){function e(){r(this,e);var t=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t.name="NoElementException",t.message="No element to render on.",t}return i(e,t),e}(Error);e.InvalidInputException=a,e.InvalidElementException=u,e.NoElementException=s},function(t,e,n){"use strict";function r(t){var e=["width","height","textMargin","fontSize","margin","marginTop","marginBottom","marginLeft","marginRight"];for(var n in e)e.hasOwnProperty(n)&&(n=e[n],"string"==typeof t[n]&&(t[n]=parseInt(t[n],10)));return"string"==typeof t.displayValue&&(t.displayValue="false"!=t.displayValue),t}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r={width:2,height:100,format:"auto",displayValue:!0,fontOptions:"",font:"monospace",text:void 0,textAlign:"center",textPosition:"bottom",textMargin:2,fontSize:20,background:"#ffffff",lineColor:"#000000",margin:10,marginTop:void 0,marginBottom:void 0,marginLeft:void 0,marginRight:void 0,valid:function(){}};e.default=r},function(t,e,n){"use strict";function r(t,e){return e.height+(e.displayValue&&t.text.length>0?e.fontSize+e.textMargin:0)+e.marginTop+e.marginBottom}function o(t,e,n){if(n.displayValue&&e<t){if("center"==n.textAlign)return Math.floor((t-e)/2);if("left"==n.textAlign)return 0;if("right"==n.textAlign)return Math.floor(t-e)}return 0}function i(t,e,n){for(var i=0;i<t.length;i++){var a,u=t[i],f=(0,c.default)(e,u.options);a=f.displayValue?s(u.text,f,n):0;var l=u.data.length*f.width;u.width=Math.ceil(Math.max(a,l)),u.height=r(u,f),u.barcodePadding=o(a,l,f)}}function a(t){for(var e=0,n=0;n<t.length;n++)e+=t[n].width;return e}function u(t){for(var e=0,n=0;n<t.length;n++)t[n].height>e&&(e=t[n].height);return e}function s(t,e,n){var r;if(n)r=n;else{if("undefined"==typeof document)return 0;r=document.createElement("canvas").getContext("2d")}return r.font=e.fontOptions+" "+e.fontSize+"px "+e.font,r.measureText(t).width}Object.defineProperty(e,"__esModule",{value:!0}),e.getTotalWidthOfEncodings=e.calculateEncodingAttributes=e.getBarcodePadding=e.getEncodingHeight=e.getMaximumHeightOfEncodings=void 0;var f=n(1),c=function(t){return t&&t.__esModule?t:{default:t}}(f);e.getMaximumHeightOfEncodings=u,e.getEncodingHeight=r,e.getBarcodePadding=o,e.calculateEncodingAttributes=i,e.getTotalWidthOfEncodings=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(19);e.default={CODE128:r.CODE128,CODE128A:r.CODE128A,CODE128B:r.CODE128B,CODE128C:r.CODE128C}},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(){function t(e){r(this,t),this.api=e}return o(t,[{key:"handleCatch",value:function(t){if("InvalidInputException"!==t.name)throw t;if(this.api._options.valid===this.api._defaults.valid)throw t.message;this.api._options.valid(!1),this.api.render=function(){}}},{key:"wrapBarcodeCall",value:function(t){try{var e=t.apply(void 0,arguments);return this.api._options.valid(!0),e}catch(t){return this.handleCatch(t),this.api}}}]),t}();e.default=i},function(t,e,n){"use strict";function r(t){return t.marginTop=t.marginTop||t.margin,t.marginBottom=t.marginBottom||t.margin,t.marginRight=t.marginRight||t.margin,t.marginLeft=t.marginLeft||t.margin,t}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){if("string"==typeof t)return i(t);if(Array.isArray(t)){for(var e=[],n=0;n<t.length;n++)e.push(o(t[n]));return e}if("undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLImageElement)return a(t);if(t&&"svg"===t.nodeName||"undefined"!=typeof SVGElement&&t instanceof SVGElement)return{element:t,options:(0,f.default)(t),renderer:l.default.SVGRenderer};if("undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement)return{element:t,options:(0,f.default)(t),renderer:l.default.CanvasRenderer};if(t&&t.getContext)return{element:t,renderer:l.default.CanvasRenderer};if(t&&"object"===(void 0===t?"undefined":u(t))&&!t.nodeName)return{element:t,renderer:l.default.ObjectRenderer};throw new d.InvalidElementException}function i(t){var e=document.querySelectorAll(t);if(0!==e.length){for(var n=[],r=0;r<e.length;r++)n.push(o(e[r]));return n}}function a(t){var e=document.createElement("canvas");return{element:e,options:(0,f.default)(t),renderer:l.default.CanvasRenderer,afterRender:function(){t.setAttribute("src",e.toDataURL())}}}Object.defineProperty(e,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s=n(20),f=r(s),c=n(22),l=r(c),d=n(3);e.default=o},function(t,e,n){"use strict";function r(t){function e(t){if(Array.isArray(t))for(var r=0;r<t.length;r++)e(t[r]);else t.text=t.text||"",t.data=t.data||"",n.push(t)}var n=[];return e(t),n}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e,n){t=""+t;var r=new e(t,n);if(!r.valid())throw new w.InvalidInputException(r.constructor.name,t);var o=r.encode();o=(0,d.default)(o);for(var i=0;i<o.length;i++)o[i].options=(0,c.default)(n,o[i].options);return o}function i(){return s.default.CODE128?"CODE128":Object.keys(s.default)[0]}function a(t,e,n){e=(0,d.default)(e);for(var r=0;r<e.length;r++)e[r].options=(0,c.default)(n,e[r].options),(0,h.default)(e[r].options);(0,h.default)(n),new(0,t.renderer)(t.element,e,n).render(),t.afterRender&&t.afterRender()}var u=n(7),s=r(u),f=n(1),c=r(f),l=n(11),d=r(l),p=n(9),h=r(p),g=n(10),v=r(g),y=n(4),b=r(y),_=n(8),m=r(_),w=n(3),O=n(5),C=r(O),x=function(){},E=function(t,e,n){var r=new x;if(void 0===t)throw Error("No element to render on was provided.");return r._renderProperties=(0,v.default)(t),r._encodings=[],r._options=C.default,r._errorHandler=new m.default(r),void 0!==e&&(n=n||{},n.format||(n.format=i()),r.options(n)[n.format](e,n).render()),r};E.getModule=function(t){return s.default[t]};for(var A in s.default)s.default.hasOwnProperty(A)&&function(t,e){x.prototype[e]=x.prototype[e.toUpperCase()]=x.prototype[e.toLowerCase()]=function(n,r){var i=this;return i._errorHandler.wrapBarcodeCall(function(){r.text=void 0===r.text?void 0:""+r.text;var a=(0,c.default)(i._options,r);a=(0,b.default)(a);var u=t[e],s=o(n,u,a);return i._encodings.push(s),i})}}(s.default,A);x.prototype.options=function(t){return this._options=(0,c.default)(this._options,t),this},x.prototype.blank=function(t){var e=new Array(t+1).join("0");return this._encodings.push({data:e}),this},x.prototype.init=function(){if(this._renderProperties){Array.isArray(this._renderProperties)||(this._renderProperties=[this._renderProperties]);var t;for(var e in this._renderProperties){t=this._renderProperties[e];var n=(0,c.default)(this._options,t.options);"auto"==n.format&&(n.format=i()),this._errorHandler.wrapBarcodeCall(function(){var e=n.value,r=s.default[n.format.toUpperCase()],i=o(e,r,n);a(t,i,n)})}}},x.prototype.render=function(){if(!this._renderProperties)throw new w.NoElementException;if(Array.isArray(this._renderProperties))for(var t=0;t<this._renderProperties.length;t++)a(this._renderProperties[t],this._encodings,this._options);else a(this._renderProperties,this._encodings,this._options);return this},x.prototype._defaults=C.default,"undefined"!=typeof window&&(window.JsBarcode=E),"undefined"!=typeof jQuery&&(jQuery.fn.JsBarcode=function(t,e){var n=[];return jQuery(this).each(function(){n.push(this)}),E(n,t,e)}),t.exports=E},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function t(e,n){r(this,t),this.data=e,this.text=n.text||e,this.options=n};e.default=o},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=n(2),s=function(t){return t&&t.__esModule?t:{default:t}}(u),f=n(0),c=function(t){function e(t,n){return r(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,f.A_START_CHAR+t,n))}return i(e,t),a(e,[{key:"valid",value:function(){return new RegExp("^"+f.A_CHARS+"+$").test(this.data)}}]),e}(s.default);e.default=c},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=n(2),s=function(t){return t&&t.__esModule?t:{default:t}}(u),f=n(0),c=function(t){function e(t,n){return r(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,f.B_START_CHAR+t,n))}return i(e,t),a(e,[{key:"valid",value:function(){return new RegExp("^"+f.B_CHARS+"+$").test(this.data)}}]),e}(s.default);e.default=c},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=n(2),s=function(t){return t&&t.__esModule?t:{default:t}}(u),f=n(0),c=function(t){function e(t,n){return r(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,f.C_START_CHAR+t,n))}return i(e,t),a(e,[{key:"valid",value:function(){return new RegExp("^"+f.C_CHARS+"+$").test(this.data)}}]),e}(s.default);e.default=c},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var u=n(2),s=r(u),f=n(18),c=r(f),l=function(t){function e(t,n){if(o(this,e),/^[\x00-\x7F\xC8-\xD3]+$/.test(t))var r=i(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,(0,c.default)(t),n));else var r=i(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n));return i(r)}return a(e,t),e}(s.default);e.default=l},function(t,e,n){"use strict";function r(t,e){var n=e?i.A_CHARS:i.B_CHARS,a=t.match(new RegExp("^("+n+"+?)(([0-9]{2}){2,})([^0-9]|$)"));if(a)return a[1]+String.fromCharCode(204)+o(t.substring(a[1].length));var u=t.match(new RegExp("^"+n+"+"))[0];return u.length===t.length?t:u+String.fromCharCode(e?205:206)+r(t.substring(u.length),!e)}function o(t){var e=s(t),n=e.length;if(n===t.length)return t;t=t.substring(n);var o=a(t)>=u(t);return e+String.fromCharCode(o?206:205)+r(t,o)}Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=function(t){return t.match(new RegExp("^"+i.A_CHARS+"*"))[0].length},u=function(t){return t.match(new RegExp("^"+i.B_CHARS+"*"))[0].length},s=function(t){return t.match(new RegExp("^"+i.C_CHARS+"*"))[0]};e.default=function(t){var e=void 0;if(s(t).length>=2)e=i.C_START_CHAR+o(t);else{var n=a(t)>u(t);e=(n?i.A_START_CHAR:i.B_START_CHAR)+r(t,n)}return e.replace(/[\xCD\xCE]([\s\S])[\xCD\xCE]/,function(t,e){return String.fromCharCode(203)+e})}},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.CODE128C=e.CODE128B=e.CODE128A=e.CODE128=void 0;var o=n(17),i=r(o),a=n(14),u=r(a),s=n(15),f=r(s),c=n(16),l=r(c);e.CODE128=i.default,e.CODE128A=u.default,e.CODE128B=f.default,e.CODE128C=l.default},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){var e={};for(var n in s.default)s.default.hasOwnProperty(n)&&(t.hasAttribute("jsbarcode-"+n.toLowerCase())&&(e[n]=t.getAttribute("jsbarcode-"+n.toLowerCase())),t.hasAttribute("data-"+n.toLowerCase())&&(e[n]=t.getAttribute("data-"+n.toLowerCase())));return e.value=t.getAttribute("jsbarcode-value")||t.getAttribute("data-value"),e=(0,a.default)(e)}Object.defineProperty(e,"__esModule",{value:!0});var i=n(4),a=r(i),u=n(5),s=r(u);e.default=o},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(1),a=function(t){return t&&t.__esModule?t:{default:t}}(i),u=n(6),s=function(){function t(e,n,o){r(this,t),this.canvas=e,this.encodings=n,this.options=o}return o(t,[{key:"render",value:function(){if(!this.canvas.getContext)throw new Error("The browser does not support canvas.");this.prepareCanvas();for(var t=0;t<this.encodings.length;t++){var e=(0,a.default)(this.options,this.encodings[t].options);this.drawCanvasBarcode(e,this.encodings[t]),this.drawCanvasText(e,this.encodings[t]),this.moveCanvasDrawing(this.encodings[t])}this.restoreCanvas()}},{key:"prepareCanvas",value:function(){var t=this.canvas.getContext("2d");t.save(),(0,u.calculateEncodingAttributes)(this.encodings,this.options,t);var e=(0,u.getTotalWidthOfEncodings)(this.encodings),n=(0,u.getMaximumHeightOfEncodings)(this.encodings);this.canvas.width=e+this.options.marginLeft+this.options.marginRight,this.canvas.height=n,t.clearRect(0,0,this.canvas.width,this.canvas.height),this.options.background&&(t.fillStyle=this.options.background,t.fillRect(0,0,this.canvas.width,this.canvas.height)),t.translate(this.options.marginLeft,0)}},{key:"drawCanvasBarcode",value:function(t,e){var n,r=this.canvas.getContext("2d"),o=e.data;n="top"==t.textPosition?t.marginTop+t.fontSize+t.textMargin:t.marginTop,r.fillStyle=t.lineColor;for(var i=0;i<o.length;i++){var a=i*t.width+e.barcodePadding;"1"===o[i]?r.fillRect(a,n,t.width,t.height):o[i]&&r.fillRect(a,n,t.width,t.height*o[i])}}},{key:"drawCanvasText",value:function(t,e){var n=this.canvas.getContext("2d"),r=t.fontOptions+" "+t.fontSize+"px "+t.font;if(t.displayValue){var o,i;i="top"==t.textPosition?t.marginTop+t.fontSize-t.textMargin:t.height+t.textMargin+t.marginTop+t.fontSize,n.font=r,"left"==t.textAlign||e.barcodePadding>0?(o=0,n.textAlign="left"):"right"==t.textAlign?(o=e.width-1,n.textAlign="right"):(o=e.width/2,n.textAlign="center"),n.fillText(e.text,o,i)}}},{key:"moveCanvasDrawing",value:function(t){this.canvas.getContext("2d").translate(t.width,0)}},{key:"restoreCanvas",value:function(){this.canvas.getContext("2d").restore()}}]),t}();e.default=s},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var o=n(21),i=r(o),a=n(24),u=r(a),s=n(23),f=r(s);e.default={CanvasRenderer:i.default,SVGRenderer:u.default,ObjectRenderer:f.default}},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(){function t(e,n,o){r(this,t),this.object=e,this.encodings=n,this.options=o}return o(t,[{key:"render",value:function(){this.object.encodings=this.encodings}}]),t}();e.default=i},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(1),a=function(t){return t&&t.__esModule?t:{default:t}}(i),u=n(6),s="http://www.w3.org/2000/svg",f=function(){function t(e,n,o){r(this,t),this.svg=e,this.encodings=n,this.options=o,this.document=o.xmlDocument||document}return o(t,[{key:"render",value:function(){var t=this.options.marginLeft;this.prepareSVG();for(var e=0;e<this.encodings.length;e++){var n=this.encodings[e],r=(0,a.default)(this.options,n.options),o=this.createGroup(t,r.marginTop,this.svg);this.setGroupOptions(o,r),this.drawSvgBarcode(o,r,n),this.drawSVGText(o,r,n),t+=n.width}}},{key:"prepareSVG",value:function(){for(;this.svg.firstChild;)this.svg.removeChild(this.svg.firstChild);(0,u.calculateEncodingAttributes)(this.encodings,this.options);var t=(0,u.getTotalWidthOfEncodings)(this.encodings),e=(0,u.getMaximumHeightOfEncodings)(this.encodings),n=t+this.options.marginLeft+this.options.marginRight;this.setSvgAttributes(n,e),this.options.background&&this.drawRect(0,0,n,e,this.svg).setAttribute("style","fill:"+this.options.background+";")}},{key:"drawSvgBarcode",value:function(t,e,n){var r,o=n.data;r="top"==e.textPosition?e.fontSize+e.textMargin:0;for(var i=0,a=0,u=0;u<o.length;u++)a=u*e.width+n.barcodePadding,"1"===o[u]?i++:i>0&&(this.drawRect(a-e.width*i,r,e.width*i,e.height,t),i=0);i>0&&this.drawRect(a-e.width*(i-1),r,e.width*i,e.height,t)}},{key:"drawSVGText",value:function(t,e,n){var r=this.document.createElementNS(s,"text");if(e.displayValue){var o,i;r.setAttribute("style","font:"+e.fontOptions+" "+e.fontSize+"px "+e.font),i="top"==e.textPosition?e.fontSize-e.textMargin:e.height+e.textMargin+e.fontSize,"left"==e.textAlign||n.barcodePadding>0?(o=0,r.setAttribute("text-anchor","start")):"right"==e.textAlign?(o=n.width-1,r.setAttribute("text-anchor","end")):(o=n.width/2,r.setAttribute("text-anchor","middle")),r.setAttribute("x",o),r.setAttribute("y",i),r.appendChild(this.document.createTextNode(n.text)),t.appendChild(r)}}},{key:"setSvgAttributes",value:function(t,e){var n=this.svg;n.setAttribute("width",t+"px"),n.setAttribute("height",e+"px"),n.setAttribute("x","0px"),n.setAttribute("y","0px"),n.setAttribute("viewBox","0 0 "+t+" "+e),n.setAttribute("xmlns",s),n.setAttribute("version","1.1"),n.setAttribute("style","transform: translate(0,0)")}},{key:"createGroup",value:function(t,e,n){var r=this.document.createElementNS(s,"g");return r.setAttribute("transform","translate("+t+", "+e+")"),n.appendChild(r),r}},{key:"setGroupOptions",value:function(t,e){t.setAttribute("style","fill:"+e.lineColor+";")}},{key:"drawRect",value:function(t,e,n,r,o){var i=this.document.createElementNS(s,"rect");return i.setAttribute("x",t),i.setAttribute("y",e),i.setAttribute("width",n),i.setAttribute("height",r),o.appendChild(i),i}}]),t}();e.default=f}]);
JSLoader.loadJavaScript("/bosWeb/STMServlet?operType=load");
